//
// This file was auto-generated using the following command:
//
// jai generator.jai
//



_GNU_SOURCE :: 1;
ON_SIZEOF_WCHAR_T :: 2;

ON_SIZEOF_POINTER :: 8;

OPENNURBS__FUNCTION__ :: "";

TCODE_COMMENTBLOCK :: 0x00000001;
TCODE_ENDOFFILE :: 0x00007FFF;
TCODE_ENDOFFILE_GOO :: 0x00007FFE;

TCODE_LEGACY_GEOMETRY :: 0x00010000;
TCODE_OPENNURBS_OBJECT :: 0x00020000;
TCODE_GEOMETRY :: 0x00100000;
TCODE_ANNOTATION :: 0x00200000;
TCODE_DISPLAY :: 0x00400000;
TCODE_RENDER :: 0x00800000;
TCODE_INTERFACE :: 0x02000000;
TCODE_TOLERANCE :: 0x08000000;
TCODE_TABLE :: 0x10000000;
TCODE_TABLEREC :: 0x20000000;
TCODE_USER :: 0x40000000;
TCODE_SHORT :: 0x80000000;

TCODE_CRC :: 0x8000;

TCODE_ANONYMOUS_CHUNK :: TCODE_USER | TCODE_CRC | 0x0000;
TCODE_UTF8_STRING_CHUNK :: TCODE_USER | TCODE_CRC | 0x0001;
TCODE_MODEL_ATTRIBUTES_CHUNK :: TCODE_USER | TCODE_CRC | 0x0002;

TCODE_DICTIONARY :: TCODE_USER | TCODE_CRC | 0x0010;
TCODE_DICTIONARY_ID :: TCODE_USER | TCODE_CRC | 0x0011;
TCODE_DICTIONARY_ENTRY :: TCODE_USER | TCODE_CRC | 0x0012;
TCODE_DICTIONARY_END :: TCODE_USER | TCODE_SHORT | 0x0013;
TCODE_XDATA :: TCODE_USER | 0x0001;

TCODE_MATERIAL_TABLE :: TCODE_TABLE | 0x0010;
TCODE_LAYER_TABLE :: TCODE_TABLE | 0x0011;
TCODE_LIGHT_TABLE :: TCODE_TABLE | 0x0012;
TCODE_OBJECT_TABLE :: TCODE_TABLE | 0x0013;
TCODE_PROPERTIES_TABLE :: TCODE_TABLE | 0x0014;

TCODE_SETTINGS_TABLE :: TCODE_TABLE | 0x0015;

TCODE_BITMAP_TABLE :: TCODE_TABLE | 0x0016;
TCODE_USER_TABLE :: TCODE_TABLE | 0x0017;

TCODE_GROUP_TABLE :: TCODE_TABLE | 0x0018;

TCODE_FONT_TABLE :: TCODE_TABLE | 0x0019;
TCODE_DIMSTYLE_TABLE :: TCODE_TABLE | 0x0020;

TCODE_INSTANCE_DEFINITION_TABLE :: TCODE_TABLE | 0x0021;

TCODE_HATCHPATTERN_TABLE :: TCODE_TABLE | 0x0022;

TCODE_LINETYPE_TABLE :: TCODE_TABLE | 0x0023;

TCODE_OBSOLETE_LAYERSET_TABLE :: TCODE_TABLE | 0x0024;

TCODE_TEXTURE_MAPPING_TABLE :: TCODE_TABLE | 0x0025;

TCODE_HISTORYRECORD_TABLE :: TCODE_TABLE | 0x0026;

TCODE_ENDOFTABLE :: 0xFFFFFFFF;

TCODE_PROPERTIES_REVISIONHISTORY :: TCODE_TABLEREC | TCODE_CRC | 0x0021;
TCODE_PROPERTIES_NOTES :: TCODE_TABLEREC | TCODE_CRC | 0x0022;
TCODE_PROPERTIES_PREVIEWIMAGE :: TCODE_TABLEREC | TCODE_CRC | 0x0023;
TCODE_PROPERTIES_APPLICATION :: TCODE_TABLEREC | TCODE_CRC | 0x0024;
TCODE_PROPERTIES_COMPRESSED_PREVIEWIMAGE :: TCODE_TABLEREC | TCODE_CRC | 0x0025;
TCODE_PROPERTIES_OPENNURBS_VERSION :: TCODE_TABLEREC | TCODE_SHORT | 0x0026;
TCODE_PROPERTIES_AS_FILE_NAME :: TCODE_TABLEREC | TCODE_CRC | 0x0027;

TCODE_SETTINGS_PLUGINLIST :: TCODE_TABLEREC | TCODE_CRC | 0x0135;
TCODE_SETTINGS_UNITSANDTOLS :: TCODE_TABLEREC | TCODE_CRC | 0x0031;
TCODE_SETTINGS_RENDERMESH :: TCODE_TABLEREC | TCODE_CRC | 0x0032;
TCODE_SETTINGS_ANALYSISMESH :: TCODE_TABLEREC | TCODE_CRC | 0x0033;
TCODE_SETTINGS_ANNOTATION :: TCODE_TABLEREC | TCODE_CRC | 0x0034;
TCODE_SETTINGS_NAMED_CPLANE_LIST :: TCODE_TABLEREC | TCODE_CRC | 0x0035;
TCODE_SETTINGS_NAMED_VIEW_LIST :: TCODE_TABLEREC | TCODE_CRC | 0x0036;
TCODE_SETTINGS_VIEW_LIST :: TCODE_TABLEREC | TCODE_CRC | 0x0037;
TCODE_SETTINGS_CURRENT_LAYER_INDEX :: TCODE_TABLEREC | TCODE_SHORT | 0x0038;
TCODE_SETTINGS_CURRENT_MATERIAL_INDEX :: TCODE_TABLEREC | TCODE_CRC | 0x0039;
TCODE_SETTINGS_CURRENT_COLOR :: TCODE_TABLEREC | TCODE_CRC | 0x003A;
TCODE_SETTINGS__NEVER__USE__THIS :: TCODE_TABLEREC | TCODE_CRC | 0x003E;
TCODE_SETTINGS_CURRENT_WIRE_DENSITY :: TCODE_TABLEREC | TCODE_SHORT | 0x003C;
TCODE_SETTINGS_RENDER :: TCODE_TABLEREC | TCODE_CRC | 0x003D;
TCODE_SETTINGS_GRID_DEFAULTS :: TCODE_TABLEREC | TCODE_CRC | 0x003F;
TCODE_SETTINGS_MODEL_URL :: TCODE_TABLEREC | TCODE_CRC | 0x0131;
TCODE_SETTINGS_CURRENT_FONT_INDEX :: TCODE_TABLEREC | TCODE_SHORT | 0x0132;
TCODE_SETTINGS_CURRENT_DIMSTYLE_INDEX :: TCODE_TABLEREC | TCODE_SHORT | 0x0133;

TCODE_SETTINGS_ATTRIBUTES :: TCODE_TABLEREC | TCODE_CRC | 0x0134;

TCODE_SETTINGS_RENDER_USERDATA :: TCODE_TABLEREC | TCODE_CRC | 0x0136;

TCODE_VIEW_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x003B;

TCODE_VIEW_CPLANE :: TCODE_TABLEREC | TCODE_CRC | 0x013B;
TCODE_VIEW_VIEWPORT :: TCODE_TABLEREC | TCODE_CRC | 0x023B;
TCODE_VIEW_SHOWCONGRID :: TCODE_TABLEREC | TCODE_SHORT | 0x033B;
TCODE_VIEW_SHOWCONAXES :: TCODE_TABLEREC | TCODE_SHORT | 0x043B;
TCODE_VIEW_SHOWWORLDAXES :: TCODE_TABLEREC | TCODE_SHORT | 0x053B;
TCODE_VIEW_TRACEIMAGE :: TCODE_TABLEREC | TCODE_CRC | 0x063B;
TCODE_VIEW_WALLPAPER :: TCODE_TABLEREC | TCODE_CRC | 0x073B;
TCODE_VIEW_WALLPAPER_V3 :: TCODE_TABLEREC | TCODE_CRC | 0x074B;
TCODE_VIEW_TARGET :: TCODE_TABLEREC | TCODE_CRC | 0x083B;
TCODE_VIEW_V3_DISPLAYMODE :: TCODE_TABLEREC | TCODE_SHORT | 0x093B;
TCODE_VIEW_NAME :: TCODE_TABLEREC | TCODE_CRC | 0x0A3B;
TCODE_VIEW_POSITION :: TCODE_TABLEREC | TCODE_CRC | 0x0B3B;

TCODE_VIEW_ATTRIBUTES :: TCODE_TABLEREC | TCODE_CRC | 0x0C3B;

TCODE_VIEW_VIEWPORT_USERDATA :: TCODE_TABLEREC | TCODE_CRC | 0x0D3B;

TCODE_BITMAP_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0090;

TCODE_MATERIAL_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0040;

TCODE_LAYER_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0050;

TCODE_LIGHT_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0060;
TCODE_LIGHT_RECORD_ATTRIBUTES :: TCODE_INTERFACE | TCODE_CRC | 0x0061;
TCODE_LIGHT_RECORD_ATTRIBUTES_USERDATA :: TCODE_INTERFACE | 0x0062;

TCODE_LIGHT_RECORD_END :: TCODE_INTERFACE | TCODE_SHORT | 0x006F;

TCODE_USER_TABLE_UUID :: TCODE_TABLEREC | TCODE_CRC | 0x0080;

TCODE_USER_TABLE_RECORD_HEADER :: TCODE_TABLEREC | TCODE_CRC | 0x0082;

TCODE_USER_RECORD :: TCODE_TABLEREC | 0x0081;

TCODE_GROUP_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0073;

TCODE_FONT_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0074;

TCODE_DIMSTYLE_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0075;

TCODE_INSTANCE_DEFINITION_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0076;

TCODE_HATCHPATTERN_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0077;

TCODE_LINETYPE_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0078;

TCODE_OBSOLETE_LAYERSET_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0079;

TCODE_TEXTURE_MAPPING_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x007A;

TCODE_HISTORYRECORD_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x007B;

TCODE_OBJECT_RECORD :: TCODE_TABLEREC | TCODE_CRC | 0x0070;
TCODE_OBJECT_RECORD_TYPE :: TCODE_INTERFACE | TCODE_SHORT | 0x0071;
TCODE_OBJECT_RECORD_ATTRIBUTES :: TCODE_INTERFACE | TCODE_CRC | 0x0072;
TCODE_OBJECT_RECORD_ATTRIBUTES_USERDATA :: TCODE_INTERFACE | 0x0073;
TCODE_OBJECT_RECORD_HISTORY :: TCODE_INTERFACE | TCODE_CRC | 0x0074;
TCODE_OBJECT_RECORD_HISTORY_HEADER :: TCODE_INTERFACE | TCODE_CRC | 0x0075;
TCODE_OBJECT_RECORD_HISTORY_DATA :: TCODE_INTERFACE | TCODE_CRC | 0x0076;
TCODE_OBJECT_RECORD_END :: TCODE_INTERFACE | TCODE_SHORT | 0x007F;

TCODE_OPENNURBS_CLASS :: TCODE_OPENNURBS_OBJECT | 0x7FFA;
TCODE_OPENNURBS_CLASS_UUID :: TCODE_OPENNURBS_OBJECT | TCODE_CRC | 0x7FFB;
TCODE_OPENNURBS_CLASS_DATA :: TCODE_OPENNURBS_OBJECT | TCODE_CRC | 0x7FFC;
TCODE_OPENNURBS_CLASS_USERDATA :: TCODE_OPENNURBS_OBJECT | 0x7FFD;
TCODE_OPENNURBS_CLASS_USERDATA_HEADER :: TCODE_OPENNURBS_OBJECT | TCODE_CRC | 0x7FF9;
TCODE_OPENNURBS_CLASS_END :: TCODE_OPENNURBS_OBJECT | TCODE_SHORT | 0x7FFF;

TCODE_ANNOTATION_SETTINGS :: TCODE_ANNOTATION | 0x0001;

TCODE_TEXT_BLOCK :: TCODE_ANNOTATION | 0x0004;
TCODE_ANNOTATION_LEADER :: TCODE_ANNOTATION | 0x0005;
TCODE_LINEAR_DIMENSION :: TCODE_ANNOTATION | 0x0006;
TCODE_ANGULAR_DIMENSION :: TCODE_ANNOTATION | 0x0007;
TCODE_RADIAL_DIMENSION :: TCODE_ANNOTATION | 0x0008;

TCODE_RHINOIO_OBJECT_NURBS_CURVE :: TCODE_OPENNURBS_OBJECT | 0x0008;
TCODE_RHINOIO_OBJECT_NURBS_SURFACE :: TCODE_OPENNURBS_OBJECT | 0x0009;
TCODE_RHINOIO_OBJECT_BREP :: TCODE_OPENNURBS_OBJECT | 0x000B;
TCODE_RHINOIO_OBJECT_DATA :: TCODE_OPENNURBS_OBJECT | 0xFFFE;
TCODE_RHINOIO_OBJECT_END :: TCODE_OPENNURBS_OBJECT | 0xFFFF;

TCODE_OPENNURBS_BUFFER :: TCODE_OPENNURBS_OBJECT | TCODE_CRC | 0x0100;

TCODE_LEGACY_ASM :: TCODE_LEGACY_GEOMETRY | 0x0001;
TCODE_LEGACY_PRT :: TCODE_LEGACY_GEOMETRY | 0x0002;
TCODE_LEGACY_SHL :: TCODE_LEGACY_GEOMETRY | 0x0003;
TCODE_LEGACY_FAC :: TCODE_LEGACY_GEOMETRY | 0x0004;
TCODE_LEGACY_BND :: TCODE_LEGACY_GEOMETRY | 0x0005;
TCODE_LEGACY_TRM :: TCODE_LEGACY_GEOMETRY | 0x0006;
TCODE_LEGACY_SRF :: TCODE_LEGACY_GEOMETRY | 0x0007;
TCODE_LEGACY_CRV :: TCODE_LEGACY_GEOMETRY | 0x0008;
TCODE_LEGACY_SPL :: TCODE_LEGACY_GEOMETRY | 0x0009;
TCODE_LEGACY_PNT :: TCODE_LEGACY_GEOMETRY | 0x000A;

TCODE_STUFF :: 0x0100;

TCODE_LEGACY_ASMSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_ASM;
TCODE_LEGACY_PRTSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_PRT;
TCODE_LEGACY_SHLSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_SHL;
TCODE_LEGACY_FACSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_FAC;
TCODE_LEGACY_BNDSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_BND;
TCODE_LEGACY_TRMSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_TRM;
TCODE_LEGACY_SRFSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_SRF;
TCODE_LEGACY_CRVSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_CRV;
TCODE_LEGACY_SPLSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_SPL;
TCODE_LEGACY_PNTSTUFF :: TCODE_LEGACY_GEOMETRY | TCODE_STUFF | TCODE_LEGACY_PNT;

TCODE_RH_POINT :: TCODE_GEOMETRY | 0x0001;

TCODE_RH_SPOTLIGHT :: TCODE_RENDER | 0x0001;

TCODE_OLD_RH_TRIMESH :: TCODE_GEOMETRY | 0x0011;
TCODE_OLD_MESH_VERTEX_NORMALS :: TCODE_GEOMETRY | 0x0012;
TCODE_OLD_MESH_UV :: TCODE_GEOMETRY | 0x0013;
TCODE_OLD_FULLMESH :: TCODE_GEOMETRY | 0x0014;

TCODE_MESH_OBJECT :: TCODE_GEOMETRY | 0x0015;
TCODE_COMPRESSED_MESH_GEOMETRY :: TCODE_GEOMETRY | 0x0017;
TCODE_ANALYSIS_MESH :: TCODE_GEOMETRY | 0x0018;

TCODE_NAME :: TCODE_INTERFACE | 0x0001;
TCODE_VIEW :: TCODE_INTERFACE | 0x0002;
TCODE_CPLANE :: TCODE_INTERFACE | 0x0003;

TCODE_NAMED_CPLANE :: TCODE_INTERFACE | 0x0004;
TCODE_NAMED_VIEW :: TCODE_INTERFACE | 0x0005;
TCODE_VIEWPORT :: TCODE_INTERFACE | 0x0006;

TCODE_SHOWGRID :: TCODE_SHORT | TCODE_INTERFACE | 0x0007;
TCODE_SHOWGRIDAXES :: TCODE_SHORT | TCODE_INTERFACE | 0x0008;
TCODE_SHOWWORLDAXES :: TCODE_SHORT | TCODE_INTERFACE | 0x0009;

TCODE_VIEWPORT_POSITION :: TCODE_INTERFACE | 0x000A;
TCODE_VIEWPORT_TRACEINFO :: TCODE_INTERFACE | 0x000B;
TCODE_SNAPSIZE :: TCODE_INTERFACE | 0x000C;
TCODE_NEAR_CLIP_PLANE :: TCODE_INTERFACE | 0x000D;
TCODE_HIDE_TRACE :: TCODE_INTERFACE | 0x000E;

TCODE_NOTES :: TCODE_INTERFACE | 0x000F;
TCODE_UNIT_AND_TOLERANCES :: TCODE_INTERFACE | 0x0010;

TCODE_MAXIMIZED_VIEWPORT :: TCODE_SHORT | TCODE_INTERFACE | 0x0011;
TCODE_VIEWPORT_WALLPAPER :: TCODE_INTERFACE | 0x0012;

TCODE_SUMMARY :: TCODE_INTERFACE | 0x0013;
TCODE_BITMAPPREVIEW :: TCODE_INTERFACE | 0x0014;
TCODE_VIEWPORT_V1_DISPLAYMODE :: TCODE_SHORT | TCODE_INTERFACE | 0x0015;

TCODE_LAYERTABLE :: TCODE_SHORT | TCODE_TABLE | 0x0001;
TCODE_LAYERREF :: TCODE_SHORT | TCODE_TABLEREC | 0x0001;

TCODE_RGB :: TCODE_SHORT | TCODE_DISPLAY | 0x0001;
TCODE_TEXTUREMAP :: TCODE_DISPLAY | 0x0002;
TCODE_BUMPMAP :: TCODE_DISPLAY | 0x0003;
TCODE_TRANSPARENCY :: TCODE_SHORT | TCODE_DISPLAY | 0x0004;
TCODE_DISP_AM_RESOLUTION :: TCODE_SHORT | TCODE_DISPLAY | 0x0005;
TCODE_RGBDISPLAY :: TCODE_SHORT | TCODE_DISPLAY | 0x0006;
TCODE_RENDER_MATERIAL_ID :: TCODE_DISPLAY | 0x0007;

TCODE_LAYER :: TCODE_DISPLAY | 0x0010;

TCODE_LAYER_OBSELETE_1 :: TCODE_SHORT | TCODE_DISPLAY | 0x0013;
TCODE_LAYER_OBSELETE_2 :: TCODE_SHORT | TCODE_DISPLAY | 0x0014;
TCODE_LAYER_OBSELETE_3 :: TCODE_SHORT | TCODE_DISPLAY | 0x0015;

TCODE_LAYERON :: TCODE_SHORT | TCODE_DISPLAY | 0x0016;
TCODE_LAYERTHAWED :: TCODE_SHORT | TCODE_DISPLAY | 0x0017;
TCODE_LAYERLOCKED :: TCODE_SHORT | TCODE_DISPLAY | 0x0018;

TCODE_LAYERVISIBLE :: TCODE_SHORT | TCODE_DISPLAY | 0x0012;
TCODE_LAYERPICKABLE :: TCODE_SHORT | TCODE_DISPLAY | 0x0030;
TCODE_LAYERSNAPABLE :: TCODE_SHORT | TCODE_DISPLAY | 0x0031;
TCODE_LAYERRENDERABLE :: TCODE_SHORT | TCODE_DISPLAY | 0x0032;

TCODE_LAYERSTATE :: TCODE_SHORT | TCODE_DISPLAY | 0x0033;
TCODE_LAYERINDEX :: TCODE_SHORT | TCODE_DISPLAY | 0x0034;
TCODE_LAYERMATERIALINDEX :: TCODE_SHORT | TCODE_DISPLAY | 0x0035;

TCODE_RENDERMESHPARAMS :: TCODE_DISPLAY | 0x0020;

TCODE_DISP_CPLINES :: TCODE_SHORT | TCODE_DISPLAY | 0x0022;
TCODE_DISP_MAXLENGTH :: TCODE_DISPLAY | 0x0023;

TCODE_CURRENTLAYER :: TCODE_SHORT | TCODE_DISPLAY | 0x0025;

TCODE_LAYERNAME :: TCODE_DISPLAY | 0x0011;

TCODE_LEGACY_TOL_FIT :: TCODE_TOLERANCE | 0x0001;
TCODE_LEGACY_TOL_ANGLE :: TCODE_TOLERANCE | 0x0002;

ON_PI :: 3.141592653589793238462643;

ON_2PI :: 2.0*ON_PI;

ON_HALFPI :: 0.5*ON_PI;

ON_DEGREES_TO_RADIANS :: ON_PI/180.0;

ON_RADIANS_TO_DEGREES :: 180.0/ON_PI;

ON_SQRT2 :: 1.414213562373095048801689;
ON_SQRT3 :: 1.732050807568877293527446;
ON_SQRT3_OVER_2 :: 0.8660254037844386467637230;
ON_1_OVER_SQRT2 :: 0.7071067811865475244008445;
ON_SIN_PI_OVER_12 :: 0.2588190451025207623488990;
ON_COS_PI_OVER_12 :: 0.9659258262890682867497433;

ON_LOG2 :: 0.6931471805599453094172321;
ON_LOG10 :: 2.302585092994045684017991;

ON_SQRT_EPSILON :: 1.490116119385000000e-8;

ON_SQRT_FLOAT_EPSILON :: 3.452669830725202719e-4;

ON_UNSET_POSITIVE_VALUE :: 1.23432101234321e+308;
ON_UNSET_VALUE :: -ON_UNSET_POSITIVE_VALUE;

ON_UNSET_POSITIVE_FLOAT :: 1.234321e+38;
ON_UNSET_FLOAT :: -ON_UNSET_POSITIVE_FLOAT;

ON_UNSET_UINT_INDEX :: 0xFFFFFFFF;

ON_PTR_SEMAPHORE1 :: cast(ON__UINT_PTR)8;
ON_PTR_SEMAPHORE2 :: cast(ON__UINT_PTR)16;
ON_PTR_SEMAPHORE3 :: cast(ON__UINT_PTR)24;
ON_PTR_SEMAPHORE4 :: cast(ON__UINT_PTR)32;
ON_PTR_SEMAPHORE_MAX :: cast(ON__UINT_PTR)32;

ON_UNSET_COLOR :: 0xFFFFFFFF;

ON_ZERO_TOLERANCE :: 2.3283064365386962890625e-10;

ON_RELATIVE_TOLERANCE :: 2.27373675443232059478759765625e-13;

ON_MAXIMUM_WORLD_COORDINATE_VALUE :: 1.34217728e8;

ON_NONSENSE_WORLD_COORDINATE_VALUE :: 1.0e100;

ON_ZERO_CURVATURE_TOLERANCE :: 1.0e-8;
ON_RELATIVE_CURVATURE_TOLERANCE :: 0.05;

ON_DEFAULT_ANGLE_TOLERANCE_RADIANS :: ON_PI/180.0;
ON_DEFAULT_ANGLE_TOLERANCE_DEGREES :: ON_DEFAULT_ANGLE_TOLERANCE_RADIANS * 180.0/ON_PI;
ON_DEFAULT_ANGLE_TOLERANCE :: ON_DEFAULT_ANGLE_TOLERANCE_RADIANS;
ON_DEFAULT_ANGLE_TOLERANCE_COSINE :: 0.99984769515639123915701155881391;
ON_MINIMUM_ANGLE_TOLERANCE :: ON_DEFAULT_ANGLE_TOLERANCE/10.0;

ON_DEFAULT_DISTANCE_TOLERANCE_MM :: 0.01;

ON_RTree_MIN_NODE_COUNT :: 2;
ON_RTree_MAX_NODE_COUNT :: 6;

ON__INT8 :: s8;
ON__UINT8 :: u8;
ON__INT16 :: s16;
ON__UINT16 :: u16;
ON__INT32 :: s32;
ON__UINT32 :: u32;
ON__INT64 :: s64;
ON__UINT64 :: u64;

ON__INT_PTR :: ON__INT64;
ON__UINT_PTR :: ON__UINT64;

// IEEE 754 special values
ON_DBL_QNAN: float64;
ON_DBL_PINF: float64;
ON_DBL_NINF: float64;

ON_FLT_QNAN: float;
ON_FLT_PINF: float;
ON_FLT_NINF: float;

ON_U :: union {
    b: [8] u8; // 8 bytes
    h: ON__INT64; // 64 bit integer
    i: ON__INT32; // 32 bit integer
    j: [2] s32; // two 32 bit integers
    p: *void;
    d: float64;
}

// pair of integer indices.  This
// is intentionally a struct/typedef
// rather than a class so that it
// can be used in other structs.
ON_2dex :: struct {
    // do not initialize i, j for performance reasons
    i: s32;
    j: s32;
}

ON_2udex :: struct {
    // do not initialize i, j for performance reasons
    i: u32;
    j: u32;
}

ON_3dex :: struct {
    // do not initialize i, j, k for performance reasons
    i: s32;
    j: s32;
    k: s32;
}

ON_3udex :: struct {
    // do not initialize i, j, k for performance reasons
    i: u32;
    j: u32;
    k: u32;
}

// quadruplet of integer indices.
ON_4dex :: struct {
    // do not initialize i, j, k, l for performance reasons
    i: s32;
    j: s32;
    k: s32;
    l: s32;
}

ON_4udex :: struct {
    // do not initialize i, j, k, l for performance reasons
    i: u32;
    j: u32;
    k: u32;
    l: u32;
}

ON_StringMapType :: enum s32 {
    Identity  :: 0;
    UpperCase :: 1;
    LowerCase :: 2;
}

ON_StringMapOrdinalType :: enum s32 {
    Identity       :: 0;
    UpperOrdinal   :: 1;
    LowerOrdinal   :: 2;
    MinimumOrdinal :: 3;
}

ON_DateFormat :: enum s32 {
    Unset         :: 0;
    Omit          :: 1;

    YearMonthDay  :: 2;

    YearDayMonth  :: 3;

    MonthDayYear  :: 4;

    DayMonthYear  :: 5;

    YearDayOfYear :: 6;
}

ON_TimeFormat :: enum s32 {
    Unset              :: 0;
    Omit               :: 1;
    HourMinute12       :: 2;
    HourMinuteSecond12 :: 3;
    HourMinute24       :: 4;
    HourMinuteSecond24 :: 5;
}

ON_ChainDirection :: enum u8 {
    Unset    :: 0;

    Previous :: 1;

    Next     :: 2;

    Both     :: 3;
}

ON_GradientType :: enum s32 {
    None           :: 0;

    Linear         :: 1;

    Radial         :: 2;

    LinearDisabled :: 3;

    RadialDisabled :: 4;
}

// OpenNurbs enums
ON :: struct {
    /////////////////////////////////////////////////////////////////
    /// <summary>
    /// ON::RuntimeEnvironment identifies a runtime environment (operating system).
    /// This value is saved in binary archives so appropriate adjustments
    /// to resources provided by runtime environments, like fonts, can be made
    /// when an archive created in one runtime environment is used in another.
    /// </summary>
    RuntimeEnvironment :: enum u8 {
        Unset   :: 0;

        None    :: 1;

        Windows :: 2;

        Apple   :: 3;

        Android :: 4;

        Linux   :: 5;
    }

    /// <summary>
    /// ON::ReadFileResult reports what happened when a file read was attempted.
    /// </summary>
    ReadFileResult :: enum u8 {
        Unset               :: 0;

        Completed           :: 1;

        CompletedWithErrors :: 2;

        Failed              :: 3;
    }

    // Defines the current working space.
    active_space :: enum u8 {
        no_space          :: 0;
        model_space       :: 1;
        page_space        :: 2;
        uveditor_space    :: 3;
        blockeditor_space :: 4;
    }

    /// <summary>
    /// ON::LengthUnitSystem identifies a length unit system
    /// United States customary length units references:
    ///   http://www.nist.gov/pml/wmd/metric/upload/frn-59-5442-1959.pdf
    ///   http://en.wikipedia.org/wiki/United_States_customary_units
    ///   http://en.wikipedia.org/wiki/International_yard_and_pound
    /// </summary>
    LengthUnitSystem :: enum u8 {
        None              :: 0;

        Angstroms         :: 12;

        Nanometers        :: 13;

        Microns           :: 1;

        Millimeters       :: 2;

        Centimeters       :: 3;

        Decimeters        :: 14;

        Meters            :: 4;

        Dekameters        :: 15;

        Hectometers       :: 16;

        Kilometers        :: 5;

        Megameters        :: 17;

        Gigameters        :: 18;

        Microinches       :: 6;

        Mils              :: 7;

        Inches            :: 8;

        Feet              :: 9;

        Yards             :: 19;

        Miles             :: 10;

        PrinterPoints     :: 20;

        PrinterPicas      :: 21;

        NauticalMiles     :: 22;

        AstronomicalUnits :: 23;

        LightYears        :: 24;

        Parsecs           :: 25;

        CustomUnits       :: 11;

        Unset             :: 255;
    }

    /// <summary>
    /// ON::AngleUnitSystem identifies an angle unit system
    /// </summary>
    AngleUnitSystem :: enum u8 {
        None     :: 0;

        Turns    :: 1;

        Radians  :: 2;

        Degrees  :: 3;

        Minutes  :: 4;

        Seconds  :: 5;

        Gradians :: 6;

        Unset    :: 255;
    }

    /// <summary>
    /// ON::EarthCoordinateSystem identifies the standard used to define Earth latitude, longitude, and elevation coordinates.
    /// </summary>
    EarthCoordinateSystem :: enum u8 {
        Unset         :: 0;

        GroundLevel   :: 1;

        MeanSeaLevel  :: 2;

        CenterOfEarth :: 3;

        WGS1984       :: 5;

        EGM2008       :: 6;
    }

    /// <summary>
    /// ON::ComponentNameConflictResolution identifies a method to use
    /// when components are being added to model, the component name must
    /// be unique, and the name of the new is already in use in the context.
    /// The function ON_ModelComponent::UniqueNameRequired(ON_ModelComponent::Type)
    /// can be used to determine if a component requires a unique name.
    /// </summary>
    ComponentNameConflictResolution :: enum u8 {
        Unset                             :: 0;

        QueryMethod                       :: 1;

        UseExistingComponent              :: 2;

        ReplaceExistingComponent          :: 3;

        KeepBothComponentsAutomaticRename :: 4;

        KeepBothComponentsQueryRename     :: 5;

        NoConflict                        :: 255;
    }

    // Obsolete - use ON_DimStyle::DimensionLengthDisplay
    OBSOLETE_DistanceDisplayMode :: enum u8 {
        Decimal    :: 0;

        Fractional :: 1;

        FeetInches :: 2;
    }

    //// point_style ///////////////////////////////////////////////////////////////
    point_style :: enum s32 {
        unknown_point_style   :: 0;
        not_rational          :: 1;
        homogeneous_rational  :: 2;
        euclidean_rational    :: 3;
        intrinsic_point_style :: 4;
        count                 :: 5;
        point_style_count :: count;
    }

    //// knot_style ///////////////////////////////////////////////////////////////
    knot_style :: enum s32 {
        unknown_knot_style     :: 0;
        uniform_knots          :: 1;
        quasi_uniform_knots    :: 2;
        piecewise_bezier_knots :: 3;
        clamped_end_knots      :: 4;
        non_uniform_knots      :: 5;
        count                  :: 6;
        knot_style_count :: count;
    }

    //// continuity ////////////////////////////////////////////////////////////////
    continuity :: enum u32 {
        unknown_continuity   :: 0;

        C0_continuous        :: 1;
        C1_continuous        :: 2;
        C2_continuous        :: 3;
        G1_continuous        :: 4;
        G2_continuous        :: 5;

        C0_locus_continuous  :: 6;
        C1_locus_continuous  :: 7;
        C2_locus_continuous  :: 8;
        G1_locus_continuous  :: 9;
        G2_locus_continuous  :: 10;

        Cinfinity_continuous :: 11;
        Gsmooth_continuous   :: 12;
    }

    //// curve_style ///////////////////////////////////////////////////////////////
    curve_style :: enum s32 {
        unknown_curve_style   :: 0;
        line                  :: 1;
        circle                :: 2;
        ellipse               :: 3;
        parabola              :: 4;
        hyperbola             :: 5;
        planar_polyline       :: 6;
        polyline              :: 7;
        planar_freeform_curve :: 8;
        freeform_curve        :: 9;
        count                 :: 10;
        curve_style_count :: count;
    }

    //// surface_style ///////////////////////////////////////////////////////////////
    surface_style :: enum s32 {
        unknown_surface_style :: 0;
        plane                 :: 1;
        circular_cylinder     :: 2;
        elliptical_cylinder   :: 3;
        circular_cone         :: 4;
        elliptical_cone       :: 5;
        sphere                :: 6;
        torus                 :: 7;
        surface_of_revolution :: 8;
        ruled_surface         :: 9;
        freeform_surface      :: 10;
        count                 :: 11;
        surface_style_count :: count;
    }

    //// sort_algorithm ///////////////////////////////////////////////////////////////
    sort_algorithm :: enum u32 {
        heap_sort  :: 0;
        quick_sort :: 1;
    }

    //// endian-ness ///////////////////////////////////////////////////////////////
    endian :: enum u32 {
        little_endian :: 0;
        big_endian    :: 1;
    }

    //// archive modes //////////////////////////////////////////////////////////////
    archive_mode :: enum u32 {
        unset_archive_mode :: 0;
        read               :: 1;
        write              :: 2;
        readwrite          :: 3;
        read3dm            :: 5;
        write3dm           :: 6;
    }

    // The x/y/z_2pt_perspective_view projections are ordinary perspective
    // projection. Using these values insures the ON_Viewport member
    // functions properly constrain the camera up and camera direction vectors
    // to preserve the specified perspective vantage.
    view_projection :: enum u32 {
        unknown_view     :: 0;
        parallel_view    :: 1;
        perspective_view :: 2;
    }

    //// view coordinates ///////////////////////////////////////////////////////////
    coordinate_system :: enum s32 {
        world_cs  :: 0;
        camera_cs :: 1;
        clip_cs   :: 2;
        screen_cs :: 3;
    }

    //// exception types ///////////////////////////////////////////////////////////
    exception_type :: enum s32 {
        unknown_exception           :: 0;
        out_of_memory               :: 1;
        corrupt_object              :: 2;

        unable_to_write_archive     :: 3;
        unable_to_read_archive      :: 4;
        unable_to_seek_archive      :: 5;
        unexpected_end_of_archive   :: 6;
        unexpected_value_in_archive :: 7;
    }

    //// layer mode ///////////////////////////////////////////////////////////
    // OBSOLETE
    layer_mode :: enum s32 {
        normal_layer :: 0;
        hidden_layer :: 1;
        locked_layer :: 2;
        count        :: 3;
        layer_mode_count :: count;
    }

    //// object mode ///////////////////////////////////////////////////////////
    object_mode :: enum s32 {
        normal_object :: 0;
        hidden_object :: 1;
        locked_object :: 2;
        idef_object   :: 3;

        count         :: 4;
        object_mode_count :: count;
    }

    //// object display color /////////////////////////////////////////////////////////
    object_color_source :: enum s32 {
        layer    :: 0;
        object   :: 1;
        material :: 2;
        parent   :: 3;

        color_from_layer    :: layer;
        color_from_object   :: object;
        color_from_material :: material;
        color_from_parent   :: parent;
    }

    //// object plot color /////////////////////////////////////////////////////////
    plot_color_source :: enum s32 {
        layer   :: 0;
        object  :: 1;
        display :: 2;
        parent  :: 3;

        plot_color_from_layer   :: layer;
        plot_color_from_object  :: object;
        plot_color_from_display :: display;
        plot_color_from_parent  :: parent;
    }

    //// object plot weight /////////////////////////////////////////////////////////
    plot_weight_source :: enum s32 {
        layer  :: 0;
        object :: 1;
        parent :: 3;

        plot_weight_from_layer  :: layer;
        plot_weight_from_object :: object;
        plot_weight_from_parent :: parent;
    }

    //// object linetype /////////////////////////////////////////////////////////
    object_linetype_source :: enum s32 {
        layer  :: 0;
        object :: 1;
        parent :: 3;

        linetype_from_layer  :: layer;
        linetype_from_object :: object;
        linetype_from_parent :: parent;
    }

    //// object material /////////////////////////////////////////////////////////
    object_material_source :: enum s32 {
        layer  :: 0;
        object :: 1;
        parent :: 3;

        material_from_layer  :: layer;
        material_from_object :: object;
        material_from_parent :: parent;
    }

    //// light style /////////////////////////////////////////////////////////////
    light_style :: enum s32 {
        unknown_light_style      :: 0;

        camera_directional_light :: 4;
        camera_point_light       :: 5;
        camera_spot_light        :: 6;
        world_directional_light  :: 7;
        world_point_light        :: 8;
        world_spot_light         :: 9;
        ambient_light            :: 10;
        world_linear_light       :: 11;
        world_rectangular_light  :: 12;
        count                    :: 13;
        light_style_count :: count;
    }

    //// curvature style /////////////////////////////////////////////////////////
    curvature_style :: enum s32 {
        unknown_curvature_style :: 0;
        gaussian_curvature      :: 1;
        mean_curvature          :: 2;
        min_curvature           :: 3;
        max_curvature           :: 4;
        count                   :: 5;
        curvature_style_count :: count;
    }

    /////////////////////////////////////////////////////////////////
    //
    // Legacy V3 display mode enum values.
    // Beginning with V4, opennurbs and Rhino us an ON_UUID to identify
    // display modes. The standard display mode ids are static
    // values in ON_StandardDisplayModeId.
    v3_display_mode :: enum s32 {
        default_display       :: 0;
        wireframe_display     :: 1;
        shaded_display        :: 2;
        renderpreview_display :: 3;

        v3_default_display       :: default_display;
        v3_wireframe_display     :: wireframe_display;
        v3_shaded_display        :: shaded_display;
        v3_renderpreview_display :: renderpreview_display;
    }

    view_type :: enum s32 {
        model_view_type       :: 0;
        page_view_type        :: 1;

        nested_view_type      :: 2;

        uveditor_view_type    :: 3;

        blockeditor_view_type :: 4;
    }

    //// texture mapping mode ///////////////////////////////////////////////////
    //
    // OBSOLETE
    texture_mode :: enum s32 {
        no_texture       :: 0;
        modulate_texture :: 1;
        decal_texture    :: 2;
    }

    /// <summary>
    /// Rich text style
    ///
    /// The way rich text specifies fonts and other information depends on what
    /// created the rich text. The interpretation of the rich text "specification"
    /// varies widely and depends on the application, platform, and operating system.
    /// </summary>
    RichTextStyle :: enum u8 {
        Unset        :: 0;

        Windows10SDK :: 1;

        AppleOSXSDK  :: 2;
    }

    //// object_type ///////////////////////////////////////////////////
    object_type :: enum s32 {
        unknown_object_type     :: 0;

        point_object            :: 1;
        pointset_object         :: 2;
        curve_object            :: 4;
        surface_object          :: 8;
        brep_object             :: 16;
        mesh_object             :: 32;
        layer_object            :: 64;
        material_object         :: 128;
        light_object            :: 256;
        annotation_object       :: 512;
        userdata_object         :: 1024;
        instance_definition     :: 2048;
        instance_reference      :: 4096;
        text_dot                :: 8192;
        grip_object             :: 16384;
        detail_object           :: 32768;
        hatch_object            :: 65536;
        morph_control_object    :: 131072;
        subd_object             :: 262144;
        loop_object             :: 524288;
        brepvertex_filter       :: 1048576;
        polysrf_filter          :: 2097152;
        edge_filter             :: 4194304;
        polyedge_filter         :: 8388608;

        meshvertex_filter       :: 16777216;
        meshedge_filter         :: 33554432;
        meshface_filter         :: 67108864;
        meshcomponent_reference :: 117440512;

        cage_object             :: 134217728;
        phantom_object          :: 268435456;
        clipplane_object        :: 536870912;
        extrusion_object        :: 1073741824;

        any_object              :: -1;
    }

    //// bitmap_type ///////////////////////////////////////////////////
    bitmap_type :: enum s32 {
        unknown_bitmap_type :: 0;
        windows_bitmap      :: 1;
        opengl_bitmap       :: 2;
        png_bitmap          :: 3;
    }

    object_decoration :: enum s32 {
        no_object_decoration :: 0;
        start_arrowhead      :: 8;
        end_arrowhead        :: 16;
        both_arrowhead       :: 24;
    }

    mesh_type :: enum s32 {
        default_mesh  :: 0;
        render_mesh   :: 1;
        analysis_mesh :: 2;
        preview_mesh  :: 3;
        any_mesh      :: 4;
    }

    // Types of object snapping.
    // In situations where more than one type of snap applies,
    // snaps with higher value take precedence.
    // enum values must be a power of 2.
    // ON_ObjRef saves these values in files.  Do not change
    // the values.  The reason for the gaps between the enum
    // values is to leave room for future snaps with prededence
    // falling between existing snaps
    osnap_mode :: enum s32 {
        none          :: 0;
        near          :: 2;
        focus         :: 8;
        center        :: 32;
        vertex        :: 64;
        knot          :: 128;
        quadrant      :: 512;
        midpoint      :: 2048;
        intersection  :: 8192;
        end           :: 131072;
        perpendicular :: 524288;
        tangent       :: 2097152;
        point         :: 134217728;
        all_snaps     :: -1;

        os_none          :: none;
        os_near          :: near;
        os_focus         :: focus;
        os_center        :: center;
        os_vertex        :: vertex;
        os_knot          :: knot;
        os_quadrant      :: quadrant;
        os_midpoint      :: midpoint;
        os_intersection  :: intersection;
        os_end           :: end;
        os_perpendicular :: perpendicular;
        os_tangent       :: tangent;
        os_point         :: point;
        os_all_snaps     :: all_snaps;
    }

    //// Types of Curves ///////////////////////////////////////////////////////////
    eCurveType :: enum s32 {
        Curve     :: 0;
        Arc       :: 1;
        Circle    :: 2;
        Line      :: 3;
        Nurbs     :: 4;
        Onsurface :: 5;
        Proxy     :: 6;
        Polycurve :: 7;
        Polyline  :: 8;

        ctCurve     :: Curve;
        ctArc       :: Arc;
        ctCircle    :: Circle;
        ctLine      :: Line;
        ctNurbs     :: Nurbs;
        ctOnsurface :: Onsurface;
        ctProxy     :: Proxy;
        ctPolycurve :: Polycurve;
        ctPolyline  :: Polyline;
    }

    //// surface_loft_end_condition //////////////////////////////////////////////
    //
    // End condition parameter values for  ON_Curve::CreateCubicLoft() and
    // ON_Surface::CreateCubicLoft().
    cubic_loft_end_condition :: enum s32 {
        quadratic       :: 0;
        linear          :: 1;
        cubic           :: 2;
        natural         :: 3;
        unit_tangent    :: 4;
        _1st_derivative :: 5;
        _2nd_derivative :: 6;
        free_cv         :: 7;

        cubic_loft_ec_quadratic      :: quadratic;
        cubic_loft_ec_linear         :: linear;
        cubic_loft_ec_cubic          :: cubic;
        cubic_loft_ec_natural        :: natural;
        cubic_loft_ec_unit_tangent   :: unit_tangent;
        cubic_loft_ec_1st_derivative :: _1st_derivative;
        cubic_loft_ec_2nd_derivative :: _2nd_derivative;
        cubic_loft_ec_free_cv        :: free_cv;
    }

    /// <summary>
    /// ON::AnnotationType identifies the type of an annotation object derived from ON_Annotation.
    /// </summary>
    AnnotationType :: enum u8 {
        Unset      :: 0;

        Aligned    :: 1;

        Angular    :: 2;

        Diameter   :: 3;

        Radius     :: 4;

        Rotated    :: 5;

        Ordinate   :: 6;

        ArcLen     :: 7;

        CenterMark :: 8;

        Text       :: 9;

        Leader     :: 10;

        Angular3pt :: 11;
    }

    /// <summary>
    /// Vertical location of text attach point relative to text
    /// </summary>
    TextVerticalAlignment :: enum u8 {
        Top                 :: 0;

        MiddleOfTop         :: 1;

        BottomOfTop         :: 2;

        Middle              :: 3;

        MiddleOfBottom      :: 4;

        Bottom              :: 5;

        BottomOfBoundingBox :: 6;
    }

    /// <summary>
    /// Horizontal location of text attach point relative to text
    /// </summary>
    TextHorizontalAlignment :: enum u8 {
        Left   :: 0;

        Center :: 1;

        Right  :: 2;

        Auto   :: 3;
    }

    /// <summary>
    /// Method for getting rotation for drawing text
    /// </summary>
    TextOrientation :: enum u8 {
        Plane :: 0;

        View  :: 1;

        InPlane :: Plane;

        InView  :: View;
    }

    /// <summary>
    /// Shape to be used at the ends of open curves
    /// </summary>
    LineCapStyle :: enum u8 {
        Round  :: 0;

        Flat   :: 1;

        Square :: 2;
    }

    /// <summary>
    /// Shape to be used at the corners of curves
    /// </summary>
    LineJoinStyle :: enum u8 {
        Round :: 0;

        Miter :: 1;

        Bevel :: 2;
    }

    /// <summary>
    /// For sectioning an object; the decision of when to generate hatches and fills.
    /// </summary>
    /// <since>8.0</since>
    SectionFillRule :: enum u8 {
        ClosedCurves :: 0;

        SolidObjects :: 1;
    }

    /// <summary>
    /// The source of sectioning attributes on an object.
    /// </summary>
    /// <since>8.0</since>
    SectionAttributesSource :: enum u8 {
        Layer     :: 0;

        Object    :: 1;

        Parent    :: 2;

        Sectioner :: 3;

        FromLayer     :: Layer;

        FromObject    :: Object;

        FromParent    :: Parent;

        FromSectioner :: Sectioner;
    }

    /// <summary>
    /// The source of sectioning attributes on an object.
    /// </summary>
    /// <since>8.0</since>
    SectionLabelStyle :: enum u8 {
        None            :: 0;

        TextDotFromName :: 1;

        TextFromName    :: 2;
    }

    /// <summary>
    /// Defines how views work with clipping planes.
    /// </summary>
    /// <since>8.0</since>
    ViewSectionBehavior :: enum u8 {
        ClipAndSection :: 0;

        SectionOnly    :: 1;
    }
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

/*
Description:
Component indices are used to provide a persistent way
to identify portions of complex objects.

*/
ON_COMPONENT_INDEX :: struct {
    // Do not change these values; they are stored in 3dm archives
    // and provide a persistent way to identify components of
    // complex objects.
    TYPE :: enum s32 {
        invalid_type             :: 0;

        brep_vertex              :: 1;
        brep_edge                :: 2;
        brep_face                :: 3;
        brep_trim                :: 4;
        brep_loop                :: 5;

        mesh_vertex              :: 11;
        meshtop_vertex           :: 12;
        meshtop_edge             :: 13;
        mesh_face                :: 14;
        mesh_ngon                :: 15;

        idef_part                :: 21;

        polycurve_segment        :: 31;

        pointcloud_point         :: 41;

        group_member             :: 51;

        extrusion_bottom_profile :: 61;

        extrusion_top_profile    :: 62;

        extrusion_wall_edge      :: 63;

        extrusion_wall_surface   :: 64;

        extrusion_cap_surface    :: 65;

        extrusion_path           :: 66;

        subd_vertex              :: 71;
        subd_edge                :: 72;
        subd_face                :: 73;

        hatch_loop               :: 81;

        dim_linear_point         :: 100;
        dim_radial_point         :: 101;
        dim_angular_point        :: 102;
        dim_ordinate_point       :: 103;
        dim_text_point           :: 104;
        dim_centermark_point     :: 105;
        dim_leader_point         :: 106;

        no_type                  :: -1;
    }

    m_type:  TYPE;

    m_index: s32;
}

ON_ComponentIndexAndNumber :: struct {
    m_ci: ON_COMPONENT_INDEX;
    m_x:  float64;
}

ON_ErrorEvent :: struct {
    Type :: enum u8 {
        Unset     :: 0;
        Warning   :: 1;
        Error     :: 2;
        Assert    :: 3;
        Custom    :: 4;
        SubDError :: 5;
        BrepError :: 6;
        NotValid  :: 7;
    }

    m_event_type:    Type = .Unset;
    m_reserved1:     u8 = 0;
    m_reserved2:     u16 = 0;
    m_line_number:   u32 = 0;
    m_file_name:     *u8 = null;
    m_function_name: *u8 = null;
    m_description:   *u8 = null;
    m_buffer:        [128] u8;
}

ON_ErrorLog :: struct {
    vtable: *ON_ErrorLog_VTable;
    anon_enum_8 :: enum u32 {
        MaximumEventCount :: 32;
    }

    m_event_count: u32 = 0;
    m_events:      [32] ON_ErrorEvent;
}

ON_ErrorLog_VTable :: struct #type_info_none {
    #import "Windows";
    Destructor: (this: *ON_ErrorLog, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Append: (this: *ON_ErrorLog, error_event: *ON_ErrorEvent) -> u32 #cpp_method;
}

ON_ErrorLog_Destructor :: inline (this: *ON_ErrorLog, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_ErrorLog_Append :: inline (this: *ON_ErrorLog, error_event: *ON_ErrorEvent) -> u32 { return this.vtable.Append(this, error_event); }

//vtable :: (obj: *ON_ErrorLog) -> *ON_ErrorLog_VTable { return obj.vtable; }


ON_MemoryAllocationTracking :: struct {
    m_this_statck_depth:  u32;
    m_this_crt_dbg_flag0: s32;
}

ON_RANDOM_NUMBER_CONTEXT :: struct {
    mti: ON__UINT32; /* mti = 0xFFFFFFFF means mt[] is not initialized */
    mt:  [624] ON__UINT32; /* the array for the state vector  */
}

ON_RandomNumberGenerator :: struct {
    m_rand_context: ON_RANDOM_NUMBER_CONTEXT;
}

ON_UUID :: UUID;

// All bits are zero in ON_nil_uuid and
// ON_UuidCompare( ON_nil_uuid, U ) < 0 if U != ON_nil_uuid.
ON_nil_uuid: ON_UUID;

// All bits are one in ON_max_uuid and
// ON_UuidCompare( U, ON_max_uuid ) < 0 if U != ON_max_uuid.
ON_max_uuid: ON_UUID;

// Application ids for the versions of Rhino that
// write 3dm files.  All userdata classed defined
// in the core Rhino.exe should use these ids
// as the application id.
// In situations where you want to use the id
// for the current version of Rhino, use
// ON_rhino_id and you won't have to update
// your code when Rhino versions roll.
ON_rhino2_id: ON_UUID;
ON_rhino3_id: ON_UUID;
ON_rhino4_id: ON_UUID;
ON_rhino5_id: ON_UUID;
ON_rhino6_id: ON_UUID;
ON_rhino7_id: ON_UUID;
ON_rhino8_id: ON_UUID;
ON_rhino_id: ON_UUID;

// Application ids for usedata written by versions
// of opennurbs before userdata had application ids.
ON_v2_userdata_id: ON_UUID;
ON_v3_userdata_id: ON_UUID;
ON_v4_userdata_id: ON_UUID;

ON_opennurbs_id: ON_UUID;

/*
Description:
This class is used by ON_UuidIndexList.  It is used when
uuids are used to search for items that can be found by
an integer index.
*/
ON_UuidIndex :: struct {
    // In cases when there is a discrepancy between the m_id and
    // m_i, m_id is assumed to be valid unless comments where this
    // class is used indicate otherwise.
    m_id: ON_UUID;
    m_i:  s32 = 0;
}

/*
Description:
This class is used by ON_UuidIndexList.  It is used when
uuids are used to search for items that can be found by
an integer index.
*/
ON_UuidPtr :: struct {
    // In cases when there is a discrepancy between the m_id and
    // m_ptr, m_id is assumed to be valid unless comments where this
    // class is used indicate otherwise.
    m_id:  ON_UUID;
    m_ptr: ON__UINT_PTR = 0;
}

ON_UnicodeEncoding :: enum s32 {
    UTF_unset :: 0;
    not_UTF   :: 1;
    UTF_8     :: 2;
    UTF_16    :: 3;
    UTF_16BE  :: 4;
    UTF_16LE  :: 5;
    UTF_32    :: 6;
    UTF_32BE  :: 7;
    UTF_32LE  :: 8;

    ON_UTF_unset :: UTF_unset;
    ON_not_UTF   :: not_UTF;
    ON_UTF_8     :: UTF_8;
    ON_UTF_16    :: UTF_16;
    ON_UTF_16BE  :: UTF_16BE;
    ON_UTF_16LE  :: UTF_16LE;
    ON_UTF_32    :: UTF_32;
    ON_UTF_32BE  :: UTF_32BE;
    ON_UTF_32LE  :: UTF_32LE;
}

/// <summary>
/// Unicode code point values for that are hard to include in code or
/// are useful for testing encoding and glyph rendering.
/// Code points &gt;= U+0080 require UTF-8 multiple byte encodings.
/// Code points &gt;= U+10000 require UTF-16 surrogate pair encodings.
/// </summary>
ON_UnicodeCodePoint :: enum s32 {
    NullCodePoint           :: 0;

    Backspace               :: 8;

    Tab                     :: 9;

    LineFeed                :: 10;

    VerticalTab             :: 11;

    FormFeed                :: 12;

    CarriageReturn          :: 13;

    Escape                  :: 27;

    Space                   :: 32;

    Delete                  :: 127;

    NoBreakSpace            :: 160;

    OghamSpaceMark          :: 5760;

    EnQuad                  :: 8192;

    EmQuad                  :: 8193;

    EnSpace                 :: 8194;

    EmSpace                 :: 8195;

    ThreePerEmSpace         :: 8196;

    FourPerEmSpace          :: 8197;

    SixPerEmSpace           :: 8198;

    FigureSpace             :: 8199;

    PunctuationSpace        :: 8200;

    ThinSpace               :: 8201;

    HairSpace               :: 8202;

    ZeroWidthSpace          :: 8203;

    MediumMathematicalSpace :: 8287;

    IdeographicSpace        :: 12288;

    ZeroWidthNonJoiner      :: 8204;

    ZeroWidthJoiner         :: 8205;

    NarrowNoBreakSpace      :: 8239;

    QuotationMark           :: 34;

    NumberSign              :: 35;

    PercentSign             :: 37;

    Ampersand               :: 38;

    Apostrophe              :: 39;

    Comma                   :: 44;

    HyphenMinus             :: 45;

    UnambiguousHyphen       :: 8208;

    NoBreakHyphen           :: 8209;

    SmallHyphen             :: 65123;

    UnambiguousMinus        :: 8722;

    FigureDash              :: 8210;

    EnDash                  :: 8211;

    EmDash                  :: 8212;

    Period                  :: 46;

    Slash                   :: 47;

    FractionSlash           :: 8260;

    DivisionSlash           :: 8725;

    MathimaticalSlash       :: 10187;

    Colon                   :: 58;

    Semicolon               :: 59;

    LessThanSign            :: 60;

    GreaterThanSign         :: 62;

    Backslash               :: 92;

    Underscore              :: 95;

    Pipe                    :: 124;

    Tilde                   :: 126;

    NextLine                :: 133;

    RadiusSymbol            :: 82;

    DegreeSymbol            :: 176;

    PlusMinusSymbol         :: 177;

    Superscript2            :: 178;

    Superscript3            :: 179;

    DiameterSymbol          :: 216;

    LineSeparator           :: 8232;

    ParagraphSeparator      :: 8233;

    GreekCapitalAlpha       :: 913;

    GreekAlpha              :: 945;

    GreekCapitalSigma       :: 931;

    GreekSigma              :: 963;

    GreekCapitalOmega       :: 937;

    GreekOmega              :: 969;

    CyrillicCapitalYu       :: 1070;

    PlaceOfInterestSign     :: 8984;

    SimplifiedChineseTree   :: 26753;

    TraditionalChineseTree  :: 27193;

    JapaneseRhinoceros      :: 29312;

    JapaneseTree            :: 26408;

    KoreanHan               :: 54620;

    KoreanJeong             :: 51221;

    DollarSign              :: 36;

    CentSign                :: 162;

    PoundSign               :: 163;

    CurrencySign            :: 164;

    YenSign                 :: 165;

    EuroSign                :: 8364;

    PesoSign                :: 8369;

    RubleSign               :: 8381;

    InfinitySymbol          :: 8734;

    RecyclingSymbol         :: 9842;

    BlackRecyclingSymbol    :: 9851;

    WarningSign             :: 9888;

    ReplacementCharacter    :: 65533;

    ByteOrderMark           :: 65279;

    Wastebasket             :: 128465;

    MaximumCodePoint        :: 1114111;

    InvalidCodePoint        :: 1114112;

    ON_NullCodePoint           :: NullCodePoint;

    ON_Backspace               :: Backspace;

    ON_Tab                     :: Tab;

    ON_LineFeed                :: LineFeed;

    ON_VerticalTab             :: VerticalTab;

    ON_FormFeed                :: FormFeed;

    ON_CarriageReturn          :: CarriageReturn;

    ON_Escape                  :: Escape;

    ON_Space                   :: Space;

    ON_Delete                  :: Delete;

    ON_NoBreakSpace            :: NoBreakSpace;

    ON_OghamSpaceMark          :: OghamSpaceMark;

    ON_EnQuad                  :: EnQuad;

    ON_EmQuad                  :: EmQuad;

    ON_EnSpace                 :: EnSpace;

    ON_EmSpace                 :: EmSpace;

    ON_ThreePerEmSpace         :: ThreePerEmSpace;

    ON_FourPerEmSpace          :: FourPerEmSpace;

    ON_SixPerEmSpace           :: SixPerEmSpace;

    ON_FigureSpace             :: FigureSpace;

    ON_PunctuationSpace        :: PunctuationSpace;

    ON_ThinSpace               :: ThinSpace;

    ON_HairSpace               :: HairSpace;

    ON_ZeroWidthSpace          :: ZeroWidthSpace;

    ON_MediumMathematicalSpace :: MediumMathematicalSpace;

    ON_IdeographicSpace        :: IdeographicSpace;

    ON_ZeroWidthNonJoiner      :: ZeroWidthNonJoiner;

    ON_ZeroWidthJoiner         :: ZeroWidthJoiner;

    ON_NarrowNoBreakSpace      :: NarrowNoBreakSpace;

    ON_QuotationMark           :: QuotationMark;

    ON_NumberSign              :: NumberSign;

    ON_PercentSign             :: PercentSign;

    ON_Ampersand               :: Ampersand;

    ON_Apostrophe              :: Apostrophe;

    ON_Comma                   :: Comma;

    ON_HyphenMinus             :: HyphenMinus;

    ON_UnambiguousHyphen       :: UnambiguousHyphen;

    ON_NoBreakHyphen           :: NoBreakHyphen;

    ON_SmallHyphen             :: SmallHyphen;

    ON_UnambiguousMinus        :: UnambiguousMinus;

    ON_FigureDash              :: FigureDash;

    ON_EnDash                  :: EnDash;

    ON_EmDash                  :: EmDash;

    ON_Period                  :: Period;

    ON_Slash                   :: Slash;

    ON_FractionSlash           :: FractionSlash;

    ON_DivisionSlash           :: DivisionSlash;

    ON_MathimaticalSlash       :: MathimaticalSlash;

    ON_Colon                   :: Colon;

    ON_Semicolon               :: Semicolon;

    ON_LessThanSign            :: LessThanSign;

    ON_GreaterThanSign         :: GreaterThanSign;

    ON_Backslash               :: Backslash;

    ON_Underscore              :: Underscore;

    ON_Pipe                    :: Pipe;

    ON_Tilde                   :: Tilde;

    ON_NextLine                :: NextLine;

    ON_RadiusSymbol            :: RadiusSymbol;

    ON_DegreeSymbol            :: DegreeSymbol;

    ON_PlusMinusSymbol         :: PlusMinusSymbol;

    ON_Superscript2            :: Superscript2;

    ON_Superscript3            :: Superscript3;

    ON_DiameterSymbol          :: DiameterSymbol;

    ON_LineSeparator           :: LineSeparator;

    ON_ParagraphSeparator      :: ParagraphSeparator;

    ON_GreekCapitalAlpha       :: GreekCapitalAlpha;

    ON_GreekAlpha              :: GreekAlpha;

    ON_GreekCapitalSigma       :: GreekCapitalSigma;

    ON_GreekSigma              :: GreekSigma;

    ON_GreekCapitalOmega       :: GreekCapitalOmega;

    ON_GreekOmega              :: GreekOmega;

    ON_CyrillicCapitalYu       :: CyrillicCapitalYu;

    ON_PlaceOfInterestSign     :: PlaceOfInterestSign;

    ON_SimplifiedChineseTree   :: SimplifiedChineseTree;

    ON_TraditionalChineseTree  :: TraditionalChineseTree;

    ON_JapaneseRhinoceros      :: JapaneseRhinoceros;

    ON_JapaneseTree            :: JapaneseTree;

    ON_KoreanHan               :: KoreanHan;

    ON_KoreanJeong             :: KoreanJeong;

    ON_DollarSign              :: DollarSign;

    ON_CentSign                :: CentSign;

    ON_PoundSign               :: PoundSign;

    ON_CurrencySign            :: CurrencySign;

    ON_YenSign                 :: YenSign;

    ON_EuroSign                :: EuroSign;

    ON_PesoSign                :: PesoSign;

    ON_RubleSign               :: RubleSign;

    ON_InfinitySymbol          :: InfinitySymbol;

    ON_RecyclingSymbol         :: RecyclingSymbol;

    ON_BlackRecyclingSymbol    :: BlackRecyclingSymbol;

    ON_WarningSign             :: WarningSign;

    ON_ReplacementCharacter    :: ReplacementCharacter;

    ON_ByteOrderMark           :: ByteOrderMark;

    ON_Wastebasket             :: Wastebasket;

    ON_MaximumCodePoint        :: MaximumCodePoint;

    ON_InvalidCodePoint        :: InvalidCodePoint;
}

ON_UnicodeErrorParameters :: struct {
    /*
    If an error occurs, then bits of error_status are
    set to indicate what type of error occurred.
    
    Error types:
    1: The input parameters were invalid.
    This error cannot be masked.
    
    2: The output buffer was not large enough to hold the converted
    string. As much conversion as possible is performed in this
    case and the error cannot be masked.
    
    4: When parsing a UTF-8 or UTF-32 string, the values of two
    consecutive encoding sequences formed a valid UTF-16
    surrogate pair.
    
    This error is masked if 0 != (4 & m_error_mask).
    If the error is masked, then the surrogate pair is
    decoded, the value of the resulting unicode code point
    is used, and parsing continues.
    
    8: An overlong UTF-8 encoding sequence was encountered and
    the value of the overlong sUTF-8 equence was a valid
    unicode code point.
    
    This error is masked if 0 != (8 & m_error_mask).
    If the error is masked, then the unicode code point
    is used and parsing continues.
    
    16: An illegal UTF-8, UTF-16 or UTF-32 sequence occurred,
    or an unsupported or invalid Windows code page value,
    or an invalid unicode code point value resulted from
    decoding a UTF-8 sequence.
    
    This error is masked if 0 != (16 & m_error_mask).
    If the error is masked and the value of m_error_code_point is
    a valid unicode code point, then m_error_code_point is used
    and parsing continues.
    */
    m_error_status:     u32;

    /*
    If 0 != (error_mask & 4), then type 4 errors are masked.
    If 0 != (error_mask & 8), then type 8 errors are masked.
    If 0 != (error_mask & 16) and m_error_code_point is a valid unicode
    code point value, then type 16 errors are masked.
    */
    m_error_mask:       u32;

    /*
    Unicode code point value to use in when masking type 16 errors.
    If 0 == (error_mask & 16), then this parameter is ignored.
    ON_UnicodeCodePoint::ON_ReplacementCharacter (U+FFFD)
    is a popular choice for the m_error_code_point value.
    */
    m_error_code_point: ON__UINT32;
}

/// <summary>
/// ON_UnicodeShortCodePoint is a tool to use when working with Unicode code points
/// with values &lt=0xFFFF.
/// Note that valid Unicode code point values can be as large as 0x10FFFD.
/// (0x10FFFE and 0x10FFFF are specified as &ltnot a character&gt by the Unicode Standard code chart
/// https://www.unicode.org/charts/PDF/U10FF80.pdf)
/// This class is used when converting between Unicode and BIG5 encodings and in other settings
/// where Unicode code points &gt 0xFFFF are not encountered
/// and the 2 byte size of ON_UnicodeShortCodePoint
/// appreciably more  efficient that a 4 byte size of an unsigned int.
/// </summary>
ON_UnicodeShortCodePoint :: struct {
    m_unicode_code_point: ON__UINT16 = 0;
}

/// <summary>
/// ON_Big5CodePoint is a tool to use when working with BIG5 encoded strings.
/// </summary>
ON_Big5CodePoint :: struct {
    M :: enum u32 {
        inimumCodePoint           :: 33088;
        inimumPrivateUseCodePoint :: 33088;
        inimumStandardCodePoint   :: 33088;
        aximumStandardCodePoint   :: 63957;
        aximumPrivateUseCodePoint :: 65278;
        aximumCodePoint           :: 65278;

        MinimumCodePoint           :: inimumCodePoint;
        MinimumPrivateUseCodePoint :: inimumPrivateUseCodePoint;
        MinimumStandardCodePoint   :: inimumStandardCodePoint;
        MaximumStandardCodePoint   :: aximumStandardCodePoint;
        MaximumPrivateUseCodePoint :: aximumPrivateUseCodePoint;
        MaximumCodePoint           :: aximumCodePoint;
    }

    m_big5_code_point: ON__UINT16 = 0;
}

ON_SleepLock :: struct {
    anon_enum_9 :: enum u32 {
        DefaultWaitInterval :: 50;

        OneMillisecond      :: 1;

        OneSecond           :: 1000;

        OneMinute           :: 60000;
    }

    // 1.5 times faster on Windows 10
    m_locked: s32 = 0;
}

ON_SleepLockGuard :: struct {
    // Keep m_sleep_lock private. Never add a function that provides access to m_sleep_lock.
    m_sleep_lock:      *ON_SleepLock;
    m_bIsManagingLock  := false;
}

ON_ComponentAttributes :: struct {
    anon_enum_10 :: enum u32 {
        Damaged :: 2147483648;
    }

    /// <summary>
    /// <para>ON_EdgeAttributeFlags are used to report attributes of single edge objects, like
    /// ON_SubDEdge and ON_BrepEdge, and aggregate edge demographics in objects with topology
    /// like ON_SubD, ON_Mesh and ON_Brep.</para>
    /// <seealso cref="ON_BrepEdge::EdgeFlags"/>
    /// <seealso cref="ON_SubDEdge::EdgeFlags"/>
    /// <seealso cref="ON_Brep::AggregateEdgeFlags"/>
    /// <seealso cref="ON_Mesh::AggregateEdgeFlags"/>
    /// <seealso cref="ON_SubD::AggregateEdgeFlags"/>
    /// </summary>
    EdgeAttributes :: enum u32 {
        Open                :: 1;

        Closed              :: 2;

        ZeroLength          :: 4;

        NonzeroLength       :: 8;

        Wire                :: 16;

        Boundary            :: 32;

        Interior            :: 64;

        Nonmanifold         :: 128;

        InteriorOriented    :: 256;

        InteriorNotOriented :: 512;

        InteriorSmooth      :: 1024;

        InteriorCrease      :: 2048;

        InteriorTwoFaced    :: 4096;

        InteriorSeam        :: 8192;

        InteriorSlit        :: 16384;

        InteriorSharp       :: 32768;

        Mask                :: 65535;
    }
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

// deprecated do not use
// ON_StopWatch :: struct {
//     #import "Basic";
//     State :: enum u8 {
//         Off     :: 0;

//         Running :: 1;

//         Stopped :: 2;
//     }

//     // current state
//     m_state: State = .Off;

//     m_start: ; // most recent Start() time.
//     m_stop:  std.chrono.steady_clock.time_point; // most recent Stop() time.
// }
#if OS == .LINUX {
#import "POSIX";
}
else {
#import "Windows";
}
ON_CRT_locale_t :: locale_t;

ON_Locale :: struct {
    WindowsLCID :: enum u32 {
        OrdinalLCID          :: 0;

        InvariantCultureLCID :: 39;

        cs_CZ_LCID           :: 1029;

        de_DE_LCID           :: 1031;

        en_US_LCID           :: 1033;

        en_CA_LCID           :: 4105;

        es_ES_tradnl_LCID    :: 1034;

        es_ES_LCID           :: 3082;

        fr_FR_LCID           :: 1036;

        it_IT_LCID           :: 1040;

        ja_JP_LCID           :: 1041;

        ko_KR_LCID           :: 1042;

        pl_PL_LCID           :: 1045;

        pt_PT_LCID           :: 2070;

        zh_CN_LCID           :: 2052;

        zh_TW_LCID           :: 1028;
    }

    // Maximum buffer capacity for any ON_Locale functions
    // that return string information in a buffer.
    anon_enum_11 :: enum s32 {
        BUFFER_MAXIMUM_CAPACITY :: 128;
    }

    m_numeric_locale:         ON_CRT_locale_t = null; // pointer to a C runtime locale type
    m_string_coll_map_locale: ON_CRT_locale_t = null; // pointer to a C runtime locale type

    m_bcp47_language_tag:     [85] u8; // <language>-<Script>-<REGION>

    m_language_subtag:        [9] u8; // ISO 639 code (RFC 4646 reserves 8 alpha elements)
    m_script_subtag:          [5] u8; // ISO 15924 code
    m_region_subtag:          [5] u8; // ISO 3166 code (2 alpha) or UN M.49 code (3 digit)

    m_windows_sortorder:      [7] u8; // Windows sort order
    m_reserved2:              [21] u8;

    m_windows_lcid:           ON__UINT32 = 0; // Microsoft Windows LCID values (0 = ordinal, 0x0027 = invariant culture)
    m_reserved3:              ON__UINT32 = 0;
}

ON_ComponentState :: enum u8 {
    Unset              :: 0;

    Clear              :: 1;

    NotSelected        :: 2;

    Selected           :: 3;

    SelectedPersistent :: 4;

    NotHighlighted     :: 5;

    Highlighted        :: 6;

    NotHidden          :: 7;

    Hidden             :: 8;

    NotLocked          :: 9;

    Locked             :: 10;

    NotDamaged         :: 11;

    Damaged            :: 12;

    NotDeleted         :: 13;

    Deleted            :: 14;

    RuntimeMarkClear   :: 15;

    RuntimeMarkSet     :: 16;
}

ON_ComponentStatus :: struct {
    // NOTE:
    // Hidden, Selected, ..., Mark() bool values are saved
    // as single bits on m_status_flags.
    m_status_flags: u8 = 0;

    // extra bits for advanced marking
    // no rules for use and runtime only - never saved in 3dm archives
    // NOTE: Mark() and MarkBits() are independent.
    //   bool Mark() is a bit on m_status_flags.
    //   ON__UINT8 MarkBits() returns m_mark_bits.
    m_mark_bits:    ON__UINT8 = 0;
}

/*
ON_AggregateComponentStatus is obsolete.
It exists because the virtual interface on ON_Object and the member on ON_Brep
cannot be changed without breakky the pubic C++ SDK.
Whenever possible, use ON_AggregateComponentStatusEx.
*/
ON_AggregateComponentStatus :: struct {
    // a bitwise or of all component status settings
    m_aggregate_status:          ON_ComponentStatus;

    m_current:                   u8 = 0; // 0 = empty, 1 = current, 2 = dirty

    m_reserved1:                 u8 = 0;

    // number of components
    m_component_count:           u32 = 0;

    // number of selected components (includes persistent and non persistent)
    m_selected_count:            u32 = 0;

    // number of selected components
    m_selected_persistent_count: u32 = 0;

    // number of highlighted components
    m_highlighted_count:         u32 = 0;

    // number of hidden components
    m_hidden_count:              u32 = 0;

    // number of locked components
    m_locked_count:              u32 = 0;

    // number of damaged components
    m_damaged_count:             u32 = 0;
}

ON_AggregateComponentStatusEx :: struct {
    #as using on_aggregatecomponentstatus: ON_AggregateComponentStatus;

    m_component_status_serial_number: ON__UINT64 = 0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_UniqueTester
//
ON_UniqueTester :: struct {
    Block :: struct {
        anon_enum_12 :: enum u64 {
            BlockCapacity :: 1000;
        }
        m_count: u64 = 0;
        m_a:     *ON__UINT_PTR = null;
        m_next:  *Block = null;
    }

    m_sorted_count: u64 = 0;
    m_block_list:   *Block = null;
}

/////////////////////////////////////////////////////////////
//
// Calculation use ON_ProgressReporter to
// report progress to the calling code.
//
ON_ProgressReporter :: struct {
    m_callback_function:                   #type (unknown0: ON__UINT_PTR, unknown1: float64) -> void #c_call;
    m_callback_context:                    ON__UINT_PTR;
    m_fraction_complete:                   float64;

    // Information for the previous call to callbackFunction
    m_previous_callback_fraction_complete: float64;
    m_reserved:                            [4] ON__UINT64;
}

ON_ProgressStepCounter :: struct {
    m_progress_reporter:        *ON_ProgressReporter = null;
    m_step_index:               u32 = 0;
    m_step_count:               u32 = 0;
    m_step_interval:            u32 = 0;
    m_progress_interval_start:  float64 = 0.0;
    m_progress_interval_finish: float64 = 0.0;
}

ON_Terminator :: struct {
    m_callback_function:                 #type (unknown0: ON__UINT_PTR) -> bool #c_call = null;
    m_callback_context:                  ON__UINT_PTR = 0;
    m_previous_query_clock:              ON__UINT64 = 0;
    m_bTerminationRequested              := false;
    m_bAllowDefaultCancellationHandling  := true;
    m_reserved1:                         [6] bool;
    m_thread_id:                         ON__UINT_PTR = 0;
    m_reserved2:                         [2] ON__UINT64;
}

/*
Description:
ON_Lock is a thread safe lock semephore. It is implemented using
platform specific compare and set functions.
*/
ON_Lock :: struct {
    // ON_Lock::InvalidLockValue (= -1) may never be used as a lock value.
    anon_enum_13 :: enum s32 {
        UnlockedValue      :: 0;
        DefaultLockedValue :: 1;
        InvalidLockValue   :: -1;
    }

    m_lock_value: std.atomic(s32) = xx anon_enum_13.UnlockedValue;
}

ON_FixedSizePoolElement :: struct {
    // next element - intentionally not initialized because instantiation is not permitted.
    m_next: *ON_FixedSizePoolElement;
}

ON_FixedSizePool :: struct {
    m_first_block:          *void = null;

    // ReturnElement() adds to the m_al_element stack.
    // AllocateElement() will use the stack before using m_al_element_array[]
    m_al_element_stack:     *void = null;

    m_al_block:             *void = null; // current element allocation block.

    // m_al_element_array[] is in m_al_block and has length m_al_count.
    m_al_element_array:     *void = null;
    m_al_count:             u64 = 0;
    m_sizeof_element:       u64 = 0;
    m_block_element_count:  u64 = 0; // block element count

    m_active_element_count: u32 = 0; // number of active elements
    m_total_element_count:  u32 = 0; // total number of elements (active + returned)

    m_sleep_lock:           ON_SleepLock;

    m_reserved0:            u32 = 0;
}

ON_FixedSizePoolIterator :: struct {
    m_fsp:        *ON_FixedSizePool;
    m_it_block:   *void;
    m_it_element: *void;
}

ON_SimpleFixedSizePool :: struct(T: Type) {
    #as on_fixedsizepool: ON_FixedSizePool; // jai: no "using" to avoid name-clashes
}

ON_SimpleFixedSizePoolIterator :: struct(T: Type) {
    #as on_fixedsizepooliterator: ON_FixedSizePoolIterator; // jai: no "using" to avoid name-clashes
}

ON_FunctionList :: struct {
    m_fsp:  ON_FixedSizePool;
    m_head: *void = null;
    m_tail: *void = null;
    m_lock: ON_Lock;
}

/*
The ON_MD5 class is based on code that is modified from C code with the following copyright.

Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All rights reserved.

License to copy and use this software is granted provided that it
is identified as the "RSA Data Security, Inc. MD5 Message-Digest
Algorithm" in all material mentioning or referencing this software
or this function.

License is also granted to make and use derivative works provided
that such works are identified as "derived from the RSA Data
Security, Inc. MD5 Message-Digest Algorithm" in all material
mentioning or referencing the derived work.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided "as is"
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.
*/
ON_MD5_Hash :: struct {
    m_digest: [16] ON__UINT8;
}

/*
Description:
ON_MD5 is a small class for calculating the MD5 hash of a sequence of bytes.
It may be use incrementally (the bytes do not have to be in a contiguous
array in memory at one time).

Remarks:
The ON_MD5 class cannot be used for cryptographic or security applications.
The MD5 hash algorithm is not suitable for cryptographic or security applications.
The ON_MD5 class does not "wipe" intermediate results.

The probability of two different randomly selected sequences of N bytes to have the
same value MD5 hash depends on N, but it is roughly 2^-64 ~ 10^-19.

MD5 hash values are 16 bytes. SHA-1 hash values are 20 bytes. If you need a hash
and have room for 20 bytes, then ON_SHA1 is preferred over ON_MD5.

Legal:
Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All rights reserved.

License to copy and use this software is granted provided that it
is identified as the "RSA Data Security, Inc. MD5 Message-Digest
Algorithm" in all material mentioning or referencing this software
or this function.

License is also granted to make and use derivative works provided
that such works are identified as "derived from the RSA Data
Security, Inc. MD5 Message-Digest Algorithm" in all material
mentioning or referencing the derived work.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided "as is"
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.
*/
ON_MD5 :: struct {
    m_byte_count:  ON__UINT64 = 0; // number of bytes that have passed through calls to Update().

    // if 1 == m_status_bits & 1, then Update has been called at least once (perhaps with 0 bytes).
    // if 2 == m_status_bits & 2, then m_md5_hash is current.
    m_status_bits: ON__UINT32 = 0;
    m_reserved:    ON__UINT32 = 0;

    m_buffer:      [64] ON__UINT8; // bytes that didn't fit in last 64 byte chunk  
    m_bit_count:   [2] ON__UINT32; // number of bits (lo, hi)
    m_state:       [4] ON__UINT32; // current state

    // cached MD5 hash - valid if 2 = (2 & m_status_bits)
    m_md5_hash:    ON_MD5_Hash;
}

ON_SHA1_Hash :: struct {
    m_digest: [20] ON__UINT8;
}

/*
Description:
ON_SHA1 is a small class for calculating the SHA-1 hash of a sequence of bytes.
It may be use incrementally (the bytes do not have to be in a contiguous
array in memory at one time).

Remarks:
The ON_SHA1 class cannot be used for cryptographic or security applications.
The SHA-1 hash algorithm is not suitable for cryptographic or security applications.
The ON_SHA1 class does not "wipe" intermediate results.

If you have two different sequences of N bytes storing information (lower entropy
than a random sequence) are you are not intentionally calculating the information
to create a SHA-1 hash collision, then the probability that the sequences have
the same SHA-1 hash is approximately 2^-80 ~ 10^-24.
*/
ON_SHA1 :: struct {
    m_byte_count:  ON__UINT64 = 0; // number of bytes that have passed through calls to update().

    // if 1 == m_status_bits & 1, then update has been called at least once (perhaps with 0 bytes).
    // if 2 == m_status_bits & 2, then m_sha1_hash is current.
    m_status_bits: ON__UINT32 = 0;
    m_reserved:    ON__UINT32 = 0;

    m_buffer:      [64] ON__UINT8; // bytes that didn't fit in last 64 byte chunk
    m_bit_count:   [2] ON__UINT32; // number of bits (lo, hi)
    m_state:       [5] ON__UINT32; // current state

    // cached SHA1 hash - valid if 2 = (2 & m_status_bits)
    m_sha1_hash:   ON_SHA1_Hash;
}

/*
This class is intended to be used to determine if a file's
contents have changed.
*/
ON_CheckSum :: struct {
    m_size: u64; // bytes in the file.
    m_time: time_t; // last modified time in seconds since Jan 1, 1970, UCT
    m_crc:  [8] ON__UINT32; // crc's
}

/////////////////////////////////////////////////////////////////////////////
//
// ON_String is a UTF-8 char string on all platforms
// ON_wString is a UTF-16 encoded wchar_t string on Windows platforms
// ON_wString is a UTF-32 encoded wchar_t string on Windows platforms
//
ON_StringBuffer :: struct {
    m_buffer:               *u8;
    m_buffer_capacity:      u64;

    m_heap_buffer:          *u8;
    m_heap_buffer_capacity: u64;
}

ON_wStringBuffer :: struct {
    m_buffer:               *s16;
    m_buffer_capacity:      u64;

    m_heap_buffer:          *s16;
    m_heap_buffer_capacity: u64;
}

/// <summary>
/// A char string.
/// Any multibyte encoding can be used. If the encoding is unknown, assume it is UTF-8.
/// </summary>
ON_String :: struct {
    anon_enum_14 :: enum s32 {
        MaximumStringLength :: 100000000;
    }

    /// <summary>BACKSPACE control U+0008</summary>
    Backspace:       u8 : xx ON_UnicodeCodePoint.Backspace;

    /// <summary>CHARACTER TABULATION control U+0009</summary>
    Tab:             u8 : xx ON_UnicodeCodePoint.Tab;

    /// <summary>LINE FEED control U+000A</summary>
    LineFeed:        u8 : xx ON_UnicodeCodePoint.LineFeed;

    /// <summary>LINE TABULATION control U+000B</summary>
    VerticalTab:     u8 : xx ON_UnicodeCodePoint.VerticalTab;

    /// <summary>FORM FEED control U+000C</summary>
    FormFeed:        u8 : xx ON_UnicodeCodePoint.FormFeed;

    /// <summary>CARRIAGE RETURN control U+000D</summary>
    CarriageReturn:  u8 : xx ON_UnicodeCodePoint.CarriageReturn;

    /// <summary>ESCAPE control U+001B</summary>
    Escape:          u8 : xx ON_UnicodeCodePoint.Escape;

    /// <summary>SPACE U+0020</summary>
    Space:           u8 : xx ON_UnicodeCodePoint.Space;

    /// <summary>QUOTATION MARK U+0022 (&quot;)</summary>
    QuotationMark:   u8 : xx ON_UnicodeCodePoint.QuotationMark;

    /// <summary>NUMBER SIGN U+0023 (#)</summary>
    NumberSign:      u8 : xx ON_UnicodeCodePoint.NumberSign;

    /// <summary>PERCENT SIGN U+0025 (%)</summary>
    PercentSign:     u8 : xx ON_UnicodeCodePoint.PercentSign;

    /// <summary>AMPERSAND U+0026 (&amp;)</summary>
    Ampersand:       u8 : xx ON_UnicodeCodePoint.Ampersand;

    /// <summary>APOSTROPHE U+0027 (&apos;)</summary>
    Apostrophe:      u8 : xx ON_UnicodeCodePoint.Apostrophe;

    /// <summary>COMMA U+002C (,)</summary>
    Comma:           u8 : xx ON_UnicodeCodePoint.Comma;

    /// <summary>HYPHEN-MINUS U+002D (-)</summary>
    HyphenMinus:     u8 : xx ON_UnicodeCodePoint.HyphenMinus;

    /// <summary>PERIOD U+002E (decimal 46) (.)</summary>
    Period:          u8 : xx ON_UnicodeCodePoint.Period;

    /// <summary>SOLIDUS U+002F (&#x2f;)</summary>
    Slash:           u8 : xx ON_UnicodeCodePoint.Slash;

    /// <summary>COLON U+003A (:)</summary>
    Colon:           u8 : xx ON_UnicodeCodePoint.Colon;

    /// <summary>SEMICOLON U+003B (;)</summary>
    Semicolon:       u8 : xx ON_UnicodeCodePoint.Semicolon;

    /// <summary>LESS-THAN SIGN U+003C (&#x3c;)</summary>
    LessThanSign:    u8 : xx ON_UnicodeCodePoint.LessThanSign;

    /// <summary>GREATER-THAN SIGN U+003E (&#x3e;)</summary>
    GreaterThanSign: u8 : xx ON_UnicodeCodePoint.GreaterThanSign;

    /// <summary>REVERSE SOLIDUS U+005C (&#x5c;)</summary>
    Backslash:       u8 : xx ON_UnicodeCodePoint.Backslash;

    /// <summary>// Unicode LOW LINE U+005F (_)</summary>
    Underscore:      u8 : xx ON_UnicodeCodePoint.Underscore;

    /// <summary>VERTICAL LINE U+007C (&#x7c;)</summary>
    Pipe:            u8 : xx ON_UnicodeCodePoint.Pipe;

    /// <summary>TILDE U+007E (&#x7e;)</summary>
    Tilde:           u8 : xx ON_UnicodeCodePoint.Tilde;

    /// <summary>DELETE U+007F</summary>
    Delete:          u8 : xx ON_UnicodeCodePoint.Delete;

    /// <summary>Period decimal point (.)</summary>
    DecimalAsPeriod: u8 : xx ON_UnicodeCodePoint.Period;

    /// <summary>Comma decimal point (,)</summary>
    DecimalAsComma:  u8 : xx ON_UnicodeCodePoint.Comma;

    Encoding :: enum u32 {
        Unset        :: 0;

        Unknown      :: 1;

        ASCII        :: 2;

        UTF8         :: 3;

        SloppyUTF8   :: 4;

        BIG5andASCII :: 5;
    }

    m_s:             *u8; // pointer to ref counted string array

    ON_aStringHeader :: struct {}
}

/// <summary>
/// A wide character string.
/// The default encoding is the encoding the compiler uses for wchar_t* s = L&quot;...&quot;; strings.
/// This is typically 2 byte wchar_t UTF-16 on Windows and 4 byte wchar_t UTF-32 on MacOS.
/// However, some MacOS SDK functions return 4 byte wchar_t UTF-16 strings.
/// </summary>
ON_wString :: struct {
    /// <summary>
    /// Identifies a built in string that can be used for testing.
    /// </summary>
    ExampleType :: enum u32 {
        Empty         :: 0;

        WideChar      :: 1;

        UTF16         :: 51;

        RichText      :: 90;

        XML           :: 101;

        XMLalternate1 :: 102;

        XMLalternate2 :: 103;

        XMLalternate3 :: 104;
    }

    /// <summary>BACKSPACE control U+0008</summary>
    Backspace:              s16 : xx ON_UnicodeCodePoint.Backspace;

    /// <summary>CHARACTER TABULATION control U+0009</summary>
    Tab:                    s16 : xx ON_UnicodeCodePoint.Tab;

    /// <summary>LINE FEED control U+000A</summary>
    LineFeed:               s16 : xx ON_UnicodeCodePoint.LineFeed;

    /// <summary>LINE TABULATION control U+000B</summary>
    VerticalTab:            s16 : xx ON_UnicodeCodePoint.VerticalTab;

    /// <summary>FORM FEED control U+000C</summary>
    FormFeed:               s16 : xx ON_UnicodeCodePoint.FormFeed;

    /// <summary>CARRIAGE RETURN control U+000D</summary>
    CarriageReturn:         s16 : xx ON_UnicodeCodePoint.CarriageReturn;

    /// <summary>ESCAPE control U+001B</summary>
    Escape:                 s16 : xx ON_UnicodeCodePoint.Escape;

    /// <summary>SPACE U+0020</summary>
    Space:                  s16 : xx ON_UnicodeCodePoint.Space;

    /// <summary>QUOTATION MARK U+0022 (&quot;)</summary>
    QuotationMark:          s16 : xx ON_UnicodeCodePoint.QuotationMark;

    /// <summary>NUMBER SIGN U+0023 (#)</summary>
    NumberSign:             s16 : xx ON_UnicodeCodePoint.NumberSign;

    /// <summary>PERCENT SIGN U+0025 (%)</summary>
    PercentSign:            s16 : xx ON_UnicodeCodePoint.PercentSign;

    /// <summary>AMPERSAND U+0026 (&amp;)</summary>
    Ampersand:              s16 : xx ON_UnicodeCodePoint.Ampersand;

    /// <summary>APOSTROPHE U+0027 (&apos;)</summary>
    Apostrophe:             s16 : xx ON_UnicodeCodePoint.Apostrophe;

    /// <summary>COMMA U+002C (,)</summary>
    Comma:                  s16 : xx ON_UnicodeCodePoint.Comma;

    /// <summary>HYPHEN-MINUS U+002D (-)</summary>
    HyphenMinus:            s16 : xx ON_UnicodeCodePoint.HyphenMinus;

    /// <summary>PERIOD U+002E (decimal 46) (.)</summary>
    Period:                 s16 : xx ON_UnicodeCodePoint.Period;

    /// <summary>SOLIDUS U+002F (&#x2f;)</summary>
    Slash:                  s16 : xx ON_UnicodeCodePoint.Slash;

    /// <summary>COLON U+003A (:)</summary>
    Colon:                  s16 : xx ON_UnicodeCodePoint.Colon;

    /// <summary>SEMICOLON U+003B (;)</summary>
    Semicolon:              s16 : xx ON_UnicodeCodePoint.Semicolon;

    /// <summary>LESS-THAN SIGN U+003C (&#x3c;)</summary>
    LessThanSign:           s16 : xx ON_UnicodeCodePoint.LessThanSign;

    /// <summary>GREATER-THAN SIGN U+003E (&#x3e;)</summary>
    GreaterThanSign:        s16 : xx ON_UnicodeCodePoint.GreaterThanSign;

    /// <summary>REVERSE SOLIDUS U+005C (&#x5c;)</summary>
    Backslash:              s16 : xx ON_UnicodeCodePoint.Backslash;

    /// <summary>// Unicode LOW LINE U+005F (_)</summary>
    Underscore:             s16 : xx ON_UnicodeCodePoint.Underscore;

    /// <summary>VERTICAL LINE U+007C (&#x7c;)</summary>
    Pipe:                   s16 : xx ON_UnicodeCodePoint.Pipe;

    /// <summary>TILDE U+007E (&#x7e;)</summary>
    Tilde:                  s16 : xx ON_UnicodeCodePoint.Tilde;

    /// <summary>DELETE U+007F</summary>
    Delete:                 s16 : xx ON_UnicodeCodePoint.Delete;

    /// <summary>Period decimal point (.)</summary>
    DecimalAsPeriod:        s16 : xx ON_UnicodeCodePoint.Period;

    /// <summary>Comma decimal point (,)</summary>
    DecimalAsComma:         s16 : xx ON_UnicodeCodePoint.Comma;

    /// <summary>NEXT LINE (NEL) control U+0085</summary>
    NextLine:               s16 : xx ON_UnicodeCodePoint.NextLine;

    /// <summary>NO-BREAK SPACE (NBSP) U+00A0</summary>
    NoBreakSpace:           s16 : xx ON_UnicodeCodePoint.NoBreakSpace;

    /// <summary>NON-BREAKING HYPHEN U+2011</summary>
    NoBreakHyphen:          s16 : xx ON_UnicodeCodePoint.NoBreakHyphen;

    /// <summary>ZERO WIDTH SPACE (ZWSP) U+200B</summary>
    ZeroWidthSpace:         s16 : xx ON_UnicodeCodePoint.ZeroWidthSpace;

    /// <summary>zero with non-joiner (ZWNJ) U+200C</summary>
    ZeroWidthNonJoiner:     s16 : xx ON_UnicodeCodePoint.ZeroWidthNonJoiner;

    /// <summary>zero with joiner (ZWJ) U+200D</summary>
    ZeroWidthJoiner:        s16 : xx ON_UnicodeCodePoint.ZeroWidthJoiner;

    /// <summary>NARROW NO-BREAK SPACE (NNBSP) U+202F</summary>
    NarrowNoBreakSpace:     s16 : xx ON_UnicodeCodePoint.NarrowNoBreakSpace;

    /// <summary>LATIN CAPITAL LETTER R U+0052 (decimal 82) (Rhino annotation radius symbol)</summary>
    RadiusSymbol:           s16 : xx ON_UnicodeCodePoint.RadiusSymbol;

    /// <summary>DEGREE SIGN U+00B0 (X&#xb0;) (Rhino annotation degree symbol)</summary>
    DegreeSymbol:           s16 : xx ON_UnicodeCodePoint.DegreeSymbol;

    /// <summary>Place of interest sign/looped square. (Used to indicate the command key on Mac)</summary>
    PlaceOfInterestSign:    s16 : xx ON_UnicodeCodePoint.PlaceOfInterestSign;

    /// <summary>PLUS-MINUS SIGN U+00B1 (&#xb1;) (Rhino annotation plus/minus symbol)</summary>
    PlusMinusSymbol:        s16 : xx ON_UnicodeCodePoint.PlusMinusSymbol;

    /// <summary>SUPERSCRIPT TWO U+00B2 (X&#xb2;) (Rhino annotation length squared symbol)</summary>
    Superscript2:           s16 : xx ON_UnicodeCodePoint.Superscript2;

    /// <summary>SUPERSCRIPT THREE U+00B3 (X&#xb3;) (Rhino annotation length cubed symbol)</summary>
    Superscript3:           s16 : xx ON_UnicodeCodePoint.Superscript3;

    /// <summary>LATIN CAPITAL LETTER O WITH STROKE U+00D8 (&#xd8;) (Rhino annotation diametersymbol)</summary>
    DiameterSymbol:         s16 : xx ON_UnicodeCodePoint.DiameterSymbol;

    /// <summary>LINE SEPARATOR U+2028 unambiguous line separator</summary>
    LineSeparator:          s16 : xx ON_UnicodeCodePoint.LineSeparator;

    /// <summary>PARAGRAPH SEPARATOR U+2028 unambiguous paragraph separator</summary>
    ParagraphSeparator:     s16 : xx ON_UnicodeCodePoint.ParagraphSeparator;

    /// <summary>GREEK SMALL LETTER ALPHA (&#x391;)</summary>
    GreekCapitalAlpha:      s16 : xx ON_UnicodeCodePoint.GreekCapitalAlpha;

    /// <summary>GREEK SMALL LETTER ALPHA (&#x3b1;)</summary>
    GreekAlpha:             s16 : xx ON_UnicodeCodePoint.GreekAlpha;

    /// <summary>GREEK CAPITAL LETTER SIGMA U+03A3 (&#x3a3;)</summary>
    GreekCapitalSigma:      s16 : xx ON_UnicodeCodePoint.GreekCapitalSigma;

    /// <summary>GREEK SMALL LETTER SIGMA U+03C3 (&#x3c3;)</summary>
    GreekSigma:             s16 : xx ON_UnicodeCodePoint.GreekSigma;

    /// <summary>GREEK SMALL LETTER OMEGA U+03A9 (&#x3a9;)</summary>
    GreekCapitalOmega:      s16 : xx ON_UnicodeCodePoint.GreekCapitalOmega;

    /// <summary>GREEK SMALL LETTER OMEGA U+03C9 (&#x3c9;)</summary>
    GreekOmega:             s16 : xx ON_UnicodeCodePoint.GreekOmega;

    /// <summary>CYRILLIC CAPITAL LETTER YU U+042E (&#x42e;) (Used in Cyrillic code point tests)</summary>
    CyrillicCapitalYu:      s16 : xx ON_UnicodeCodePoint.CyrillicCapitalYu;

    /// <summary>Simplified Chinese logogram for tree U+6881 (&#x6881;) (Used in CJK code point tests)</summary>
    SimplifiedChineseTree:  s16 : xx ON_UnicodeCodePoint.SimplifiedChineseTree;

    /// <summary>Traditional Chinese logogram for tree U+6A39 (&#x6a39;) (Used in CJK code point tests)</summary>
    TraditionalChineseTree: s16 : xx ON_UnicodeCodePoint.TraditionalChineseTree;

    /// <summary>Japanese logogram for rhinoceros U+7280 (&#x7280;) (Used in CJK code point tests)</summary>
    JapaneseRhinoceros:     s16 : xx ON_UnicodeCodePoint.JapaneseRhinoceros;

    /// <summary>Japanese logogram for tree U+6728 (&#x6728;) (Used in CJK code point tests)</summary>
    JapaneseTree:           s16 : xx ON_UnicodeCodePoint.JapaneseTree;

    /// <summary>Korean HAN U+D55C (&#xd55c;) (Used in CJK code point tests)</summary>
    KoreanHan:              s32 : xx ON_UnicodeCodePoint.KoreanHan;

    /// <summary>Korean JEONG U+C815 (&#xc815;) (Used in CJK code point tests)</summary>
    KoreanJeong:            s32 : xx ON_UnicodeCodePoint.KoreanJeong;

    /// <summary>DOLLAR SIGN U+0024 ($)</summary>
    DollarSign:             s16 : xx ON_UnicodeCodePoint.DollarSign;

    /// <summary>CENT SIGN U+00A2 (&#xa2;)</summary>
    CentSign:               s16 : xx ON_UnicodeCodePoint.CentSign;

    /// <summary>POUND SIGN U+00A3 (&#xa3;)</summary>
    PoundSign:              s16 : xx ON_UnicodeCodePoint.PoundSign;

    /// <summary>CURRENCY SIGN U+00A4 (&#xa4;)</summary>
    CurrencySign:           s16 : xx ON_UnicodeCodePoint.CurrencySign;

    /// <summary>YEN SIGN U+00A5 (Chinese yuan; Japanese yen) (&#xa5;)</summary>
    YenSign:                s16 : xx ON_UnicodeCodePoint.YenSign;

    /// <summary>EURO SIGN U+20AC (&#x20ac;)</summary>
    EuroSign:               s16 : xx ON_UnicodeCodePoint.EuroSign;

    /// <summary>PESO SIGN U+20B1 (&#x20b1;)</summary>
    PesoSign:               s16 : xx ON_UnicodeCodePoint.PesoSign;

    /// <summary>RUBLE SIGN U+20BD (&#x20bd;)</summary>
    RubleSign:              s16 : xx ON_UnicodeCodePoint.RubleSign;

    /// <summary>INFINITY SYMBOL U+221E (&#x221e;)</summary>
    InfinitySymbol:         s16 : xx ON_UnicodeCodePoint.InfinitySymbol;

    /// <summary>
    /// UNIVERSAL RECYCLING SYMBOL U+2672 (&#x2672;)
    /// This is a good code point for testing glyph substitution.
    /// </summary>
    RecyclingSymbol:        s16 : xx ON_UnicodeCodePoint.RecyclingSymbol;

    /// <summary>
    /// BLACK UNIVERSAL RECYCLING SYMBOL U+267B (&#x267b;)
    /// This is a good code point for testing glyph substitution.
    /// </summary>
    BlackRecyclingSymbol:   s16 : xx ON_UnicodeCodePoint.BlackRecyclingSymbol;

    /// <summary>WARNING SIGN U+26A0 (&#x26a0;)</summary>
    WarningSign:            s16 : xx ON_UnicodeCodePoint.WarningSign;

    /// <summary>
    /// REPLACEMENT CHARACTER U+FFFD (&#xfffd;)
    /// By convention, U+FFFD is used to mark string elements where
    /// an invalid UTF code point encoding was encountered.
    /// </summary>
    ReplacementCharacter:   s32 : xx ON_UnicodeCodePoint.ReplacementCharacter;

    anon_enum_15 :: enum s32 {
        MaximumStringLength :: 100000000;
    }

    // pointer to ref counted string array
    // m_s - 12 bytes points at the string's ON_wStringHeader
    m_s:                    *s16;

    ON_wStringHeader :: struct {}
}

/*
Description:
An ON_NameHash is designed to help search for and compare attribute names
like the ON_ModelComponent.Name() value.

If a name is wchar_t encoded as wide_char_name and UTF-8 encoded as utf8_name,
then ON_NameHash(wide_char_name) == ON_NameHash(utf8_name).

Set:
bool bEqualNameHash = ON_NameHash::Create(parent_id1,name1) == ON_NameHash::Create(parent_id2,name2);
bool bEqualParentId = (parent_id1 == parent_id2)
bool bEqualAttributeName = ON_String::EqualAttributeName(name1,name2);

If (bEqualParentId && bEqualAttributeName) is true, then bEqualNameHash is true.
If bEqualParentId is false, then bEqualNameHash is false.
With probability 1-epsilon, if bEqualAttributeName is false, then bEqualNameHash is false,
where epsilon is an extremely tiny number.
*/
ON_NameHash :: struct {
    flags :: enum u32 {
        length_mask    :: 268435455;
        case_sensitive :: 2147483648;
        file_path      :: 4294967295;

        flags_length_mask    :: length_mask;
        flags_case_sensitive :: case_sensitive;
        flags_file_path      :: file_path;
    }

    // m_flags = 0xFFFFFFFFU -> Hash is a file path hash
    // m_flags != 0
    // m_flags &0x0FFFFFFF = number of unicode (UTF-32) code points in name
    // m_flags &0x80000000 = 0 to ignore case, !=0 if case sensitive hash
    m_flags:     ON__UINT32 = 0;

    // m_sha1_hash = SHA-1 hash of ordinal minimum mapped unicode (UTF-32) code points
    // If the name is empty, m_length = 0 and m_sha1_hash = ON_SHA1_Hash::EmptyContentHash.
    // If the name is not valid, m_length = 0 and m_sha1_hash = ON_SHA1_Hash::ZeroDigest.
    m_sha1_hash: ON_SHA1_Hash;

    // When names appear in a tree structure, m_parent_id identifies the
    // parent node.
    m_parent_id: ON_UUID;
}

ON_UnitSystem :: struct {
    m_unit_system:            ON.LengthUnitSystem = .Meters;
    m_reserved:               u32 = 0;

    m_meters_per_custom_unit: float64 = 1.0; // 1 meter = m_meters_per_custom_unit custom units
    m_custom_unit_name:       ON_wString; // name of custom units
}

ON_Hash32TableItem :: struct {
    m_internal_next:          *ON_Hash32TableItem = null;
    m_internal_hash32:        ON__UINT32 = 0;
    m_internal_hash_table_sn: ON__UINT32 = 0;
}

/*
Description:
A hash table designed to be used for items with high quality 32-bit hash values.
*/
ON_Hash32Table :: struct {
    m_hash_table_sn:       ON__UINT32;
    m_reserved:            ON__UINT32 = 0;
    m_hash_table_capacity: ON__UINT32 = 0;
    m_item_count:          ON__UINT32 = 0;
    m_hash_table:          **ON_Hash32TableItem = null;
}

ON_FileSystem :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

ON_FileSystemPath :: struct {
    /// <summary>
    /// ON_FileSystemPath::PathId identifies a collection of commonly used directories.
    /// Use ON_FileSystemPath::PlatformPath() to get the name of the directory.
    /// </summary>
    PathId :: enum u32 {
        Unset              :: 0;

        DesktopDirectory   :: 1;

        DocumentsDirectory :: 2;

        DownloadsDirectory :: 3;

        HomeDirectory      :: 4;
    }
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

ON_FileStream :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

ON_ContentHash :: struct {
    /// <summary>
    /// ON_ContentHash::Compare are the possible results of calling ON_ContentHash::CompareFile().
    /// </summary>
    CompareResult :: enum u8 {
        Unset                       :: 0;

        EqualContent                :: 1;

        DifferentContent            :: 2;

        DifferentContentFileIsOlder :: 3;

        ContentDifferentFileIsNewer :: 4;

        FileDoesNotExist            :: 5;

        FileSystemFailure           :: 6;
    }

    // Number of bytes in the buffer or file
    m_byte_count:        ON__UINT64 = 0;

    m_hash_time:         ON__UINT64 = 0; // number of seconds since Jan 1, 1970, UCT

    m_content_time:      ON__UINT64 = 0; // number of seconds since Jan 1, 1970, UCT

    // SHA-1 hash of the content name (file name or other assigned name)
    m_sha1_name_hash:    ON_SHA1_Hash;

    // SHA-1 hash of the content (buffer or file).
    m_sha1_content_hash: ON_SHA1_Hash;
}

ON_FileReference :: struct {
    Status :: enum u32 {
        Unknown       :: 0;

        FullPathValid :: 1;

        FileNotFound  :: 2;
    }

    FindFilePreference :: enum u8 {
        None         :: 0;

        FullPath     :: 1;

        RelativePath :: 2;

        BasePath     :: 3;

        ContentMatch :: 4;

        MostRecent   :: 5;
    }

    m_full_path:           ON_wString;
    m_relative_path:       ON_wString;

    // If the referenced file is saved in the model as an embedded file,
    // the ON_BinaryArchive read code sets m_embedded_file_id
    // at read time.
    m_embedded_file_id:    ON_UUID;

    m_content_hash:        ON_ContentHash; // File content hash.

    m_recent_content_hash: ON_ContentHash;

    m_full_path_hash:      ON_SHA1_Hash; // File path hash.

    m_full_path_status:    Status = .Unknown;
}

/*
Description:
Iterates through every item in a file system directory.
*/
ON_FileIterator :: struct {
    m_state:            ON__UINT32 = 0; // 0 unset, 1=initialized, 2 = itereation in progress. 3 = iteration finished.
    m_reserved:         ON__UINT32 = 0;

    m_directory:        ON_wString; // directory passed to Initialize() or FirstItem
    m_item_name_filter: ON_wString; // item_name_filter passed to Initialize() or FirstItem
    m_item_name:        ON_wString; // Current item name.

    // cached full path name
    //   m_directory + directory separator + m_item_name
    //  (length = 0 if it is not set)
    m_full_path_name:   ON_wString;

    m_count:            ON__UINT64 = 0; // number of items iterated through so far
    ON_DirectoryIteratorImpl :: struct {}
    m_impl:             *ON_DirectoryIteratorImpl = null;
}

ON_UnicodeTextFile :: struct {
    Modes :: enum s32 {
        Read  :: 0;
        Write :: 1;
    }
    Types :: enum s32 {
        nknown :: 0;
        TF8    :: 1;
        TF16   :: 2;
        Unknown :: nknown;
        UTF8    :: TF8;
        UTF16   :: TF16;
    }

    ON_UnicodeTextFilePrivate :: struct {}
    _private: *ON_UnicodeTextFilePrivate;
}

////////////////////////////////////////////////////////////////
//
// The ON_SimpleArray<> template is more efficient than the
// ON_ClassArray<> template, but ON_SimpleArray<> should not
// be used for arrays of classes that require explicit
// construction, destruction, or copy operators.
//
// Elements returned by AppendNew() are memset to zero.
//
// By default, ON_SimpleArray<> uses onrealloc() to manage
// the dynamic array memory. If you want to use something
// besides onrealloc() to manage the array memory, then override
// ON_SimpleArray::Realloc().
ON_SimpleArray :: struct(T: Type) {
    m_a:        *T; // pointer to array memory
    m_count:    s32; // 0 <= m_count <= m_capacity
    m_capacity: s32; // actual length of m_a[]
}

////////////////////////////////////////////////////////////////
//
// The ON_ClassArray<> template is designed to be used with
// classes that require non-trivial construction or destruction.
// Any class used with the ON_ClassArray<> template must have a
// robust operator=().
//
// By default, ON_ClassArray<> uses onrealloc() to manage
// the dynamic array memory. If you want to use something
// besides onrealloc() to manage the array memory, then override
// ON_ClassArray::Realloc().  In practice this means that if your
// class has members with back-pointers, then you cannot use
// it in the default ON_ClassArray.  See ON_ObjectArray
// for an example.
//
ON_ClassArray :: struct(T: Type) {
    m_a:        *T; // pointer to array memory
    m_count:    s32; // 0 <= m_count <= m_capacity
    m_capacity: s32; // actual length of m_a[]
}

/*
Description:
ON_Object array is used to store lists of classes that are
derived from ON_Object.  It differs from ON_ClassArray in
that the virtual ON_Object::MemoryRelocate function is called
when growing the dynamic array requires changing the location
of the memory buffer used to store the elements in the array.
*/
ON_ObjectArray :: struct(T: Type) {
    #as on_classarray: ON_ClassArray(T); // jai: no "using" to avoid name-clashes
}

ON_UuidPair :: struct {
    m_uuid: [2] ON_UUID;
}

/*
Description:
The ON_UuidList class provides a tool to efficiently
maintain a list of uuids and determine if a uuid is
in the list. This class is based on the premise that
there are no duplicate uuids in the list.
*/
ON_UuidList :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_UUID);
    vtable: *ON_UuidList_VTable;

    m_sorted_count:  s32;
    m_removed_count: s32;
}
ON_UuidList_VTable :: struct #type_info_none {
    Destructor: (this: *ON_UuidList, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_UuidList_Destructor :: inline (this: *ON_UuidList, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_UuidList) -> *ON_UuidList_VTable { return obj.vtable; }


/*
Description:
The ON_UuidList class provides a tool
to efficiently maintain a list of uuid-index
pairs and determine if a uuid is in the list.
This class is based on the premise that there are
no duplicate uuids in the list.
*/
ON_UuidIndexList :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_UuidIndex);
    vtable: *ON_UuidIndexList_VTable;

    m_sorted_count:  u32 = 0;
    m_removed_count: u32 = 0;
}
ON_UuidIndexList_VTable :: struct #type_info_none {
    Destructor: (this: *ON_UuidIndexList, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_UuidIndexList_Destructor :: inline (this: *ON_UuidIndexList, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_UuidIndexList) -> *ON_UuidIndexList_VTable { return obj.vtable; }


/*
Description:
The ON_UuidList class provides a tool
to efficiently maintain a list of uuid-pointer
pairs and determine if a uuid is in the list.
This class is based on the premise that there are
no duplicate uuids in the list.
*/
ON_UuidPtrList :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_UuidPtr);
    vtable: *ON_UuidPtrList_VTable;

    m_sorted_count:  u32 = 0;
    m_removed_count: u32 = 0;
}
ON_UuidPtrList_VTable :: struct #type_info_none {
    Destructor: (this: *ON_UuidPtrList, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_UuidPtrList_Destructor :: inline (this: *ON_UuidPtrList, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_UuidPtrList) -> *ON_UuidPtrList_VTable { return obj.vtable; }


/*
Description:
The ON_UuidPairList class provides a tool
to efficiently maintain a list of uuid pairs
and determine if a uuid is in the list.
This class is based on the premise that there are
no duplicate uuids in the list.
*/
ON_UuidPairList :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_UuidPair);
    vtable: *ON_UuidPairList_VTable;

    m_sorted_count:  u32;
    m_removed_count: u32;
}
ON_UuidPairList_VTable :: struct #type_info_none {
    Destructor: (this: *ON_UuidPairList, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_UuidPairList_Destructor :: inline (this: *ON_UuidPairList, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_UuidPairList) -> *ON_UuidPairList_VTable { return obj.vtable; }


ON_2dexMap :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_2dex);
    vtable: *ON_2dexMap_VTable;

    m_bSorted: bool;
}
ON_2dexMap_VTable :: struct #type_info_none {
    Destructor: (this: *ON_2dexMap, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_2dexMap_Destructor :: inline (this: *ON_2dexMap, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_2dexMap) -> *ON_2dexMap_VTable { return obj.vtable; }


ON_Big5UnicodePair :: struct {
    m_big5:    ON_Big5CodePoint;
    m_unicode: ON_UnicodeShortCodePoint;
}

ON_StreamCallbackFunction :: #type (_context: *void, size: ON__UINT32, buffer: *void) -> bool #c_call;

ON_CompressStream :: struct {
    vtable: *ON_CompressStream_VTable;
    m_out_callback_function: ON_StreamCallbackFunction;
    m_out_callback_context:  *void;
    m_in_size:               ON__UINT64;
    m_out_size:              ON__UINT64;
    m_in_crc:                ON__UINT32;
    m_out_crc:               ON__UINT32;
    m_implementation:        *void;
    m_reserved:              *void;
}
ON_CompressStream_VTable :: struct #type_info_none {
    Destructor: (this: *ON_CompressStream, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Out: (this: *ON_CompressStream, callback_context: *void, out_buffer_size: ON__UINT32, out_buffer: *void) -> bool #cpp_method;
}

ON_CompressStream_Destructor :: inline (this: *ON_CompressStream, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_CompressStream_Out :: inline (this: *ON_CompressStream, callback_context: *void, out_buffer_size: ON__UINT32, out_buffer: *void) -> bool { return this.vtable.Out(this, callback_context, out_buffer_size, out_buffer); }

vtable :: (obj: *ON_CompressStream) -> *ON_CompressStream_VTable { return obj.vtable; }


ON_UncompressStream :: struct {
    vtable: *ON_UncompressStream_VTable;
    m_out_callback_function: ON_StreamCallbackFunction;
    m_out_callback_context:  *void;
    m_in_size:               ON__UINT64;
    m_out_size:              ON__UINT64;
    m_in_crc:                ON__UINT32;
    m_out_crc:               ON__UINT32;
    m_implementation:        *void;
    m_reserved:              *void;
}
ON_UncompressStream_VTable :: struct #type_info_none {
    Destructor: (this: *ON_UncompressStream, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Out: (this: *ON_UncompressStream, callback_context: *void, out_buffer_size: ON__UINT32, out_buffer: *void) -> bool #cpp_method;
}

ON_UncompressStream_Destructor :: inline (this: *ON_UncompressStream, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_UncompressStream_Out :: inline (this: *ON_UncompressStream, callback_context: *void, out_buffer_size: ON__UINT32, out_buffer: *void) -> bool { return this.vtable.Out(this, callback_context, out_buffer_size, out_buffer); }

vtable :: (obj: *ON_UncompressStream) -> *ON_UncompressStream_VTable { return obj.vtable; }


ON_CompressedBuffer :: struct {
    ON_CompressedBufferHelper :: struct {}

    m_sizeof_uncompressed:        u64;
    m_sizeof_compressed:          u64;
    m_crc_uncompressed:           ON__UINT32;
    m_crc_compressed:             ON__UINT32;
    m_method:                     s32; // 0 = copied, 1 = compressed
    m_sizeof_element:             s32;
    m_buffer_compressed_capacity: u64;
    m_buffer_compressed:          *void;
}

//////////////////////////////////////////////////////////////////////////////////////////
ON_Base64EncodeStream :: struct {
    vtable: *ON_Base64EncodeStream_VTable;
    m_out_callback_function: ON_StreamCallbackFunction;
    m_out_callback_context:  *void;
    m_in_size:               ON__UINT64;
    m_out_size:              ON__UINT64;
    m_in_crc:                ON__UINT32;
    m_out_crc:               ON__UINT32;
    m_implementation:        *void;
    m_reserved:              *void;
}
ON_Base64EncodeStream_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Base64EncodeStream, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Out: (this: *ON_Base64EncodeStream, callback_context: *void, out_buffer_size: ON__UINT32, out_buffer: *u8) -> bool #cpp_method;
}

ON_Base64EncodeStream_Destructor :: inline (this: *ON_Base64EncodeStream, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_Base64EncodeStream_Out :: inline (this: *ON_Base64EncodeStream, callback_context: *void, out_buffer_size: ON__UINT32, out_buffer: *u8) -> bool { return this.vtable.Out(this, callback_context, out_buffer_size, out_buffer); }

vtable :: (obj: *ON_Base64EncodeStream) -> *ON_Base64EncodeStream_VTable { return obj.vtable; }


//////////////////////////////////////////////////////////////////////////////////////////
ON_DecodeBase64 :: struct {
    vtable: *ON_DecodeBase64_VTable;
    // m_decode_count = total number of input base64 characters
    // that Decode() has decoded.
    m_decode_count: u32;

    m_output_count: s32; // 0 to 512
    m_output:       [512] u8;

    // 1: error - decoding stopped
    // 2: '=' encountered as 3rd char in Decode()
    // 3: successfully parsed "**=="
    // 4: successfully parsed "***="
    // 5: End() successfully called.
    m_status:       s32;

    // cached encoded input from previous call to Decode()
    m_cache_count:  s32;
    m_cache:        [4] s32;
}
ON_DecodeBase64_VTable :: struct #type_info_none {
    Destructor: (this: *ON_DecodeBase64, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Output: (this: *ON_DecodeBase64) -> void #cpp_method;
}

ON_DecodeBase64_Destructor :: inline (this: *ON_DecodeBase64, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_DecodeBase64_Output :: inline (this: *ON_DecodeBase64) { this.vtable.Output(this); }

vtable :: (obj: *ON_DecodeBase64) -> *ON_DecodeBase64_VTable { return obj.vtable; }


/*
class ON_CLASS ON_EncodeBase64
{
public:
ON_EncodeBase64();
virtual ~ON_EncodeBase64();

void Begin();

// Calling Encode will generate at least
// sizeof_buffer/57 and at most (sizeof_buffer+56)/57
// calls to Output().  Every callback to Output() will
// have m_output_count = 76.
void Encode(const void* buffer, size_t sizeof_buffer);

// Calling End may generate a single call to Output()
// If it does generate a single call to Output(),
// then m_output_count will be between 1 and 76.
void End(); // may generate a single call to Output().

// With a single exception, when Output() is called,
// 57 input bytes have been encoded into 76 output
// characters with ASCII codes A-Z, a-z, 0-9, +, /.
// m_output_count will be 76
// m_output[0...(m_output_count-1)] will be the base 64
// encoding.
// m_output[m_output_count] = 0.
// The Output() function can modify the values of m_output[]
// and m_output_count anyway it wants.
virtual void Output();

// Total number of bytes passed to Encode().
int m_encode_count;

// When the virtual Output() is called, there are m_output_count (1 to 76)
// characters of base64 encoded output in m_output[].  The remainder of
// the m_output[] array is zero.  The Output function may modify the
// contents of m_output[] any way it sees fit.
int  m_output_count;
char m_output[80];

private:
// input waiting to be encoded
// At most 56 bytes can be waiting to be processed in m_input[].
unsigned int  m_unused2; // Here for alignment purposes. Never used by opennurbs.
unsigned int  m_input_count;
unsigned char m_input[64];

void EncodeHelper1(const unsigned char*, char*);
void EncodeHelper2(const unsigned char*, char*);
void EncodeHelper3(const unsigned char*, char*);
void EncodeHelper57(const unsigned char*);
};
*/
ON_Base64 :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

///////////////////////////////////////////////////////////////////////////////
//
// Class ON_Color
//
ON_Color :: struct {
    // If you need to use byte indexing to convert RGBA components to and from
    // an unsigned int ON_Color value and want your code to work on both little
    // and big endian computers, then use the RGBA_byte_index enum.
    //
    // unsigned int u;
    // unsigned char* rgba = &y;
    // rbga[ON_Color::kRedByteIndex] = red value 0 to 255.
    // rbga[ON_Color::kGreenByteIndex] = green value 0 to 255.
    // rbga[ON_Color::kBlueByteIndex] = blue value 0 to 255.
    // rbga[ON_Color::kAlphaByteIndex] = alpha value 0 to 255.
    // ON_Color color = u;
    RGBA_byte_index :: enum u32 {
        RedByteIndex   :: 0;
        GreenByteIndex :: 1;
        BlueByteIndex  :: 2;
        AlphaByteIndex :: 3;

        kRedByteIndex   :: RedByteIndex;
        kGreenByteIndex :: GreenByteIndex;
        kBlueByteIndex  :: BlueByteIndex;
        kAlphaByteIndex :: AlphaByteIndex;
    }

    // If you need to use shifting to convert RGBA components to and from
    // an unsigned int ON_COlor value and you want your code to work
    // on both little and big endian computers, use the RGBA_shift enum.
    //
    // unsigned int u = 0;
    // u |= ((((unsigned int)red)   & 0xFFU) << ON_Color::RGBA_shift::kRedShift);
    // u |= ((((unsigned int)green) & 0xFFU) << ON_Color::RGBA_shift::kGreenShift);
    // u |= ((((unsigned int)blue)  & 0xFFU) << ON_Color::RGBA_shift::kBlueShift);
    // u |= ((((unsigned int)alpha) & 0xFFU) << ON_Color::RGBA_shift::kAlphaShift);
    // ON_Color color = u;
    RGBA_shift :: enum u32 {
        RedShift   :: 0;
        GreenShift :: 8;
        BlueShift  :: 16;
        AlphaShift :: 24;

        kRedShift   :: RedShift;
        kGreenShift :: GreenShift;
        kBlueShift  :: BlueShift;
        kAlphaShift :: AlphaShift;
    }

    TextFormat :: enum u8 {
        Unset           :: 0;

        FractionalRGB   :: 1;

        FractionalRGBa  :: 2;

        FractionalRGBA  :: 3;

        DecimalRGB      :: 4;

        DecimalRGBa     :: 5;

        DecimalRGBA     :: 6;

        HexadecimalRGB  :: 7;

        HexadecimalRGBa :: 8;

        HexadecimalRGBA :: 9;

        HSV             :: 10;

        HSVa            :: 11;

        HSVA            :: 12;

        HashRGB         :: 13;

        HashRGBa        :: 14;

        HashRGBA        :: 15;
    }

    union {
        // On little endian (Intel) computers, m_color has the same byte order
        // as Windows COLORREF values.
        // On little endian computers, m_color = 0xaabbggrr as an unsigned int value.
        // On big endian computers, m_color = 0xrrggbbaa as an unsigned int value
        //  rr = red component 0-255
        //  gg = grean component 0-255
        //  bb = blue component 0-255
        //  aa = alpha 0-255. 0 means opaque, 255 means transparent.
        m_color: u32 = 0;

        // m_colorComponent is a 4 unsigned byte array in RGBA order
        // red component = m_RGBA[ON_Color::RGBA_byte::kRed]
        // grean component = m_RGBA[ON_Color::RGBA_byte::kGreen]
        // blue component = m_RGBA[ON_Color::RGBA_byte::kBlue]
        // alpha component = m_RGBA[ON_Color::RGBA_byte::kAlpha]
        m_RGBA:  [4] u8;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Class ON_ColorStop
//
// Combination of a color and a single value. Typically used for defining
// gradient fills over a series of colors.
ON_ColorStop :: struct {
    m_color:    ON_Color;
    m_position: float64 = 0;
}

ON_4fColor :: struct {
    m_color: [4] float;
}

/*
Description:
Objects can have per viewport display properties
that override a viewport's default display
properties.  These overrides are stored on
ON_3dmObjectAttributes as a list of
ON_DisplayMaterialRefs.

Example:
For example, by default a viewport
might display objects using a wireframe, but
one special object may need to be shaded.
In this case the special object would have
a display material ref with the "wireframe"
viewport's id and the id of a display material
that specified shading.
*/
ON_DisplayMaterialRef :: struct {
    // identifies the ON_Viewport
    //   If nil, then the display material
    //   will be used in all viewports
    //   that are not explicitly referenced
    //   in other ON_DisplayMaterialRefs.
    m_viewport_id:         ON_UUID;

    m_display_material_id: ON_UUID; // id used to find display attributes
}

//////////////////////////////////////////////////////////////////////
// class ON_LinetypeSegment
ON_LinetypeSegment :: struct {
    // For a curve to be drawn starting at the start point
    // and ending at the endpoint, the first segment
    // in the pattern must be a stLine type
    eSegType :: enum u32 {
        Unset   :: 0;
        stLine  :: 1;
        stSpace :: 2;
    }

    m_length:    float64 = 0.0; // length in millimeters on printed output
    m_seg_type:  eSegType = .Unset;

    m_reserved2: u32 = 0;
}

////////////////////////////////////////////////////////////////
//
//   ON_Interval
//
ON_Interval :: struct {
    // Interval = (m_t[0], m_t[1])
    m_t: [2] float64;
}

////////////////////////////////////////////////////////////////
//
//   ON_2dPoint
//
ON_2dPoint :: struct {
    x: float64;
    y: float64;
}

////////////////////////////////////////////////////////////////
//
//   ON_3dPoint
//
ON_3dPoint :: struct {
    x: float64;
    y: float64;
    z: float64;
}

////////////////////////////////////////////////////////////////
//
//   ON_4dPoint (homogeneous coordinates)
//
ON_4dPoint :: struct {
    x: float64;
    y: float64;
    z: float64;
    w: float64;
}

////////////////////////////////////////////////////////////////
//
//   ON_2dVector
//
ON_2dVector :: struct {
    x: float64;
    y: float64;
}

////////////////////////////////////////////////////////////////
//
//   ON_3dVector
//
ON_3dVector :: struct {
    x: float64;
    y: float64;
    z: float64;
}

ON_3dRay :: struct {
    m_P: ON_3dPoint;
    m_V: ON_3dVector;
}

/*
Description:
Typically the vector portion is a unit vector and
m_d = -(x*P.x + y*P.y + z*P.z) for a point P on the plane.
*/
ON_PlaneEquation :: struct {
    x: float64;
    y: float64;
    z: float64;
    d: float64; // 4th coefficient of the plane equation.
}

////////////////////////////////////////////////////////////////
//
//   ON_2fPoint
//
ON_2fPoint :: struct {
    x: float;
    y: float;
}

////////////////////////////////////////////////////////////////
//
//   ON_3fPoint
//
ON_3fPoint :: struct {
    x: float;
    y: float;
    z: float;
}

////////////////////////////////////////////////////////////////
//
//   ON_4fPoint (homogeneous coordinates)
//
ON_4fPoint :: struct {
    x: float;
    y: float;
    z: float;
    w: float;
}

////////////////////////////////////////////////////////////////
//
//   ON_2fVector
//
ON_2fVector :: struct {
    x: float;
    y: float;
}

////////////////////////////////////////////////////////////////
//
//   ON_3fVector
//
ON_3fVector :: struct {
    x: float;
    y: float;
    z: float;
}

////////////////////////////////////////////////////////////////
//
//   ON_SurfaceCurvature
//
ON_SurfaceCurvature :: struct {
    k1: float64; // principal curvatures
    k2: float64; // principal curvatures
}

/////////////////////////////////////////////////////////////////
//
ON_2dPointArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_2dPoint);
}

/////////////////////////////////////////////////////////////////
//
ON_2fPointArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_2fPoint);
}

/////////////////////////////////////////////////////////////////
//
ON_3dPointArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_3dPoint);
}

/////////////////////////////////////////////////////////////////
//
ON_3fPointArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_3fPoint);
}

/////////////////////////////////////////////////////////////////
//
ON_4dPointArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_4dPoint);
}

/////////////////////////////////////////////////////////////////
//
ON_4fPointArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_4fPoint);
}

/////////////////////////////////////////////////////////////////
//
ON_2dVectorArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_2dVector);
}

/////////////////////////////////////////////////////////////////
//
ON_2fVectorArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_2fVector);
}

/////////////////////////////////////////////////////////////////
//
ON_3dVectorArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_3dVector);
}

/////////////////////////////////////////////////////////////////
//
ON_3fVectorArray :: struct {
    #as using on_simplearray: ON_SimpleArray(ON_3fVector);
}

ON_3dPointListRef :: struct {
    m_point_count:  u32;
    m_point_stride: u32;
    m_dP:           *float64;
    m_fP:           *float;
}

/*
Class ON_2dSize
*/
ON_2dSize :: struct {
    cx: float64;
    cy: float64;
}

/*
Class ON_4iRect
For those situations where a Windows SDK RECT or MFC CRect
value needs to be used in code that does not link with MFC.
If you want a traditional bounding box, use ON_2dBoundingBox.
*/
ON_4dRect :: struct {
    left:   float64;
    top:    float64;
    right:  float64;
    bottom: float64;
}

/*
Description:
Tool for efficiently calculating a boundary polyline winding number
with input tools that do not require the boundary polyline to be
a contiguous array of points.
*/
ON_WindingNumber :: struct {
    // Location of the winding point.
    m_winding_point:          ON_2dPoint;

    // Location of the last boundary point added. This is used
    // by AddBoundary(ON_2dPoint p) to generate a segment
    // from m_prev_boundary_point to p in situations where
    // points are streamed so the caller doesn't have to
    // deal with accumulating the previous point and can
    // mix streamed points with other forms of boundary input.
    m_prev_boundary_point:    ON_2dPoint;

    // Number of boundary segments in the polyline
    m_boundary_segment_count: ON__UINT32 = 0;

    // signed net number of times polyline crosses H to the left of the winding point.
    // A below to above crossing is -1.
    m_left_crossing_number:   ON__INT32 = 0;

    // signed net number of times polyline crosses H to the right of the winding point.
    // A below to above crossing is +1.
    m_right_crossing_number:  ON__INT32 = 0;

    // signed net number of times polyline crosses V to the below of the winding point.
    // A left to right crossing is +1.
    m_below_crossing_number:  ON__INT32 = 0;

    // signed net number of times polyline crosses V to the above of the winding point.
    // A left to right crossing is -1.
    m_above_crossing_number:  ON__INT32 = 0;

    // 0 != (m_status_bits & 1): left crossing occurred
    // 0 != (m_status_bits & 2): right crossing occurred
    // 0 != (m_status_bits & 4): below crossing occurred
    // 0 != (m_status_bits & 8): above crossing occurred
    // 0 != (m_status_bits & 16): winding point on horizontal segment
    // 0 != (m_status_bits & 32): winding point on vertical segment
    m_status_bits:            ON__INT32 = 0;
}

/*
ON_PeriodicDomain is a helper class for dealing with closed or periodic surfaces using the idea of a covering space.

If a surface is closed in the u-direction (or v respectively),  a curve on the surface that crosses the seam
will not have a continuous pull back to parameter space.  However, if we extend the surface domain
in the u-coordinates and allow the surface to cover itself periodicly, i.e S(u,v) = S(u + T, v) with period T,  then  we
can pull back the curve to the domain covering space (-inf,inf) x dom[1].

*/
ON_PeriodicDomain :: struct {
    m_dom:      [2] ON_Interval;
    m_closed:   [2] bool;
    m_normband: float64;

    m_deck:     [2] s32;
    m_nprev:    ON_2dPoint;
}

/*
A 2 dimensional point with integer coordinates.
Clear code will distinguish between situation where (x,y) is a
location (ON_2iPoint) or a direction (ON_2iVector) and use
the appropriate class.
*/
ON_2iPoint :: struct {
    x: ON__INT32;
    y: ON__INT32;
}

/*
A 2 dimensional vector with integer coordinates.
Clear code will distinguish between situation where (x,y) is a
location (ON_2iPoint) or a direction (ON_2iVector) and use
the appropriate class.
*/
ON_2iVector :: struct {
    x: ON__INT32;
    y: ON__INT32;
}

ON_2iBoundingBox :: struct {
    m_min: ON_2iPoint;
    m_max: ON_2iPoint;
}

/*
Class ON_2iSize
For those situations where a Windows SDK SIZE or MFC CSize
value needs to be used in code that does not link with MFC.
*/
ON_2iSize :: struct {
    cx: ON__INT32;
    cy: ON__INT32;
}

/*
Class ON_4iRect
For those situations where a Windows SDK RECT or MFC CRect
value needs to be used in code that does not link with MFC.
If you want a traditional bounding box, use ON_2dBoundingBox.
*/
ON_4iRect :: struct {
    // NOTE WELL:
    // Windows 2d integer device coordinates have a
    // strong y-down bias and it is common for top < bottom.
    // General 2d bounding boxes have a strong lower < upper / min < max bias.
    // Take care when converting between ON_2iBoundingBox and ON_4iRect.
    // It is intentional that no automatic conversion between bounding box
    // and ON_4iRect is supplied because each case must be carefully considered.
    left:   ON__INT32;
    top:    ON__INT32;
    right:  ON__INT32;
    bottom: ON__INT32;
}

/*
Description:
The ON_PluginRef class is used to store a list of
application plug-ins that may have saved user data
in a 3dm file so they can be loaded as needed for
reading their user data.
*/
ON_PlugInRef :: struct {
    // executable information
    m_plugin_id:                  ON_UUID;
    m_plugin_type:                s32; // CRhinoPlugIn::plugin_type enum value
    m_plugin_platform:            s32; // 0 = unknown, 1 = C++, 2 = .NET
    m_plugin_sdk_version:         s32;
    m_plugin_sdk_service_release: s32;
    m_plugin_name:                ON_wString;
    m_plugin_version:             ON_wString;
    m_plugin_filename:            ON_wString; // name of executable file

    // developer contact information
    m_developer_organization:     ON_wString;
    m_developer_address:          ON_wString;
    m_developer_country:          ON_wString;
    m_developer_phone:            ON_wString;
    m_developer_email:            ON_wString;
    m_developer_website:          ON_wString;
    m_developer_updateurl:        ON_wString;
    m_developer_fax:              ON_wString;
}

////////////////////////////////////////////////////////////////
//
//   ON_BoundingBox  - axis aligned bounding box
//
ON_BoundingBox :: struct {
    m_min: ON_3dPoint;
    m_max: ON_3dPoint;
}

ON_BoundingBoxAndHash :: struct {
    m_bbox: ON_BoundingBox;
    m_hash: ON_SHA1_Hash;
}

/*
A class that caches 8 bounding box - hash pairs and keeps the most frequently
used bounding boxes.
*/
ON_BoundingBoxCache :: struct {
    // number of boxes set in m_cache[]
    m_count:    u32 = 0;

    // capacity of m_cache[] - set when needed
    m_capacity: u32 = 0;

    // Bounding box cache. Most recently used boxes are first.
    m_cache:    [8] ON_BoundingBoxAndHash;
}

ON_Matrix :: struct {
    vtable: *ON_Matrix_VTable;
    m:            **float64 = null; // m[i][j] = value at row i and column j

    //           0 <= i < RowCount()
    //           0 <= j < ColCount()
    m_row_count:  s32 = 0;
    m_col_count:  s32 = 0;

    // m_rowmem[i][j] = row i+m_row_offset and column j+m_col_offset.
    m_rowmem:     ON_SimpleArray(*float64);
    m_Mmem:       **float64 = null; // used by Create(row_count,col_count,user_memory,true);
    m_row_offset: s32 = 0; // = ri0 when sub-matrix constructor is used
    m_col_offset: s32 = 0; // = ci0 when sub-matrix constructor is used
    m_cmem:       *void = null;
}
ON_Matrix_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Matrix, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_Matrix_Destructor :: inline (this: *ON_Matrix, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_Matrix) -> *ON_Matrix_VTable { return obj.vtable; }


ON_Xform :: struct {
    // [i][j] = row i, column j.  I.e.,
    //
    //           [0][0] [0][1] [0][2] [0][3]
    //           [1][0] [1][1] [1][2] [1][3]
    //           [2][0] [2][1] [2][2] [2][3]
    //           [3][0] [3][1] [3][2] [3][3]
    m_xform: [4] [4] float64;
}

ON_ClippingRegion :: struct {
    // The transformation m_xform transforms the view frustum,
    // in object coordinates to the (-1,+1)^3 clipping
    // coordinate box.
    m_xform:                ON_Xform;
    m_inverse_xform:        ON_Xform; // = m_xform.Inverse().

    anon_enum_16 :: enum s32 {
        max_clip_plane_count :: 16;
        frustum_bitmask      :: 63;
        near_plane_bitmask   :: 32;
        far_plane_bitmask    :: 16;
        clip_plane_bitmask   :: 2147483584;
        negw_bitmask         :: -2147483648;
    }

    m_clip_plane_count:     s32; // (0 <= m_clip_plane_count <= max_clip_plane_count)

    m_clip_plane_tolerance: float64;

    m_clip_plane:           [16] ON_PlaneEquation;
}

/*
Description:
ON_ClippingRegionPoints is a container for storing or referencing
clip points and clip flags.
The values are typically calculated by ON_ClippingRegion.TransformPoint().
*/
ON_ClippingRegionPoints :: struct {
    // All the information below is automatically managed if you use
    // the AppendClipPoint() or AppendClipPoints() functions to add
    // clipping points.
    m_point_count:           u32 = 0;
    m_point_capacity:        u32 = 0;
    m_clip_points:           *ON_3dPoint = null;
    m_clip_flags:            *u32 = null;

    m_and_clip_flags:        u32 = 0;
    m_or_clip_flags:         u32 = 0;

    m_buffer_point_capacity: u64 = 0;
    m_buffer:                *void = null;
}

/// <summary>
/// ON_PickType specifies what type of pick is occurring.
/// </summary>
ON_PickType :: enum u8 {
    Unset        :: 0;

    PointPick    :: 1;

    WindowPick   :: 2;

    CrossingPick :: 3;
}

ON_PickPoint :: struct {
    m_point:    ON_3dPoint;
    m_t:        [4] float64; // parameters (When m_point is set, unused values are set to ON_UNSET_VALUE.)
    m_depth:    float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // larger values are in front of smaller values.
    m_distance: float64 = 1000000000000000052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // smaller values are closer to pick ray.
}

ON_Localizer :: struct {
    TYPE :: enum s32 {
        no_type                    :: 0;
        sphere_type                :: 1;
        plane_type                 :: 2;
        cylinder_type              :: 3;
        curve_type                 :: 4;
        surface_type               :: 5;
        distance_type              :: 6;
        force_32bit_localizer_type :: -1;
    }

    m_type:          TYPE;

    m_d:             ON_Interval;
    m_P:             ON_3dPoint;
    m_V:             ON_3dVector;
    m_nurbs_curve:   *ON_NurbsCurve;
    m_nurbs_surface: *ON_NurbsSurface;
}

ON_SpaceMorph :: struct {
    vtable: *ON_SpaceMorph_VTable;
    m_tolerance:          float64 = 0.0;
    m_reserved1:          ON__UINT_PTR = 0; // Some reserved field could provide more Morph type information. RH-4091
    m_reserved2:          u32 = 0;
    m_bQuickPreview       := false;
    m_bPreserveStructure  := false;
    m_reserved3:          u8 = 0;
    m_reserved4:          u8 = 0;
}
ON_SpaceMorph_VTable :: struct #type_info_none {
    Destructor: (this: *ON_SpaceMorph, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    IsIdentity: (this: *ON_SpaceMorph, bbox: *ON_BoundingBox) -> bool #cpp_method;
}

ON_SpaceMorph_Destructor :: inline (this: *ON_SpaceMorph, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_SpaceMorph_IsIdentity :: inline (this: *ON_SpaceMorph, bbox: *ON_BoundingBox) -> bool { return this.vtable.IsIdentity(this, bbox); }

vtable :: (obj: *ON_SpaceMorph) -> *ON_SpaceMorph_VTable { return obj.vtable; }


ON_Quaternion :: struct {
    // quaternion = a + bi + cj + dk
    a: float64;
    b: float64;
    c: float64;
    d: float64;
}

/*
Description:
Use ON_Workspace classes on the stack to efficiently get
and automatically clean up workspace memory and scratch
files.
*/
ON_Workspace :: struct {
    ON_Workspace_FBLK :: struct {}
    m_pFileBlk: *ON_Workspace_FBLK;
    ON_Workspace_MBLK :: struct {}
    m_pMemBlk:  *ON_Workspace_MBLK;
}

ON_Plane :: struct {
    // origin of plane
    origin:         ON_3dPoint;

    // unit X axis of plane
    xaxis:          ON_3dVector;

    // unit Y axis of plane
    yaxis:          ON_3dVector;

    // unit Z axis of plane
    zaxis:          ON_3dVector;

    // equation of plane
    plane_equation: ON_PlaneEquation;
}

ON_ClippingPlaneInfo :: struct {
    // A point is visible if m_plane_equation.ValueAt(point) <= 0.
    // (This is the opposite convention from what OpenGL uses.)
    m_plane_equation: ON_PlaneEquation;
    m_plane_id:       ON_UUID;
    m_bEnabled        := false;

    m_depth_enabled   := false;
    m_reserved:       [2] u8;

    // This should be a double, but is a float in order to not change
    // the class size. When the Rhino SDK can break, this data type should change.
    m_depth:          float = 0;
}

// The only reason this class exists is to maintain extra information on ON_ClippingPlane
// without changing the size of the ON_ClippingPlane class (to not break the SDK). This
// class helps maintain a list of additional information associated with an ON_ClippingPlane.
// Pretend it does not exist
ON_ClippingPlaneDataStore :: struct {
    m_sn: u32 = 0;
}

ON_ClippingPlane :: struct {
    m_plane:                       ON_Plane;
    m_viewport_ids:                ON_UuidList; //ids of viewports that this clipping plane "clips"
    m_plane_id:                    ON_UUID;
    m_bEnabled:                    bool; // true if this clipping plane is active

    m_depth_enabled                := false;
    m_participation_lists_enabled  := false;
    m_reserved:                    u8;

    m_data_store:                  ON_ClippingPlaneDataStore;
}

/*
Description:
ON_Circle is a circle in 3d.  The circle is represented by a radius and an
orthonormal frame	of the plane containing the circle, with origin at the center.

An Is_Valid() circle has positive radius and an Is_ Valid() plane defining the frame.

The circle is parameterized by radians from 0 to 2 Pi given by
t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis
where center, xaxis and yaxis define the orthonormal frame of the circle's plane.
*/
ON_Circle :: struct {
    plane:  ON_Plane;
    radius: float64 = 1.0;
}

ON_Ellipse :: struct {
    // The center of the ellipse is at the plane's origin.  The axes of the
    // ellipse are the plane's x and y axes. The equation of the ellipse
    // with respect to the plane is (x/m_r[0])^2 + (y/m_r[1])^2 = 1;
    plane:  ON_Plane;
    radius: [2] float64; // radii for x and y axes (both must be > 0)
}

ON_ArithmeticCalculator :: struct {
    ////////////////////////////////////////////////////////////
    //
    // Current Status
    //
    ERROR_CONDITION :: enum s32 {
        no_error                 :: 0;

        program_error            :: 1;

        invalid_expression_error :: 2;

        divide_by_zero_error     :: 3;

        overflow_error           :: 4;
    }

    ON_ArithmeticCalculatorImplementation :: struct {}
    m_pCalc:          *ON_ArithmeticCalculatorImplementation;
    m_inplace_buffer: [127] float64; // used for in-place construction of pCalc.
}

ON_LengthUnitName :: struct {
    // Microsoft locale id // http://msdn.microsoft.com/en-us/library/ms912047(v=winembedded.10).aspx
    m_locale_id:          u32 = 0;
    m_length_unit_system: ON.LengthUnitSystem = .None;
    m_bNameIsSingular     := false;
    m_bNameIsPlural       := false;
    m_name:               *s16 = null;
}

ON_AngleUnitName :: struct {
    // Microsoft locale id // http://msdn.microsoft.com/en-us/library/ms912047(v=winembedded.10).aspx
    m_locale_id:         u32 = 0;
    m_angle_unit_system: ON.AngleUnitSystem = .None;
    m_bNameIsSingular    := false;
    m_bNameIsPlural      := false;
    m_name:              *s16 = null;
}

ON_ParseSettings :: struct {
    max :: enum s32 {
        number_str_count     :: 2000;

        expression_str_count :: 2147483645;

        max_number_str_count     :: number_str_count;

        max_expression_str_count :: expression_str_count;
    }

    m_true_default_bits:          [2] ON__UINT32; // a "0" bit is true  - used for defaults that are true
    m_false_default_bits:         [2] ON__UINT32; // a "0" bit is false - used for defaults that are false

    m_reserved_bits:              ON__UINT32 = 0;

    // The value of m_context_locale_id is used to resolve
    // ambiguities that occur when parsing unit system names.
    // In German "Grad" identifies arc degree angle units and in
    // English "Grad" identifies gradian angle units. If angle parsing
    // encounters "Grad", it uses the value of m_context_locale_id
    // to determine what arc unit system is being identified.
    m_context_locale_id:          ON__UINT16 = 0;

    // The value of m_context_angle_unit_system determines the
    // angle unit system that is used when a value must be parsed
    // as an angle and no angle unit system is explicitly or
    // implicitly specified.
    // If m_default_angle_unit_system is 0, then radians are used.
    // If m_default_angle_unit_system is not 0 and is equal to an
    // ON::AngleUnitSystem value, that angle unit system is used.
    // In all other cases, radians are used.
    m_context_angle_unit_system:  ON__UINT8 = 0;

    // The value of m_context_length_unit_system determines the
    // length unit system that is used when a value must be parsed
    // as a length and no length unit system is explicitly or
    // implicitly specified.
    // If m_context_length_unit_system is 0, then it is ignored.
    // If m_context_length_unit_system is not 0 and is equal to an
    // ON::LengthUnitSystem value, that length unit system is used.
    // Presently this value is not relevant to internal parsing code,
    // but may be passed along in parse settings to code that
    // use parsing.
    m_context_length_unit_system: ON__UINT8 = 0;

    m_reserved:                   ON__UINT64 = 0;
}

ON_LengthValue :: struct {
    /// <summary>
    /// Formatting to apply when creating a length value from a double.
    /// </summary>
    StringFormat :: enum u8 {
        ExactDecimal          :: 0;

        ExactProperFraction   :: 1;

        ExactImproperFraction :: 2;

        CleanDecimal          :: 3;

        CleanProperFraction   :: 4;

        CleanImproperFraction :: 5;
    }

    // parsing context
    m_context_locale_id:         u32 = 0;
    m_context_angle_unit_system: ON.AngleUnitSystem = .Unset;
    m_string_format:             StringFormat = .ExactDecimal;

    m_length_unit_system:        ON_UnitSystem;
    m_length:                    float64;

    m_length_as_string:          ON_wString;
}

ON_AngleValue :: struct {
    /// <summary>
    /// ON_AngleValue::StringFormat identifies the formatting to apply when creating
    /// a length value from a double.
    /// </summary>
    StringFormat :: enum u8 {
        ExactDecimal  :: 0;

        ExactFraction :: 1;

        CleanDecimal  :: 2;

        CleanFraction :: 3;
    }

    // parsing context
    m_context_locale_id:          u32 = 0;
    m_context_length_unit_system: ON.LengthUnitSystem = .None;
    m_string_format:              StringFormat = .ExactDecimal;

    m_angle_unit_system:          ON.AngleUnitSystem = .Unset;
    m_angle:                      float64;

    m_angle_as_string:            ON_wString;
}

ON_ScaleValue :: struct {
    /// <summary>
    /// Specifies preferred formats for automatically
    /// created string descriptions of a scale value.
    /// </summary>
    ScaleStringFormat :: enum u8 {
        None           :: 0;

        RatioFormat    :: 1;

        EquationFormat :: 2;

        FractionFormat :: 3;

        Unset          :: 255;
    }

    m_left_to_right_scale:        float64;
    m_right_to_left_scale:        float64;

    // parsing context
    m_context_locale_id:          u32 = 0;
    m_context_length_unit_system: ON.LengthUnitSystem = .None;
    m_context_angle_unit_system:  ON.AngleUnitSystem = .None;
    m_string_format_preference:   ScaleStringFormat = .Unset;

    m_scale_as_string:            ON_wString;

    m_left_length:                ON_LengthValue;
    m_right_length:               ON_LengthValue;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class ON_TextureMapping
//
ON_Line :: struct {
    from: ON_3dPoint; // start point
    to:   ON_3dPoint; // end point
}

ON_Triangle :: struct {
    m_V: [3] ON_3dPoint; // vertices
}

//////////////////////////////////////////////////////////////////////////
//
// ON_Symmetry
//
ON_Symmetry :: struct {
    anon_enum_17 :: enum u32 {
        MaximumOrder :: 4096;
    }

    // NOTE never use the value 113 for a new ON_Symmetry::Type.
    // This value was used briefly in June 2021 for a prototype symmetry type
    // and reusing it will break SHA1 hashes and 3dm archive IO.
    Type :: enum u8 {
        Unset            :: 0;

        Reflect          :: 1;

        Rotate           :: 2;

        ReflectAndRotate :: 3;

        Inversion        :: 4;

        Cyclic           :: 5;
    }

    Coordinates :: enum u8 {
        Unset  :: 0;

        Object :: 1;

        World  :: 2;
    }

    /// <summary>
    /// ON_Symmetry::Region specifies various subsets of the primary motif region.
    /// </summary>
    Region :: enum u8 {
        Unset                       :: 0;

        AboveReflectionPlane        :: 1;

        OnReflectionPlane           :: 2;

        BelowReflectionPlane        :: 3;

        CrossesReflectionPlane      :: 4;

        OnRotationAxis              :: 5;

        OffRotationAxis             :: 6;

        OnReflectionHalfPlane       :: 7;

        OnSupplementalHalfPlane     :: 8;

        OnRotateAndReflectHalfPlane :: 10;

        InsideRotateAndReflect      :: 11;

        OutsideRotateAndReflect     :: 12;
    }

    ON_SubDimple :: struct {}

    m_type:                                   Type = .Unset;

    m_coordinates:                            Coordinates = .Unset;

    // m_inversion_order (0 = unset, 1 = identity (no inversion), 2 = (non-identity inversion)
    m_inversion_order:                        u8 = 0;

    m_reserved1:                              u8 = 0;

    // m_cyclic_order (0 = unset, 1 = identity (no cyclic), >= 2 cyclic order (non-identity cyclic)
    m_cyclic_order:                           u32 = 0;

    // id is a preset value for the 3 built in symmetries and user defined for others
    m_id:                                     ON_UUID;

    // m_inversion_transform^2 = identity
    m_inversion_transform:                    ON_Xform;

    // m_cyclic_transform^m_cyclic_order = identity
    m_cyclic_transform:                       ON_Xform;

    // m_fixed_plane contains all fixed points of the symmetry transformation.
    // When type is Reflect, m_fixed_plane is the reflection plane.
    // When type is Rotate, m_fixed_plane contains the rotation axis and is used to define zero rotation angle.
    // When type is ReflectAndRotate, m_fixed_plane is the reflection plane.
    m_fixed_plane:                            ON_PlaneEquation;

    // Set when type is Rotate or ReflectAndRotate
    // m_rotation_axis always lies in m_plane.
    m_rotation_axis:                          ON_Line;

    // Using 0.0 insures the default returned by CleanupTolerance() is always ON_Symmetry::ZeroTolerance.
    m_cleanup_tolerance:                      float64 = 0.0;

    // The triplet
    //   m_symmetric_object_content_serial_number,
    //   m_symmetric_object_topology_hash,
    //   m_symmetric_object_geometry_hash
    // is used to detect if a previously symmtetric object is still symmetric
    // and to determine how it should be updated to return to being symmetric.
    // Legacy 3dm files have only the m_symmetric_object_content_serial_number.
    // Rhino 7.6 and later files have the SHA1 hashes as well.
    m_symmetric_object_content_serial_number: ON__UINT64 = 0;

    // For ON_SubD, this is the value of ON_SubD.TopologyHash() at the time the SubD
    // was known to be perfectly symmetric.
    m_symmetric_object_topology_hash:         ON_SHA1_Hash;

    // For ON_SubD, this is the value of ON_SubD.GeometryHash() at the time the SubD
    // was known to be perfectly symmetric.
    m_symmetric_object_geometry_hash:         ON_SHA1_Hash;
}

ON_Polyline :: struct {
    #as using on_3dpointarray: ON_3dPointArray;
    vtable: *ON_Polyline_VTable;
}
ON_Polyline_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Polyline, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_Polyline_Destructor :: inline (this: *ON_Polyline, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_Polyline) -> *ON_Polyline_VTable { return obj.vtable; }


/*
Description:
ON_Cylinder is a right circular cylinder.
*/
ON_Cylinder :: struct {
    // base circle
    circle: ON_Circle;

    // If height[0] = height[1], the cylinder is infinite,
    // Otherwise, height[0] < height[1] and the center of
    // the "bottom" cap is
    //
    //          circle.plane.origin + height[0]*circle.plane.zaxis,
    //
    // and the center of the top cap is
    //
    //          circle.plane.origin + height[1]*circle.plane.zaxis.
    height: [2] float64;
}

// Description:
//   Lightweight right circular cone.  Use ON_ConeSurface if
//   you need ON_Cone geometry as a virtual ON_Surface.
ON_Cone :: struct {
    plane:  ON_Plane; // apex = plane.origin, axis = plane.zaxis
    height: float64; // not zero
    radius: float64; // not zero
}

ON_Sphere :: struct {
    plane:  ON_Plane; // equatorial plane
    radius: float64; // > 0
}

ON_Box :: struct {
    plane: ON_Plane;

    // intervals are finite and increasing when the box is valid
    dx:    ON_Interval;
    dy:    ON_Interval;
    dz:    ON_Interval;
}

/*
Description:
The torus is defined by a major circle and minor radius.  The
torus is parameterized by (major_angle,minor_angle).  The angles
are specified in radians.  The domain of both parameters is (0,2pi).
*/
ON_Torus :: struct {
    plane:        ON_Plane; // major circle plane
    major_radius: float64; // > minor_radius
    minor_radius: float64; // > 0
}

// A Simplex in 3d
ON_3dSimplex :: struct {
    m_n: s32; //  Number of points stored in m_V.  0<= m_n <= 4
    m_V: [4] ON_3dVector;
}

/*
This is a base class for a convex polytope in 3d space, i.e. the convex hull of a
finite set of points called vertices.

This is the base type in the implementation of the GJK algorithm
ClosestPoint(ON_ConvexPoly& A, ON_ConvexPoly& B, ...)

*/
ON_ConvexPoly :: struct {
    vtable: *ON_ConvexPoly_VTable;
}
ON_ConvexPoly_VTable :: struct #type_info_none {
    Count: (this: *ON_ConvexPoly) -> s32 #cpp_method;

    Vertex: (this: *ON_ConvexPoly, i: s32) -> ON_3dVector #cpp_method #cpp_return_type_is_non_pod;

    SupportIndex: (this: *ON_ConvexPoly, W: ON_3dVector, i0: s32 = 0) -> s32 #cpp_method;

    MaximumCoordinate: (this: *ON_ConvexPoly) -> float64 #cpp_method;

    Destructor: (this: *ON_ConvexPoly, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}

ON_ConvexPoly_Count :: inline (this: *ON_ConvexPoly) -> s32 { return this.vtable.Count(this); }

ON_ConvexPoly_Vertex :: inline (this: *ON_ConvexPoly, i: s32) -> ON_3dVector { return this.vtable.Vertex(this, i); }

ON_ConvexPoly_SupportIndex :: inline (this: *ON_ConvexPoly, W: ON_3dVector, i0: s32 = 0) -> s32 { return this.vtable.SupportIndex(this, W, i0); }

ON_ConvexPoly_MaximumCoordinate :: inline (this: *ON_ConvexPoly) -> float64 { return this.vtable.MaximumCoordinate(this); }

ON_ConvexPoly_Destructor :: inline (this: *ON_ConvexPoly, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_ConvexPoly) -> *ON_ConvexPoly_VTable { return obj.vtable; }


// WARNING:  Points are referenced not stored for optimal performance in'
//           some applications.
//           The list of points must remain alive and in there initial location
//           For the duration of this object.
//
// This is an improved version of ON_ConvexHullRef that includes support for 2d point lists.
ON_ConvexHullRefEx :: struct {
    #as using on_convexpoly: ON_ConvexPoly;

    m_n:      s32 = 0;
    m_dim:    s32 = 3; // must be <4.  
    m_is_rat  := false;
    m_v:      *float64 = null;
    m_stride: s32 = 3;
}

// WARNING:  Points are referenced not stored for optimal performance in'
//           some applications.
//           The list of points must remain alive and in there initial location
//           For the duration of this object.
//
// GBA 02-Nov-23 	This class  is DEPRECATED and will be removed in the future.
//					Use ON_ConvexHullRefEx instead.
ON_ConvexHullRef :: struct {
    #as using on_convexpoly: ON_ConvexPoly;

    m_n:      s32 = 0;
    m_is_rat  := false;
    m_v:      *float64 = null;
    m_stride: s32 = 3;
}

// 3d convex hull defined by an explicit collection of points called vertices.
// Note: vertices need not be extreme points
ON_ConvexHullPoint2 :: struct {
    #as using on_convexpoly: ON_ConvexPoly;

    Ref:    ON_ConvexHullRefEx;
    m_Vert: ON_SimpleArray(ON_3dVector);
}

ON_X_EVENT :: struct {}

ON_PolynomialCurve :: struct {
    // dimension of polynomial curve (1,2, or 3)
    m_dim:    s32;

    // 1 if polynomial curve is rational, 0 if polynomial curve is not rational
    m_is_rat: s32;

    // order (=degree+1) of polynomial
    m_order:  s32;

    // coefficients ( m_cv.Count() = order of monomial )
    m_cv:     ON_4dPointArray;

    // domain of polynomial
    m_domain: ON_Interval;
}

ON_PolynomialSurface :: struct {
    m_dim:    s32; // 1,2, or 3
    m_is_rat: s32; // 1 if rational, 0 if not rational
    m_order:  [2] s32;
    // coefficients ( m_C.Length() = m_order[0]*m_order[1]
    // coefficient of s^m*t^n = m_cv[m_order[1]*m+n]
    m_cv:     ON_4dPointArray;

    m_domain: [2] ON_Interval;
}

ON_BezierCurve :: struct {
    // dimension of bezier (>=1)
    m_dim:                     s32;

    // 1 if bezier is rational, 0 if bezier is not rational
    m_is_rat:                  s32;

    // order = degree+1
    m_order:                   s32;

    // Number of doubles per cv ( >= ((m_is_rat)?m_dim+1:m_dim) )
    m_cv_stride:               s32;

    // The i-th cv begins at cv[i*m_cv_stride].
    m_cv:                      *float64;

    // Number of doubles in m_cv array.  If m_cv_capacity is zero
    // and m_cv is not nullptr, an expert user is managing the m_cv
    // memory.  ~ON_BezierCurve will not deallocate m_cv unless
    // m_cv_capacity is greater than zero.
    m_cv_capacity:             s32;

    // pad to a multiple of 8 bytes so custom allocators
    // will keep m_cv aligned and tail-padding reuse will
    // not be an issue.
    m_reserved_ON_BezierCurve: s32;
}

ON_BezierSurface :: struct {
    m_dim:                       s32; // >= 1
    m_is_rat:                    s32; // 0 = no, 1 = yes
    m_order:                     [2] s32; // order = degree+1 >= 2
    m_cv_stride:                 [2] s32;
    m_cv:                        *float64;
    m_cv_capacity:               s32; // if 0, then destructor does not free m_cv

    // pad to a multiple of 8 bytes so custom allocators
    // will keep m_cv aligned and tail-padding reuse will
    // not be an issue.
    m_reserved_ON_BezierSurface: s32;
}

ON_BezierCage :: struct {
    // NOTE: These members are left "public" so that expert users may efficiently
    //       create bezier curves using the default constructor and borrow the
    //       knot and CV arrays from their native NURBS representation.
    //       No technical support will be provided for users who access these
    //       members directly.  If you can't get your stuff to work, then use
    //       the constructor with the arguments and the SetKnot() and SetCV()
    //       functions to fill in the arrays.
    m_dim:         s32;
    m_is_rat:      bool;
    m_order:       [3] s32;
    m_cv_stride:   [3] s32;
    m_cv_capacity: s32;
    m_cv:          *float64;
}

ON_BezierCageMorph :: struct {
    #as using on_spacemorph: ON_SpaceMorph;

    m_bValid:  bool;

    // transforms world (x,y,z) coordinate into
    // unit cube.
    m_xyz2rst: ON_Xform;

    // function that maps unit cube into world
    m_rst2xyz: ON_BezierCage;
}

/*
Description:
Class for carefully adding long list of numbers.
*/
ON_Sum :: struct {
    sum :: enum s32 {
        _1_max_count :: 256;
        _2_max_count :: 512;
        _3_max_count :: 1024;

        sum1_max_count :: _1_max_count;
        sum2_max_count :: _2_max_count;
        sum3_max_count :: _3_max_count;
    }

    m_sum_err:        float64;
    m_pos_sum:        float64;
    m_neg_sum:        float64;

    m_zero_count:     s32; // number of zeros added
    m_pos_count:      s32; // number of positive numbers added
    m_neg_count:      s32; // number of negative numbers added

    m_pos_sum1_count: s32;
    m_pos_sum2_count: s32;
    m_pos_sum3_count: s32;
    m_pos_sum1:       [256] float64;
    m_pos_sum2:       [512] float64;
    m_pos_sum3:       [1024] float64;

    m_neg_sum1_count: s32;
    m_neg_sum2_count: s32;
    m_neg_sum3_count: s32;
    m_neg_sum1:       [256] float64;
    m_neg_sum2:       [512] float64;
    m_neg_sum3:       [1024] float64;
}

/*
Description:
Abstract function with an arbitrary number of parameters
and values.  ON_Evaluator is used to pass functions to
local solvers.
*/
ON_Evaluator :: struct {
    vtable: *ON_Evaluator_VTable;
    // Number of the function's input parameters. This number
    // is >= 1 and is specified in the constructor.
    m_parameter_count:    s32;

    // Number of the function's output values. This number
    // is >= 1 and is specified in the constructor.
    m_value_count:        s32;

    // If the function has a finite domain or periodic
    // parameters, then m_domain[] is an array of
    // m_parameter_count finite increasing intervals.
    m_domain:             ON_SimpleArray(ON_Interval);

    // If the function has periodic parameters, then
    // m_bPeriodicParameter[] is an array of m_parameter_count
    // bools.  If m_bPeriodicParameter[i] is true, then
    // the i-th parameter is periodic and m_domain[i] is
    // the fundamental domain for that parameter.
    m_bPeriodicParameter: ON_SimpleArray(bool);
}
ON_Evaluator_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Evaluator, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Evaluate: (this: *ON_Evaluator, parameters: *float64, values: *float64, jacobian: **float64) -> s32 #cpp_method;

    EvaluateHessian: (this: *ON_Evaluator, parameters: *float64, value: *float64, gradient: *float64, hessian: **float64) -> s32 #cpp_method;
}

ON_Evaluator_Destructor :: inline (this: *ON_Evaluator, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_Evaluator_Evaluate :: inline (this: *ON_Evaluator, parameters: *float64, values: *float64, jacobian: **float64) -> s32 { return this.vtable.Evaluate(this, parameters, values, jacobian); }

ON_Evaluator_EvaluateHessian :: inline (this: *ON_Evaluator, parameters: *float64, value: *float64, gradient: *float64, hessian: **float64) -> s32 { return this.vtable.EvaluateHessian(this, parameters, value, gradient, hessian); }

vtable :: (obj: *ON_Evaluator) -> *ON_Evaluator_VTable { return obj.vtable; }


// find a local zero of a 1 parameter function
ON_LocalZero1 :: struct {
    vtable: *ON_LocalZero1_VTable;
    // m_t0 and m_t1 specify the domain to search and must satisfy
    //
    //          1) m_t0 != m_t1
    //          2) f(m_t0) and f(m_t1) must have different signs
    //             or one must have absolute value <= m_f_tolerance
    m_t0:          float64;
    // m_t0 and m_t1 specify the domain to search and must satisfy
    //
    //          1) m_t0 != m_t1
    //          2) f(m_t0) and f(m_t1) must have different signs
    //             or one must have absolute value <= m_f_tolerance
    m_t1:          float64;

    // (>= 0.0)  If this value is > 0.0, then
    // the search is terminated when a parameter
    // "t" is found where |f(t)| <= m_f_tolerance.
    m_f_tolerance: float64;

    // (>= 0.0)  If this value is > 0.0, then
    // the search is terminated when a parameter
    // the root is bracketed in a domain with width
    // <= m_t_tolerance.
    m_t_tolerance: float64;

    // m_k[] is either nullptr or monotone increasing array of length m_k_count.
    //
    // This zero finder works on continuous piecewise c2 functions.
    // If the function is c2 on the interior of the domain
    //
    //          [min(t0,t1), max(m_t0,m_t1)]
    //
    // then there is no need to initialize m_k[].  If the function
    // is not c2 on the domain in question, then the m_k[m_count] array
    // is a list of parameters that define the c2 domains.  When m_k[]
    // is not nullptr, m_count must be >= 2 and m_k[] must be monotone
    // increasing and satisfy
    //
    //          m_k[0] <= min(m_t0,m_t1)
    //          and
    //          m_k[m_count-1] >= max(m_t0,m_t1).
    //
    // Duplicate values in m_k[] are permitted so that NURBS knot
    // vector arrays may be used directly.
    m_k:           *float64;

    // length of m_k[] array ( 0 or >= 2 ).
    m_k_count:     s32;

    m_s0:          float64;
    m_f0:          float64;
    m_s1:          float64;
    m_f1:          float64;
}
ON_LocalZero1_VTable :: struct #type_info_none {
    Destructor: (this: *ON_LocalZero1, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Evaluate: (this: *ON_LocalZero1, unknown0: float64, unknown1: *float64, unknown2: *float64, unknown3: s32) -> bool #cpp_method;
}

ON_LocalZero1_Destructor :: inline (this: *ON_LocalZero1, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_LocalZero1_Evaluate :: inline (this: *ON_LocalZero1, unknown0: float64, unknown1: *float64, unknown2: *float64, unknown3: s32) -> bool { return this.vtable.Evaluate(this, unknown0, unknown1, unknown2, unknown3); }

vtable :: (obj: *ON_LocalZero1) -> *ON_LocalZero1_VTable { return obj.vtable; }


ON_TextLog :: struct {
    vtable: *ON_TextLog_VTable;
    /// <summary>
    /// ON_TextLog::LevelOfDetail determines ow much detail is printed. Functions that have an ON_TextLog
    /// parameter, like the Dump() functions, may use the level of detail to tailor their output.
    /// may use the level of detail to tailor their output.
    /// </summary>
    LevelOfDetail :: enum u8 {
        inimum :: 0;

        edium  :: 1;

        aximum :: 2;

        Minimum :: inimum;

        Medium  :: edium;

        Maximum :: aximum;
    }

    m_pFile:             *FILE = null;
    m_pString:           *ON_wString = null;

    m_indent:            ON_String;
    m_double_format:     ON_String;
    m_double2_format:    ON_String;
    m_double3_format:    ON_String;
    m_double4_format:    ON_String;
    m_float_format:      ON_String;
    m_float2_format:     ON_String;
    m_float3_format:     ON_String;
    m_float4_format:     ON_String;

    m_line:              ON_String;

    m_beginning_of_line: s32 = 1;

    m_indent_size:       s32 = 0; // 0 use tabs, > 0 = number of spaces per indent level

    // Number of indentations at the start of a new line
    m_indent_count:      s32 = 0;

    m_bNullTextLog       := false;
    m_level_of_detail:   LevelOfDetail = .edium #align 2;
    m_color_format:      ON_Color.TextFormat = .DecimalRGBa;
    m_reserved1:         ON__UINT8 = 0;
}
ON_TextLog_VTable :: struct #type_info_none {
    Destructor: (this: *ON_TextLog, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    AppendText: (this: *ON_TextLog, s: *s16) -> void #cpp_method;

    AppendText_1: (this: *ON_TextLog, s: /*const*/ *u8) -> void #cpp_method;
}

ON_TextLog_Destructor :: inline (this: *ON_TextLog, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_TextLog_AppendText :: inline (this: *ON_TextLog, s: /*const*/ *s16) { this.vtable.AppendText(this, s); }

ON_TextLog_AppendText_1 :: inline (this: *ON_TextLog, s: /*const*/ *u8) { this.vtable.AppendText_1(this, s); }

vtable :: (obj: *ON_TextLog) -> *ON_TextLog_VTable { return obj.vtable; }


/*
Description:
ON_TextLogIndent is a class used with ON_TextLog to
push and pop indentation.
*/
ON_TextLogIndent :: struct {
    m_text_log: *ON_TextLog;
    m_bEnabled: bool;
}

/*
Description:
ON_TextLogLevelOfDetail is a class used with ON_TextLog to push and pop level of detail.
*/
ON_TextLogLevelOfDetail :: struct {
    m_text_log:              *ON_TextLog;
    m_saved_level_of_detail: ON_TextLog.LevelOfDetail;
}

ON_TextHash :: struct {
    #as using on_textlog: ON_TextLog;

    m_bApplyStringMap          := false;
    m_bApplyIdRemap            := false;

    m_remap_id:                ON_UUID;
    m_remap_id_list:           ON_UuidPairList;

    m_string_map_type:         ON_StringMapType = .Identity;
    m_string_map_ordinal_type: ON_StringMapOrdinalType = .Identity;
    m_string_map_local:        ON_Locale;

    m_output_text_log:         *ON_TextLog = null;

    m_sha1:                    ON_SHA1;
}

// This struct is used instead of ON_BoundingBox to avoid calling
// constructors.
ON_RTreeBBox :: struct {
    m_min: [3] float64;
    m_max: [3] float64;
}

ON_RTreeSphere :: struct {
    m_point:  [3] float64;
    m_radius: float64;
}

ON_RTreeCapsule :: struct {
    m_point:  [2] [3] float64;
    m_radius: float64;
    m_domain: [2] float64;
}

ON_RTreeBranch :: struct {
    m_rect: ON_RTreeBBox;

    // If ON_RTreeNode.m_level > 0, then m_child points to a child node.
    // If ON_RTreeNode.m_level == 0, then m_id identifies the leaf element.
    union {
        m_child: *ON_RTreeNode;
        m_id:    ON__INT_PTR;
    }
}

ON_RTreeLeaf :: struct {
    m_rect: ON_RTreeBBox;
    m_id:   ON__INT_PTR;
}

// The ON_RTreeNode is used at root, branch and leaf nodes.
// When m_level > 0, the node is a branch.
// When m_level = 0, the node is a leaf.
ON_RTreeNode :: struct {
    m_level:  s32; // =0 at leaf nodes, > 0 at branch nodes

    // The m_branch[] array contains m_count elements
    // 0 <= m_count <= ON_RTree_MAX_NODE_COUNT
    // m_count must be a signed int to insure signed compares work correctly
    m_count:  s32;
    m_branch: [6] ON_RTreeBranch;
}

// Passes data about the polyline being intersected
ON_RTreePolylineContext :: struct {
    m_polyline_pointindex: u32;
}

ON_RTreeSearchResult :: struct {
    m_capacity: s32; // m_id[] array capacity (search terminates when m_count == m_capacity)
    m_count:    s32; // number of elements in m_id[]
    m_id:       *ON__INT_PTR; // m_id[] = array of search results.
}

ON_RTreeMemPool :: struct {
    ON_RTreeListNode :: struct {}

    Blk :: struct {
        m_next: *Blk;
    }

    // linked list of unused ON_RTreeNode
    m_nodes:           *Blk = null;

    // linked list of unused ON_RTreeListNode
    m_list_nodes:      *Blk = null;

    // buffer for new allocations
    m_buffer:          *u8 = null;
    m_buffer_capacity: u64 = 0;

    m_blk_list:        *Blk = null; // linked list used to free all allocated memory
    m_sizeof_blk:      u64 = 0; // total amount of memory in each block.

    m_sizeof_heap:     u64 = 0; // total amount of heap memory in this rtree
}

////////////////////////////////////////////////////////////////
//
// ON_RTreeIterator
//
//   The ON_RTreeIterator class can be used to iterate each leaf
//   in an ON_RTree.
//
ON_RTreeIterator :: struct {
    anon_enum_18 :: enum s32 {
        MAX_STACK :: 32;
    }

    StackElement :: struct {
        m_node:        *ON_RTreeNode;
        m_branchIndex: s32; // must be a signed int to insure signed compares work correctly
    }

    m_stack: [32] StackElement; // stack
    m_sp:    *StackElement; // stack pointer (null or points into m_stack[])
    m_root:  *ON_RTreeNode; // root of tree being iterated
}

ON_RTree :: struct {
    ON_RTreePartitionVars :: struct {}

    m_root:     *ON_RTreeNode = null;
    m_reserved: u64 = 0;
    m_mem_pool: ON_RTreeMemPool;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class ON_MappingChannel
//
// Description:
//   ON_3dmObjectAttributes uses ON_MappingChannel to record
//   which texture mapping function to use when applying a texture
//   with a matching mapping channel id.
//   When an object is rendered, if the material has textures and
//   ON_Texture::m_mapping_channel_id = ON_MappingChannel::m_mapping_channel_id,
//   then the mapping with id m_mapping_id is used to map the texture.
//   Otherwise, the mesh m_T[] texture coordinates are used to
//   apply the texture.
//
ON_MappingChannel :: struct {
    m_mapping_id:         ON_UUID; // Identifies an ON_TextureMapping

    // RUNTIME textrure mapping table index.
    // If -1, it needs to be set.  This value is not saved int files.
    m_mapping_index:      s32;

    // ON_Texture's with a matching m_mapping_channel_id value
    // use the mapping identified by m_mapping_id.  This id
    // must be > 0 and <= 2147483647 (0x7FFFFFFF)
    m_mapping_channel_id: s32;

    // The default value of m_object_xform is the identity.
    // When an object that uses this mapping is transformed
    // by "T", m_object_xform is updated using the formula
    // m_object_xform = T*m_object_xform.  If texture coordinates
    // are lost and need to be recalculated and m_object_xform
    // is not the identity, then m_object_xform should be passed
    // to ON_TextureMapping::Evaluate() as the mesh_xform parameter.
    // When validating mapping coordinates, m_object_xform itself
    // be passed to HasMatchingTextureCoordinates() as the
    // object_transform parameter.
    m_object_xform:       ON_Xform;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class ON_MaterialRef
//
// Description:
//   ON_3dmObjectAttributes uses ON_MaterialRef to record which
//   rendering material and mappings a rendering plug-in wants to
//   use.  This allows different rendering plug-ins to have different
//   materials on the same object.  The values of
//   ON_3dmObjectAttributes.m_material_index and
//   ON_3dmObjectAttributes.m_matrial_source reflect the settings
//   of the renderer that is currently active.
//
ON_MappingRef :: struct {
    m_plugin_id:        ON_UUID; // Identifies a rendering plugin

    // Use AddMappingChannel() if you  want to add an
    // element to this array.
    //
    // Every mapping channel in this array must have
    // a distinct value of ON_MappingChannel.m_mapping_channel_id
    m_mapping_channels: ON_SimpleArray(ON_MappingChannel);
}

ON_MaterialRef :: struct {
    m_plugin_id:               ON_UUID; // Identifies a rendering plugin

    m_material_id:             ON_UUID; // Identifies an ON_Material

    m_material_backface_id:    ON_UUID; // Identifies an ON_Material

    m_material_source:         u8; // ON::object_material_source values
    m_reserved1:               u8;
    m_reserved2:               u8;
    m_reserved3:               u8;

    // RUNTIME material table index for m_material_id.
    // This value is not saved in files.  If -1, then it
    // needs to be set.
    m_material_index:          s32;

    // RUNTIME material table index for m_material_id.
    // This value is not saved in files.  If -1, then it
    // needs to be set.
    m_material_backface_index: s32;
}

ON_RenderingAttributes :: struct {
    m_materials: ON_ClassArray(ON_MaterialRef);
}

ON_ObjectRenderingAttributes :: struct {
    #as using on_renderingattributes: ON_RenderingAttributes;

    // Use AddMappingRef() or AddMappingChannel() if you
    // want to add an element to this array.
    //
    // Every mapping ref in this array must have
    // a distinct value of ON_MappingRef.m_plugin_id.
    m_mappings:         ON_ClassArray(ON_MappingRef);

    m_bCastsShadows:    bool; // default is true
    m_bReceivesShadows: bool; // default is true

    m_bits:             u8; // (m_bits & 1) == AdvancedTexturePreview();

    m_reserved1:        u8;
}

////////////////////////////////////////////////////////////////
//
//
/*
Description:
OpenNURBS classes derived from ON_Object use ON_ClassId to
store run-time type information

The ON_OBJECT_DECLARE and ON_OBJECT_IMPLEMENT macros generate
the code that creates and initializes the ON_ClassId for each
class.

The ON_Object::IsKindOf() and ON_Object::Cast() functions
use this run-time type information.
*/
ON_ClassId :: struct {
    m_pNext:            *ON_ClassId; // next in the linked list of class ids
    m_pBaseClassId:     *ON_ClassId; // base class id
    m_sClassName:       [80] u8;
    m_sBaseClassName:   [80] u8;

    // m_create points to a function that calls the default constructor.
    // m_create() is used to create classes from uuids when reading files.
    m_create:           #type () -> *ON_Object #c_call;
    m_uuid:             ON_UUID;
    m_mark:             s32; // bit 0x80000000 is used to indicate new extensions

    // The m_f[] pointers provide a way add a "virtual" function to
    // a class derived from ON_Object without breaking the SDK.
    // At each SDK breaking release, any functions that use this
    // mechanism are made into C++ virtual functions on the appropriate
    // classes. Currently, none of these are in use.
    m_class_id_version: u32;
    m_f1:               *void;
    m_f2:               *void;
    m_f3:               *void;
    m_f4:               *void;
    m_f5:               *void;
    m_f6:               *void;
    m_f7:               *void;
    m_f8:               *void;
}

ON_UserString :: struct {
    m_key:          ON_wString;
    m_string_value: ON_wString;
}

// Description:
//   Pure virtual base class for all classes that must provide
//   runtime class id or support object level 3DM serialization
ON_Object :: struct {
    vtable: *ON_Object_VTable;
    /*
    Description:
    When a userdata item is copied or moved from a source object to
    a destination object, the ON_Object::UserDataConflictResolution
    enum values specify how conflicts are resolved.
    Remark:
    A userdata item "conflict" occurs when both the destination
    and source object have a user data item with the same
    value of ON_UserData::m_userdata_uuid.
    */
    UserDataConflictResolution :: enum u8 {
        destination_object       :: 0;
        source_object            :: 1;
        source_copycount_gt      :: 2;
        source_copycount_ge      :: 3;
        destination_copycount_gt :: 4;
        destination_copycount_ge :: 5;
        delete_item              :: 6;
    }

    m_userdata_list: *ON_UserData;
}
ON_Object_VTable :: struct #type_info_none {
    ClassId: (this: *ON_Object) -> *ON_ClassId #cpp_method;
    CopyFrom: (this: *ON_Object, unknown0: *ON_Object) -> bool #cpp_method;
    Internal_DeepCopy: (this: *ON_Object) -> *ON_Object #cpp_method;

    Destructor: (this: *ON_Object, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    MemoryRelocate: (this: *ON_Object) -> void #cpp_method;

    IsValid: (this: *ON_Object, text_log: *ON_TextLog = null) -> bool #cpp_method;

    Dump: (this: *ON_Object, unknown0: *ON_TextLog) -> void #cpp_method;

    SizeOf: (this: *ON_Object) -> u32 #cpp_method;

    DataCRC: (this: *ON_Object, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;

    Write: (this: *ON_Object, binary_archive: *ON_BinaryArchive) -> bool #cpp_method;

    Read: (this: *ON_Object, binary_archive: *ON_BinaryArchive) -> bool #cpp_method;

    ObjectType: (this: *ON_Object) -> ON.object_type #cpp_method;

    ModelObjectId: (this: *ON_Object) -> ON_UUID #cpp_method;

    UpdateReferencedComponents: (this: *ON_Object, source_manifest: *ON_ComponentManifest, destination_manifest: *ON_ComponentManifest, manifest_map: *ON_ManifestMap) -> bool #cpp_method;

    ClearComponentStates: (this: *ON_Object, component_index: ON_COMPONENT_INDEX, states_to_clear: ON_ComponentStatus) -> u32 #cpp_method;

    ClearComponentStates_1: (this: /*const*/ *ON_Object, states_to_clear: ON_ComponentStatus) -> u32 #cpp_method;

    GetComponentsWithSetStates: (this: *ON_Object, states_filter: ON_ComponentStatus, bAllEqualStates: bool, components: *ON_SimpleArray(ON_COMPONENT_INDEX)) -> u32 #cpp_method;

    SetComponentStates: (this: *ON_Object, component_index: ON_COMPONENT_INDEX, states_to_set: ON_ComponentStatus) -> u32 #cpp_method;

    SetComponentStatus: (this: *ON_Object, component_index: ON_COMPONENT_INDEX, status_to_copy: ON_ComponentStatus) -> u32 #cpp_method;

    AggregateComponentStatus: (this: *ON_Object) -> ON_AggregateComponentStatus #cpp_method #cpp_return_type_is_non_pod;

    MarkAggregateComponentStatusAsNotCurrent: (this: *ON_Object) -> void #cpp_method;

    DeleteComponents: (this: *ON_Object, ci_list: *ON_COMPONENT_INDEX, ci_count: u64) -> bool #cpp_method;

    DestroyRuntimeCache: (this: *ON_Object, bDelete := true) -> void #cpp_method;
}

ON_Object_ClassId :: inline (this: *ON_Object) -> *ON_ClassId { return this.vtable.ClassId(this); }
ON_Object_CopyFrom :: inline (this: *ON_Object, unknown0: *ON_Object) -> bool { return this.vtable.CopyFrom(this, unknown0); }
ON_Object_Internal_DeepCopy :: inline (this: *ON_Object) -> *ON_Object { return this.vtable.Internal_DeepCopy(this); }

ON_Object_Destructor :: inline (this: *ON_Object, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_Object_MemoryRelocate :: inline (this: *ON_Object) { this.vtable.MemoryRelocate(this); }

ON_Object_IsValid :: inline (this: *ON_Object, text_log: *ON_TextLog = null) -> bool { return this.vtable.IsValid(this, text_log); }

ON_Object_Dump :: inline (this: *ON_Object, unknown0: *ON_TextLog) { this.vtable.Dump(this, unknown0); }

ON_Object_SizeOf :: inline (this: *ON_Object) -> u32 { return this.vtable.SizeOf(this); }

ON_Object_DataCRC :: inline (this: *ON_Object, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

ON_Object_Write :: inline (this: *ON_Object, binary_archive: *ON_BinaryArchive) -> bool { return this.vtable.Write(this, binary_archive); }

ON_Object_Read :: inline (this: *ON_Object, binary_archive: *ON_BinaryArchive) -> bool { return this.vtable.Read(this, binary_archive); }

ON_Object_ObjectType :: inline (this: *ON_Object) -> ON.object_type { return this.vtable.ObjectType(this); }

ON_Object_ModelObjectId :: inline (this: *ON_Object) -> ON_UUID { return this.vtable.ModelObjectId(this); }

ON_Object_UpdateReferencedComponents :: inline (this: *ON_Object, source_manifest: *ON_ComponentManifest, destination_manifest: *ON_ComponentManifest, manifest_map: *ON_ManifestMap) -> bool { return this.vtable.UpdateReferencedComponents(this, source_manifest, destination_manifest, manifest_map); }

ON_Object_ClearComponentStates :: inline (this: /*const*/ *ON_Object, component_index: ON_COMPONENT_INDEX, states_to_clear: ON_ComponentStatus) -> u32 { return this.vtable.ClearComponentStates(this, component_index, states_to_clear); }

ON_Object_ClearComponentStates_1 :: inline (this: /*const*/ *ON_Object, states_to_clear: ON_ComponentStatus) -> u32 { return this.vtable.ClearComponentStates_1(this, states_to_clear); }

ON_Object_GetComponentsWithSetStates :: inline (this: *ON_Object, states_filter: ON_ComponentStatus, bAllEqualStates: bool, components: *ON_SimpleArray(ON_COMPONENT_INDEX)) -> u32 { return this.vtable.GetComponentsWithSetStates(this, states_filter, bAllEqualStates, components); }

ON_Object_SetComponentStates :: inline (this: *ON_Object, component_index: ON_COMPONENT_INDEX, states_to_set: ON_ComponentStatus) -> u32 { return this.vtable.SetComponentStates(this, component_index, states_to_set); }

ON_Object_SetComponentStatus :: inline (this: *ON_Object, component_index: ON_COMPONENT_INDEX, status_to_copy: ON_ComponentStatus) -> u32 { return this.vtable.SetComponentStatus(this, component_index, status_to_copy); }

ON_Object_AggregateComponentStatus :: inline (this: *ON_Object) -> ON_AggregateComponentStatus { return this.vtable.AggregateComponentStatus(this); }

ON_Object_MarkAggregateComponentStatusAsNotCurrent :: inline (this: *ON_Object) { this.vtable.MarkAggregateComponentStatusAsNotCurrent(this); }

ON_Object_DeleteComponents :: inline (this: *ON_Object, ci_list: *ON_COMPONENT_INDEX, ci_count: u64) -> bool { return this.vtable.DeleteComponents(this, ci_list, ci_count); }

ON_Object_DestroyRuntimeCache :: inline (this: *ON_Object, bDelete := true) { this.vtable.DestroyRuntimeCache(this, bDelete); }

vtable :: (obj: *ON_Object) -> *ON_Object_VTable { return obj.vtable; }


/*
Description:
The ON_ModelComponent class is a base class for all components in a
model and manages the index, id and other information common to all
components in a model.
*/
ON_ModelComponent :: struct {
    #as using on_object: ON_Object;

    Type :: enum u8 {
        Unset              :: 0;

        Image              :: 1;

        TextureMapping     :: 2;

        Material           :: 3;

        RenderMaterial     :: 3;

        LinePattern        :: 4;

        Layer              :: 5;

        Group              :: 6;

        TextStyle          :: 7;

        DimStyle           :: 8;

        RenderLight        :: 9;

        HatchPattern       :: 10;

        InstanceDefinition :: 11;

        ModelGeometry      :: 12;

        HistoryRecord      :: 13;

        RenderContent      :: 14;

        EmbeddedFile       :: 15;

        ObsoleteValue      :: 16;

        SectionStyle       :: 17;

        NumOf              :: 18;

        Mixed              :: 254;
    }

    /*
    The ON_ModelComponent::Attributes enum is used to set bits that identify
    model component attributes.
    */
    Attributes :: enum u32 {
        NoAttributes                   :: 0;

        ComponentSerialNumberAttribute :: 1;
        TypeAttribute                  :: 2;
        ModelSerialNumberAttribute     :: 4;
        IdAttribute                    :: 8;
        IndexAttribute                 :: 16;
        NameAttribute                  :: 32;
        ParentIdAttribute              :: 64;
        DeletedNameAttribute           :: 128;
        ComponentStatusAttribute       :: 256;

        BinaryArchiveAttributes        :: 120;

        AllAttributes                  :: 511;

        SystemComponentAttribute       :: 32768;
    }

    m_runtime_serial_number:         ON__UINT64;
    m_content_version_number:        ON__UINT64 = 0;
    m_model_serial_number:           ON__UINT32 = 0;
    m_reference_model_serial_number: ON__UINT32 = 0;
    m_linked_idef_serial_number:     ON__UINT32 = 0;
    m_component_type:                Type = .Unset;

    m_locked_status:                 ON__UINT16 = 0;
    m_set_status:                    ON__UINT16 = 0;
    m_component_status:              ON_ComponentStatus;
    m_reserved2:                     ON__UINT16 = 0;

    // m_component_index is the index of the component in the model identified
    // by m_model_serial_number.
    //
    // Some components use small negative indices (-1,-2,-3,...) to identify
    // default or constant components.  An incomplete list includes these:
    //   ON_TextStyle::Default, (index = -1)
    //   ON_TextStyle::ByLayer,  (index = -2)
    //   ON_TextStyle::ByParent,  (index = -3)
    //   ON_Linetype::Continuous,  (index = -1)
    //   ON_Linetype::ByLayer,  (index = -2)
    //   ON_Linetype::ByParent,  (index = -3)
    //
    // ON_UNSET_INT_INDEX is a large negative number.
    m_component_index:               ON__INT32 = -2147483647;
    m_reserved3:                     ON__UINT32 = 0;

    m_component_id:                  ON_UUID;
    m_component_parent_id:           ON_UUID;

    // lazy evaluation is used top initialize m_component_name_hash
    m_component_name_hash:           ON_NameHash;

    m_component_name:                ON_wString;
}

ON_ModelComponentContentMark :: struct {
    m_component_id:                     ON_UUID;
    m_component_serial_number:          ON__UINT64 = 0;
    m_component_content_version_number: ON__UINT64 = 0;
    m_component_type:                   ON_ModelComponent.Type = .Unset;

    m_reserved1:                        u8 = 0;
    m_reserved2:                        u8 = 0;
    m_reserved3:                        u8 = 0;
    m_reserved4:                        u32 = 0;
}
#import "Math";
ON_ModelComponentTypeIterator :: struct {
    m_type_count:    ON__INT32 = 0;

    // -1 iterated before first, m_type_count = iteratated past last
    m_current_index: ON__INT32 = S32_MAX;

    m_types:         [32] ON_ModelComponent.Type;
}

/// <summary>
/// ON_ModelComponentReference is a persistent reference to a model component.
/// ON_ModelComponentReference and ON_ModelComponentWeakReference are based on
/// like std::shared_ptr and std::weak_ptr.
/// </summary>
ON_ModelComponentReference :: struct {
    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_sp is private and all code that manages m_sp is explicitly implemented in the DLL.
    m_sp: std.shared_ptr(ON_ModelComponent);
}

/// <summary>
/// ON_ModelComponentWeakReference is a weak shared reference to a model component.
/// ON_ModelComponentReference and ON_ModelComponentWeakReference are based on
/// like std::shared_ptr and std::weak_ptr.
/// </summary>
ON_ModelComponentWeakReference :: struct {
    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_weak_sp is private and all code that manages m_weak_sp is explicitly implemented in the DLL.
    m_wp: std.weak_ptr(ON_ModelComponent);
}

/////////////////////////////////////////////////////////////////////
//
// ON_Buffer
//
ON_Buffer_ErrorHandler :: #type (unknown0: *ON_Buffer) -> void #c_call;

ON_Buffer :: struct {
    seek_from :: enum s32 {
        beginning_of_file :: 0;
        current_position  :: 1;
        end_of_file       :: 2;

        seek_from_beginning_of_file :: beginning_of_file;
        seek_from_current_position  :: current_position;
        seek_from_end_of_file       :: end_of_file;
    }

    m_buffer_size:      ON__UINT64; // total number of bytes in the buffer
    m_current_position: ON__UINT64;

    ON_BUFFER_SEGMENT :: struct {}
    m_first_segment:    *ON_BUFFER_SEGMENT;
    m_last_segment:     *ON_BUFFER_SEGMENT;
    m_current_segment:  *ON_BUFFER_SEGMENT;

    m_error_handler:    ON_Buffer_ErrorHandler;

    m_last_error:       ON__UINT32;
    m_reserved:         [12] u8;
}

/////////////////////////////////////////////////////////////////////
//
// ON_BinaryArchive
//      virtual class for CPU independent serialization
//
// ON_BinaryFile
//      simple class for CPU independent binary file I/O
//      includes optional CRC support
//
ON_3DM_CHUNK :: struct {
    // In read or write_using_fseek mode, this is the
    // file position of first byte after chunk's length.
    // In write_using_buffer mode, this of the m_buffer[]
    // position of first byte after chunk's length.
    m_offset:    u64;

    m_typecode:  u32;
    m_value:     s32;
    m_do_length: s32; // true if chunk is a long chunk with length
    m_do_crc16:  ON__UINT16; // 16 bit CRC using CCITT polynomial
    m_crc16:     ON__UINT16;
    m_do_crc32:  ON__UINT32; // 32 bit CRC
    m_crc32:     ON__UINT32;
}

ON_3DM_BIG_CHUNK :: struct {
    m_start_offset: ON__UINT64 = 0; // When reading or writing 3dm archives, this is the

    m_end_offset:   ON__UINT64 = 0; // When writing 3dm archives, this is the archive 

    m_big_value:    ON__INT64 = 0;
    m_typecode:     ON__UINT32 = 0;
    m_bLongChunk:   ON__UINT8 = 0; // true if chunk is a long chunk and m_big_value is a length.

    m_reserved1:    ON__UINT8 = 0;
    m_reserved2:    ON__UINT8 = 0;
    m_reserved3:    ON__UINT8 = 0;

    m_do_crc16:     ON__UINT8 = 0; // true (1) if we are calculating 16 bit CRC
    m_do_crc32:     ON__UINT8 = 0; // true (1) if we are calculating 32 bit CRC
    m_crc16:        ON__UINT16 = 0; // current 16 bit CRC value
    m_crc32:        ON__UINT32 = 0; // current 32 bit CRC value
}

ON_UserDataItemFilter :: struct {
    // The application id can be the id for a plug-in, Rhino or opennurbs
    m_application_id: ON_UUID;

    // The item id for object user data is the value of ON_UserData.m_userdata_uuid.
    // The item id for user table is the application id.
    // A nil item id indicates the setting is applied to all object user data
    // and user table information for the specified application.
    m_item_id:        ON_UUID;

    // If application id and item id match and m_bSerializeEnabled,
    // does not match, then the ON_UserDataItemFilter with the
    // largest value of m_precedence is used.
    m_precedence:     u32;

    // bSerializationEnabled is true if reading and writing are permitted.
    // bSerializationEnabled is false if reading and writing are prevented.
    m_bSerialize:     bool;
}

ON_ComponentManifest :: struct {
    anon_enum_19 :: enum s32 {
        UnsetComponentIndex :: -2147483647;
    }

    ON_ComponentManifestImpl :: struct {}
    m_impl: *ON_ComponentManifestImpl = null;
}

ON_ComponentManifestItem :: struct {
    m_status_bits:                     ON__UINT32 = 0;
    m_component_type:                  ON_ModelComponent.Type = .Unset;
    m_reserved1:                       ON__UINT8 = 0;
    m_reserved2:                       ON__UINT16 = 0;
    m_reserved3:                       ON__UINT32 = 0;
    m_index:                           s32 = -2147483647;
    m_component_runtime_serial_number: ON__UINT64 = 0;
    m_id:                              ON_UUID;
    m_name_hash:                       ON_NameHash;
}

ON_ManifestMapItem :: struct {
    m_component_type:    ON_ModelComponent.Type = .Unset;

    m_reserved:          u32 = 0;

    m_source_index:      s32 = -2147483647;
    m_destination_index: s32 = -2147483647;

    m_source_id:         ON_UUID;
    m_destination_id:    ON_UUID;
}

/*
Description:
ON_ManifestIdentificationMap is used to record a map from
a source manifest to a destination manifest when the index or id
values change. This is common when reading and writing archives
and when merging models.
*/
ON_ManifestMap :: struct {
    ON_ManifestMapImpl :: struct {}
    m_impl: *ON_ManifestMapImpl = null;
}

ON_3dmArchiveTableType :: enum u32 {
    Unset                     :: 0;

    start_section             :: 1;

    properties_table          :: 2;
    settings_table            :: 4;
    bitmap_table              :: 8;
    texture_mapping_table     :: 16;
    material_table            :: 32;
    linetype_table            :: 64;
    layer_table               :: 128;
    group_table               :: 256;
    text_style_table          :: 512;
    leader_style_table        :: 1024;
    dimension_style_table     :: 2048;
    light_table               :: 4096;
    hatchpattern_table        :: 8192;
    instance_definition_table :: 16384;
    object_table              :: 32768;
    historyrecord_table       :: 65536;
    user_table                :: 131072;

    end_mark                  :: 1073741824;
}

/*
Description:
Context for an annotation object. This context is required when
converting current annotation objects to and from formats used
in earlier versions and is typically used when reading and
writing 3dm archives.
*/
ON_3dmAnnotationContext :: struct {
    m_binary_archive:                 *ON_BinaryArchive = null;

    // V6 table dimstyle. If an override dimstyle is in use,
    // this is the "parent dimstyle" referenced by the override.
    m_parent_dim_style:               *ON_DimStyle = null;
    m_managed_parent_dim_style:       *ON_DimStyle = null;

    m_override_dim_style:             *ON_DimStyle = null;
    m_managed_override_dim_style:     *ON_DimStyle = null;

    m_annotation_settings:            *ON_3dmAnnotationSettings = null;
    m_managed_annotation_settings:    *ON_3dmAnnotationSettings = null;
    m_view_context:                   ON.active_space = .no_space;
    m_model_length_unit_system:       ON.LengthUnitSystem = .None;
    m_page_length_unit_system:        ON.LengthUnitSystem = .None;

    // V5 archive dim style index
    m_V5_3dm_archive_dim_style_index: s32 = -2147483647;
}

ON_3dmArchiveTableStatus :: struct {
    m_table_type:              ON_3dmArchiveTableType = .Unset;

    // number of table items
    m_item_count:              u32 = 0;

    // Number of crc errors found during archive reading.
    // If > 0, then the archive is corrupt. See the table
    // status information below to determine where the
    // errors occurred.
    m_crc_error_count:         u32 = 0;

    // Number of other types of serious errors found during archive reading
    // or writing.
    // If > 0, then the archive is corrupt. See the table status information
    // below to determine where the errors occurred.
    m_critical_error_count:    u32 = 0;

    // Number of other types of serious errors found during archive reading.
    // If > 0, then the archive is corrupt. See the table status information
    // below to determine where the errors occurred.
    m_recoverable_error_count: u32 = 0;

    TableState :: enum u32 {
        Unset      :: 0;
        Started    :: 1;
        InProgress :: 2;
        Finished   :: 3;
        NotFound   :: 4;
    }

    m_state:                   TableState = .Unset;
}

ON_BinaryArchive :: struct {
    vtable: *ON_BinaryArchive_VTable;
    ON_OBSOLETE_V5_Annotation :: struct {}

    eStorageDeviceError :: enum u32 {
        None                    :: 0;

        WriteFailed             :: 4294967281;
        SeekFailedDuringWriting :: 4294967282;
        ReadFailed              :: 4294967288;
        SeekFailedDuringReading :: 4294967289;
        UnknownDeviceError      :: 4294967295;
    }

    ON__3dmV1_XDATA :: struct {}

    // 1,2,3,4,5 (obsolete 32-bit chunk sizes)
    // 50,60,70,... (64-bit chunk sizes)
    m_3dm_version:                               s32 = 0;

    m_3dm_v1_layer_index:                        s32 = 0;
    m_3dm_v1_material_index:                     s32 = 0;

    m_3dm_opennurbs_version:                     u32 = 0;

    m_archive_runtime_environment:               ON.RuntimeEnvironment = .Unset;

    // When a 3dm archive is saved from an MFC application that supports
    // Windows linking/embedding, the first 5kb to 1mb of the file contains
    // information that is put there by MFC.  m_3dm_start_section_offset
    // records the offset into the file where the 3dm archive actually begins.
    m_3dm_start_section_offset:                  u64 = 0;

    /*Read3dmTableRecordBegin
    m_3dm_previous_table = 3dm archive table that was most recently read/written.
    m_3dm_active_table = 3dm archive table currently being read/written
    */
    m_3dm_previous_table:                        ON_3dmArchiveTableType = .Unset;
    m_3dm_active_table:                          ON_3dmArchiveTableType = .Unset;

    // If reading/writing a table fails, m_3dm_failed_table identifies the first failure.
    m_3dm_first_failed_table:                    ON_3dmArchiveTableType = .Unset;

    m_user_data_depth:                           s32 = 0; // > 0 when user data is being read or written

    ON_3dmTableStatusLink :: struct {}
    // 3dm archive status information
    m_3dm_table_status_list:                     *ON_3dmTableStatusLink = null;

    m_current_positionX:                         ON__UINT64 = 0;

    m_crc_error_count:                           u32 = 0; // number of chunks that have a bad crc

    // Number of critical errors.  These errors are more serious than a CRC error.
    // If a critical error occurs, the information being read or written is
    // so corrupted that chunk accounting is failing or the calling code is deeply flawed.
    m_critical_error_count:                      u32 = 0;

    // ON_BinaryArchive::eStorageDeviceError values are used to set
    // m_storage_device_error.
    // ON_BinaryArchive::StorageDeviceError() returns the value.
    m_storage_device_error:                      u32 = 0;

    // The bits in m_error_message_mask are used to mask errors
    // when we know we are doing something that may generate an
    // error.
    //
    // bit 0x00000001
    //   Setting this bit masks an error when attempting to read 4 bytes
    //   at the end of a file.
    //   V1 files do not have a table structure and are read using
    //   multiple passes and there are valid situations where a
    //   4 byte read is attempted at the end of a file.
    //   This situation also occurs when a damaged file is missing a table
    //   or contains tables in the wrong order and the table must be searched
    //   for by typecode.
    //
    // bit 0x00000002
    //   Some v1 files do not have an end mark.  When reading
    //   these v1 files bit 0x02 is set.
    //
    // bit 0x00000004
    //   Requested read may go beyond end of file.
    //   One situation where this happens is when a table is not at the
    //   expected location in a file,
    m_error_message_mask:                        u32 = 0;

    m_3dm_end_mark_length:                       ON__UINT64 = 0;

    m_chunk:                                     ON_SimpleArray(ON_3DM_BIG_CHUNK);

    m_bDoChunkCRC                                := false; // true if active chunk crc status should be checked

    // and updated.
    m_bChunkBoundaryCheck                        := false;

    ON_CompressorImplementation :: struct {}
    m_compressor:                                *ON_CompressorImplementation = null;

    // endian-ness of the cpu reading this file.
    // 3dm files are always saved with little endian byte order.
    m_endian:                                    ON.endian;

    m_mode:                                      ON.archive_mode : .unset_archive_mode;

    // user data and user table reading and writing filter
    // If m_user_data_filter is empty, then all user data and user tables are read/written.
    // If m_user_data_filter is not empty, then the first element has both ids=nil, precedence=0,
    // and m_bSerialize = default setting. If there are any elements after the first element,
    // the must have m_application_id != nil and the value of m_bSerialize overrides the
    // default setting.  If there are multiple elements with the same application and item id,
    // the most recently added element is used.
    m_user_data_filter:                          ON_SimpleArray(ON_UserDataItemFilter);

    // bits corresponded to ON::object_type flags.
    // If the bit is set, then the mesh will be saved in the 3dm file.
    // (RhinoCommon: if default is changed, sync with File3dmWriteOptions.RenderMeshesFlags)
    m_save_3dm_render_mesh_flags:                ON__UINT32 = 4294967295;
    m_save_3dm_analysis_mesh_flags:              ON__UINT32 = 4294967295;

    m_bSave3dmPreviewImage                       := true;

    m_bUseBufferCompression                      := true;

    m_bReservedA                                 := false;
    m_bReservedB                                 := false;
    m_bReservedC                                 := false;
    m_bReservedD                                 := false;
    m_bReservedE                                 := false;
    m_bReservedF                                 := false;

    // Reading:
    //   m_manifest is a list of what has been read from the 3dm archive.
    //   m_manifest_map is a map from the 3dm archive index and id to the
    //   model index and id. The map is maintained by the application
    //   reading the file calling AddManifestMapItem() when read items
    //   are added to the model.
    // Writing:
    //   m_manifest is a list of what has been written to the 3dm archive.
    //   m_manifest_map maps model index and id to 3dm archive index and id.
    //   m_manifest_map is automatically maintained by the ON_BinaryArchive
    //   writing code because the index and id changes happen internally
    //   in 3dm archive writing functions.
    m_manifest:                                  ON_ComponentManifest;
    m_manifest_map:                              ON_ManifestMap;

    // True: (default state)
    //  Read3dmReferencedComponentIndex() and Write3dmReferencedComponentIndex() will automatically
    //  adjust component index references so they are valid.
    // False: (uncommon)
    //  Read3dmReferencedComponentIndex() and Write3dmReferencedComponentIndex() will not
    //  adjust component index references so they are valid.
    m_bReferencedComponentIndexMapping           := true;

    // True: (default state)
    //  Read3dmReferencedComponentId() and Write3dmReferencedComponentId() will automatically
    //  adjust component id references so they are valid.
    // False: (uncommon)
    //  Read3dmReferencedComponentId() and Write3dmReferencedComponentId() will not
    //  adjust component id references so they are valid.
    m_bReferencedComponentIdMapping              := true;

    // If the archive is a file system item (file), then
    // these strings specify the name of the file
    m_archive_file_name:                         ON_wString;
    m_archive_directory_name:                    ON_wString;
    m_archive_full_path:                         ON_wString; // = archive_directory_name + path separator + archive_file_name

    // If the archive is being read, this is the name
    // of the file where it was written.
    // If false = ON_wString::EqualPath(m_archive_full_path,m_archive_saved_as_full_path),
    // then file has been moved or copied since it was saved.
    // When reading a file, this value is set by ON_BinaryArchive::Read3dmProperties()
    // When writing a file, this value is set by SetArchiveFullPath().
    m_archive_saved_as_full_path:                ON_wString;

    /*
    ON_BinaryArchive::Read3dmProperties() sets m_bArchiveMoved to true if
    the 3dm archive being read is not in the same file system location as where
    it was written.  This piece of information is useful when attempting to find
    referenced files that are not where they were when the 3dm archive was saved.
    */
    m_b3dmArchiveMoved                           := false;

    m_SetModelComponentSerialNumbers             := false;
    m_bCheckForRemappedIds                       := false;

    // Expert testers who need to create a corrupt 3dm file
    // call IntentionallyWriteCorrupt3dmStartSectionForExpertTesting() before writing
    // the 3dm file.
    m_IntentionallyWriteCorrupt3dmStartSection:  u8 = 0;
    m_reservedB                                  := false;
    m_model_serial_number:                       u32 = 0;
    m_reference_model_serial_number:             u32 = 0;
    m_instance_definition_model_serial_number:   u32 = 0;
    m_reserved1:                                 u32 = 0;
    m_reserved2:                                 ON__UINT_PTR = 0;

    // ids of plug-ins that support saving older (V3) versions
    // of user data.  This information is filled in from the
    // list of plug-ins passed in whenteh settings are saved.
    m_V3_plugin_id_list:                         ON_SimpleArray(ON_UUID);

    ON__3dmV1LayerIndex :: struct {}
    m_V1_layer_list:                             *ON__3dmV1LayerIndex = null;

    // m_archive_text_style_table and m_archive_dim_style_table are private and not used by inline functions.
    // No DLL interface is required.
    m_annotation_context:                        ON_3dmAnnotationContext;

    // The m_archive_text_style_table[] array is used when reading archives.
    // It contains the text styles read from the archive
    m_archive_text_style_table:                  ON_SimpleArray(*ON_TextStyle);

    // The m_dim_style_index_text_style_index[] is used when reading archives.
    // ON_2dex.i = text style archive index.
    // ON_2dex.j = dimension style archive index.
    m_text_style_to_dim_style_archive_index_map: ON_SimpleArray(ON_2dex);

    // This m_archive_dim_style_table[] array is used when reading
    // and writing archives. This information is required when reading
    // and writing archives from previous versions.
    // - When writing, the dimstyles are copies of the model dimstyles
    //   and have model ids and indices.
    // - When reading, the dimstyles are copies of the archive dimstyles
    //   and have archive ids and indices.
    m_archive_dim_style_table:                   ON_SimpleArray(*ON_DimStyle);
    m_DELETE_ME_archive_dim_style_overrides:     ON_SimpleArray(*ON_DimStyle);
    m_bLegacyOverrideDimStylesInArchive          := false;

    m_archive_current_dim_style:                 *ON_DimStyle = null;

    // m_archive_dim_style_table_status values:
    // READING:
    // 0 = not started
    //   1 = BeginWrite3dmDimStyle() has been called,
    //       m_archive_text_style_table[] is valid,
    //       and Read3dmDimStyle() can be called.
    //   2 = All entries of m_archive_text_style_table[] have been read by Read3dmDimStyle().
    //   3 = EndRead3dmDimStyle() has been called.
    // WRITING:
    //   0 = not started
    //   1 = BeginWrite3dmDimStyle() has been called and Write3dmDimStyle() can be called.
    //   2 = Write3dmDimStyle() has saved at least one dimstyle
    //   3 = EndWrite3dmDimStyle() has been called.
    m_archive_dim_style_table_status:            u32 = 0;

    // index in m_archive_text_style_table[] where Read3dmDimStyle() should
    // begin searching for the next dimstyle to "read".
    m_archive_dim_style_table_read_index:        u32 = 4294967295;

    m_archive_3dm_start_section_comment:         ON_String;
    m_archive_3dm_properties:                    *ON_3dmProperties = null;
    m_archive_3dm_settings:                      *ON_3dmSettings = null;
}
ON_BinaryArchive_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BinaryArchive, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Internal_CurrentPositionOverride: (this: *ON_BinaryArchive) -> ON__UINT64 #cpp_method;

    Internal_SeekFromCurrentPositionOverride: (this: *ON_BinaryArchive, unknown0: s32) -> bool #cpp_method;

    Internal_SeekToStartOverride: (this: *ON_BinaryArchive) -> bool #cpp_method;

    AtEnd: (this: *ON_BinaryArchive) -> bool #cpp_method;

    Internal_ReadOverride: (this: *ON_BinaryArchive, unknown0: u64, unknown1: *void) -> u64 #cpp_method;

    Internal_WriteOverride: (this: *ON_BinaryArchive, unknown0: u64, unknown1: *void) -> u64 #cpp_method;

    Flush: (this: *ON_BinaryArchive) -> bool #cpp_method;

    LoadUserDataApplication: (this: *ON_BinaryArchive, application_id: ON_UUID) -> s32 #cpp_method;
}

ON_BinaryArchive_Destructor :: inline (this: *ON_BinaryArchive, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_BinaryArchive_Internal_CurrentPositionOverride :: inline (this: *ON_BinaryArchive) -> ON__UINT64 { return this.vtable.Internal_CurrentPositionOverride(this); }

ON_BinaryArchive_Internal_SeekFromCurrentPositionOverride :: inline (this: *ON_BinaryArchive, unknown0: s32) -> bool { return this.vtable.Internal_SeekFromCurrentPositionOverride(this, unknown0); }

ON_BinaryArchive_Internal_SeekToStartOverride :: inline (this: *ON_BinaryArchive) -> bool { return this.vtable.Internal_SeekToStartOverride(this); }

ON_BinaryArchive_AtEnd :: inline (this: *ON_BinaryArchive) -> bool { return this.vtable.AtEnd(this); }

ON_BinaryArchive_Internal_ReadOverride :: inline (this: *ON_BinaryArchive, unknown0: u64, unknown1: *void) -> u64 { return this.vtable.Internal_ReadOverride(this, unknown0, unknown1); }

ON_BinaryArchive_Internal_WriteOverride :: inline (this: *ON_BinaryArchive, unknown0: u64, unknown1: *void) -> u64 { return this.vtable.Internal_WriteOverride(this, unknown0, unknown1); }

ON_BinaryArchive_Flush :: inline (this: *ON_BinaryArchive) -> bool { return this.vtable.Flush(this); }

ON_BinaryArchive_LoadUserDataApplication :: inline (this: *ON_BinaryArchive, application_id: ON_UUID) -> s32 { return this.vtable.LoadUserDataApplication(this, application_id); }

vtable :: (obj: *ON_BinaryArchive) -> *ON_BinaryArchive_VTable { return obj.vtable; }


ON_3dmGoo :: struct {
    m_typecode: u32;
    m_value:    s32;
    m_goo:      *u8;
    m_next_goo: *ON_3dmGoo;
    m_prev_goo: *ON_3dmGoo;
}

ON_BinaryFile :: struct {
    #as using on_binaryarchive: ON_BinaryArchive;

    // Implementation
    m_fp:                     *FILE = null;
    m_bCloseFileInDestructor  := false;

    // if m_memory_buffer_capacity is zero, then Write() uses
    // fwrite() directly.  If m_memory_buffer_capacity is
    // greater than zero, then Write() buffers its results
    // into m_memory_buffer.  This is provided to work around
    // bugs in some networks that result in extremely slow
    // performance when seeking is used.
    m_memory_buffer_capacity: u64 = 0;
    m_memory_buffer_size:     u64 = 0;
    m_memory_buffer_ptr:      u64 = 0;
    m_memory_buffer:          *u8 = null;
}

ON_BinaryArchiveBuffer :: struct {
    #as using on_binaryarchive: ON_BinaryArchive;

    // Buffer being read/written.
    m_buffer: *ON_Buffer;
}

ON_Read3dmBufferArchive :: struct {
    #as on_binaryarchive: ON_BinaryArchive; // jai: no "using" to avoid name-clashes

    m_p:               *void;
    m_buffer:          *u8;
    m_sizeof_buffer:   u64;
    m_buffer_position: u64;
    m_reserved1:       ON__INT_PTR;
    m_reserved2:       ON__INT_PTR;
    m_reserved3:       ON__INT_PTR;
    m_reserved4:       ON__INT_PTR;
}

ON_Write3dmBufferArchive :: struct {
    #as on_binaryarchive: ON_BinaryArchive; // jai: no "using" to avoid name-clashes

    m_p:                 *void;
    m_buffer:            *u8;
    m_sizeof_buffer:     u64;
    m_max_sizeof_buffer: u64;
    m_sizeof_archive:    u64;
    m_buffer_position:   u64;
    m_reserved1:         ON__INT_PTR;
    m_reserved2:         ON__INT_PTR;
    m_reserved3:         ON__INT_PTR;
    m_reserved4:         ON__INT_PTR;
}

/*
Opens a debug archive file
Uses directory set by ON_SetDebugWriteObjectDirectory(const wchar_t* ).
creates a file named "debug_file_nnnn.3dm"
Example:
ON_DebugWriteArchive debug;
if(debug.m_Archive)
ON_WriteArchive( *debug.m_Archive, geometry );

*/
ON_DebugWriteArchive :: struct {
    m_archive:   *ON_BinaryArchive = null;
    m_fp:        *FILE = null;
    m_N:         u32 = 0;
    m_file_path: ON_wString;
}

/*
Description:
Used to store geometry table object definition and attributes in an ONX_Model.
*/
ON_ModelGeometryComponent :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_geometry_sp is private and all code that manages m_sp is explicitly implemented in the DLL.
    // m_attributes_sp is private and all code that manages m_sp is explicitly implemented in the DLL.
    m_geometry_sp:   std.shared_ptr(ON_Geometry);

    m_attributes_sp: std.shared_ptr(ON_3dmObjectAttributes);
}

/*
Description:
An ON_Arc is a subcurve of 3d circle.
Details:
The curve is parameterized by	an angle expressed in radians.   For an IsValid() arc
the total subtended angle 	AngleRadians() = Domain()(1) - Domain()(0) must satisfy
0< AngleRadians() <2*Pi .

The parameterization of the ON_Arc is inherited from the ON_Circle it is derived from.
In particular
t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis
where xaxis and yaxis, (part of ON_Circle::m_plane) form an othonormal frame of the plane
containing the circle.
*/
ON_Arc :: struct {
    #as using on_circle: ON_Circle;

    // increasing interval with start and end angle in radians
    m_angle: ON_Interval;
}

ON_UserData :: struct {
    #as using on_object: ON_Object;

    /*
    Description:
    This uuid is the value that must be passed to
    ON_Object::GetUserData() to retrieve
    this piece of user data.
    */
    m_userdata_uuid:      ON_UUID;

    /*
    Description:
    This uuid is used to identify the application that
    created this piece of user data.  In the case of
    Rhino, this is the id of the plug-in that created
    the user data. User data with a nil application id
    will not be saved in 3dm archives.
    */
    m_application_uuid:   ON_UUID;

    ////////
    // If m_userdata_copycount is 0, user data is not copied when
    // object is copied.  If > 0, user data is copied and m_copycount
    // is incremented when parent object is copied. The user data's
    // operator=() is used to copy.
    // The default ON_UserData::ON_UserData() constructor sets
    // m_userdata_copycount to zero.
    m_userdata_copycount: u32;

    ////////
    // Updated if user data is attached to a piece of geometry that is
    // transformed and the virtual ON_UserData::Transform() is not
    // overridden.  If you override ON_UserData::Transform() and want
    // m_userdata_xform to be updated, then call the
    // ON_UserData::Transform() in your override.
    // The default constructor sets m_userdata_xform to the identity.
    m_userdata_xform:     ON_Xform;

    m_userdata_owner:     *ON_Object;
    m_userdata_next:      *ON_UserData;
    #place on_object; on_userdata_vtable: *ON_UserData_VTable;
}
ON_UserData_VTable :: struct #type_info_none {
    using on_object: ON_Object_VTable;
    GetDescription: (this: *ON_UserData, description: *ON_wString) -> bool #cpp_method;

    Archive: (this: *ON_UserData) -> bool #cpp_method;

    WriteToArchive: (this: *ON_UserData, archive: *ON_BinaryArchive, parent_object: *ON_Object) -> bool #cpp_method;

    DeleteAfterWrite: (this: *ON_UserData, archive: *ON_BinaryArchive, parent_object: *ON_Object) -> bool #cpp_method;

    DeleteAfterRead: (this: *ON_UserData, archive: *ON_BinaryArchive, parent_object: *ON_Object) -> bool #cpp_method;

    Transform: (this: *ON_UserData, unknown0: *ON_Xform) -> bool #cpp_method;
}

ON_UserData_GetDescription :: inline (this: *ON_UserData, description: *ON_wString) -> bool { return this.on_userdata_vtable.GetDescription(this, description); }

ON_UserData_Archive :: inline (this: *ON_UserData) -> bool { return this.on_userdata_vtable.Archive(this); }

ON_UserData_WriteToArchive :: inline (this: *ON_UserData, archive: *ON_BinaryArchive, parent_object: *ON_Object) -> bool { return this.on_userdata_vtable.WriteToArchive(this, archive, parent_object); }

ON_UserData_DeleteAfterWrite :: inline (this: *ON_UserData, archive: *ON_BinaryArchive, parent_object: *ON_Object) -> bool { return this.on_userdata_vtable.DeleteAfterWrite(this, archive, parent_object); }

ON_UserData_DeleteAfterRead :: inline (this: *ON_UserData, archive: *ON_BinaryArchive, parent_object: *ON_Object) -> bool { return this.on_userdata_vtable.DeleteAfterRead(this, archive, parent_object); }

ON_UserData_Transform :: inline (this: *ON_UserData, unknown0: *ON_Xform) -> bool { return this.on_userdata_vtable.Transform(this, unknown0); }

vtable :: (obj: *ON_UserData) -> *ON_UserData_VTable { return obj.on_userdata_vtable; }


ON_UnknownUserData :: struct {
    #as using on_userdata: ON_UserData;

    /*
    Description:
    This is the uuid of the missing class.  This uuid
    is the 3rd parameter to the ON_OBJECT_IMPLEMENT()
    macro of the missing class.
    */
    m_unknownclass_uuid:            ON_UUID;
    m_sizeof_buffer:                s32;
    m_buffer:                       *void;

    m_3dm_version:                  s32; // 3dm archive version (0,1,2,3,4,5,50,...)

    // In V5 and earlier, m_3dm_opennurbs_version had the format YYYYMMDDN
    // For V6 the unsigned int value is calculated by ON_VersionNumberConstruct()
    // and has the high bit set (it will be negative if used as a signed int).
    // When writing files in previous version formats (V5 or earlier) it is important
    // to write a YYYYMMDDN version number in the file.  Use ON_VersionNumberParse()
    // get the YYYY, MM, DD and N values from m_3dm_opennurbs_version.
    m_3dm_opennurbs_version_number: u32;
}

ON_ObsoleteUserData :: struct {
    #as using on_userdata: ON_UserData;

    // This is the user data class id that will be saved in the 3dm archive.
    m_archive_class_uuid: ON_UUID;
}

// Do not export this class
// It is used internally to read and write 3dm achives with versions < 60.
ON_RdkMaterialInstanceIdObsoleteUserData :: struct {
    #as using on_obsoleteuserdata: ON_ObsoleteUserData;

    m_rdk_material_instance_id: ON_UUID;
}

ON_UserStringList :: struct {
    #as using on_userdata: ON_UserData;

    m_e: ON_ClassArray(ON_UserString);
}

ON_UserDataHolder :: struct {
    #as using on_object: ON_Object;
}

/*
Description:
An ON_DocumentUserStringList object is saved in the list of user
tables.  The Rhino SetDocumentText and GetDocumentText
commands use the ON_Object SetUserString, GetUserString,
GetUserStrings, GetUserStringKeys functions on an
ON_DocumentUserStringList class to manage the tag-value pairs of
strings.
*/
ON_DocumentUserStringList :: struct {
    #as using on_object: ON_Object;
}

// Description:
//   Base class for all geometry classes that must
//   provide runtime class id.  Provides interface
//   for common geometric operations like finding bounding
//   boxes and transforming.
//
ON_Geometry :: struct {
    #as using on_object: ON_Object;
    #place on_object; on_geometry_vtable: *ON_Geometry_VTable;
}
ON_Geometry_VTable :: struct #type_info_none {
    using on_object: ON_Object_VTable;
    Dimension: (this: *ON_Geometry) -> s32 #cpp_method;

    GetBBox: (this: *ON_Geometry, boxmin: *float64, boxmax: *float64, bGrowBox := false) -> bool #cpp_method;

    GetTightBoundingBox: (this: *ON_Geometry, tight_bbox: *ON_BoundingBox, bGrowBox := false, xform: *ON_Xform = null) -> bool #cpp_method;

    ClearBoundingBox: (this: *ON_Geometry) -> void #cpp_method;

    Transform: (this: *ON_Geometry, xform: *ON_Xform) -> bool #cpp_method;

    IsDeformable: (this: *ON_Geometry) -> bool #cpp_method;

    MakeDeformable: (this: *ON_Geometry) -> bool #cpp_method;

    SwapCoordinates: (this: *ON_Geometry, i: s32, j: s32) -> bool #cpp_method;

    HasBrepForm: (this: *ON_Geometry) -> bool #cpp_method;

    BrepForm: (this: *ON_Geometry, brep: *ON_Brep = null) -> *ON_Brep #cpp_method;

    ComponentIndex: (this: *ON_Geometry) -> ON_COMPONENT_INDEX #cpp_method #cpp_return_type_is_non_pod;

    EvaluatePoint: (this: *ON_Geometry, objref: *ON_ObjRef, P: *ON_3dPoint) -> bool #cpp_method;
}

ON_Geometry_Dimension :: inline (this: *ON_Geometry) -> s32 { return this.on_geometry_vtable.Dimension(this); }

ON_Geometry_GetBBox :: inline (this: *ON_Geometry, boxmin: *float64, boxmax: *float64, bGrowBox := false) -> bool { return this.on_geometry_vtable.GetBBox(this, boxmin, boxmax, bGrowBox); }

ON_Geometry_GetTightBoundingBox :: inline (this: *ON_Geometry, tight_bbox: *ON_BoundingBox, bGrowBox := false, xform: *ON_Xform = null) -> bool { return this.on_geometry_vtable.GetTightBoundingBox(this, tight_bbox, bGrowBox, xform); }

ON_Geometry_ClearBoundingBox :: inline (this: *ON_Geometry) { this.on_geometry_vtable.ClearBoundingBox(this); }

ON_Geometry_Transform :: inline (this: *ON_Geometry, xform: *ON_Xform) -> bool { return this.on_geometry_vtable.Transform(this, xform); }

ON_Geometry_IsDeformable :: inline (this: *ON_Geometry) -> bool { return this.on_geometry_vtable.IsDeformable(this); }

ON_Geometry_MakeDeformable :: inline (this: *ON_Geometry) -> bool { return this.on_geometry_vtable.MakeDeformable(this); }

ON_Geometry_SwapCoordinates :: inline (this: *ON_Geometry, i: s32, j: s32) -> bool { return this.on_geometry_vtable.SwapCoordinates(this, i, j); }

ON_Geometry_HasBrepForm :: inline (this: *ON_Geometry) -> bool { return this.on_geometry_vtable.HasBrepForm(this); }

ON_Geometry_BrepForm :: inline (this: *ON_Geometry, brep: *ON_Brep = null) -> *ON_Brep { return this.on_geometry_vtable.BrepForm(this, brep); }

ON_Geometry_ComponentIndex :: inline (this: *ON_Geometry) -> ON_COMPONENT_INDEX { return this.on_geometry_vtable.ComponentIndex(this); }

ON_Geometry_EvaluatePoint :: inline (this: *ON_Geometry, objref: *ON_ObjRef, P: *ON_3dPoint) -> bool { return this.on_geometry_vtable.EvaluatePoint(this, objref, P); }

vtable :: (obj: *ON_Geometry) -> *ON_Geometry_VTable { return obj.on_geometry_vtable; }


////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
ON_MeshCurveParameters :: struct {
    // If main_seg_count <= 0, then both these parameters are ignored.
    // If main_seg_count > 0, then sub_seg_count must be >= 1.  In this
    // case the curve will be broken into main_seg_count equally spaced
    // chords. If needed, each of these chords can be split into as many
    // sub_seg_count sub-parts if the subdivision is necessary for the
    // mesh to meet the other meshing constraints.  In particular, if
    // sub_seg_count = 0, then the curve is broken into main_seg_count
    // pieces and no further testing is performed.
    m_main_seg_count:  s32;
    m_sub_seg_count:   s32;

    m_reserved1:       s32;
    m_reserved2:       s32;

    // Maximum angle (in radians) between unit tangents at adjacent
    // vertices.
    m_max_ang_radians: float64;

    // Maximum permitted value of
    // distance chord midpoint to curve) / (length of chord)
    m_max_chr:         float64;

    // If max_aspect < 1.0, the parameter is ignored.
    // If 1 <= max_aspect < sqrt(2), it is treated as if
    // max_aspect = sqrt(2).
    // This parameter controls the maximum permitted value of
    // (length of longest chord) / (length of shortest chord)
    m_max_aspect:      float64;

    // If tolerance = 0, the parameter is ignored.
    // This parameter controls the maximum permitted value of the
    // distance from the curve to the mesh.
    m_tolerance:       float64;

    // If m_min_edge_length = 0, the parameter is ignored.
    // This parameter controls the minimum permitted edge length.
    m_min_edge_length: float64;

    // If max_edge_length = 0, the parameter is ignored.
    // This parameter controls the maximum permitted edge length.
    m_max_edge_length: float64;

    m_reserved3:       float64;
    m_reserved4:       float64;
}

/*
Description:
ON_Curve is a pure virtual class for curve objects
- Any class derived from ON_Curve should have a
ON_OBJECT_DECLARE(ON_...);
at the beginning of its class definition and a
ON_OBJECT_IMPLEMENT( ON_..., ON_Curve );
in a .cpp file.
Example:
- See the definition of ON_NurbsCurve for an example.
*/
ON_Curve :: struct {
    #as using on_geometry: ON_Geometry;
    #place on_geometry; on_curve_vtable: *ON_Curve_VTable;
}
ON_Curve_VTable :: struct #type_info_none {
    using on_geometry: ON_Geometry_VTable;
    DuplicateCurve: (this: *ON_Curve) -> *ON_Curve #cpp_method;

    Domain: (this: *ON_Curve) -> ON_Interval #cpp_method #cpp_return_type_is_non_pod;

    SetDomain: (this: *ON_Curve, t0: float64, t1: float64) -> bool #cpp_method;

    ChangeClosedCurveSeam: (this: *ON_Curve, t: float64) -> bool #cpp_method;

    ChangeDimension: (this: *ON_Curve, desired_dimension: s32) -> bool #cpp_method;

    SpanCount: (this: *ON_Curve) -> s32 #cpp_method;

    GetSpanVector: (this: *ON_Curve, span_parameters: *float64) -> bool #cpp_method;

    GetSpanVectorIndex: (this: *ON_Curve, t: float64, side: s32, span_vector_index: *s32, span_domain: *ON_Interval) -> bool #cpp_method;

    Degree: (this: *ON_Curve) -> s32 #cpp_method;

    GetParameterTolerance: (this: *ON_Curve, t: float64, tminus: *float64, tplus: *float64) -> bool #cpp_method;

    IsLinear: (this: *ON_Curve, tolerance: float64 = 0.0) -> bool #cpp_method;

    IsPolyline: (this: *ON_Curve, pline_points: *ON_SimpleArray(ON_3dPoint) = null, pline_t: *ON_SimpleArray(float64) = null) -> s32 #cpp_method;

    IsArc: (this: *ON_Curve, plane: *ON_Plane = null, arc: *ON_Arc = null, tolerance: float64 = 0.0) -> bool #cpp_method;

    IsEllipse: (this: *ON_Curve, plane: *ON_Plane = null, ellipse: *ON_Ellipse = null, tolerance: float64 = 0.0) -> bool #cpp_method;

    IsPlanar: (this: *ON_Curve, plane: *ON_Plane = null, tolerance: float64 = 0.0) -> bool #cpp_method;

    IsInPlane: (this: *ON_Curve, test_plane: *ON_Plane, tolerance: float64 = 0.0) -> bool #cpp_method;

    IsClosed: (this: *ON_Curve) -> bool #cpp_method;

    IsPeriodic: (this: *ON_Curve) -> bool #cpp_method;

    GetNextDiscontinuity: (this: *ON_Curve, c: ON.continuity, t0: float64, t1: float64, t: *float64, hint: *s32 = null, dtype: *s32 = null, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool #cpp_method;

    IsContinuous: (this: *ON_Curve, c: ON.continuity, t: float64, hint: *s32 = null, point_tolerance: float64 = 0.0, d1_tolerance: float64 = 0.0, d2_tolerance: float64 = 0.0, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool #cpp_method;

    Reverse: (this: *ON_Curve) -> bool #cpp_method;

    SetStartPoint: (this: *ON_Curve, start_point: ON_3dPoint) -> bool #cpp_method;

    SetEndPoint: (this: *ON_Curve, end_point: ON_3dPoint) -> bool #cpp_method;

    Evaluate: (this: *ON_Curve, t: float64, der_count: s32, v_stride: s32, v: *float64, side: s32 = 0, hint: *s32 = null) -> bool #cpp_method;

    Trim: (this: *ON_Curve, domain: *ON_Interval) -> bool #cpp_method;

    Extend: (this: *ON_Curve, domain: *ON_Interval) -> bool #cpp_method;

    Split: (this: *ON_Curve, t: float64, left_side: **ON_Curve, right_side: **ON_Curve) -> bool #cpp_method;

    GetNurbForm: (this: *ON_Curve, nurbs_curve: *ON_NurbsCurve, tolerance: float64 = 0.0, subdomain: *ON_Interval = null) -> s32 #cpp_method;

    HasNurbForm: (this: *ON_Curve) -> s32 #cpp_method;

    GetCurveParameterFromNurbFormParameter: (this: *ON_Curve, nurbs_t: float64, curve_t: *float64) -> bool #cpp_method;

    GetNurbFormParameterFromCurveParameter: (this: *ON_Curve, curve_t: float64, nurbs_t: *float64) -> bool #cpp_method;
}

ON_Curve_DuplicateCurve :: inline (this: *ON_Curve) -> *ON_Curve { return this.on_curve_vtable.DuplicateCurve(this); }

ON_Curve_Domain :: inline (this: *ON_Curve) -> ON_Interval { return this.on_curve_vtable.Domain(this); }

ON_Curve_SetDomain :: inline (this: *ON_Curve, t0: float64, t1: float64) -> bool { return this.on_curve_vtable.SetDomain(this, t0, t1); }

ON_Curve_ChangeClosedCurveSeam :: inline (this: *ON_Curve, t: float64) -> bool { return this.on_curve_vtable.ChangeClosedCurveSeam(this, t); }

ON_Curve_ChangeDimension :: inline (this: *ON_Curve, desired_dimension: s32) -> bool { return this.on_curve_vtable.ChangeDimension(this, desired_dimension); }

ON_Curve_SpanCount :: inline (this: *ON_Curve) -> s32 { return this.on_curve_vtable.SpanCount(this); }

ON_Curve_GetSpanVector :: inline (this: *ON_Curve, span_parameters: *float64) -> bool { return this.on_curve_vtable.GetSpanVector(this, span_parameters); }

ON_Curve_GetSpanVectorIndex :: inline (this: *ON_Curve, t: float64, side: s32, span_vector_index: *s32, span_domain: *ON_Interval) -> bool { return this.on_curve_vtable.GetSpanVectorIndex(this, t, side, span_vector_index, span_domain); }

ON_Curve_Degree :: inline (this: *ON_Curve) -> s32 { return this.on_curve_vtable.Degree(this); }

ON_Curve_GetParameterTolerance :: inline (this: *ON_Curve, t: float64, tminus: *float64, tplus: *float64) -> bool { return this.on_curve_vtable.GetParameterTolerance(this, t, tminus, tplus); }

ON_Curve_IsLinear :: inline (this: *ON_Curve, tolerance: float64 = 0.0) -> bool { return this.on_curve_vtable.IsLinear(this, tolerance); }

ON_Curve_IsPolyline :: inline (this: *ON_Curve, pline_points: *ON_SimpleArray(ON_3dPoint) = null, pline_t: *ON_SimpleArray(float64) = null) -> s32 { return this.on_curve_vtable.IsPolyline(this, pline_points, pline_t); }

ON_Curve_IsArc :: inline (this: *ON_Curve, plane: *ON_Plane = null, arc: *ON_Arc = null, tolerance: float64 = 0.0) -> bool { return this.on_curve_vtable.IsArc(this, plane, arc, tolerance); }

ON_Curve_IsEllipse :: inline (this: *ON_Curve, plane: *ON_Plane = null, ellipse: *ON_Ellipse = null, tolerance: float64 = 0.0) -> bool { return this.on_curve_vtable.IsEllipse(this, plane, ellipse, tolerance); }

ON_Curve_IsPlanar :: inline (this: *ON_Curve, plane: *ON_Plane = null, tolerance: float64 = 0.0) -> bool { return this.on_curve_vtable.IsPlanar(this, plane, tolerance); }

ON_Curve_IsInPlane :: inline (this: *ON_Curve, test_plane: *ON_Plane, tolerance: float64 = 0.0) -> bool { return this.on_curve_vtable.IsInPlane(this, test_plane, tolerance); }

ON_Curve_IsClosed :: inline (this: *ON_Curve) -> bool { return this.on_curve_vtable.IsClosed(this); }

ON_Curve_IsPeriodic :: inline (this: *ON_Curve) -> bool { return this.on_curve_vtable.IsPeriodic(this); }

ON_Curve_GetNextDiscontinuity :: inline (this: *ON_Curve, c: ON.continuity, t0: float64, t1: float64, t: *float64, hint: *s32 = null, dtype: *s32 = null, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool { return this.on_curve_vtable.GetNextDiscontinuity(this, c, t0, t1, t, hint, dtype, cos_angle_tolerance, curvature_tolerance); }

ON_Curve_IsContinuous :: inline (this: *ON_Curve, c: ON.continuity, t: float64, hint: *s32 = null, point_tolerance: float64 = 0.0, d1_tolerance: float64 = 0.0, d2_tolerance: float64 = 0.0, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool { return this.on_curve_vtable.IsContinuous(this, c, t, hint, point_tolerance, d1_tolerance, d2_tolerance, cos_angle_tolerance, curvature_tolerance); }

ON_Curve_Reverse :: inline (this: *ON_Curve) -> bool { return this.on_curve_vtable.Reverse(this); }

ON_Curve_SetStartPoint :: inline (this: *ON_Curve, start_point: ON_3dPoint) -> bool { return this.on_curve_vtable.SetStartPoint(this, start_point); }

ON_Curve_SetEndPoint :: inline (this: *ON_Curve, end_point: ON_3dPoint) -> bool { return this.on_curve_vtable.SetEndPoint(this, end_point); }

ON_Curve_Evaluate :: inline (this: *ON_Curve, t: float64, der_count: s32, v_stride: s32, v: *float64, side: s32 = 0, hint: *s32 = null) -> bool { return this.on_curve_vtable.Evaluate(this, t, der_count, v_stride, v, side, hint); }

ON_Curve_Trim :: inline (this: *ON_Curve, domain: *ON_Interval) -> bool { return this.on_curve_vtable.Trim(this, domain); }

ON_Curve_Extend :: inline (this: *ON_Curve, domain: *ON_Interval) -> bool { return this.on_curve_vtable.Extend(this, domain); }

ON_Curve_Split :: inline (this: *ON_Curve, t: float64, left_side: **ON_Curve, right_side: **ON_Curve) -> bool { return this.on_curve_vtable.Split(this, t, left_side, right_side); }

ON_Curve_GetNurbForm :: inline (this: *ON_Curve, nurbs_curve: *ON_NurbsCurve, tolerance: float64 = 0.0, subdomain: *ON_Interval = null) -> s32 { return this.on_curve_vtable.GetNurbForm(this, nurbs_curve, tolerance, subdomain); }

ON_Curve_HasNurbForm :: inline (this: *ON_Curve) -> s32 { return this.on_curve_vtable.HasNurbForm(this); }

ON_Curve_GetCurveParameterFromNurbFormParameter :: inline (this: *ON_Curve, nurbs_t: float64, curve_t: *float64) -> bool { return this.on_curve_vtable.GetCurveParameterFromNurbFormParameter(this, nurbs_t, curve_t); }

ON_Curve_GetNurbFormParameterFromCurveParameter :: inline (this: *ON_Curve, curve_t: float64, nurbs_t: *float64) -> bool { return this.on_curve_vtable.GetNurbFormParameterFromCurveParameter(this, curve_t, nurbs_t); }

vtable :: (obj: *ON_Curve) -> *ON_Curve_VTable { return obj.on_curve_vtable; }


ON_CurveArray :: struct {
    #as using on_simplearray: ON_SimpleArray(*ON_Curve);
    vtable: *ON_CurveArray_VTable;
}
ON_CurveArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_CurveArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_CurveArray_Destructor :: inline (this: *ON_CurveArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_CurveArray) -> *ON_CurveArray_VTable { return obj.vtable; }


ON_SurfaceTree :: struct {}

/* Return codes to be used in operations that attempt to fit to a tolerance.
For example ON_Surface::Pullback() and ON_Surface::PushUp().
*/
ON_FitResult :: enum u32 {
    unknown          :: 0;
    in_tolerance     :: 1;
    not_in_tolerance :: 2;
}

ON_Surface :: struct {
    #as using on_geometry: ON_Geometry;

    // flags for isoparametric curves
    // note: odd values are all "x" = constant
    // and even values > 0 are all "y" = constant
    // ON_BrepTrim::m_iso uses these flags
    ISO :: enum s32 {
        not_iso   :: 0;
        x_iso     :: 1;

        y_iso     :: 2;

        W_iso     :: 3;

        S_iso     :: 4;

        E_iso     :: 5;

        N_iso     :: 6;

        iso_count :: 7;
    }
    #place on_geometry; on_surface_vtable: *ON_Surface_VTable;
}
ON_Surface_VTable :: struct #type_info_none {
    using on_geometry: ON_Geometry_VTable;
    DuplicateSurface: (this: *ON_Surface) -> *ON_Surface #cpp_method;

    SetDomain: (this: *ON_Surface, dir: s32, t0: float64, t1: float64) -> bool #cpp_method;

    Domain: (this: *ON_Surface, dir: s32) -> ON_Interval #cpp_method #cpp_return_type_is_non_pod;

    GetSurfaceSize: (this: *ON_Surface, width: *float64, height: *float64) -> bool #cpp_method;

    SpanCount: (this: *ON_Surface, dir: s32) -> s32 #cpp_method;

    GetSpanVector: (this: *ON_Surface, dir: s32, span_vector: *float64) -> bool #cpp_method;

    GetSpanVectorIndex: (this: *ON_Surface, dir: s32, t: float64, side: s32, span_vector_index: *s32, span_interval: *ON_Interval) -> bool #cpp_method;

    Degree: (this: *ON_Surface, dir: s32) -> s32 #cpp_method;

    GetParameterTolerance: (this: *ON_Surface, dir: s32, t: float64, tminus: *float64, tplus: *float64) -> bool #cpp_method;

    IsIsoparametric: (this: *ON_Surface, bbox: *ON_BoundingBox) -> ON_Surface.ISO #cpp_method;

    IsIsoparametric_1: (this: /*const*/ *ON_Surface, curve: /*const reference*/ *ON_Curve, curve_domain: /*const*/ *ON_Interval = null) -> ON_Surface.ISO #cpp_method;

    IsPlanar: (this: *ON_Surface, plane: *ON_Plane = null, tolerance: float64 = 0.0) -> bool #cpp_method;

    IsClosed: (this: *ON_Surface, unknown0: s32) -> bool #cpp_method;

    IsPeriodic: (this: *ON_Surface, unknown0: s32) -> bool #cpp_method;

    IsSingular: (this: *ON_Surface, unknown0: s32) -> bool #cpp_method;

    GetNextDiscontinuity: (this: *ON_Surface, dir: s32, c: ON.continuity, t0: float64, t1: float64, t: *float64, hint: *s32 = null, dtype: *s32 = null, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool #cpp_method;

    IsContinuous: (this: *ON_Surface, c: ON.continuity, s: float64, t: float64, hint: *s32 = null, point_tolerance: float64 = 0.0, d1_tolerance: float64 = 0.0, d2_tolerance: float64 = 0.0, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool #cpp_method;

    Reverse: (this: *ON_Surface, unknown0: s32) -> bool #cpp_method;

    Transpose: (this: *ON_Surface) -> bool #cpp_method;

    Evaluate: (this: *ON_Surface, u: float64, v: float64, num_der: s32, array_stride: s32, der_array: *float64, quadrant: s32 = 0, hint: *s32 = null) -> bool #cpp_method;

    IsoCurve: (this: *ON_Surface, dir: s32, c: float64) -> *ON_Curve #cpp_method;

    Trim: (this: *ON_Surface, dir: s32, domain: *ON_Interval) -> bool #cpp_method;

    Extend: (this: *ON_Surface, dir: s32, domain: *ON_Interval) -> bool #cpp_method;

    Split: (this: *ON_Surface, dir: s32, c: float64, west_or_south_side: **ON_Surface, east_or_north_side: **ON_Surface) -> bool #cpp_method;

    GetNurbForm: (this: *ON_Surface, nurbs_surface: *ON_NurbsSurface, tolerance: float64 = 0.0) -> s32 #cpp_method;

    HasNurbForm: (this: *ON_Surface) -> s32 #cpp_method;

    GetSurfaceParameterFromNurbFormParameter: (this: *ON_Surface, nurbs_s: float64, nurbs_t: float64, surface_s: *float64, surface_t: *float64) -> bool #cpp_method;

    GetNurbFormParameterFromSurfaceParameter: (this: *ON_Surface, surface_s: float64, surface_t: float64, nurbs_s: *float64, nurbs_t: *float64) -> bool #cpp_method;
}

ON_Surface_DuplicateSurface :: inline (this: *ON_Surface) -> *ON_Surface { return this.on_surface_vtable.DuplicateSurface(this); }

ON_Surface_SetDomain :: inline (this: *ON_Surface, dir: s32, t0: float64, t1: float64) -> bool { return this.on_surface_vtable.SetDomain(this, dir, t0, t1); }

ON_Surface_Domain :: inline (this: *ON_Surface, dir: s32) -> ON_Interval { return this.on_surface_vtable.Domain(this, dir); }

ON_Surface_GetSurfaceSize :: inline (this: *ON_Surface, width: *float64, height: *float64) -> bool { return this.on_surface_vtable.GetSurfaceSize(this, width, height); }

ON_Surface_SpanCount :: inline (this: *ON_Surface, dir: s32) -> s32 { return this.on_surface_vtable.SpanCount(this, dir); }

ON_Surface_GetSpanVector :: inline (this: *ON_Surface, dir: s32, span_vector: *float64) -> bool { return this.on_surface_vtable.GetSpanVector(this, dir, span_vector); }

ON_Surface_GetSpanVectorIndex :: inline (this: *ON_Surface, dir: s32, t: float64, side: s32, span_vector_index: *s32, span_interval: *ON_Interval) -> bool { return this.on_surface_vtable.GetSpanVectorIndex(this, dir, t, side, span_vector_index, span_interval); }

ON_Surface_Degree :: inline (this: *ON_Surface, dir: s32) -> s32 { return this.on_surface_vtable.Degree(this, dir); }

ON_Surface_GetParameterTolerance :: inline (this: *ON_Surface, dir: s32, t: float64, tminus: *float64, tplus: *float64) -> bool { return this.on_surface_vtable.GetParameterTolerance(this, dir, t, tminus, tplus); }

ON_Surface_IsIsoparametric :: inline (this: /*const*/ *ON_Surface, bbox: /*const reference*/ *ON_BoundingBox) -> ON_Surface.ISO { return this.on_surface_vtable.IsIsoparametric(this, bbox); }

ON_Surface_IsIsoparametric_1 :: inline (this: /*const*/ *ON_Surface, curve: /*const reference*/ *ON_Curve, curve_domain: /*const*/ *ON_Interval = null) -> ON_Surface.ISO { return this.on_surface_vtable.IsIsoparametric_1(this, curve, curve_domain); }

ON_Surface_IsPlanar :: inline (this: *ON_Surface, plane: *ON_Plane = null, tolerance: float64 = 0.0) -> bool { return this.on_surface_vtable.IsPlanar(this, plane, tolerance); }

ON_Surface_IsClosed :: inline (this: *ON_Surface, unknown0: s32) -> bool { return this.on_surface_vtable.IsClosed(this, unknown0); }

ON_Surface_IsPeriodic :: inline (this: *ON_Surface, unknown0: s32) -> bool { return this.on_surface_vtable.IsPeriodic(this, unknown0); }

ON_Surface_IsSingular :: inline (this: *ON_Surface, unknown0: s32) -> bool { return this.on_surface_vtable.IsSingular(this, unknown0); }

ON_Surface_GetNextDiscontinuity :: inline (this: *ON_Surface, dir: s32, c: ON.continuity, t0: float64, t1: float64, t: *float64, hint: *s32 = null, dtype: *s32 = null, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool { return this.on_surface_vtable.GetNextDiscontinuity(this, dir, c, t0, t1, t, hint, dtype, cos_angle_tolerance, curvature_tolerance); }

ON_Surface_IsContinuous :: inline (this: *ON_Surface, c: ON.continuity, s: float64, t: float64, hint: *s32 = null, point_tolerance: float64 = 0.0, d1_tolerance: float64 = 0.0, d2_tolerance: float64 = 0.0, cos_angle_tolerance: float64 = 0.999848, curvature_tolerance: float64 = 0.0) -> bool { return this.on_surface_vtable.IsContinuous(this, c, s, t, hint, point_tolerance, d1_tolerance, d2_tolerance, cos_angle_tolerance, curvature_tolerance); }

ON_Surface_Reverse :: inline (this: *ON_Surface, unknown0: s32) -> bool { return this.on_surface_vtable.Reverse(this, unknown0); }

ON_Surface_Transpose :: inline (this: *ON_Surface) -> bool { return this.on_surface_vtable.Transpose(this); }

ON_Surface_Evaluate :: inline (this: *ON_Surface, u: float64, v: float64, num_der: s32, array_stride: s32, der_array: *float64, quadrant: s32 = 0, hint: *s32 = null) -> bool { return this.on_surface_vtable.Evaluate(this, u, v, num_der, array_stride, der_array, quadrant, hint); }

ON_Surface_IsoCurve :: inline (this: *ON_Surface, dir: s32, c: float64) -> *ON_Curve { return this.on_surface_vtable.IsoCurve(this, dir, c); }

ON_Surface_Trim :: inline (this: *ON_Surface, dir: s32, domain: *ON_Interval) -> bool { return this.on_surface_vtable.Trim(this, dir, domain); }

ON_Surface_Extend :: inline (this: *ON_Surface, dir: s32, domain: *ON_Interval) -> bool { return this.on_surface_vtable.Extend(this, dir, domain); }

ON_Surface_Split :: inline (this: *ON_Surface, dir: s32, c: float64, west_or_south_side: **ON_Surface, east_or_north_side: **ON_Surface) -> bool { return this.on_surface_vtable.Split(this, dir, c, west_or_south_side, east_or_north_side); }

ON_Surface_GetNurbForm :: inline (this: *ON_Surface, nurbs_surface: *ON_NurbsSurface, tolerance: float64 = 0.0) -> s32 { return this.on_surface_vtable.GetNurbForm(this, nurbs_surface, tolerance); }

ON_Surface_HasNurbForm :: inline (this: *ON_Surface) -> s32 { return this.on_surface_vtable.HasNurbForm(this); }

ON_Surface_GetSurfaceParameterFromNurbFormParameter :: inline (this: *ON_Surface, nurbs_s: float64, nurbs_t: float64, surface_s: *float64, surface_t: *float64) -> bool { return this.on_surface_vtable.GetSurfaceParameterFromNurbFormParameter(this, nurbs_s, nurbs_t, surface_s, surface_t); }

ON_Surface_GetNurbFormParameterFromSurfaceParameter :: inline (this: *ON_Surface, surface_s: float64, surface_t: float64, nurbs_s: *float64, nurbs_t: *float64) -> bool { return this.on_surface_vtable.GetNurbFormParameterFromSurfaceParameter(this, surface_s, surface_t, nurbs_s, nurbs_t); }

vtable :: (obj: *ON_Surface) -> *ON_Surface_VTable { return obj.on_surface_vtable; }


ON_SurfaceProperties :: struct {
    m_bIsSet:          bool; // True if Set() has been called with a non-null surface.

    m_bHasSingularity: bool; // true if at least one m_bSingular[] setting is true.
    m_bIsSingular:     [4] bool; // m_bSingular[i] = ON_Surface::IsSingular(i)

    m_bHasSeam:        bool; // true if at least one m_bClosed[] setting is true.
    m_bIsClosed:       [2] bool; // m_bClosed[i] = ON_Surface::IsClosed(i)

    m_bReserved:       [7] bool;

    m_domain:          [2] ON_Interval; // m_domain[i] = ON_Surface.Domain(i)

    m_reserved:        [16] u8;

    // Last pointer passed to ON_SurfaceProperties::Set().
    m_surface:         *ON_Surface;

    // The constructor sets this value to zero.
    // Nothing in opennurbs modifies or uses this value.
    m_tag:             ON__INT_PTR;
}

ON_SurfaceArray :: struct {
    #as using on_simplearray: ON_SimpleArray(*ON_Surface);
    vtable: *ON_SurfaceArray_VTable;
}
ON_SurfaceArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_SurfaceArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_SurfaceArray_Destructor :: inline (this: *ON_SurfaceArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_SurfaceArray) -> *ON_SurfaceArray_VTable { return obj.vtable; }


///////////////////////////////////////////////////////////////////////////////
// Class  ON_Viewport
//
//	This object represents a viewing frustum
///////////////////////////////////////////////////////////////////////////////
ON_Viewport :: struct {
    #as using on_geometry: ON_Geometry;

    // These boolean status flags are set to true when
    // the associated fields contain valid values.
    m_bValidCamera             := true;
    m_bValidFrustum            := true;
    m_bValidPort               := false;
    m_bValidCameraFrame        := true;

    // perspective or parallel projection
    m_projection:              ON.view_projection = .parallel_view;

    // If true and the camera is valid, then the corresponding camera
    // parameter will not be changed by view editing functions. This
    // permits user interface to easily preserve important camera
    // features without having to perform excessive calculations.
    m_bLockCamUp               := false;
    m_bLockCamDir              := false;
    m_bLockCamLoc              := false;
    // 0 != (flags & 1) top/bottom symmetry enforced
    // 0 != (flags & 2) left/right symmetry enforced.
    m_frustum_symmetry_flags:  u8 = 0;

    m_CamLoc:                  ON_3dPoint; // camera location
    m_CamDir:                  ON_3dVector; // from camera towards view (nonzero and not parallel to m_CamUp)
    m_CamUp:                   ON_3dVector; // (nonzero and not parallel to m_CamDir)

    // The camera frame vectors are properly initialized by SetCamera()
    m_CamX:                    ON_3dVector;
    m_CamY:                    ON_3dVector;
    m_CamZ:                    ON_3dVector;

    m_frus_left:               float64 = -20.0; // frus_left < frus_right 
    m_frus_right:              float64 = 20.0;
    m_frus_bottom:             float64 = -20.0; // frus_bottom < frus_top 
    m_frus_top:                float64 = 20.0;
    m_frus_near:               float64; // 0 < frus_near < frus_far 
    m_frus_far:                float64;

    m_port_left:               s32 = 0; // port_left != port_right
    m_port_right:              s32 = 1000;
    m_port_bottom:             s32 = 0; // port_bottom != port_top  
    m_port_top:                s32 = 1000;

    // (If you want an 8 bit z-buffer with
    // z=255 being "in front of" z=0, then
    // set port_near = 255 and port_far = 0.)
    m_port_near:               s32 = 0;
    m_port_far:                s32 = 1;

    // The location of this point has no impact on the
    // view projection. It is simply a suggestion for a
    // fixed point when views are rotated or the isometric
    // depth when perpsective views are dollied.  The default
    // is ON_3dPoint::UnsetPoint.
    m_target_point:            ON_3dPoint;

    // When this id matches the viewport id saved in an ON_DisplayMaterialRef
    // list in ON_3dmObjectAttributes, then the the display material is used
    // for that object in this view.
    m_viewport_id:             ON_UUID;

    m_clip_mods:               ON_Xform;
    m_clip_mods_inverse:       ON_Xform;

    // Runtime values that depend on the graphics hardware being used.
    // These values are not saved in 3dm files.
    m__MIN_NEAR_DIST:          float64;
    m__MIN_NEAR_OVER_FAR:      float64;

    m_projection_content_sha1: ON_SHA1_Hash;
}

TEXMAP_INTERSECT_LINE_SURFACE :: #type (unknown0: *ON_Line, unknown1: *ON_BrepFace, unknown2: *ON_SimpleArray(ON_X_EVENT)) -> s32 #c_call;
TEXMAP_BREP_FACE_CLOSEST_POINT :: #type (unknown0: *ON_BrepFace, unknown1: *ON_3dPoint, unknown2: *ON_3dPoint) -> bool #c_call;

ON_TextureMapping :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    //////////////////////////////////////////////////////////
    //
    // Mapping types:
    //
    //   You can either calculate texture coordinates based on
    //   the parameterization of the surface used to create a mesh,
    //   or project the natural parameterization from a mapping
    //   primitive, like a plane, sphere, box, or cylinder.
    //
    // Do not change TYPE enum values - they are saved in 3dm files.
    //
    TYPE :: enum u32 {
        no_mapping             :: 0;
        srfp_mapping           :: 1;
        plane_mapping          :: 2;
        cylinder_mapping       :: 3;
        sphere_mapping         :: 4;
        box_mapping            :: 5;
        mesh_mapping_primitive :: 6;
        srf_mapping_primitive  :: 7;
        brep_mapping_primitive :: 8;
        ocs_mapping            :: 9;
        false_colors           :: 10;
    }

    //////////////////////////////////////////////////////////
    //
    // Projection:
    //
    //   When a mapping primitive, like a plane, sphere, box,
    //   or cylinder, is used, there are two projection options.
    //
    //  clspt_projection: world xyz maps to the point on the
    //                    mapping primitive that is closest to xyz.
    //                    In this case, ON_TextureMapping::Evaluate
    //                    ignores the vector argument.
    //
    //  ray_projection:   world xyz + world vector defines a world line.
    //                    The world line is intersected with the mapping
    //                    primitive and the intersection point that is
    //                    closest to the world xyz point is used to
    //                    calculate the mapping parameters.
    //
    //  The value of m_projection can be changed as needed.
    //
    //  If m_type = srfp_mapping, then m_projection is ignored.
    //
    PROJECTION :: enum u32 {
        no_projection    :: 0;
        clspt_projection :: 1;
        ray_projection   :: 2;
    }

    //////////////////////////////////////////////////////////
    //
    // Texture space
    //
    //   When a mapping primitive is a box or a capped cylinder,
    //   there are two options for the mapping.  Either the sides
    //   all map to (0,1)x(0,1) (so the either texture map appears
    //   on each side, or the sides map to distinct regions of the
    //   texture space.
    //
    TEXTURE_SPACE :: enum u32 {
        single  :: 0;
        divided :: 1;
    }

    m_type:              TYPE = .no_mapping;
    m_projection:        PROJECTION = .no_projection;
    m_texture_space:     TEXTURE_SPACE = .single;

    // The m_bCapped applies to planar, cylinder and box mappings.
    // If m_bCapped is false, the cylinder or box is "infinite", if m_bCapped is true, they are finite.
    // In planar mappings, m_bCapped=false means "the Z texture coordinate will always be 0.0"
    // this is now the default behaviour in Rhino 5.0 - it's what users expect apparently.
    m_bCapped            := false;

    //////////////////////////////////////////////////////////
    //
    // For primitive based mappings, these transformations are
    // used to map the world coordinate (x,y,z) point P and
    // surface normal N before it is projected to the normalized
    // mapping primitive. The surface normal transformation,
    // m_Nxyz, is always calculated from m_Pxyz.  It is a
    // runtime setting that is not saved in 3dm files.
    // If m_type is srfp_mapping, then m_Pxyz and m_Nxyz are
    // ignored.
    m_Pxyz:              ON_Xform;
    m_Nxyz:              ON_Xform;

    // Transform applied to mapping coordinate (u,v,w) to
    // convert it into a texture coordinate.
    m_uvw:               ON_Xform;

    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_mapping_primitive is private and all code that manages m_mapping_primitive is explicitly implemented in the DLL.
    m_mapping_primitive: std.shared_ptr(ON_Object);
    #place on_modelcomponent; on_texturemapping_vtable: *ON_TextureMapping_VTable;
}
ON_TextureMapping_VTable :: struct #type_info_none {
    using on_object: ON_Object_VTable;
    Evaluate: (this: *ON_TextureMapping, P: *ON_3dPoint, N: *ON_3dVector, T: *ON_3dPoint, P_xform: *ON_Xform, N_xform: *ON_Xform) -> s32 #cpp_method;

    Evaluate_1: (this: /*const*/ *ON_TextureMapping, P: /*const reference*/ *ON_3dPoint, N: /*const reference*/ *ON_3dVector, T: *ON_3dPoint) -> s32 #cpp_method;
}

ON_TextureMapping_Evaluate :: inline (this: /*const*/ *ON_TextureMapping, P: /*const reference*/ *ON_3dPoint, N: /*const reference*/ *ON_3dVector, T: *ON_3dPoint, P_xform: /*const reference*/ *ON_Xform, N_xform: /*const reference*/ *ON_Xform) -> s32 { return this.on_texturemapping_vtable.Evaluate(this, P, N, T, P_xform, N_xform); }

ON_TextureMapping_Evaluate_1 :: inline (this: /*const*/ *ON_TextureMapping, P: /*const reference*/ *ON_3dPoint, N: /*const reference*/ *ON_3dVector, T: *ON_3dPoint) -> s32 { return this.on_texturemapping_vtable.Evaluate_1(this, P, N, T); }

vtable :: (obj: *ON_TextureMapping) -> *ON_TextureMapping_VTable { return obj.on_texturemapping_vtable; }


///////////////////////////////////////////////////////////////////////////////
//
// Class ON_Texture
//
ON_Texture :: struct {
    #as using on_object: ON_Object;

    m_texture_id:              ON_UUID;

    // list of pre-defined channel ids
    MAPPING_CHANNEL :: enum u32 {
        tc_channel                              :: 0;
        default_channel                         :: 1;

        screen_based_channel                    :: 4294967281;
        wcs_channel                             :: 4294967282;
        wcs_box_channel                         :: 4294967283;
        environment_map_box_channel             :: 4294967284;
        environment_map_light_probe_channel     :: 4294967285;
        environment_map_spherical_channel       :: 4294967286;
        environment_map_cube_map_channel        :: 4294967287;
        environment_map_vcross_cube_map_channel :: 4294967288;
        environment_map_hcross_cube_map_channel :: 4294967289;
        environment_map_hemispherical_channel   :: 4294967290;
        environment_map_emap_channel            :: 4294967295;

        srfp_channel                            :: 4294967294;
        emap_channel                            :: 4294967295;
    }

    // If the m_mapping_channel_id value is one of the built-in
    // mappings listed in the MAPPING_CHANNEL enum, then that
    // mapping is used.  Otherwise, if an object has rendering
    // attributes with an ON_MappingChannel entry that has a
    // matching m_mapping_channel_id value, then the mapping
    // identified by ON_MappingChannel::m_mapping_id is used.
    // If a matching ON_MappingChannel::m_mapping_id is not
    // found, then an attempt will be made to find a mapping
    // with a ON_MappingChannel::m_mapping_id of 1. If that also
    // fails, then surface parameter mapping will be used.
    m_mapping_channel_id:      u32 = 1;

    // Image file
    //   If m_image_file_reference is set and m_image_file_reference.FullPath()
    //   exists, it is the image file being used. This is the common situation
    //   during runtime.
    m_image_file_reference:    ON_FileReference;

    // If false, texture is off and should be ignored.
    // The intended use is to allow people to turn textures
    // on and off without have to create/destroy or change
    // other texture settings.
    m_bOn                      := true;

    // If false, the texture color values should be correctly by the linear workflow pre-process gamma value (in the document)
    // if linear workflow is on.  Otherwise, if the values is true, the values should be used raw from the texture.
    m_bTreatAsLinear           := false;

    reserved2                  := false;
    reserved3                  := false;

    // do not change TYPE enum values - they are saved in 3dm files.
    // The "TYPE" setting controls how the pixels in the bitmap
    // are interpreted.
    TYPE :: enum u32 {
        no_texture_type                          :: 0;

        bitmap_texture                           :: 1;
        diffuse_texture                          :: 1;
        bump_texture                             :: 2;
        transparency_texture                     :: 3;
        opacity_texture                          :: 3;

        pbr_base_color_texture                   :: 1;
        pbr_subsurface_texture                   :: 10;
        pbr_subsurface_scattering_texture        :: 11;
        pbr_subsurface_scattering_color_texture  :: 11;
        pbr_subsurface_scattering_radius_texture :: 12;
        pbr_metallic_texture                     :: 13;
        pbr_specular_texture                     :: 14;
        pbr_specular_tint_texture                :: 15;
        pbr_roughness_texture                    :: 16;
        pbr_anisotropic_texture                  :: 17;
        pbr_anisotropic_rotation_texture         :: 18;
        pbr_sheen_texture                        :: 19;
        pbr_sheen_tint_texture                   :: 20;
        pbr_clearcoat_texture                    :: 21;
        pbr_clearcoat_roughness_texture          :: 22;
        pbr_opacity_ior_texture                  :: 23;
        pbr_opacity_roughness_texture            :: 24;
        pbr_emission_texture                     :: 25;
        pbr_ambient_occlusion_texture            :: 26;

        pbr_displacement_texture                 :: 28;
        pbr_clearcoat_bump_texture               :: 29;
        pbr_alpha_texture                        :: 30;
        pbr_opacity_texture                      :: 3;
        pbr_bump_texture                         :: 2;

        emap_texture                             :: 86;
    }

    m_type:                    TYPE = .bitmap_texture;

    // m_mode determines how the texture is
    // do not change MODE enum values - they are saved in 3dm files.
    MODE :: enum u32 {
        no_texture_mode  :: 0;
        modulate_texture :: 1;
        decal_texture    :: 2;
        blend_texture    :: 3;
    }

    m_mode:                    MODE = .modulate_texture;

    FILTER :: enum u32 {
        nearest_filter :: 0;
        linear_filter  :: 1;
    }

    // The value of m_minfilter determines how the color
    // of the image pixel is calculated when the image pixel
    // corresponds to multiple texture bitmap pixels.
    m_minfilter:               FILTER = .linear_filter;

    // The magfilter setting controls how the color
    // of the image pixel is calculated when the image pixel
    // corresponds to a fraction of a texture bitmap pixel.
    m_magfilter:               FILTER = .linear_filter;

    WRAP :: enum u32 {
        repeat_wrap :: 0;
        clamp_wrap  :: 1;
    }

    m_wrapu:                   WRAP = .repeat_wrap;
    m_wrapv:                   WRAP = .repeat_wrap;
    m_wrapw:                   WRAP = .repeat_wrap;

    // Texture coordinate transformation.
    m_uvw:                     ON_Xform;

    // If ON_UNSET_COLOR != m_border_color, then this color
    // is used when the texture coordinates are <=0 or >=1
    // and the m_wrap* value is clamp_wrap.
    m_border_color:            ON_Color;

    // This field is used for textures with type
    // bitmap_texture that reference bitmap files that do
    // not have an alpha channel and is used to set
    // runtime alpha values.  It needs to be parsed when the
    // texture is loaded and can be ignored at runtime.
    //
    // If ON_UNSET_COLOR != m_transparent_color, then
    // a pixel in the bitmap file with a matching RGB
    // value is assigned the alpha value (ON_Color::Alpha)
    // in m_transparent_color. The intended use is
    // for non-rectangular decals defined by RGB bitmaps in
    // files that don't save an alpha channel.
    //
    // For example if the decal is a red number 7 with a
    // white background, then you would set m_transparent_color's
    // RGB to white and its A to zero.
    m_transparent_color:       ON_Color;

    // This field is used for textures with type
    // bitmap_texture that reference bitmap files that do
    // not have an alpha channel and is used to set
    // runtime alpha values.  It needs to be parsed when the
    // texture is loaded and can be ignored at runtime.
    //
    // If m_transparency_id is not nil, it is the id of another
    // texture in the ON_Material.m_textures[] array that has
    // type m_transparency_texture.  The runtime bitmap_texture's
    // alpha is set to (255-max(R,G,B)) (the "value" in the hue,
    // saturation,value sense) of the correspondeing
    // transparency_texture pixel.
    //
    // For example, if you had a bitmap texuture that was green
    // with purple dots saved in a RGB .bmp file and you wanted
    // the purple dots to be semi-transparent, you could create
    // another bitmap that was black, where the original was green,
    // and gray, where the original was purple, have an
    // transparency_texture reference the white/gray bitmap,
    // and have the bitmap_texture's m_transparency_id
    // reference the transparency map.
    m_transparency_texture_id: ON_UUID;

    // If the m_type is bump_texture, the height of the
    // bump is m_bump_scale.ParameterAt(value), where
    // value is in the HSV sense and normalized
    // (black=0, white=1).  The interval can be
    // decreasing.
    m_bump_scale:              ON_Interval;

    // If the m_mode is blend_texture, then m_blend_A[]
    // and m_blend_RGB[] determine the blending function.
    //
    //  new alpha  = m_blend_constant_A
    //             + m_blend_A[0]*(current alpha)
    //             + m_blend_A[1]*(texture alpha)
    //             + m_blend_A[2]*min(current alpha,texture alpha)
    //             + m_blend_A[3]*max(current alpha,texture alpha)
    //  new rgb    = m_blend_constant_RGB
    //             + m_blend_RGB[0]*(current RGB)
    //             + m_blend_RGB[1]*(texture RGB)
    //             + m_blend_RGB[2]*min(current RGB,texture RGB)
    //             + m_blend_RGB[3]*max(current RGB,texture RGB)
    //
    // Results are clamped to handle underflow or overflow.
    m_blend_constant_A:        float64 = 1.0;

    m_blend_A0:                float64 = 1.0;
    m_blend_A1:                float64 = 1.0;
    m_blend_A2:                float64 = 0.0;
    m_blend_A3:                float64 = 0.0;

    m_blend_constant_RGB:      ON_Color;

    m_blend_RGB0:              float64 = 1.0;
    m_blend_RGB1:              float64 = 1.0;
    m_blend_RGB2:              float64 = 0.0;
    m_blend_RGB3:              float64 = 0.0;

    // If an ON_Material m_textures[] array has more than
    // one texture, the textures are blended, and the textures
    // have different m_blend_order values, the the texture
    // with the smaller m_blend_order is first.
    m_blend_order:             s32 = 0;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class ON_Material
//
ON_Material :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    // The value of m_rdk_material_id identifies an RDK (rendering development kit)
    // material. Multiple materials in a Rhino model can refer to the same
    // RDK material id.  In V5 this value is stored in user data.  In V6 it is
    // saved in the m_rdk_material_id field.
    m_rdk_material_instance_id:                            ON_UUID;

    m_ambient:                                             ON_Color;
    m_diffuse:                                             ON_Color;
    m_emission:                                            ON_Color;
    m_specular:                                            ON_Color;
    m_reflection:                                          ON_Color;
    m_transparent:                                         ON_Color;

    m_bShareable                                           := false;

    m_bDisableLighting                                     := false;

    m_bUseDiffuseTextureAlphaForObjectTransparencyTexture  := false;

    m_bFresnelReflections                                  := false;

    m_reserved1:                                           u32 = 0;

    m_reflectivity:                                        float64 = 0.0; // 0.0 = none, 1.0 = 100%
    m_shine:                                               float64 = 0.0; // 0.0 = none to GetMaxShine()=maximum
    m_transparency:                                        float64 = 0.0; // 0.0 = opaque to 1.0 = transparent (1.0-alpha)

    /*
    m_reflection_glossiness:
    Default is 0.0.
    Values from 0.0 to 1.0 make sense.
    - 0.0 reflections are perfectly specular.
    - t > 0.0 permits reflection ray direction to vary
    from the specular direction by up to t*pi/2.
    */
    m_reflection_glossiness:                               float64 = 0.0;

    /*
    m_refraction_glossiness:
    Default is 0.0.
    Values from 0.0 to 1.0 make sense.
    - 0.0 refractions are perfectly specular.
    - t > 0.0 permits refraction ray direction to vary
    from the specular direction by up to t*pi/2.
    */
    m_refraction_glossiness:                               float64 = 0.0;

    /*
    m_index_of_refraction:
    Default is 1.0.
    Physically, the index of refraction is >= 1.0 and is
    the value (speed of light in vacum)/(speed of light in material).
    Some rendering algorithms set m_index_of_refraction to zero or
    values < 1.0 to generate desirable effects.
    */
    m_index_of_refraction:                                 float64 = 1.0;

    /*
    m_fresnel_index_of_refraction:
    Default is 1.56.
    This is the value ON:Material::FresnelReflectionCoefficient() passes
    as the first parameter to ON_FresnelReflectionCoefficient().
    - Glass material types can be simulated with
    m_index_of_refraction ~ 1.56
    m_fresnel_index_of_refraction ~ 1.56
    - Thin glass can be simulated with
    m_fresnel_index_of_refraction = 1.56
    m_index_of_refraction = 0.0
    - Porcelain type materials can be simulated with
    m_fresnel_index_of_refraction = 1.56
    m_index_of_refraction = 1.0
    m_transparency = 0.0
    */
    m_fresnel_index_of_refraction:                         float64 = 1.56;

    m_textures:                                            ON_ObjectArray(ON_Texture);

    /*
    Description:
    The m_material_channel[] array is used to provide per face rendering material support for ON_SubD and ON_Brep objects.
    ON_Mesh objects to not support per face render materials.
    The application specifies a base ON_Material for rendering the subd or brep and a way to find materials from ON_UUID values.
    ON_Material.Id() returns the id for any given material.
    
    ON_BrepFace::MaterialChannelIndex() and ON_SubDFace::MaterialChannelIndex()
    specify a material channel index. If this value is 0, then the base
    material is used to render the face. Otherwise the material with
    id = base.MaterialChannelIdFromIndex( face.MaterialChannelIndex() )
    is used to render the face.
    */
    m_material_channel:                                    ON_SimpleArray(ON_UuidIndex);

    anon_enum_20 :: enum s32 {
        MaximumMaterialChannelIndex :: 65535;
    }

    m_plugin_id:                                           ON_UUID;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class ON_PhysicallyBasedMaterial
//
ON_PhysicallyBasedMaterial :: struct {
    vtable: *ON_PhysicallyBasedMaterial_VTable;
    //Reflectance model to use.  Default is GGX.  Renderers do not need to support a specific
    //model, but certain material definitions may specify in the hope that a renderer will support.
    //GGX support is built into Rhino (Cycles, display)
    BRDFs :: enum s32 {
        GGX  :: 0;
        Ward :: 1;
    }

    ParametersNames :: struct {
        __empty_struct_padding: u8; // C++ makes empty structs have length 1
    }

    Impl :: struct {}

    _impl: [64] u8;
}
ON_PhysicallyBasedMaterial_VTable :: struct #type_info_none {
    Destructor: (this: *ON_PhysicallyBasedMaterial, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    IsValid: (this: *ON_PhysicallyBasedMaterial, text_log: *ON_TextLog = null) -> bool #cpp_method;

    BRDF: (this: *ON_PhysicallyBasedMaterial) -> ON_PhysicallyBasedMaterial.BRDFs #cpp_method;
    SetBRDF: (this: *ON_PhysicallyBasedMaterial, unknown0: *ON_PhysicallyBasedMaterial.BRDFs) -> void #cpp_method;

    BaseColor: (this: *ON_PhysicallyBasedMaterial) -> ON_4fColor #cpp_method #cpp_return_type_is_non_pod;
    SetBaseColor: (this: *ON_PhysicallyBasedMaterial, unknown0: *ON_4fColor) -> void #cpp_method;

    Subsurface: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetSubsurface: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    SubsurfaceScatteringColor: (this: *ON_PhysicallyBasedMaterial) -> ON_4fColor #cpp_method #cpp_return_type_is_non_pod;
    SetSubsurfaceScatteringColor: (this: *ON_PhysicallyBasedMaterial, unknown0: *ON_4fColor) -> void #cpp_method;

    SubsurfaceScatteringRadius: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetSubsurfaceScatteringRadius: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Metallic: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetMetallic: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Specular: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetSpecular: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    ReflectiveIOR: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetReflectiveIOR: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    SpecularTint: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetSpecularTint: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Roughness: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetRoughness: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Anisotropic: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetAnisotropic: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    AnisotropicRotation: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetAnisotropicRotation: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Sheen: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetSheen: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    SheenTint: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetSheenTint: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Clearcoat: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetClearcoat: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    ClearcoatRoughness: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetClearcoatRoughness: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    OpacityIOR: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetOpacityIOR: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Opacity: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetOpacity: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    OpacityRoughness: (this: *ON_PhysicallyBasedMaterial) -> float64 #cpp_method;
    SetOpacityRoughness: (this: *ON_PhysicallyBasedMaterial, unknown0: float64) -> void #cpp_method;

    Emission: (this: *ON_PhysicallyBasedMaterial) -> ON_4fColor #cpp_method #cpp_return_type_is_non_pod;
    SetEmission: (this: *ON_PhysicallyBasedMaterial, unknown0: ON_4fColor) -> void #cpp_method;

    FindTexture: (this: *ON_PhysicallyBasedMaterial, filename: *s16, type: ON_Texture.TYPE, i0: s32 = -1) -> s32 #cpp_method;

    AddTexture: (this: *ON_PhysicallyBasedMaterial, filename: *s16, type: ON_Texture.TYPE) -> s32 #cpp_method;

    AddTexture_1: (this: *ON_PhysicallyBasedMaterial, tx: /*const reference*/ *ON_Texture) -> s32 #cpp_method;

    DeleteTexture: (this: *ON_PhysicallyBasedMaterial, filename: *s16, type: ON_Texture.TYPE) -> s32 #cpp_method;

    Material_1: (this: /*const*/ *ON_PhysicallyBasedMaterial) -> *ON_Material #cpp_method;

    Material: (this: *ON_PhysicallyBasedMaterial) -> *ON_Material #cpp_method;

    SynchronizeLegacyMaterial: (this: *ON_PhysicallyBasedMaterial) -> void #cpp_method;

    ToLegacy: (this: *ON_PhysicallyBasedMaterial) -> void #cpp_method;
}

ON_PhysicallyBasedMaterial_Destructor :: inline (this: *ON_PhysicallyBasedMaterial, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_PhysicallyBasedMaterial_IsValid :: inline (this: *ON_PhysicallyBasedMaterial, text_log: *ON_TextLog = null) -> bool { return this.vtable.IsValid(this, text_log); }

ON_PhysicallyBasedMaterial_BRDF :: inline (this: *ON_PhysicallyBasedMaterial) -> ON_PhysicallyBasedMaterial.BRDFs { return this.vtable.BRDF(this); }
ON_PhysicallyBasedMaterial_SetBRDF :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: *ON_PhysicallyBasedMaterial.BRDFs) { this.vtable.SetBRDF(this, unknown0); }

ON_PhysicallyBasedMaterial_BaseColor :: inline (this: *ON_PhysicallyBasedMaterial) -> ON_4fColor { return this.vtable.BaseColor(this); }
ON_PhysicallyBasedMaterial_SetBaseColor :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: *ON_4fColor) { this.vtable.SetBaseColor(this, unknown0); }

ON_PhysicallyBasedMaterial_Subsurface :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Subsurface(this); }
ON_PhysicallyBasedMaterial_SetSubsurface :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetSubsurface(this, unknown0); }

ON_PhysicallyBasedMaterial_SubsurfaceScatteringColor :: inline (this: *ON_PhysicallyBasedMaterial) -> ON_4fColor { return this.vtable.SubsurfaceScatteringColor(this); }
ON_PhysicallyBasedMaterial_SetSubsurfaceScatteringColor :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: *ON_4fColor) { this.vtable.SetSubsurfaceScatteringColor(this, unknown0); }

ON_PhysicallyBasedMaterial_SubsurfaceScatteringRadius :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.SubsurfaceScatteringRadius(this); }
ON_PhysicallyBasedMaterial_SetSubsurfaceScatteringRadius :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetSubsurfaceScatteringRadius(this, unknown0); }

ON_PhysicallyBasedMaterial_Metallic :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Metallic(this); }
ON_PhysicallyBasedMaterial_SetMetallic :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetMetallic(this, unknown0); }

ON_PhysicallyBasedMaterial_Specular :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Specular(this); }
ON_PhysicallyBasedMaterial_SetSpecular :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetSpecular(this, unknown0); }

ON_PhysicallyBasedMaterial_ReflectiveIOR :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.ReflectiveIOR(this); }
ON_PhysicallyBasedMaterial_SetReflectiveIOR :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetReflectiveIOR(this, unknown0); }

ON_PhysicallyBasedMaterial_SpecularTint :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.SpecularTint(this); }
ON_PhysicallyBasedMaterial_SetSpecularTint :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetSpecularTint(this, unknown0); }

ON_PhysicallyBasedMaterial_Roughness :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Roughness(this); }
ON_PhysicallyBasedMaterial_SetRoughness :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetRoughness(this, unknown0); }

ON_PhysicallyBasedMaterial_Anisotropic :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Anisotropic(this); }
ON_PhysicallyBasedMaterial_SetAnisotropic :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetAnisotropic(this, unknown0); }

ON_PhysicallyBasedMaterial_AnisotropicRotation :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.AnisotropicRotation(this); }
ON_PhysicallyBasedMaterial_SetAnisotropicRotation :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetAnisotropicRotation(this, unknown0); }

ON_PhysicallyBasedMaterial_Sheen :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Sheen(this); }
ON_PhysicallyBasedMaterial_SetSheen :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetSheen(this, unknown0); }

ON_PhysicallyBasedMaterial_SheenTint :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.SheenTint(this); }
ON_PhysicallyBasedMaterial_SetSheenTint :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetSheenTint(this, unknown0); }

ON_PhysicallyBasedMaterial_Clearcoat :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Clearcoat(this); }
ON_PhysicallyBasedMaterial_SetClearcoat :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetClearcoat(this, unknown0); }

ON_PhysicallyBasedMaterial_ClearcoatRoughness :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.ClearcoatRoughness(this); }
ON_PhysicallyBasedMaterial_SetClearcoatRoughness :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetClearcoatRoughness(this, unknown0); }

ON_PhysicallyBasedMaterial_OpacityIOR :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.OpacityIOR(this); }
ON_PhysicallyBasedMaterial_SetOpacityIOR :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetOpacityIOR(this, unknown0); }

ON_PhysicallyBasedMaterial_Opacity :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.Opacity(this); }
ON_PhysicallyBasedMaterial_SetOpacity :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetOpacity(this, unknown0); }

ON_PhysicallyBasedMaterial_OpacityRoughness :: inline (this: *ON_PhysicallyBasedMaterial) -> float64 { return this.vtable.OpacityRoughness(this); }
ON_PhysicallyBasedMaterial_SetOpacityRoughness :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: float64) { this.vtable.SetOpacityRoughness(this, unknown0); }

ON_PhysicallyBasedMaterial_Emission :: inline (this: *ON_PhysicallyBasedMaterial) -> ON_4fColor { return this.vtable.Emission(this); }
ON_PhysicallyBasedMaterial_SetEmission :: inline (this: *ON_PhysicallyBasedMaterial, unknown0: ON_4fColor) { this.vtable.SetEmission(this, unknown0); }

ON_PhysicallyBasedMaterial_FindTexture :: inline (this: *ON_PhysicallyBasedMaterial, filename: *s16, type: ON_Texture.TYPE, i0: s32 = -1) -> s32 { return this.vtable.FindTexture(this, filename, type, i0); }

ON_PhysicallyBasedMaterial_AddTexture :: inline (this: *ON_PhysicallyBasedMaterial, filename: /*const*/ *s16, type: ON_Texture.TYPE) -> s32 { return this.vtable.AddTexture(this, filename, type); }

ON_PhysicallyBasedMaterial_AddTexture_1 :: inline (this: *ON_PhysicallyBasedMaterial, tx: /*const reference*/ *ON_Texture) -> s32 { return this.vtable.AddTexture_1(this, tx); }

ON_PhysicallyBasedMaterial_DeleteTexture :: inline (this: *ON_PhysicallyBasedMaterial, filename: *s16, type: ON_Texture.TYPE) -> s32 { return this.vtable.DeleteTexture(this, filename, type); }

ON_PhysicallyBasedMaterial_Material_1 :: inline (this: /*const*/ *ON_PhysicallyBasedMaterial) -> *ON_Material { return this.vtable.Material_1(this); }

ON_PhysicallyBasedMaterial_Material :: inline (this: *ON_PhysicallyBasedMaterial) -> *ON_Material { return this.vtable.Material(this); }

ON_PhysicallyBasedMaterial_SynchronizeLegacyMaterial :: inline (this: *ON_PhysicallyBasedMaterial) { this.vtable.SynchronizeLegacyMaterial(this); }

ON_PhysicallyBasedMaterial_ToLegacy :: inline (this: *ON_PhysicallyBasedMaterial) { this.vtable.ToLegacy(this); }

vtable :: (obj: *ON_PhysicallyBasedMaterial) -> *ON_PhysicallyBasedMaterial_VTable { return obj.vtable; }


//////////////////////////////////////////////////////////////////////
// class ON_SectionStyle
ON_SectionStyle :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    /// <summary>
    /// Defines how a background fill is applied to a section
    /// </summary>
    SectionBackgroundFillMode :: enum u8 {
        None       :: 0;

        Viewport   :: 1;

        SolidColor :: 2;
    }

    ON_SectionStylePrivate :: struct {}
    m_private: *ON_SectionStylePrivate = null;
}

ON_Layer :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    // The PER_VIEWPORT_SETTINGS enum defines
    // the bits used to set masks in functions used
    // to specify and query per viewport layer settings.
    PER_VIEWPORT_SETTINGS :: enum u32 {
        none                  :: 0;

        id                    :: 1;
        color                 :: 2;
        plot_color            :: 4;
        plot_weight           :: 8;
        visible               :: 16;
        persistent_visibility :: 32;

        all_settings          :: 4294967295;

        per_viewport_none                  :: none;

        per_viewport_id                    :: id;
        per_viewport_color                 :: color;
        per_viewport_plot_color            :: plot_color;
        per_viewport_plot_weight           :: plot_weight;
        per_viewport_visible               :: visible;
        per_viewport_persistent_visibility :: persistent_visibility;

        per_viewport_all_settings          :: all_settings;
    }

    m_iges_level:           s32 = -1; // IGES level number if this layer was made during IGES import

    // Rendering material:
    //   If you want something simple and fast, set
    //   m_material_index to the index of your rendering material
    //   and ignore m_rendering_attributes.
    //   If you are developing a fancy plug-in renderer, and a user is
    //   assigning one of your fabulous rendering materials to this
    //   layer, then add rendering material information to the
    //   m_rendering_attributes.m_materials[] array.
    //
    // Developers:
    //   As soon as m_rendering_attributes.m_materials[] is not empty,
    //   rendering material queries slow down.  Do not populate
    //   m_rendering_attributes.m_materials[] when setting
    //   m_material_index will take care of your needs.
    m_material_index:       s32 = -1;
    m_rendering_attributes: ON_RenderingAttributes;

    m_linetype_index:       s32 = -1; // index of linetype

    // Layer display attributes.
    //   If m_display_material_id is nil, then m_color is the layer color
    //   and defaults are used for all other display attributes.
    //   If m_display_material_id is not nil, then some complicated
    //   scheme is used to decide what objects on this layer look like.
    //   In all cases, m_color is a good choice if you don't want to
    //   deal with m_display_material_id.  In Rhino, m_display_material_id
    //   is used to identify a registry entry that contains user specific
    //   display preferences.
    m_color:                ON_Color;
    m_display_material_id:  ON_UUID;

    m_plot_color:           ON_Color; // printing color

    m_plot_weight_mm:       float64 = 0.0; // printing pen thickness in mm

    m_bExpanded             := true; // If true, when the layer table is displayed in

    // The following information may not be accurate and is subject
    // to change at any time.
    //
    // m_extension_bits & 0x01:
    //   The value of ( m_extension_bits & 0x01) is used to speed
    //   common per viewport visibility and color queries.
    //     0x00 = there may be per viewport settings on this layer.
    //     0x01 = there are no per viewport settings on this layer.
    //
    // m_extension_bits & 0x06:
    //   The value of ( m_extension_bits & 0x06) is the persistent
    //   visibility setting for this layer.
    //     0x00 = no persistent visibility setting
    //     0x02 = persistent visibility = true
    //     0x04 = persistent visibility = false
    //     0x06 = invalid value - treated as 0x00
    //
    // m_extension_bits & 0x18:
    //   The value of ( m_extension_bits & 0x18) is the persistent
    //   locking setting for this layer.
    //     0x00 = no persistent locking setting
    //     0x08 = persistent locking = true
    //     0x10 = persistent locking = false
    //     0x18 = invalid value - treated as 0x00
    m_extension_bits:       ON__UINT8 = 0;
    m_reserved:             ON__UINT16 = 0;

    ON_LayerPrivate :: struct {}
    m_private:              *ON_LayerPrivate = null;
}

//////////////////////////////////////////////////////////////////////
// class ON_Linetype
ON_Linetype :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    ON_LinetypePrivate :: struct {}
    m_private:        *ON_LinetypePrivate = null;
    m_is_set_bits:    u8 = 0;
    m_is_locked_bits: u8 = 0;
    m_cap_style:      ON.LineCapStyle = .Round;
    m_join_style:     ON.LineJoinStyle = .Round;
    m_width:          float64 = 1.0;
    m_width_units:    ON.LengthUnitSystem = .None;
    m_reserved:       [7] u8;

    anon_enum_21 :: enum u8 {
        pattern_bit :: 1;
    }
}

ON_Group :: struct {
    #as using on_modelcomponent: ON_ModelComponent;
}

ON_Light :: struct {
    #as using on_geometry: ON_Geometry;

    m_light_index:      s32;
    m_light_id:         ON_UUID;
    m_light_name:       ON_wString;

    m_bOn:              bool; // true if light is on
    m_style:            ON.light_style; // style of light

    m_ambient:          ON_Color;
    m_diffuse:          ON_Color;
    m_specular:         ON_Color;

    m_direction:        ON_3dVector; // ignored for "point" and "ambient" lights
    m_location:         ON_3dPoint; // ignored for "directional" and "ambient" lights
    // only for linear and rectangular lights
    // ends of linear lights are m_location and m_location+m_length
    m_length:           ON_3dVector;

    // only for rectangular lights
    // corners of rectangular lights are m_location, m_location+m_length,
    // m_location+m_width, m_location+m_width+m_length
    m_width:            ON_3dVector;

    // Linear dimming/brightening factor: 0.0 = off, 1.0 = 100%.
    // Values < 0.0 and values > 1.0 are permitted but are
    // not consistently interpreted by various renderers.
    // Renderers should clamp the range to [0.0, 1.0] if their
    // lighting model does not support more exotic interpretations
    // of m_intensity.
    m_intensity:        float64;

    // Used by lighting models that reference lighting fixtures.
    // Values < 0.0 are invalid.  If m_watts is 0.0, the
    // value is ignored.
    m_watts:            float64;

    m_spot_angle:       float64; // 0.0 to 90.0
    // 0.0 to 128.0
    // 0.0 = uniform
    // 128.0 = high focus
    m_spot_exponent:    float64;

    m_hotspot:          float64; // 0.0 to 1.0 (See SetHotSpot() for details)

    // each entry >= 0.0
    // att = 1/(a[0] + d*a[1] + d^2*a[2])
    // where d = distance to light
    m_attenuation:      ON_3dVector;

    m_shadow_intensity: float64; // 0.0 = no shadow casting, 1.0 = full shadow casting
}

// NOTE:  ON_3dPoint is much more efficient than ON_Point.
//        Use ON_Point when you need a polymorphic 3d point
//        that is derived from ON_Geometry or ON_Object.
ON_Point :: struct {
    #as using on_geometry: ON_Geometry;

    point: ON_3dPoint;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class  ON_PointCloud  - unordered set of points
//          ON_PointField  - point height field
//
ON_PointCloud :: struct {
    #as using on_geometry: ON_Geometry;

    /////////////////////////////////////////////////////////////////
    // Implementation
    m_P:            ON_3dPointArray;

    /////////////////////////////////////////////////////////////////
    // Implementation - OPTIONAL point normal
    //    Either m_N[] has zero count or it has the same
    //    count as m_P[], in which case m_N[j] reports
    //    the color assigned to m_P[j].
    m_N:            ON_SimpleArray(ON_3dVector);

    /////////////////////////////////////////////////////////////////
    // Implementation - OPTIONAL point color
    //    Either m_C[] has zero count or it has the same
    //    count as m_P[], in which case m_C[j] reports
    //    the color assigned to m_P[j].
    m_C:            ON_SimpleArray(ON_Color);

    /////////////////////////////////////////////////////////////////
    // Implementation - OPTIONAL point value (intensity)
    //    Either m_V[] has zero count or it has the same
    //    count as m_P[], in which case m_V[j] reports
    //    the value assigned to m_P[j].
    m_V:            ON_SimpleArray(float64);

    /////////////////////////////////////////////////////////////////
    // Implementation - RUNTIME point visibility - not saved in 3dm files.
    //    If m_H.Count() = m_P.Count(), then
    //    m_H[j] is true if the point m_P[j]
    //    is hidden.  Otherwise, all points are visible.
    //    m_hidden_count = number of true values in the m_H[] array.
    m_H:            ON_SimpleArray(bool);
    m_hidden_count: u32 = 0;

    m_plane:        ON_Plane;
    m_bbox:         ON_BoundingBox;
    // bit 1 is set if ordered
    // bit 2 is set if plane is set
    m_flags:        u32 = 0;
}

/*
Description:
An ON_CurveProxy is a reference to an ON_Curve.
One may specify a subdomain of the referenced curve
and apply a affine reparameterization, possibly  reversing
the orientation.  The underlying curve cannot be modified through
the curve proxy.
Details:
The reference to the "real_curve" is const, so most functions
which modify an ON_Curve will fail when passed an ON_CurveProxy.
*/
ON_CurveProxy :: struct {
    #as using on_curve: ON_Curve;

    // "real" curve geometry that "this" is a proxy for.
    m_real_curve:        *ON_Curve;

    // If true, the parameterization of "this" proxy is
    // the reverse of the m_curve parameterization.
    m_bReversed:         bool;

    // The m_real_curve_domain interval is always increasing and included in
    // m_real_curve->Domain().  The m_real_curve_domain interval defines the portion
    // of m_real_curve that "this" proxy uses and it can be a proper
    // sub-interval of m_real_curve->Domain().
    m_real_curve_domain: ON_Interval;

    // The evaluation domain of this curve.  If "t" is a parameter for
    // "this" and "r" is a parameter for m_real_curve, then when m_bReversed==false
    // we have
    // t = m_this_domain.ParameterAt(m_real_curve_domain.NormalizedParameterAt(r))
    // r = m_real_curve_domain.ParameterAt(m_this_domain.NormalizedParameterAt(t))
    // and when m_bReversed==true we have
    // t = m_this_domain.ParameterAt(1 - m_real_curve_domain.NormalizedParameterAt(r))
    // r = m_real_curve_domain.ParameterAt(1 - m_this_domain.NormalizedParameterAt(t))
    m_this_domain:       ON_Interval;
}

ON_SurfaceProxy :: struct {
    #as using on_surface: ON_Surface;

    m_surface:     *ON_Surface;
    m_bTransposed: bool; // proxy surface parameterization is transpose of m_surface
}

/// <summary>
/// The ON_SubDComponentLocation enum is used when an ON_SubD component
/// is referenced and it is important to distinguish between the
/// component's location in the SubD control net and its location
/// in the SubD limit surface.
/// </summary>
ON_SubDComponentLocation :: enum u8 {
    Unset      :: 0;

    ControlNet :: 1;

    Surface    :: 2;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDDisplayParameters
//
//  A collection of parameters that are passed to functions that
//  calculate a various representations of ON_SubD objects.
//
ON_SubDDisplayParameters :: struct {
    anon_enum_22 :: enum u32 {
        UnsetDensity                :: 0;

        MinimumUserInterfaceDensity :: 1;

        MaximumUserInterfaceDensity :: 5;

        MinimumAdaptiveDensity      :: 1;

        MinimumDensity              :: 0;

        ExtraCoarseDensity          :: 1;

        CoarseDensity               :: 2;

        MediumDensity               :: 3;

        FineDensity                 :: 4;

        DefaultDensity              :: 4;

        ExtraFineDensity            :: 5;

        MaximumDensity              :: 6;
    }

    anon_enum_23 :: enum u32 {
        AdaptiveDisplayMeshQuadMaximum :: 512000;
    }

    subd_mesh :: enum u8 {
        density_mask          :: 7;
        location_bit          :: 8;
        absolute_density_bit  :: 16;
        compute_curvature_bit :: 32;

        nondefault_bit        :: 128;

        subd_mesh_density_mask          :: density_mask;
        subd_mesh_location_bit          :: location_bit;
        subd_mesh_absolute_density_bit  :: absolute_density_bit;
        subd_mesh_compute_curvature_bit :: compute_curvature_bit;

        subd_mesh_nondefault_bit        :: nondefault_bit;
    }

    m_bDisplayDensityIsAbsolute   := false; // default must be false so 7.0 to 7.1 transition works correctly
    m_display_density:            u8 = 0; // SubD display density (0,1,2,3,4,5,6)

    m_reserved:                   u16 = 0;

    // If m_bControlNetMesh is false, a mesh of the limit surface is produced.
    // If m_bControlNetMesh is true, a mesh of the subdivided control net is produced.
    m_bControlNetMesh             := false;

    Context :: enum u8 {
        Unknown     :: 0;

        SubDToMesh  :: 1;

        SubDToNURBS :: 2;
    }

    m_context:                    Context = .Unknown;

    m_bComputeCurvature           := false;
    m_reserved3:                  u8 = 0;
    m_reserved4:                  u32 = 0;
    m_reserved5:                  u32 = 0;
    m_reserved6:                  ON__UINT_PTR = 0;
    m_reserved7:                  float64 = 0.0;

    m_terminator:                 *ON_Terminator = null;

    // optional progress reporting
    m_progress_reporter:          *ON_ProgressReporter = null;
    m_progress_reporter_interval: ON_Interval;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class  ON_Mesh
//
ON_MeshParameters :: struct {
    MESH_STYLE :: enum u8 {
        unset_mesh_style       :: 0;
        render_mesh_fast       :: 1;
        render_mesh_quality    :: 2;

        render_mesh_custom     :: 9;
        render_mesh_per_object :: 10;
    }

    //////////////////////////////////////////////////////////////
    //
    // The MESH_PARAMETER_ID enum values are used to identify
    // mesh creation parameters.
    //
    MESH_PARAMETER_ID :: enum u32 {
        unspecified_mesh_parameter_id                  :: 0;

        bComputeCurvature_parameter_id                 :: 1;
        bSimplePlanes_parameter_id                     :: 2;
        bRefine_parameter_id                           :: 3;
        bJaggedSeams_parameter_id                      :: 4;
        bDoublePrecision_parameter_id                  :: 5;
        mesher_parameter_id                            :: 6;
        texture_range_parameter_id                     :: 7;
        tolerance_parameter_id                         :: 8;
        relative_tolerance_parameter_id                :: 9;
        min_tolerance_parameter_id                     :: 10;
        min_edge_length_parameter_id                   :: 11;
        max_edge_length_parameter_id                   :: 12;
        grid_aspect_ratio_parameter_id                 :: 13;
        grid_min_count_parameter_id                    :: 14;
        grid_max_count_parameter_id                    :: 15;
        grid_angle_parameter_id                        :: 16;
        grid_amplification_parameter_id                :: 17;
        refine_angle_parameter_id                      :: 18;
        face_type_parameter_id                         :: 19;
        srf_domain_parameter_id                        :: 20;
        bClosedObjectPostProcess_id                    :: 21;

        mesher_id                                      :: 22;

        crv_tess_min_num_segments_parameter_id         :: 23;
        crv_tess_angle_tol_in_degrees_parameter_id     :: 24;
        crv_tess_max_dist_between_points_parameter_id  :: 25;

        crv_tess_min_parametric_ratio_parameter_id     :: 26;
        bEvaluatorBasedTessellation_parameter_id       :: 27;
        srf_tess_chord_height_parameter_id             :: 28;

        srf_tess_angle_tol_in_degrees_parameter_id     :: 29;
        srf_tess_max_edge_length_parameter_id          :: 30;
        srf_tess_min_edge_length_parameter_id          :: 31;
        srf_tess_min_edge_length_ratio_uv_parameter_id :: 32;
        srf_tess_max_aspect_ratio_parameter_id         :: 33;
        smoothing_passes_parameter_id                  :: 34;

        max_mesh_parameter_id                          :: 35;
    }

    /// <summary>
    /// ON_MeshParameter::Type identifies the type of mesh creation settings.
    /// </summary>
    Type :: enum u8 {
        Unset           :: 0;

        Default         :: 1;

        FastRender      :: 2;

        QualityRender   :: 3;

        DefaultAnalysis :: 4;

        FromMeshDensity :: 5;

        Custom          :: 15;
    }

    //////////////////////////////////////////////////////////
    //
    // BEGIN Rhino Legacy parameters
    //
    m_bCustomSettings                        := false;
    m_bCustomSettingsEnabled                 := true;
    m_bComputeCurvature                      := false;
    m_bSimplePlanes                          := false;

    m_bRefine                                := true;
    m_bJaggedSeams                           := false;
    m_bDoublePrecision                       := false;
    m_bClosedObjectPostProcess               := false;

    m_mesher_id:                             ON_UUID;

    m_mesher:                                u8 = 0;
    m_texture_range:                         u8 = 2;
    m_face_type:                             u8 = 0;

    // Uses ON_SubDDisplayParameters::EncodeAsUnsignedChar() / ON_SubDDisplayParameters::DecodeFromUnsignedChar()
    // to save ON_SubDDisplayParameters settings in this class.
    // (Done this way to avoid breaking the version 6.0 C++ public SDK because ON_SubDDisplayParameters is to big to add to this class.)
    m_subd_mesh_parameters_as_char:          u8 = 0;

    m_grid_min_count:                        s32 = 0;
    m_grid_max_count:                        s32 = 0;
    m_geometry_settings_hash:                ON_SHA1_Hash; // the cached hash includes SubD meshing parameters

    m_reserved2:                             ON__UINT32 = 0;

    m_tolerance:                             float64 = 0.0;
    m_relative_tolerance:                    float64 = 0.0;
    m_min_tolerance:                         float64 = 0.0;
    m_min_edge_length:                       float64 = 0.0001;
    m_max_edge_length:                       float64 = 0.0;
    m_grid_aspect_ratio:                     float64 = 6.0;
    m_grid_angle_radians:                    float64 = 62.831853 / 180.0;
    m_grid_amplification:                    float64 = 1.0;
    m_refine_angle_radians:                  float64 = 62.831853 / 180.0;

    //
    // BEGIN Rhino Legacy parameters
    //
    //////////////////////////////////////////////////////////
    m_reserved3                              := false;
    m_reserved4                              := false;

    //////////////////////////////////////////////////////////
    //
    // BEGIN Pangolin parameters
    //
    m_bEvaluatorBasedTessellation            := false;
    m_curve_tess_min_num_segments:           s32 = 0;
    m_curve_tess_angle_tol_in_degrees:       float64 = 20.0;
    m_curve_tess_max_dist_between_points:    float64 = 0.0;
    m_curve_tess_min_parametric_ratio:       float64 = 0.00001;
    m_surface_tess_angle_tol_in_degrees:     float64 = 20.0;
    m_surface_tess_max_edge_length:          float64 = 0.0;
    m_surface_tess_min_edge_length:          float64 = 0.0;
    m_surface_tess_min_edge_length_ratio_uv: float64 = 0.0001;
    m_surface_tess_max_aspect_ratio:         float64 = 0.0;
    m_smoothing_passes:                      s32 = 0;

    // This value is perminantly reserved for use by ON_SubD core code
    // that is part of public opennurbs.
    m_subd_stuff_reserved5:                  u32 = 0;

    // NOTE WELL: This value cannot become a managed pointer.
    // Lots of legacy code manages ON_MeshParameter values in ways
    // that are incompatible with this class having a managed pointer.
    m_reserved6:                             ON__UINT64 = 0;
}

ON_MeshCurvatureStats :: struct {
    m_style:          ON.curvature_style;

    // curvature values >= this are considered infinite
    // and not used to compute the m_average or m_adev
    m_infinity:       float64;

    m_count_infinite: s32; // number of "infinite" values
    m_count:          s32; // count of "finite" values
    m_mode:           float64; // mode of "finite" values
    m_average:        float64; // average of "finite" values
    m_adev:           float64; // average deviation of "finite" values

    m_range:          ON_Interval;
}

///////////////////////////////////////////////////////////////////////////////
//
// Class  ON_MeshTopology
//
ON_MeshTopologyVertex :: struct {
    // m_tope_count = number of topological edges that begin or
    // end at this topological vertex.
    m_tope_count: s32;

    // m_topei[] is an array of length m_tope_count with the indices
    // of the topological edges that begin or end at this topological
    // vertex.  Generally, these edges are listed in no particular
    // order.  If you want the edges listed "radially", then call
    // ON_MeshTopology::SortVertexEdges.
    m_topei:      *s32;

    // m_v_count = number of ON_Mesh vertices that correspond to
    // this topological vertex.
    m_v_count:    s32;

    // m_vi[] is an array of length m_v_count with the indices of the
    // ON_Mesh vertices that correspond to this topological vertex.
    m_vi:         *s32;
}

ON_MeshTopologyEdge :: struct {
    // m_topvi[] = indices of the topological vertices where the edge begins and ends.
    m_topvi:      [2] s32;

    // m_topf_count = number of topological faces that share this topological edge.
    m_topf_count: s32;

    // m_topfi[] is an array of length m_topf_count with the indices of the
    // topological faces that share this topological edge.
    m_topfi:      *s32;
}

ON_MeshTopologyFace :: struct {
    /*
    m_topei[] = indices of the topological edges that bound the face.
    If m_topei[2] = m_topei[3], then the face is a triangle, otherwise
    the face is a quad.
    
    NOTE WELL:
    The topological edge with index m_topei[k] ENDS at the
    vertex corresponding to ON_MeshFace.vi[k]. So, ...
    
    If the face is a quad, (ON_MeshFace.vi[2]!=ON_MeshFace.vi[3]),
    the topological edge with index m_topei[0] STARTS at
    ON_MeshFace.vi[3] and ENDS at ON_MeshFace.vi[0],
    the topological edge with index m_topei[1] STARTS at
    ON_MeshFace.vi[0] and ENDS at ON_MeshFace.vi[1],
    the topological edge with index m_topei[2] STARTS at
    ON_MeshFace.vi[1] and ENDS at ON_MeshFace.vi[2], and
    the topological edge with index m_topei[3] STARTS at
    ON_MeshFace.vi[2] and ENDS at ON_MeshFace.vi[3],
    
    If the face is a triangle, (ON_MeshFace.vi[2]==ON_MeshFace.vi[3]),
    the topological edge with index m_topei[0] STARTS at
    ON_MeshFace.vi[2] and ENDS at ON_MeshFace.vi[0],
    the topological edge with index m_topei[1] STARTS at
    ON_MeshFace.vi[0] and ENDS at ON_MeshFace.vi[1],
    the topological edge with index m_topei[2] STARTS at
    ON_MeshFace.vi[1] and ENDS at ON_MeshFace.vi[2].
    */
    m_topei: [4] s32;

    /*
    If m_reve[i] is 0, then the orientation of the edge matches the
    orientation of the face.  If m_reve[i] is 1, then the orientation
    of the edge is opposite that of the face.
    */
    m_reve:  [4] u8;
}

ON_MeshFace :: struct {
    vi: [4] s32; // vertex index - vi[2]==vi[3] for triangles
}

ON_MeshTriangle :: struct {
    m_vi: [3] u32; // vertex index list
}

ON_MeshFaceList :: struct {
    m_bQuadFaces:  bool;
    m_face_count:  u32;
    m_face_stride: u32;
    m_faces:       *u32;
}

ON_MeshVertexFaceMap :: struct {
    m_vertex_count:    u32;
    m_face_count:      u32;
    m_vertex_face_map: **u32;
    m_p:               *void;
}

ON_MeshNgonBuffer :: struct {
    m_ngon_buffer: [10] ON__UINT_PTR;
}

ON_MeshNgon :: struct {
    m_Vcount: u32; // number of vertices and sides (the "n" in n-gon)
    m_Fcount: u32; // number of faces

    // N-gon vertex indices
    // An array of m_Vcount indices into the mesh's m_V[] vertex array.
    // Unset elements have the value ON_UNSET_UINT_INDEX.  If the ngon
    // in managed by an ON_NgonAllocator, then the memory for m_vi[]
    // is also managed by that ON_NgonAllocator.
    m_vi:     *u32;

    // N-gon face indices
    // An array of m_Fcount indices into the mesh's m_F[] face array.
    // Unset elements have the value ON_UNSET_UINT_INDEX.  If the ngon
    // in managed by an ON_NgonAllocator, then the memory for m_fi[]
    // is also managed by that ON_NgonAllocator.
    m_fi:     *u32;
}

ON_MeshNgonAllocator :: struct {
    m_7:      ON_FixedSizePool; // Vcount+Fcount <= 7
    m_15:     ON_FixedSizePool; // Vcount+Fcount <= 15
    m_31:     *void; // available for Vcount+Fcount <= 31
    m_63:     *void; // available for Vcount+Fcount <= 63
    m_active: *void; // active Vcount+Fcount >= 16
}

ON_MeshFaceSide :: struct {
    m_vi:    [2] u32; // vertex indices or ids (equal values indicate unset)
    m_fi:    u32; // face index or id
    // triangles use 0,1,3, quads use 0,1,2,3
    // m_side 0 connect face vertex 0 to face vertex 1.
    m_side:  u8;

    m_dir:   u8; // 0 = counterclockwise, 1 = clockwise (reversed)
    m_value: u16; // Use depends on context.
    m_id:    u32; // Use depends on context - typically identifies and edge or ngon
}

ON_MeshPart :: struct {
    vi:             [2] s32; // subinterval of mesh m_V[] array
    fi:             [2] s32; // subinterval of mesh m_F[] array
    vertex_count:   s32; // = vi[1] - vi[0];
    triangle_count: s32; // tris + 2*quads >= fi[1] - fi[0]
}

ON_MeshTopology :: struct {
    //////////
    // The parent ON_Mesh geometry used to compute this mesh topology.
    m_mesh:       *ON_Mesh;

    //////////
    // m_topv_map[] has length m_mesh.VertexCount() and
    // m_topv[m_topv_map[vi]] is the topological mesh vertex that is associated
    // the with the mesh vertex m_mesh.m_V[vi].
    m_topv_map:   ON_SimpleArray(s32);

    ////////////
    // Array of topological mesh vertices.  See the comments in the definition
    // of ON_MeshTopologyVertex for details.
    m_topv:       ON_SimpleArray(ON_MeshTopologyVertex);

    ////////////
    // Array of topological mesh edges.  See the comments in the definition
    // of ON_MeshTopologyEdge for details.
    m_tope:       ON_SimpleArray(ON_MeshTopologyEdge);

    ////////////
    // Array of topological mesh faces.  The topological face
    // m_topf[fi] corresponds to the mesh face ON_Mesh.m_F[fi].
    // See the comments in the definition of ON_MeshTopologyFace
    // for details. To get the indices of the mesh topology
    // vertices at the face corners use
    // topvi = m_topv_map[m_mesh.m_F[fi].vi[n]]
    m_topf:       ON_SimpleArray(ON_MeshTopologyFace);

    // efficient workspaces for
    memchunk :: struct {
        next: *memchunk;
    }

    m_memchunk:   *memchunk;

    m_b32IsValid: s32; // sizeof(m_bIsValid) must be 4 - it is used in sleep locks.
}

ON_MeshPartition :: struct {
    // maximum number of vertices in a partition
    m_partition_max_vertex_count:   s32;

    // maximum number of triangles in a partition (quads count as 2 triangles)
    m_partition_max_triangle_count: s32;

    // Partition i uses
    // vertices m_V[j] where
    //
    //   m_part[i].vi[0] <= j < m_part[i].vi[1]
    //
    // and uses faces m_F[k] where
    //
    //    m_part[i].fi[0] <= k < m_part[i].fi[1]
    m_part:                         ON_SimpleArray(ON_MeshPart);
}

ON_MappingTag :: struct {
    // m_mapping_id identifies the mapping used to create
    // the texture coordinates and/or false colors.
    m_mapping_id:   ON_UUID;

    m_mapping_type: ON_TextureMapping.TYPE = .no_mapping;

    // The m_mapping_crc is a CRC of a SHA1 hash of the parameters used in
    // the calculation to set the current texture coordinates and/or vertex colors.
    // This CRC is used to detect when the the texture coordinates and/or false colors need to be updated.
    // (Saving the SHA1 hash itself would be better, but changing m_mapping_crc to a SHA1 hash would break the SDK.)
    //
    // When m_mapping_id = ON_nil_uuid and m_mapping_type = ON_TextureMapping::TYPE::no_mapping,
    // m_mapping_crc has no meaning and is ignored by operator== and operator!=.
    //
    // When m_mapping_id = ON_MappingTag::SurfaceParameterMapping.m_mapping_id and m_mapping_type = ON_TextureMapping::TYPE::srfp_mapping,
    // m_mapping_crc can be set from a uvw texture coordinate transformation.
    m_mapping_crc:  ON__UINT32 = 0;

    // It and records transformations applied
    // to the mesh after the texture coordinates were
    // calculated.  If the texture mapping does not
    // change when the mesh is transformed, then set
    // m_mesh_xform to zero so that compares will work right.
    //
    // When m_mapping_id = ON_nil_uuid and m_mapping_type = ON_TextureMapping::TYPE::no_mapping,
    // m_mesh_xform has no meaning and is ignored by operator== and operator!=.
    //
    // When m_mapping_id = ON_MappingTag::SurfaceParameterMapping.m_mapping_id and m_mapping_type = ON_TextureMapping::TYPE::srfp_mapping,
    // m_mesh_xform has no meaning and is ignored by operator== and operator!=.
    m_mesh_xform:   ON_Xform;
}

ON_TextureCoordinates :: struct {
    m_tag: ON_MappingTag;
    m_dim: s32; // 1, 2, or 3
    m_T:   ON_SimpleArray(ON_3fPoint); // texture coordinates
}

ON_SurfaceCurvatureColorMapping :: struct {
    m_is_set:               u8 = 0; // 0 = not set, 1 = this is valid and set, 2 = unknown
    m_reserved1:            ON__UINT8 = 0;
    m_reserved2:            ON__UINT16 = 0;
    m_kappa_style:          ON.curvature_style = .unknown_curvature_style;
    m_kappa_range:          ON_Interval;
    m_hue_range_in_radians: ON_Interval;
}

ON_SurfaceDraftAngleColorMapping :: struct {
    m_is_set:                 u8 = 0; // 0 = not set, 1 = this is valid and set, 2 = unknown
    m_reserved1:              ON__UINT8 = 0;
    m_reserved2:              ON__UINT16 = 0;
    m_reserved3:              ON__UINT32 = 0;
    m_up:                     ON_3dVector;
    m_angle_range_in_radians: ON_Interval;
    m_hue_range_in_radians:   ON_Interval;
}

////////////////////////////////////////////////////////////////
//
//   Definition of virtual parametric surface
//
////////////////////////////////////////////////////////////////
ON_Mesh :: struct {
    #as using on_geometry: ON_Geometry;

    ON_V4V5_MeshNgonList :: struct {}

    /*
    Description:
    m_dV[] double precision vertices.
    m_V[] single precision vertices.
    
    If m_dV[] is not empty, then m_V and m_dV should have the same length
    and HasSynchronizedDoubleAndSinglePrecisionVertices() should be true.
    
    Otherwise a bug incorrectly modified vertex location information.
    
    If m_dV[] and m_V[] are in use and you modify vertex locations or count,
    then your calculation should insure both are properly updated.
    */
    m_dV:                ON_3dPointArray;
    m_V:                 ON_3fPointArray;

    // m_F[] facets (triangles or quads)
    m_F:                 ON_SimpleArray(ON_MeshFace);

    m_NgonMap:           ON_SimpleArray(u32); // invalid if m_NgonMap.Count() != m_F.Count()
    m_Ngon:              ON_SimpleArray(*ON_MeshNgon);
    m_NgonAllocator:     ON_MeshNgonAllocator; // use this to allocate elements added to m_Ngon;

    // m_N[] OPTIONAL vertex unit normals
    // If m_N[] is empty or m_N.Count() != m_V.Count(),
    // Either m_N[] has zero count or it m_N[j] is the
    // the unit vertex normal at m_V[j].
    m_N:                 ON_3fVectorArray;

    // m_FN[] OPTIONAL face unit normals
    // If m_FN[] is empty or m_FN.Count() != m_F.Count(),
    // then m_FN is ignored.  Otherwise m_FN[j] is the
    // unit normal for the facet m_F[j].
    m_FN:                ON_3fVectorArray;

    m_Ttag:              ON_MappingTag; // DEPRECATED

    m_T:                 ON_2fPointArray; // DEPRECATED

    // RUNTIME ONLY
    //   This array is used to cache texture coordinates used by
    //   rendering applications that require 1d, 2d or 3d texture
    //   coordinates, or multiple sets of texture coordinates
    //   (e.g. blended textures with different mappings).
    //   Users are responsible for verifying
    //   m_TC[i].m_T.Count() = m_V.Count()
    m_TC:                ON_ClassArray(ON_TextureCoordinates);

    /////////////////////////////////////////////////////////////////
    // Texture coordinates / surface parameters
    //
    // If m_S.Count() == m_V.Count(), then the mesh has texture
    // coordinates, or it is a tessellation of a parameteric surface
    // and m_S[j] is the texture coordinate / surface parameter at
    // m_V[j].
    // If the values in m_S are changed, then you need to call
    // InvalidateCachedTextureCoordinates().
    // Storing values in m_S[] is OPTIONAL.
    m_S:                 ON_2dPointArray;

    m_srf_domain:        [2] ON_Interval; // surface evaluation domain.

    // If m_srf_scale[] has positive values, then they represent
    // the world coordinate size of a rectangle that would
    // minimize texture distortion if it were mapped to the
    // mesh using normalized surface evaluation parameters.
    // This information is used to calculate high quality
    // packed texture coordinates.
    m_srf_scale:         [2] float64;

    // Packed texture information.
    //
    // If either of the m_packed_tex_domain[] intervals is a
    // proper subinterval of (0,1), then a texture packing
    // calculation assigned this subrectangle to this mesh.
    m_packed_tex_domain: [2] ON_Interval;

    // The m_packed_tex_rotate setting is valid only when
    // m_S, m_srf_domain, m_packed_scale[] and
    // m_packed_tex_domain[] are all valid and the texture
    // coordinates are based on surface evaluation parameters.
    // In this special situation, this boolean records the
    // correspondence between the the surface parameters, (u,v),
    // and the packed texture coordinates, (s,t),
    //
    //   m_packed_tex_rotate = false:
    //     a = m_srf_domain[0].NormalizedParameterAt(u);
    //     b = m_srf_domain[1].NormalizedParameterAt(v);
    //     s = m_packed_tex_domain[0].ParameterAt(a);
    //     t = m_packed_tex_domain[1].ParameterAt(b);
    //
    //     x = m_packed_tex_domain[0].NormalizedParameterAt(s);
    //     y = m_packed_tex_domain[1].NormalizedParameterAt(t);
    //     u = m_srf_domain[0].ParameterAt(x);
    //     v = m_srf_domain[1].ParameterAt(y);
    //
    //   m_packed_tex_rotate = true:
    //     a = m_srf_domain[0].NormalizedParameterAt(u);
    //     b = m_srf_domain[1].NormalizedParameterAt(v);
    //     s = m_packed_tex_domain[0].ParameterAt(a);
    //     t = m_packed_tex_domain[1].ParameterAt(1.0-b);
    //
    //     x = m_packed_tex_domain[0].NormalizedParameterAt(s);
    //     y = m_packed_tex_domain[1].NormalizedParameterAt(t);
    //     u = m_srf_domain[0].ParameterAt(y);
    //     v = m_srf_domain[1].ParameterAt(1.0 - x);
    m_packed_tex_rotate: bool;

    // OPTIONAL surface curvatures
    // Either m_K[] has zero count or it has the same
    // count as m_V[], in which case m_K[j] reports
    // the surface curvatures at m_V[j].
    m_K:                 ON_SimpleArray(ON_SurfaceCurvature);

    m_Ctag:              ON_MappingTag; // OPTIONAL tag for values in m_C[]
    // OPTIONAL vertex color
    // Either m_C[] has zero count or it has the same
    // count as m_V[], in which case m_C[j] reports
    // the color assigned to m_V[j].
    m_C:                 ON_SimpleArray(ON_Color);

    // OPTIONAL vertex visibility.
    // If m_H.Count() = m_V.Count(), then
    // m_H[vi] is true if the vertex m_V[vi]
    // is hidden.  Otherwise, all vertices are visible.
    m_H:                 ON_SimpleArray(bool);

    // number of vertices that are hidden
    // = number of true values in m_H[] array.
    m_hidden_count:      s32;

    m_parent:            *ON_Object; // runtime parent geometry (use ...::Cast() to get it)

    /////////////////////////////////////////////////////////////////
    // Implementation - mesh topology
    m_top:               ON_MeshTopology;

    // If mesh was created from a parametric surface,
    // these parameters were used to create the mesh.
    m_mesh_parameters:   *ON_MeshParameters;

    m_invalid_count:     s32;
    m_quad_count:        s32;
    m_triangle_count:    s32;

    m_mesh_is_closed:    u8; // 0 = unset, 1 = all edges have 2 or more faces, 2 = at least one boundary edge 
    m_mesh_is_manifold:  u8; // 0 = unset, 1 = all edges have 1 or 2 faces, 2 = not manifold
    m_mesh_is_oriented:  u8; // 0 = unset, 1 = faces normals agree across all edges that have 2 faces, 2 = not oriented
    m_mesh_is_solid:     u8; // 0 = unset, 1 = solid with outward face normals, 2 = solid with inward face normals, 3 = not solid

    m_vertex_bbox:       ON_BoundingBox;

    // 3d bounding box of all referenced unit normals
    // (for estimation of Gauss map bounds)
    m_nbox:              [2] [3] float;

    m_tbox:              [2] [2] float; // 2d bounding box of all referenced texture coordinates

    // cache of recently used tight bounding boxes
    m_tight_bbox_cache:  ON_BoundingBoxCache;

    m_kstat:             [4] *ON_MeshCurvatureStats; // gaussian,mean,min,max,sectionx,sectiony,sectionz

    // sub-mesh information rendering large meshes
    m_partition:         *ON_MeshPartition;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_MeshRef
//
ON_MeshRef :: struct {
    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_mesh_sp is private and all code that manages m_mesh_sp is explicitly implemented in the DLL.
    m_mesh_sp: std.shared_ptr(ON_Mesh);
}

//////////////////////////////////////////////////////////////////////////
//
// ON_MeshCache
//
ON_MeshCache :: struct {
    ON_MeshCacheItem :: struct {}

    m_impl: *ON_MeshCacheItem = null;
}

ON_MeshNgonIterator :: struct {
    m_mesh:                   *ON_Mesh = null;
    m_facedex_to_ngondex_map: *u32 = null;
    m_current_ngon:           ON__UINT_PTR = 0;
    m_ngon_buffer:            ON_MeshNgonBuffer;
    m_current_ngon_ci:        ON_COMPONENT_INDEX;
    m_mesh_face_count:        u32 = 0;
    m_mesh_ngon_count:        u32 = 0;
    m_iterator_index:         u32 = 0;
}

ON_MeshComponentRef :: struct {
    #as using on_geometry: ON_Geometry;

    // referenced mesh
    m_mesh:    *ON_Mesh;

    // component
    m_mesh_ci: ON_COMPONENT_INDEX;
}

ON_PointGrid :: struct {
    #as using on_geometry: ON_Geometry;

    m_point_count:   [2] s32; // number of points (>=1)
    m_point_stride0: s32; // >= m_point_count[1]
    m_point:         ON_3dPointArray;
}

ON_LineCurve :: struct {
    #as using on_curve: ON_Curve;

    /////////////////////////////////////////////////////////////////
    // Interface
    m_line: ON_Line;
    m_t:    ON_Interval; // domain
    m_dim:  s32; // 2 or 3 (2 so ON_LineCurve can be uses as a trimming curve)
}

/*
Description:
ON_ArcCurve is used to represent arcs and circles.
ON_ArcCurve.IsCircle() returns true if the curve
is a complete circle.
Remarks:
- An ON_ArcCurve is a subcurve of a circle, with a
constant speed parameterization. The parameterization is
an affine linear reparameterzation of the underlying arc
m_arc onto the domain m_t.
- A valid ON_ArcCurve has  a strictly increasing Domain() and
ON_ArePointsCoincident(Start,End) == IsCircle()
*/
ON_ArcCurve :: struct {
    #as using on_curve: ON_Curve;

    m_arc: ON_Arc; // default = radius 1 circle in x-y plane

    m_t:   ON_Interval;

    // The dimension of a arc curve can be 2 or 3.
    // (2 so ON_ArcCurve can be used as a trimming curve)
    m_dim: s32 = 3;
}

ON_PolylineCurve :: struct {
    #as using on_curve: ON_Curve;

    m_pline: ON_Polyline;
    m_t:     ON_SimpleArray(float64); // parameters
    m_dim:   s32; // 2 or 3 (2 so ON_PolylineCurve can be uses as a trimming curve)
}

ON_NurbsCurve :: struct {
    #as using on_curve: ON_Curve;

    m_dim:                    s32; // (>=1)

    // 1 for rational B-splines.
    //   Rational control vertices use homogeneous form
    //   and explicit weight values are in m_cv[] array.
    // 0 for non-rational B-splines.
    //   Control vertices have an implicit weight value
    //   of 1.0.  An explicit weight value is not
    //   set in the m_cv[] array.
    m_is_rat:                 s32;

    m_order:                  s32; // order = degree+1 ( order >=2 )

    m_cv_count:               s32; // number of control vertices ( >= order )

    // knot vector memory
    masks :: enum u32 {
        knot_capacity       :: 268435455;
        subdfriendly_tag    :: 2147483648;
        unclamped_knots_tag :: 1073741824;
        all_tags            :: 4026531840;
    }

    m_knot_capacity_and_tags: u32;

    // Knot vector. ( The knot vector has length
    // m_order+m_cv_count-2. )
    m_knot:                   *float64;

    // The pointer to start of "CV[i]" is
    //   m_cv + i*m_cv_stride.
    m_cv_stride:              s32;

    // If m_cv_capacity > 0, then m_cv[] is an array
    // of at least m_cv_capacity doubles whose
    // memory is managed by the ON_NurbsCurve
    // class using onmalloc(), onrealloc(), and onfree().
    // If m_cv_capacity is 0 and m_cv is not
    // nullptr, then m_cv[] is assumed to be big enough
    // for any requested operation and m_cv[] is not
    // deleted by the destructor.
    m_cv_capacity:            s32;

    // Control points.
    //   - The i-th control point begins at
    //     CV(i) = m_cv + (i*m_cv_stride).
    //   - If m_is_rat is false, then the i-th control
    //     point is ( CV(i)[0], ..., CV(i)[m_dim-1] ).
    //   - If m_is_rat is true, then the i-th control
    //     point is stored in HOMOGENEOUS form and is
    //     [ CV(i)[0], ..., CV(i)[m_dim] ].
    m_cv:                     *float64;
}

/*
Description:
An ON_PolyCurve is an ON_Curve represented by a sequence of
contiguous ON_Curve segments.    A valid polycurve is represented
by an array m_segment of Count()>=1 curve objects	and a strictly
increasing array m_t of Count()+1 parameter values.  The i-th
curve segment,  when considered as part of the polycurve, is affinely
reparamaterized from m_t[i] to m_t[i+1], i.e., m_segment[i].Domain()[0]
is mapped to 	m_t[i] and m_segment[i].Domain()[1] is mapped to m_t[i+1].
*/
ON_PolyCurve :: struct {
    #as using on_curve: ON_Curve;

    m_segment: ON_CurveArray; // array of pointers to curves

    m_t:       ON_SimpleArray(float64); // ON_PolyCurve segment parameterizations
}

ON_CurveOnSurface :: struct {
    #as using on_curve: ON_Curve;

    m_c2: *ON_Curve; // REQUIRED parameter space (2d) curve
    m_c3: *ON_Curve; // OPTIONAL 3d curve (approximation) to srf(crv2(t))
    m_s:  *ON_Surface;
}

ON_TensorProduct :: struct {
    vtable: *ON_TensorProduct_VTable;
}
ON_TensorProduct_VTable :: struct #type_info_none {
    Destructor: (this: *ON_TensorProduct, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    DimensionA: (this: *ON_TensorProduct) -> s32 #cpp_method;

    DimensionB: (this: *ON_TensorProduct) -> s32 #cpp_method;

    DimensionC: (this: *ON_TensorProduct) -> s32 #cpp_method;

    Evaluate: (this: *ON_TensorProduct, unknown0: float64, unknown1: *float64, unknown2: float64, unknown3: *float64, unknown4: *float64) -> bool #cpp_method;
}

ON_TensorProduct_Destructor :: inline (this: *ON_TensorProduct, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_TensorProduct_DimensionA :: inline (this: *ON_TensorProduct) -> s32 { return this.vtable.DimensionA(this); }

ON_TensorProduct_DimensionB :: inline (this: *ON_TensorProduct) -> s32 { return this.vtable.DimensionB(this); }

ON_TensorProduct_DimensionC :: inline (this: *ON_TensorProduct) -> s32 { return this.vtable.DimensionC(this); }

ON_TensorProduct_Evaluate :: inline (this: *ON_TensorProduct, unknown0: float64, unknown1: *float64, unknown2: float64, unknown3: *float64, unknown4: *float64) -> bool { return this.vtable.Evaluate(this, unknown0, unknown1, unknown2, unknown3, unknown4); }

vtable :: (obj: *ON_TensorProduct) -> *ON_TensorProduct_VTable { return obj.vtable; }


ON_NurbsSurface :: struct {
    #as using on_surface: ON_Surface;

    m_dim:           s32; // (>=1)

    // 1 for rational B-splines. (Control vertices
    // use homogeneous form.)
    // 0 for non-rational B-splines. (Control
    // vertices do not have a weight coordinate.)
    m_is_rat:        s32;

    m_order:         [2] s32; // order = degree+1 (>=2)

    m_cv_count:      [2] s32; // number of control vertices ( >= order )

    // If m_knot_capacity > 0, then m_knot[]
    // is an array of at least m_knot_capacity
    // doubles whose memory is managed by the
    // ON_NurbsSurface class using rhmalloc(),
    // onrealloc(), and rhfree().
    // If m_knot_capacity is 0 and m_knot is
    // not nullptr, then  m_knot[] is assumed to
    // be big enough for any requested operation
    // and m_knot[] is not deleted by the
    // destructor.
    m_knot_capacity: [2] s32;

    // Knot vector. ( The knot vector has length
    // m_order+m_cv_count-2. )
    m_knot:          [2] *float64;

    // The pointer to start of "CV[i]" is
    //   m_cv + i*m_cv_stride.
    m_cv_stride:     [2] s32;

    // If m_cv_capacity > 0, then m_cv[] is an array
    // of at least m_cv_capacity doubles whose
    // memory is managed by the ON_NurbsSurface
    // class using rhmalloc(), onrealloc(), and rhfree().
    // If m_cv_capacity is 0 and m_cv is not
    // nullptr, then m_cv[] is assumed to be big enough
    // for any requested operation and m_cv[] is not
    // deleted by the destructor.
    m_cv_capacity:   s32;

    // Control points.
    // If m_is_rat is false, then control point is
    //
    //          ( CV(i)[0], ..., CV(i)[m_dim-1] ).
    //
    // If m_is_rat is true, then the control point
    // is stored in HOMOGENEOUS form and is
    //
    //         [ CV(i)[0], ..., CV(i)[m_dim] ].
    //
    m_cv:            *float64;
    #place on_surface; on_nurbssurface_vtable: *ON_NurbsSurface_VTable;
}
ON_NurbsSurface_VTable :: struct #type_info_none {
    using on_surface: ON_Surface_VTable;
    CreateRuledSurface: (this: *ON_NurbsSurface, curveA: *ON_Curve, curveB: *ON_Curve, curveA_domain: *ON_Interval = null, curveB_domain: *ON_Interval = null) -> s32 #cpp_method;
}
ON_NurbsSurface_CreateRuledSurface :: inline (this: *ON_NurbsSurface, curveA: *ON_Curve, curveB: *ON_Curve, curveA_domain: *ON_Interval = null, curveB_domain: *ON_Interval = null) -> s32 { return this.on_nurbssurface_vtable.CreateRuledSurface(this, curveA, curveB, curveA_domain, curveB_domain); }

vtable :: (obj: *ON_NurbsSurface) -> *ON_NurbsSurface_VTable { return obj.on_nurbssurface_vtable; }


ON_NurbsCage :: struct {
    #as using on_geometry: ON_Geometry;

    // NOTE: These members are left "public" so that expert users may efficiently
    //       create nurbs curves using the default constructor and borrow the
    //       knot and CV arrays from their native NURBS representation.
    //       No technical support will be provided for users who access these
    //       members directly.  If you can't get your stuff to work, then use
    //       the constructor with the arguments and the SetKnot() and SetCV()
    //       functions to fill in the arrays.
    m_dim:           s32;
    m_is_rat:        bool;
    m_order:         [3] s32;
    m_cv_count:      [3] s32;
    m_knot_capacity: [3] s32;
    m_knot:          [3] *float64;
    m_cv_stride:     [3] s32;
    m_cv_capacity:   s32;
    m_cv:            *float64;
}

ON_MorphControl :: struct {
    #as using on_geometry: ON_Geometry;

    m_varient:                  s32; // 1= curve, 2 = surface, 3 = cage

    // The value of m_varient determines which nurbs object
    // controls the cage
    m_nurbs_curve0:             ON_NurbsCurve;
    m_nurbs_curve:              ON_NurbsCurve;
    m_nurbs_curve_domain:       ON_Interval;

    m_nurbs_surface0:           ON_NurbsSurface;
    m_nurbs_surface:            ON_NurbsSurface;
    m_nurbs_surface_domain:     [2] ON_Interval;

    m_nurbs_cage0:              ON_Xform;
    m_nurbs_cage:               ON_NurbsCage;

    // Rhino captive object ids
    m_captive_id:               ON_UuidList;

    // Used to localize the deformation
    m_localizers:               ON_ClassArray(ON_Localizer);

    // ON_SpaceMorphOptions
    m_sporh_tolerance:          float64;
    m_sporh_bQuickPreview:      bool;
    m_sporh_bPreserveStructure: bool;
}

ON_CageMorph :: struct {
    #as using on_spacemorph: ON_SpaceMorph;

    m_control: *ON_MorphControl;
}

/*
Description:
Create an ON_NurbsSurface satisfying Hermite interpolation conditions at a grid of points.
Remarks:
See static ON_NurbsSurface::CreateHermiteSurface for details.
*/
ON_HermiteSurface :: struct {
    m_u_count:      s32;
    m_v_count:      s32;
    m_u_parameters: ON_SimpleArray(float64);
    m_v_parameters: ON_SimpleArray(float64);
    m_grid_points:  ON_ClassArray(ON_SimpleArray(ON_3dPoint));
    m_u_tangents:   ON_ClassArray(ON_SimpleArray(ON_3dVector));
    m_v_tangents:   ON_ClassArray(ON_SimpleArray(ON_3dVector));
    m_twists:       ON_ClassArray(ON_SimpleArray(ON_3dVector));
}

ON_PlaneSurface :: struct {
    #as using on_surface: ON_Surface;

    // An ON_PlaneSurface is really a finite rectangle.
    // m_plane defines the plane and m_extents[] stores
    // the x and y intervals of the plane that define the
    // rectangle.  The m_domain[] intervals specify the
    // evaluation domain.  Changing the extents are domain
    // are INDEPENDENT of each other.  Use Domain() and
    // SetDomain() to control the evaluation domain.  Use
    // Extents() and SetExtents() to control the rectangle
    // extents.
    m_plane:   ON_Plane;

    m_domain:  [2] ON_Interval; // always increasing

    // rectangle extents (in m_plane x,y coordinates)
    m_extents: [2] ON_Interval;
}

ON_ClippingPlaneSurface :: struct {
    #as using on_planesurface: ON_PlaneSurface;

    m_clipping_plane: ON_ClippingPlane;
}

// surface of revolution
ON_RevSurface :: struct {
    #as using on_surface: ON_Surface;

    // Revolute curve.
    // If m_curve is not nullptr, then ~ON_RevSurface() deletes m_curve.
    m_curve:       *ON_Curve;

    // Axis of revolution.
    m_axis:        ON_Line;

    // Start and end angles of revolution in radians.
    // The interval m_angle must be increasing and satisfiy
    // ON_ZERO_TOLERANCE < m_angle.Length() <= 2.0*ON_PI
    m_angle:       ON_Interval;

    // The interval m_t specifies the parameterization for the
    // angular parameter; m_t must be an increasing interval.
    // The parameter m_t[0] corresponds to angle m_angle[0] and
    // the parameter m_t[1] corresponds to angle m_angle[1].
    // Changing m_t and leaving m_angle unchanged will change the
    // parameterization but not change the locus of the surface.
    // Changing m_angle and leaving m_t unchanged, will change the
    // locus of the surface but not change the evaluation domain.
    m_t:           ON_Interval;

    // If false, the "u" parameter is the angle parameter
    // and the "v" parameter is the curve parameter.
    // If true,  the "u" parameter is the curve parameter
    // and the "v" parameter is the angle parameter.
    m_bTransposed: bool;

    // Bounding box of the surface of revolution.
    m_bbox:        ON_BoundingBox;
}

// surface of revolution
ON_SumSurface :: struct {
    #as using on_surface: ON_Surface;

    m_curve:     [2] *ON_Curve; // m_curve[0] and m_curve[1] are deleted by ~ON_SumSuface.  

    // Use a ON_ProxyCurve if this is problem.
    m_basepoint: ON_3dVector;
    m_bbox:      ON_BoundingBox; // lazy evaluation used in ON_SumSurface::BoundingBox()
}

// Description:
//   Brep vertex information is stored in ON_BrepVertex classes.
//   ON_Brep.m_V[] is an array of all the vertices in the brep.
//
//   If a vertex is a point on a face, then brep.m_E[m_ei]
//   will be an edge with no 3d curve.  This edge will have
//   a single trim with type ON_BrepTrim::ptonsrf.  There
//   will be a loop containing this single trim.
//   Use ON_Brep::NewPointOnFace() to create vertices that are
//   points on faces.
ON_BrepVertex :: struct {
    #as using on_point: ON_Point;

    // Union available for application use.
    // The constructor zeros m_vertex_user.
    // The value is of m_vertex_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_vertex_user:  ON_U;

    m_status:       ON_ComponentStatus;

    m_reserved1:    ON__UINT16 = 0;

    // index of the vertex in the ON_Brep.m_V[] array
    m_vertex_index: s32 = -1;

    // indices of edges starting/ending at this vertex
    //
    // For closed edges, edge.m_vi[0] = edge.m_vi[1] and
    // edge.m_edge_index appears twice in the m_ei[] array.
    // The first occurrence of edge.m_edge_index in m_ei[]
    // is for the closed edge starting the vertex.
    // The second occurrence of edge,m_edge_index in m_ei[]
    // is for the closed edge ending at the vertex.
    // C.f. ON_Brep::Next/PrevEdge().
    m_ei:           ON_SimpleArray(s32);

    // accuracy of vertex point (>=0.0 or ON_UNSET_VALUE)
    //
    // A value of ON_UNSET_VALUE indicates that the
    // tolerance should be computed.
    //
    // A value of 0.0 indicates that the distance
    // from the vertex to any applicable edge or trim
    // end is <=  ON_ZERO_TOLERANCE
    //
    // If an edge begins or ends at this vertex,
    // then the distance from the vertex's
    // 3d point to the appropriate end of the
    // edge's 3d curve must be <= this tolerance.
    //
    // If a trim begins or ends at this vertex,
    // then the distance from the vertex's 3d point
    // to the 3d point on the surface obtained by
    // evaluating the surface at the appropriate
    // end of the trimming curve must be <= this
    // tolerance.
    m_tolerance:    float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0;
}

ON_BrepEdge :: struct {
    #as using on_curveproxy: ON_CurveProxy;

    // Union available for application use.
    // The constructor zeros m_edge_user.
    // The value is of m_edge_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_edge_user:  ON_U;

    m_status:     ON_ComponentStatus;

    m_reserved1:  ON__UINT16 = 0;

    // index of edge in ON_Brep.m_E[] array
    m_edge_index: s32 = -1;

    // index of 3d curve in m_C3[] array
    // (edge.m_curve also points to m_C3[m_c3i])
    m_c3i:        s32 = -1;

    // indices of starting/ending vertex
    //
    // For closed edges, m_vi[0] = m_vi[1] and m_edge_index
    // appears twice in the m_V[m_vi[0]].m_ei[] array.
    // The first occurrence of m_edge_index in m_V[m_vi[0]].m_ei[]
    // is for the closed edge starting the vertex.  The second
    // occurrence of m_edge_index in m_V[m_vi[0]].m_ei[]
    // is for the closed edge edge ending at the vertex.
    // C.f. ON_Brep::Next/PrevEdge().
    m_vi:         [2] s32;

    // indices of Trims that use this edge
    m_ti:         ON_SimpleArray(s32);

    // accuracy of edge curve (>=0.0 or ON_UNSET_VALUE)
    //
    // A value of ON_UNSET_VALUE indicates that the
    // tolerance should be computed.
    //
    // The maximum distance from the edge's 3d curve
    // to any surface of a face that has this edge as
    // a portion of its boundary must be <= this
    // tolerance.
    m_tolerance:  float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0;

    m_brep:       *ON_Brep = null; // so isolated edge class edge can get at it's 3d curve
}

ON_BrepTrimPoint :: struct {
    p: ON_2dPoint; // 2d surface parameter space point
    t: float64; // corresponding trim curve parameter
    e: float64; // corresponding edge curve parameter (ON_UNSET_VALUE if unknown)
}

/*
Description:
Brep trim information is stored in ON_BrepTrim classes.
ON_Brep.m_T[] is an array of all the trim in the brep.

An ON_BrepTrim is derived from ON_CurveProxy so the the
trim can supply easy to use evaluation tools via
the ON_Curve virtual member functions.

Note well that the domains and orientations of the curve
m_C2[trim.m_c2i] and the trim as a curve may not
agree.
*/
ON_BrepTrim :: struct {
    #as using on_curveproxy: ON_CurveProxy;

    // Union available for application use.
    // The constructor zeros m_trim_user.
    // The value is of m_trim_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_trim_user:      ON_U;

    m_status:         ON_ComponentStatus;

    m_reserved1:      ON__UINT16 = 0;

    m_trim_index:     s32 = -1; // index of trim in ON_Brep.m_T[] array

    // types of trim - access through m_type member.  Also see m_iso and ON_Surface::ISO
    TYPE :: enum s32 {
        unknown                :: 0;
        boundary               :: 1;

        mated                  :: 2;

        seam                   :: 3;

        singular               :: 4;

        crvonsrf               :: 5;

        ptonsrf                :: 6;

        slit                   :: 7;

        trim_type_count        :: 8;
        force_32_bit_trim_type :: -1;
    }

    // index of the 2d parameter space trimming curve
    m_c2i:            s32 = -1;

    // index of 3d edge (-1 if ON_BrepTrim is singular)
    m_ei:             s32 = -1;

    // Indices of start/end vertices.  Trims along singular
    // sides and trims that correspond to closed 3d edges
    // have m_vi[0] = m_vi[1].  Note that singular trims
    // and trims on the closed edge of a closed surface can
    // have an open 2d trimming curve and still have
    // m_vi[0] = m_vi[1].
    m_vi:             [2] s32;

    // true if the 2d trim and 3d edge have opposite orientations.
    m_bRev3d          := false;

    m_type:           TYPE = .unknown;
    m_iso:            ON_Surface.ISO = .not_iso;

    // index of loop that uses this trim
    m_li:             s32 = -1;

    // The values in m_tolerance[] record the accuracy of
    // the parameter space trimming curves.
    //
    // Remarks:
    //   m_tolerance[0] = accuracy of parameter space curve
    //   in first ( "u" ) parameter
    //
    //   m_tolerance[1] = accuracy of parameter space curve
    //   in second ( "v" ) parameter
    //
    //   A value of ON_UNSET_VALUE indicates that the
    //   tolerance should be computed. If the value >= 0.0,
    //   then the tolerance is set.  If the value is
    //   ON_UNSET_VALUE, then the tolerance needs to be
    //   computed.
    //
    //   If the trim is not singular, then the trim must
    //   have an edge.  If P is a 3d point on the edge's
    //   curve and surface(u,v) = Q is the point on the
    //   surface that is closest to P, then there must
    //   be a parameter t in the interval [m_t[0], m_t[1]]
    //   such that
    //
    //   |u - curve2d(t)[0]| <= m_tolerance[0]
    //
    //   and
    //
    //   |v - curve2d(t)[1]| <= m_tolerance[1]
    //
    //   If P is the 3d point for the vertex brep.m_V[m_vi[k]]
    //   and (uk,vk) is the corresponding end of the trim's
    //   parameter space curve, then there must be a surface
    //   parameter (u,v) such that:
    //
    //   *  the distance from the 3d point surface(u,v) to P
    //      is <= brep.m_V[m_vi[k]].m_tolerance,
    //   *  |u-uk| <= m_tolerance[0].
    //   *  |v-vk| <= m_tolerance[1].
    m_tolerance:      [2] float64;

    // Runtime polyline approximation of trimming curve.
    // This information is not saved in 3DM archives.
    m_pline:          ON_SimpleArray(ON_BrepTrimPoint);

    // Runtime parameter space trimming curve bounding box.
    // This information is not saved in 3DM archives.
    m_pbox:           ON_BoundingBox;

    m__legacy_2d_tol: float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // used internally - ignore
    m__legacy_3d_tol: float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // used internally - ignore
    m__legacy_flags:  s32 = 0; // used internally - ignore

    m_brep:           *ON_Brep = null; // so isolated edge class edge can get at it's 3d curve
}

ON_BrepLoop :: struct {
    #as using on_geometry: ON_Geometry;

    // Union available for application use.
    // The constructor zeros m_loop_user.
    // The value is of m_loop_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_loop_user:  ON_U;

    m_status:     ON_ComponentStatus;

    m_reserved1:  ON__UINT16 = 0;

    m_loop_index: s32 = -1; // index of loop in ON_Brep.m_L[] array

    TYPE :: enum s32 {
        unknown    :: 0;
        outer      :: 1;
        inner      :: 2;
        slit       :: 3;
        crvonsrf   :: 4;

        ptonsrf    :: 5;

        type_count :: 6;
    }

    m_ti:         ON_SimpleArray(s32); // trim indices
    m_type:       TYPE = .unknown;
    m_fi:         s32 = -1; // index of face that uses this loop

    //////////
    // parameter space trimming loop bounding box
    // runtime information - not saved
    m_pbox:       ON_BoundingBox;

    m_brep:       *ON_Brep = null;
}

ON_BrepFace :: struct {
    #as using on_surfaceproxy: ON_SurfaceProxy;

    // Union available for application use.
    // The constructor zeros m_face_user.
    // The value is of m_face_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_face_user:             ON_U;

    m_status:                ON_ComponentStatus;

    m_pack_id_low:           ON__UINT16 = 0; // PackId() = 0x10000*m_pack_id_high + m_pack_id_low;

    m_face_index:            s32 = -1; // index of face in ON_Brep.m_F[] array

    m_li:                    ON_SimpleArray(s32); // loop indices (outer loop is m_li[0])
    m_si:                    s32 = -1; // index of surface in b-rep m_S[] array
    m_bRev                   := false; // true if face orientation is opposite

    m_reserved2:             ON__UINT8 = 0;

    m_pack_id_high:          ON__UINT16 = 0; // PackId() = 0x10000*m_pack_id_high + m_pack_id_low;

    // The application specifies a base ON_Material used to render the brep this face belongs to.
    // If m_material_channel_index > 0 AND face_material_id = base.MaterialChannelIdFromIndex(m_material_channel_index)
    // is not nil, then face_material_id identifies an override rendering material for this face.
    // Otherwise base will be used to render this face.
    m_face_material_channel: s32 = 0;

    // Persistent id for this face.  Default is ON_nil_uuid.
    m_face_uuid:             ON_UUID;

    // RH-37306
    // 30 Mar 2020: Space reserved for future implementation.
    m_per_face_color:        ON_Color;

    m_bbox:                  ON_BoundingBox; // 3d bounding box (should be declared mutable and const_cast<> is used to make it fake mutable)
    m_domain:                [2] ON_Interval; // rectangular bounds of 2d curves

    //New impl declaration to replace the old mesh pointers.
    Impl :: struct {}
    m_pImpl:                 *Impl;

    //Pad out the size to match the old.
    m_reserved0:             *void = null;
    m_reserved1:             *void = null;

    m_brep:                  *ON_Brep = null;
}

ON_BrepFaceSide :: struct {
    #as using on_object: ON_Object;

    // Union available for application use.
    // The constructor zeros m_faceside_user.
    // The value is of m_faceside_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_faceside_user:  ON_U;

    // index of face side in ON_BrepRegionTopology.m_FS[] array
    m_faceside_index: s32;

    // region index
    // m_ri = -1 indicates this face side overlaps
    // another face side. Generally this is a flaw
    // in an ON_Brep.
    m_ri:             s32;

    m_fi:             s32; // face index
    //  1 ON_BrepFace's surface normal points into region
    // -1 ON_BrepFace's surface normal points out of region
    m_srf_dir:        s32;

    m_rtop:           *ON_BrepRegionTopology;
}

ON_BrepRegion :: struct {
    #as using on_object: ON_Object;

    // Union available for application use.
    // The constructor zeros m_region_user.
    // The value is of m_region_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_region_user:  ON_U;

    // index of region in ON_BrepRegionTopology.m_R[] array
    m_region_index: s32;

    m_fsi:          ON_SimpleArray(s32); // indices of face sides
    m_type:         s32; // 0 = infinite, 1 = bounded
    m_bbox:         ON_BoundingBox;

    m_rtop:         *ON_BrepRegionTopology;
}

ON_BrepVertexArray :: struct {
    #as using on_objectarray: ON_ObjectArray(ON_BrepVertex);
    vtable: *ON_BrepVertexArray_VTable;
}
ON_BrepVertexArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BrepVertexArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_BrepVertexArray_Destructor :: inline (this: *ON_BrepVertexArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_BrepVertexArray) -> *ON_BrepVertexArray_VTable { return obj.vtable; }


ON_BrepEdgeArray :: struct {
    #as using on_objectarray: ON_ObjectArray(ON_BrepEdge);
    vtable: *ON_BrepEdgeArray_VTable;
}
ON_BrepEdgeArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BrepEdgeArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_BrepEdgeArray_Destructor :: inline (this: *ON_BrepEdgeArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_BrepEdgeArray) -> *ON_BrepEdgeArray_VTable { return obj.vtable; }


ON_BrepTrimArray :: struct {
    #as using on_objectarray: ON_ObjectArray(ON_BrepTrim);
    vtable: *ON_BrepTrimArray_VTable;
}
ON_BrepTrimArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BrepTrimArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_BrepTrimArray_Destructor :: inline (this: *ON_BrepTrimArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_BrepTrimArray) -> *ON_BrepTrimArray_VTable { return obj.vtable; }


ON_BrepLoopArray :: struct {
    #as using on_objectarray: ON_ObjectArray(ON_BrepLoop);
    vtable: *ON_BrepLoopArray_VTable;
}
ON_BrepLoopArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BrepLoopArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_BrepLoopArray_Destructor :: inline (this: *ON_BrepLoopArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_BrepLoopArray) -> *ON_BrepLoopArray_VTable { return obj.vtable; }


ON_BrepFaceArray :: struct {
    #as using on_objectarray: ON_ObjectArray(ON_BrepFace);
    vtable: *ON_BrepFaceArray_VTable;
}
ON_BrepFaceArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BrepFaceArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_BrepFaceArray_Destructor :: inline (this: *ON_BrepFaceArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_BrepFaceArray) -> *ON_BrepFaceArray_VTable { return obj.vtable; }


ON_BrepFaceSideArray :: struct {
    #as using on_objectarray: ON_ObjectArray(ON_BrepFaceSide);
    vtable: *ON_BrepFaceSideArray_VTable;
}
ON_BrepFaceSideArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BrepFaceSideArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_BrepFaceSideArray_Destructor :: inline (this: *ON_BrepFaceSideArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_BrepFaceSideArray) -> *ON_BrepFaceSideArray_VTable { return obj.vtable; }


ON_BrepRegionArray :: struct {
    #as using on_objectarray: ON_ObjectArray(ON_BrepRegion);
    vtable: *ON_BrepRegionArray_VTable;
}
ON_BrepRegionArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_BrepRegionArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_BrepRegionArray_Destructor :: inline (this: *ON_BrepRegionArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_BrepRegionArray) -> *ON_BrepRegionArray_VTable { return obj.vtable; }


ON_BrepRegionTopology :: struct {
    m_FS:   ON_BrepFaceSideArray;
    m_R:    ON_BrepRegionArray;

    m_brep: *ON_Brep = null;
}

ON_Brep :: struct {
    #as using on_geometry: ON_Geometry;

    // Union available for application use.
    // The constructor zeros m_brep_user.
    // The value is of m_brep_user is not saved in 3DM
    // archives and may be changed by some computations.
    m_brep_user:        ON_U;

    // Pointers to parameter space trimming curves
    // (used by trims).
    m_C2:               ON_CurveArray;

    m_C3:               ON_CurveArray; // Pointers to 3d curves (used by edges).
    m_S:                ON_SurfaceArray; // Pointers to parametric surfaces (used by faces)

    m_V:                ON_BrepVertexArray; // vertices
    m_E:                ON_BrepEdgeArray; // edges
    m_T:                ON_BrepTrimArray; // trims
    m_L:                ON_BrepLoopArray; // loops
    m_F:                ON_BrepFaceArray; // faces

    m_bbox:             ON_BoundingBox;
    m_region_topology:  *ON_BrepRegionTopology = null;

    // m_aggregate_status "should" be an ON_AggregateComponentStatusEx,
    // but that change requires breaking the C++ SDK.
    m_aggregate_status: ON_AggregateComponentStatus;

    // Never directly set m_is_solid, use calls to IsSolid() and/or
    // SolidOrientation() when you need to know the answer to this
    // question.
    // 0 = unset
    // 1 = solid with normals pointing out
    // 2 = solid with normals pointing in
    // 3 = not solid
    m_is_solid:         s32 = 0;

    m_sleep_lock:       ON_SleepLock;
    #place on_geometry; on_brep_vtable: *ON_Brep_VTable;
}
ON_Brep_VTable :: struct #type_info_none {
    using on_geometry: ON_Geometry_VTable;
    SetTrimTolerance: (this: *ON_Brep, trim: *ON_BrepTrim, bLazy := false) -> bool #cpp_method;

    SetEdgeTolerance: (this: *ON_Brep, edge: *ON_BrepEdge, bLazy := false) -> bool #cpp_method;

    SetTrimBoundingBox: (this: *ON_Brep, trim: *ON_BrepTrim, bLazy := false) -> bool #cpp_method;

    SetTrimBoundingBoxes: (this: *ON_Brep, bLazy := false) -> bool #cpp_method;

    SetTrimBoundingBoxes_1: (this: *ON_Brep, face: /*reference*/ *ON_BrepFace, bLazy := false) -> bool #cpp_method;

    SetTrimBoundingBoxes_2: (this: *ON_Brep, loop: /*reference*/ *ON_BrepLoop, bLazy := false) -> bool #cpp_method;

    SolidOrientation: (this: *ON_Brep) -> s32 #cpp_method;
}

ON_Brep_SetTrimTolerance :: inline (this: *ON_Brep, trim: *ON_BrepTrim, bLazy := false) -> bool { return this.on_brep_vtable.SetTrimTolerance(this, trim, bLazy); }

ON_Brep_SetEdgeTolerance :: inline (this: *ON_Brep, edge: *ON_BrepEdge, bLazy := false) -> bool { return this.on_brep_vtable.SetEdgeTolerance(this, edge, bLazy); }

ON_Brep_SetTrimBoundingBox :: inline (this: *ON_Brep, trim: *ON_BrepTrim, bLazy := false) -> bool { return this.on_brep_vtable.SetTrimBoundingBox(this, trim, bLazy); }

ON_Brep_SetTrimBoundingBoxes :: inline (this: *ON_Brep, bLazy := false) -> bool { return this.on_brep_vtable.SetTrimBoundingBoxes(this, bLazy); }

ON_Brep_SetTrimBoundingBoxes_1 :: inline (this: *ON_Brep, face: /*reference*/ *ON_BrepFace, bLazy := false) -> bool { return this.on_brep_vtable.SetTrimBoundingBoxes_1(this, face, bLazy); }

ON_Brep_SetTrimBoundingBoxes_2 :: inline (this: *ON_Brep, loop: /*reference*/ *ON_BrepLoop, bLazy := false) -> bool { return this.on_brep_vtable.SetTrimBoundingBoxes_2(this, loop, bLazy); }

ON_Brep_SolidOrientation :: inline (this: *ON_Brep) -> s32 { return this.on_brep_vtable.SolidOrientation(this); }

vtable :: (obj: *ON_Brep) -> *ON_Brep_VTable { return obj.on_brep_vtable; }


ON_Extrusion :: struct {
    #as using on_surface: ON_Surface;

    // path definition:
    //   The line m_path must have length > m_path_length_min.
    //   The interval m_t must satisfy 0 <= m_t[0] < m_t[1] <= 1.
    //   The extrusion starts at m_path.PointAt(m_t[0]) and ends
    //   at m_path.PointAt(m_t[1]).
    //   The "up" direction m_up is a unit vector that must
    //   be perpendicular to m_path.Tangent().
    m_path:          ON_Line;
    m_t:             ON_Interval;
    m_up:            ON_3dVector;

    // profile information:
    //   In general, use SetOuterProfile() and AddInnerProfile()
    //   to set m_profile_count and m_profile.  If you are
    //   a glutton for punishment, then you might be interested
    //   in the following.
    //   The profile curves must be in the x-y plane.
    //   The profile's "y" axis corresponds to m_up.
    //   The point (0,0) is extruded along the m_path line.
    //   If m_profile_count = 1, then m_profile can be any
    //   type of continuous curve.  If m_profile_count > 1,
    //   then m_profile must be an ON_PolyCurve with
    //   m_profile_count segments, the domain of each segment
    //   must exactly match the polycurve's segment domain,
    //   every segment must be continuous and closed,
    //   the first segment curve must have counter-clockwise
    //   orientation, and the rest must have clockwise
    //   orientations.
    m_profile_count: s32;
    m_profile:       *ON_Curve;

    // capped end information:
    //   If the profile is closed, then m_bCap[] determines
    //   if the ends are capped.
    m_bCap:          [2] bool;

    // mitered end information:
    //   The normals m_N[] are with respect to the xy plane.
    //   A normal parallel to the z axis has no mitering.
    //   If m_bHaveN[i] is true, then m_N[i] must be a 3d unit
    //   vector with m_N[i].z > m_Nz_tol;  If m_bHaveN[i]
    //   is false, then m_N[i] is ignored.  The normal m_N[0]
    //   defines the start miter plane and m_N[1] defines the
    //   end miter plane.
    m_bHaveN:        [2] bool;
    m_N:             [2] ON_3dVector;

    // Surface parameterization information
    m_path_domain:   ON_Interval;
    m_bTransposed:   bool; // false: (s,t) = (profile,path)

    // Cached meshes used for rendering, analysis, ...
    m_mesh_cache:    ON_MeshCache;
}

/// <summary>
/// ON_SubDGetControlNetMeshPriority specifies what type of ON_SubD information
/// is most important to transfer to the ON_Mesh.
/// </summary>
ON_SubDGetControlNetMeshPriority :: enum u8 {
    Geometry           :: 0;

    TextureCoordinates :: 1;
}

/// <summary>
/// ON_SubDTextureCoordinateType identifies the way ON_SubDMeshFragment texture coordinates are set from an ON_SubDFace.
/// </summary>
ON_SubDTextureCoordinateType :: enum u8 {
    Unset                 :: 0;

    Unpacked              :: 1;

    Packed                :: 2;

    Zero                  :: 3;

    Nan                   :: 4;

    FromFaceTexturePoints :: 6;

    FromMapping           :: 7;
}

/// <summary>
/// ON_SubDVertexTag identifies the type of subdivision vertex.  Different tags use
/// different subdivision algorithms to determine where the subdivision point and
/// limit point are located.  There are toplological constraints that restrict which
/// tags can be assigned.
/// </summary>
ON_SubDVertexTag :: enum u8 {
    Unset  :: 0;

    Smooth :: 1;

    Crease :: 2;

    Corner :: 3;

    Dart   :: 4;
}

/// <summary>
/// ON_SubDEdgeTag identifies the type of subdivision edge.  Different tags use
/// different subdivision algorithms to calculate the subdivision point.
/// </summary>
ON_SubDEdgeTag :: enum u8 {
    Unset   :: 0;

    Smooth  :: 1;

    Crease  :: 2;

    SmoothX :: 4;
}

/// <summary>
/// ON_SubDEdgeType describes a subdivision edge.
/// ON_SubDEdgeType is typically used when generating text descriptions
/// or filtering edges during selection processes.
/// Do not confuse ON_SubDEdgeType and ON_SubDEdgeTag.
/// The unique types are single bits and suitable for use in bitwise logic.
/// </summary>
ON_SubDEdgeType :: enum u8 {
    Unset          :: 0;

    Wire           :: 1;

    Boundary       :: 2;

    InteriorSmooth :: 4;

    InteriorSharp  :: 8;

    InteriorCrease :: 16;

    Nonmanifold    :: 32;

    Invalid        :: 64;

    InteriorMask   :: 28;

    ValidTypesMask :: 63;
}

/// <summary>
/// ON_SubDHashType used used to specify what type of SubD information is hashed (topology or geometry).
/// </summary>
ON_SubDHashType :: enum u8 {
    Unset                  :: 0;

    Topology               :: 3;

    TopologyAndEdgeCreases :: 1;

    Geometry               :: 2;
}

/// <summary>
/// ON_SubDHash provides a simple way to save a SubD's vertex, edge, and face SHA1 hashes.
/// Typically it is used when a calculation needs to know if the current SubD has is geometrically
/// identical to a previous SubD. When speed is not important, comparing the current value of
/// ON_SubD::GeometryHash() to a previously save value of ON_SubD::GeometryHash() is functionally
/// identical but typically much slower when the SubDs are different.
/// </summary>
ON_SubDEdgeSharpness :: struct {
    m_edge_sharpness: [2] float;
}

/// <summary>
/// ON_SubDHash provides a simple way to save a SubD's vertex, edge, and face SHA1 hashes.
/// Typically it is used when a calculation needs to know if the current SubD has is geometrically
/// identical to a previous SubD. When speed is not important, comparing the current value of
/// ON_SubD::GeometryHash() to a previously save value of ON_SubD::GeometryHash() is functionally
/// identical but typically much slower when the SubDs are different.
/// </summary>
ON_SubDHash :: struct {
    m_hash_type:                           ON_SubDHashType = .Unset;
    m_vertex_count:                        u32 = 0;
    m_edge_count:                          u32 = 0;
    m_face_count:                          u32 = 0;
    m_subd_runtime_serial_number:          ON__UINT64 = 0;
    m_subd_geometry_content_serial_number: ON__UINT64 = 0;
    m_vertex_hash:                         ON_SHA1_Hash;
    m_edge_hash:                           ON_SHA1_Hash;
    m_face_hash:                           ON_SHA1_Hash;
}

ON_SubDToBrepParameters :: struct {
    /// <summary>
    /// ON_SubDToBrepParameters::Vertex identifies the options for post processing extraorindary vertices.
    /// </summary>
    VertexProcess :: enum u8 {
        None      :: 0;

        LocalG1   :: 1;

        LocalG2   :: 2;

        LocalG1x  :: 3;

        LocalG1xx :: 4;
    }

    m_bPackFaces                    := false;
    m_extraordinary_vertex_process: VertexProcess = .LocalG1x;
    m_reserved1:                    u16 = 0;
    m_reserved2:                    u32 = 0;
    m_reserved3:                    float64 = 0.0;
}

ON_SubDVertexPtr :: struct {
    // For performance reasons, m_ptr is not initialized and no constructors are declared
    // or implemented.  If you require initialization, then use x = ON_SubDVertexPtr::Null
    // or x = ON_SubDVertexPtr::Create(...).
    m_ptr: ON__UINT_PTR;
}

ON_SubDEdgePtr :: struct {
    // For performance reasons, m_ptr is not initialized and no constructors are declared
    // or implemented.  If you require initialization, then use x = ON_SubDEdgePtr::Null
    // or x = ON_SubDEdgePtr::Create(...).
    m_ptr: ON__UINT_PTR;
}

ON_SubDFacePtr :: struct {
    // For performance reasons, m_ptr is not initialized and no constructors are declared
    // or implemented.  If you require initialization, then use x = ON_SubDFacePtr::Null
    // or x = ON_SubDFacePtr::Create(...).
    m_ptr: ON__UINT_PTR;
}

ON_SubDComponentPtr :: struct {
    // For performance reasons, m_ptr is not initialized and no constructors are declared
    // or implemented.  If you require initialization, then use x = ON_SubDComponentPtr::Null
    // or x = ON_SubDComponentPtr::Create(...).
    m_ptr: ON__UINT_PTR;

    /// <summary>
    /// ON_SubDComponentPtr::Type identifies the type of subdivision component referenced by
    /// the ON_SubDComponentPtr.
    /// </summary>
    Type :: enum u8 {
        Unset  :: 0;
        Vertex :: 2;
        Edge   :: 4;
        Face   :: 6;
    }
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentPtrAndNumber
//
ON_SubDComponentAndNumber :: struct {
    m_cptr: ON_SubDComponentPtr;
    m_x:    float64;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentAndPoint
//
ON_SubDComponentAndPoint :: struct {
    m_cptr: ON_SubDComponentPtr;
    m_P:    ON_3dPoint;
}

/*
Description:
ON_SubDComponentTest is used in contexts where custom testing or filtering of
SubD components is required.
*/
ON_SubDComponentTest :: struct {
    vtable: *ON_SubDComponentTest_VTable;
    // classes derived from ON_SubDVertexFilter may use m_ptr as they see fit including to completely ignore it.
    m_ptr: ON__UINT_PTR = 0;
}
ON_SubDComponentTest_VTable :: struct #type_info_none {
    Destructor: (this: *ON_SubDComponentTest, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Passes: (this: *ON_SubDComponentTest, cptr: ON_SubDComponentPtr) -> bool #cpp_method;
}

ON_SubDComponentTest_Destructor :: inline (this: *ON_SubDComponentTest, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_SubDComponentTest_Passes :: inline (this: *ON_SubDComponentTest, cptr: ON_SubDComponentPtr) -> bool { return this.vtable.Passes(this, cptr); }

vtable :: (obj: *ON_SubDComponentTest) -> *ON_SubDComponentTest_VTable { return obj.vtable; }


ON_SubDComponentId :: struct {
    m_id:        u32 = 0;
    m_type:      ON_SubDComponentPtr.Type = .Unset;
    m_reserved1: u8 = 0;
    m_reserved2: u16 = 0;
}

ON_SubDComponentIdList :: struct {
    #as using on_subdcomponenttest: ON_SubDComponentTest;

    m_reserved1:           u32 = 0;

    m_reserved2:           u16 = 0;

    m_bInListPassesResult  := true;

    m_bSorted              := false;
    m_id_list:             ON_SimpleArray(ON_SubDComponentId);
}

ON_SubDComponentPtrPair :: struct {
    // For performance reasons, m_ptrpair is not initialized and no constructors are declared
    // or implemented.  If you require initialization, then use x = ON_SubDComponentPtrPair::Null
    // or x = ON_SubDComponentPtr::Create(first_ptr,second_ptr).
    m_pair: [2] ON_SubDComponentPtr;
}

ON_SubDComponentPtrPairHashTable :: struct {
    #as using on_hash32table: ON_Hash32Table;

    m_pairs_fsp: ON_FixedSizePool;
}

/// <summary>
/// Simple arrays of ON_SubD_ComponentIdTypeAndTag elements are used to save
/// original tag values so the can be retrieved after complex editing operations.
/// </summary>
ON_SubD_ComponentIdTypeAndTag :: struct {
    m_cptr: ON_SubDComponentPtr;
    m_id:   u32 = 0;
    m_type: ON_SubDComponentPtr.Type = .Unset;
    m_tag:  u8 = 0;
    m_bits: u8 = 0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDSectorId
//
ON_SubDSectorId :: struct {
    m_vertex_id:         u32 = 0;

    // minimum face id in the sector. Since a face can be in only one sector, the
    // combination of m_vertex_id and m_minimum_face_id uniquely identify a sector
    // in the context of a single ON_SubD.
    m_minimum_face_id:   u32 = 0;

    // number of faces in the sector
    m_sector_face_count: u32 = 0;
}

ON_SubDVertexSurfacePointCoefficient :: struct {
    m_limit_point_vertex: *ON_SubDVertex = null;
    m_ring_vertex:        *ON_SubDVertex = null;

    // The limit point of m_limit_point_vertex
    // = sum of m_c*m_ring_vertex->ControlNetPoint()
    // for every point in the ring of m_limit_point_vertex, including m_limit_point_vertex.
    m_c:                  float64 = 0.0;
}

ON_SubDComponentRegionIndex :: struct {
    anon_enum_24 :: enum u16 {
        IndexCapacity :: 9;
    }

    m_subdivision_count: u16 = 0;

    // If m_subdivision_count > 0, then m_index[0], ..., m_index[m_subdivision_count-1]
    // identifies a subregion of the level 0 component.
    //
    // Faces with quad subdivision:
    //   m_index[n] is the subdivision quad for the region that contains
    //   the parent face's corner at face->m_vertex[m_index[n]].
    // Edges
    //   m_region_index[n] = 0 indicates the beginning half of the parent edge.
    //                       (begins at edge->Vertex(0))
    //   m_region_index[n] = 1 indicates the ending half of the parent edge.
    //                       (ends at edge->Vertex(1))
    //
    // When a component is created during a subdivision step, the value 0xFFFF
    // is used to mark the non-existent regions at earlier subdivision levels.
    // For example, if a level 1 edge is created by connecting
    // a level0 edge subdivision point (middle-ish of the edge)
    // to a level0 face subdivision point (center-ish of the face),
    // then the level 1 edge would have
    //   m_level0_component = ON_SubDComponentPtr::CreateNull(ON_SubDComponentPtr::Type::Edge, bReversed),
    //     (m_level0_component.IsNull() will be true)
    //   m_level0_component_id = ON_SubDComponentRegion::NewTransientId()
    //   m_subdivision_count = 1,
    //   m_region_index[0] = 0xFFFF.
    //
    m_index:             [9] u16;
}

ON_SubDComponentRegion :: struct {
    m_level0_component:    ON_SubDComponentPtr;

    m_level0_component_id: u32 = 0;

    m_region_index:        ON_SubDComponentRegionIndex;

    anon_enum_25 :: enum u32 {
        TransientIdBit :: 2147483648;
    }
}

ON_SubDFaceRegion :: struct {
    // Identifies a region of an ON_SubDFace
    m_face_region:       ON_SubDComponentRegion;

    // When the face region is a quad, m_edge_region[4] identifies regions of ON_SubDEdge elements.
    // When the face region is a sub-quad, these edges may be null or have null ON_SubDEdge pointers
    // and the ids will be zero or ON_SubDComponentRegion::IsTransientId() will be true.
    // When ON_SubDComponentRegion::IsTransientId() is true, the id does not identify
    // a persistent edge in the ON_SubD.
    m_edge_region:       [4] ON_SubDComponentRegion;

    m_level0_edge_count: u32 = 0;

    m_reserved:          u32 = 0;

    // If set, these are the vertice ids at the region's limit surface corners.
    // m_vertex_id[] is mutable because these values appear during recursive calculations.
    // When the face region is a sub-quad, these ids will be zero or ON_SubDComponentRegion::IsTransientId()
    // will be true.
    // When ON_SubDComponentRegion::IsTransientId() is true, the id does not identify
    // a persistent vertex in the ON_SubD.
    m_vertex_id:         [4] u32;

    // When a vertex is exceptional, a NURBS conversion is typically an approximation
    // of the SubD around the exceptional vertex. There are a variety of post processes
    // that can be applied in this case and the processes need to be applied
    // sector by sector.
    // Note well that when a level zero face is an N-gon with N != 4,
    // the face subdivision point is an exceptional smooth vertex with valence = N.
    // In this case the corresponding m_vertex_id[] value will be zero.
    m_sector_id:         [4] ON_SubDSectorId;
}

ON_SubDFaceRegionAndNurbs :: struct {
    m_face_region:   ON_SubDFaceRegion;

    // This pointer is not managed by ON_SubDFaceRegionAndNurbs
    m_nurbs_surface: *ON_NurbsSurface = null;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDFromMeshParameters
//
ON_SubDFromSurfaceParameters :: struct {
    /// <summary>
    /// ON_SubDFromSurfaceParameters::Method are ways to create a SubD from a surface.
    /// </summary>
    Methods :: enum u8 {
        Unset               :: 0;

        SubDFriendlyFit     :: 1;

        FromNurbsControlNet :: 2;
    }

    m_method:    Methods = .SubDFriendlyFit;
    m_bCorners   := false;
    m_reserved1: u16 = 0;
    m_reserved2: u32 = 0;
    m_reserved3: float64 = 0.0;
    m_reserved4: float64 = 0.0;
}

/// <summary>
/// ON_SubDEndCapStyle enumerates the type of end caps functions like ON_SubD::CreateCylinder will create.
/// Use ON_SubDEndCapStyleFromUnsigned(integer value) to convert integer values to an ON_SubDEndCapStyle.
/// Use ON_SubDEndCapStyleToString(end_cap_style) to convert ON_SubDEndCapStyle values to string descriptions.
/// </summary>
ON_SubDEndCapStyle :: enum u8 {
    Unset     :: 0;

    None      :: 1;

    Triangles :: 2;

    Quads     :: 3;

    Ngon      :: 4;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubD
//
//// ON_WIP_SDK
//// This class is in the WIP SDK but the [[deprecated]] tag is
//// failing to compile in tl_precompiledheader.cpp
ON_SubDExpandEdgesParameters :: struct {
    /// <summary>
    /// ON_SubDExpandEdgesParameters::Style specifies options for how faces are inserted along input edges.
    /// </summary>
    Style :: enum u8 {
        Unset     :: 0;

        Single    :: 1;

        Double    :: 2;

        HalfLeft  :: 3;

        HalfRight :: 4;
    }

    m_constant_offset:  float64;
    m_variable_offsets: ON_Interval;
    m_face_color:       ON_Color;
    m_face_status:      ON_ComponentStatus;
    m_face_style:       Style = .Double;

    m_reserved1:        u8 = 0;

    m_reserved2:        ON__UINT64 = 0;
    m_reserved3:        ON__UINT64 = 0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubD
//
ON_SubD :: struct {
    #as using on_geometry: ON_Geometry;

    anon_enum_26 :: enum u32 {
        maximum_subd_level :: 128;
    }

    /// <summary>
    /// Summarizes the number of edges in faces in the whole object.
    /// </summary>
    VertexFacetType :: enum u8 {
        Unset :: 0;

        Tri   :: 3;

        Quad  :: 4;

        Ngon  :: 5;

        Mixed :: 255;
    }

    /// <summary>
    /// SubD::ChainType specifies what edge and vertex tag tests are used when creating edge chains.
    /// </summary>
    ChainType :: enum u8 {
        Unset                            :: 0;

        MixedTag                         :: 1;

        EqualEdgeTag                     :: 2;

        EqualEdgeAndVertexTag            :: 3;

        EqualEdgeTagAndOrdinary          :: 4;

        EqualEdgeAndVertexTagAndOrdinary :: 5;
    }

    /// <summary>
    /// ON_SubD::SubDFriendlyKnotType identifies the types of subd friendly NURBS knot vectors.
    /// SubD friendly NURBS curves and surfacaes are always cubic and nonrational.
    /// Any time there is a multiple knot, the 2nd derivative is zero at the corresponding parameter.
    /// SubD friendly NURBS curves are either periodic or have zero 2nd derivative at the ends.
    /// </summary>
    SubDFriendlyKnotType :: enum u8 {
        Unset                   :: 0;

        UnclampedUniform        :: 1;

        ClampedUniform          :: 2;

        ClampedPiecewiseUniform :: 4;

        Unfriendly              :: 127;
    }

    /// <summary>
    /// ON_SubD::AutomaticMeshToSubDContext identifies a context where meshes can automatically
    /// be converted to subds.
    /// </summary>
    AutomaticMeshToSubDContext :: enum u8 {
        Unset                     :: 0;

        Rhino5BoxModeTSpline      :: 1;

        FBXMeshWithDivisionLevels :: 2;
    }

    /// <summary>
    /// SubD::PatchStyle identifies the style of patch used to fill holes.
    /// </summary>
    PatchStyle :: enum u8 {
        Unset             :: 0;

        Automatic         :: 1;

        SingleFace        :: 2;

        TriangleFan       :: 3;

        QuadOrTriangleFan :: 4;

        Triangulated      :: 5;
    }

    ON_SubDLevel :: struct {}
    ON_SubDLevelComponentIdIterator :: struct {}

    /// <summary>
    /// ON_SubD::NurbsSurfaceType specifies what type of NURBS surfaces are returned by ON_SubD.GetSurfaceNurbsFragments()
    /// </summary>
    NurbsSurfaceType :: enum u8 {
        Unset       :: 0;

        Large       :: 1;

        Medium      :: 2;

        Small       :: 3;

        Unprocessed :: 4;
    }

    anon_enum_27 :: enum u32 {
        TextureImageSuggestedMinimumSize :: 1024;
    }

    ON_SubDMeshImpl :: struct {}

    ON_SubDHeap :: struct {}

    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_subdimple_sp is private and all code that manages m_subdimple_sp is explicitly implemented in the DLL.
    m_subdimple_sp: std.shared_ptr(ON_Symmetry.ON_SubDimple);
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDRef
//
ON_SubDRef :: struct {
    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_subd_sp is private and all code that manages m_subd_sp is explicitly implemented in the DLL.
    m_subd_sp: std.shared_ptr(ON_SubD);
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentList
//
ON_SubDComponentList :: struct {
    m_subd_runtime_serial_number:          ON__UINT64 = 0;
    m_subd_geometry_content_serial_number: ON__UINT64 = 0;
    m_subd_render_content_serial_number:   ON__UINT64 = 0;

    m_subd_vertex_count:                   u32 = 0;
    m_subd_edge_count:                     u32 = 0;
    m_subd_face_count:                     u32 = 0;
    m_reserved:                            u32 = 0;

    m_subd:                                ON_SubD; // keeps subd dimple in scope while m_component_list[] is active
    m_component_list:                      ON_SimpleArray(ON_SubDComponentPtr);
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentMarksClearAndRestore
//
ON_SubDComponentMarksClearAndRestore :: struct {
    m_subd:           ON_SubD;

    m_component_list: ON_SimpleArray(*ON_SubDComponentBase);

    m_bRestore        := true;
    m_reserved1:      u8 = 0;
    m_reserved2:      u8 = 0;
    m_reserved3:      u8 = 0;
    m_reserved4:      u32 = 0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDSectorType
//
ON_SubDSectorType :: struct {
    /*
    Description:
    An angle index value of ON_SubDSectorType::MaximumCornerAngleIndex indicates
    the angle is 2pi radians.
    */
    anon_enum_28 :: enum u32 {
        MaximumCornerAngleIndex :: 72;
    }

    m_vertex_tag:                  ON_SubDVertexTag = .Unset;
    m_reserved1:                   u8 = 0;
    m_reserved2:                   u16 = 0;
    m_hash:                        u32 = 0; // SetHash() sets this field, SectorTypeHash() returns its value.
    m_corner_sector_angle_index:   u32 = 0; // >= 0 and <= ON_SubDSectorType::MaximumCornerAngleIndex
    m_sector_face_count:           u32 = 0;
    m_sector_coefficient:          float64 = 0.0;
    m_sector_theta:                float64 = 0.0;
    m_corner_sector_angle_radians: float64 = 0.0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDMeshFragment
//
//  Meshes of ON_SubD limit surface are calculated in fragments.
//
ON_SubDMeshFragmentGrid :: struct {
    m_reserved1:            u8;

    m_reserved2:            u8;

    m_side_segment_count:   u8; // = 2^n for non-empty grids (0 <= n <= 8)

    m_reserved3:            u8;

    // m_F_count = number of quads
    //           = m_side_segment_count*m_side_segment_count
    // (0,1,4,16,256,1024,4096) After 0, each permitted value is 4x previous value
    m_F_count:              u16;

    // m_F_level_of_detail is poorly named. It should be named m_F_mesh_density_reduction.
    // 0 = no reduction (maximum level of detail)
    // 1 = number of quads reduced by 1/4
    // 2 = number of quads reduced by 1/16
    // ...
    m_F_level_of_detail:    u16;

    m_F_stride:             u16;

    m_reserved4:            ON__UINT16;
    m_reserved5:            ON__UINT32;

    m_F:                    *u32;
    m_S:                    *u32; // [4*m_side_segment_count + 1] indices that form the polyline boundary.
    m_prev_level_of_detail: *ON_SubDMeshFragmentGrid; // nullptr or the previous level with 4 times the number of quads.
    m_next_level_of_detail: *ON_SubDMeshFragmentGrid; // nullptr or the next level with 1/4 times the number of quads.
}

ON_SubDMeshFragment :: struct {
    anon_enum_29 :: enum u32 {
        MaximumSideSegmentCount :: 64;
    }

    // This field overlaps with ON_FixedSizePoolElement.m_next when a fixed size pool is managing the fragments.
    // When m_reserved != 0, the framgment is uninitialized.
    m_reserved:            ON__UINT64;

    m_face:                *ON_SubDFace;

    // m_face_vertex_index[] stores the information needed for the Vertex()
    // and Edge() functions to work.
    //
    // If m_face is nullptr, then m_face_vertex_index[] has no meaning.
    // If m_face is not nullptr and a corner of the grid is on a face
    // vertex, then the corresponding m_face_vertex_index[] value
    // will be <= ON_SubDFace::MaximumEdgeCount and m_face->Vertex(m_face_vertex_index[])
    // is the vertex.  Otherwise,  the corresponding m_face_vertex_index[] value
    // will be > ON_SubDFace::MaximumEdgeCount.
    // Catmull-Clark limit meshes:
    //   When the original SubD face is a quad, a full fragment is created and
    //   m_face_vertex_index[4] = {0,1,2,3}.
    //   When the original SuD face is an N-gon with N != 4, a partial fragment
    //   is delivered and m_face_vertex_index[2] identifies the face vertex
    //   for that fragment.  m_face_vertex_index[0,1,3] = a value > ON_SubDFace::MaximumEdgeCount
    m_face_vertex_index:   [4] u16;

    m_next_fragment:       *ON_SubDMeshFragment;
    m_prev_fragment:       *ON_SubDMeshFragment;

    m_face_fragment_count: u16; // Number of fragments that will be delivered for this face.
    m_face_fragment_index: u16; // First fragment has index = 0. Last fragment has index = m_face_fragment_count-1.

    // The mesh fragment is a grid of quads.
    // There are m_side_count quad edges along each side of the tessellation,
    // There are a total of m_side_count X m_side_count quads, and
    // m_P_count = (m_side_count+1)*(m_side_count+1).
    anon_enum_30 :: enum u32 {
        MaximumVertexCount :: 4096;
    }

    // Number of grid vertices and capacity of arrays in certain conditions.
    anon_enum_31 :: enum s32 {
        DoublesPerVertex :: 12;
    }

    anon_enum_32 :: enum u16 {
        ValueMask                     :: 8191;

        EtcMask                       :: 57344;

        EtcControlNetQuadBit          :: 32768;

        EtcTextureCoordinatesExistBit :: 16384;

        EtcColorsExistBit             :: 8192;

        EtcCurvaturesExistBit         :: 16384;

        EtcManagedArraysBit           :: 32768;
    }

    m_vertex_count_etc:    u16; // count value and 3 et cetera status bits
    m_vertex_capacity_etc: u16; // capacity value and 3 et cetera status bits

    // corners for control net display in grid order (counter-clockwise quad order must swap [2] and[3])
    m_ctrlnetP:            [4] [3] float64;

    // Normal used for shading the control net display in grid order.
    m_ctrlnetN:            [3] float64;

    // The fragment's current corner texture coordinates in grid order.
    // These can be from ON_SubDFace pack rectangles, ON_SubDFace custom texture points,
    // a texture mapping, or any other values rendering code deems desirable.
    // When a texture mapping evaluatior is not involved, they are typically
    // used to generate the fragment's texture coordinates by interpolation.
    //  m_ctrlnetT[0]
    //  m_ctrlnetT[1]
    //  m_ctrlnetT[2]
    //  m_ctrlnetT[3]
    m_ctrlnetT:            [4] [3] float64;

    // Corner principal curvatures in grid order.
    m_ctrlnetK:            [4] ON_SurfaceCurvature;

    // Corner vertex colors in grid order.
    m_ctrlnetC:            [4] ON_Color;

    m_pack_rect:           [4] [2] float64; // NOT a mutable property

    m_P:                   *float64; // surface points
    m_P_stride:            u64; // stride between points for m_P[] as an array of 8 byte doubles (so 0 or >= 3)

    m_N:                   *float64; // surface normals
    m_N_stride:            u64; // stride between normals for m_N[] as an array of 8 byte doubles (so 0 or >= 3)

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // 3d vertex texture coordinates.
    //
    // Depending on the strides, m_P[], m_N[], and m_T[] can be separate or interlaced.
    //
    // If m_T is not nullptr and m_T_stride>0, then m_T[] can accommodate up to m_P_capacity textures coordinates.
    // Otherwise there are no texture coordinates.
    // Never modify m_T_stride, m_T.
    // Use m_grid functions to get texture indices and quad face indices.
    // Note well: m_T_stride can be 0 when the texture coordinate is constant (one color per face for example)
    m_T:                   *float64;
    m_T_stride:            u64; // stride between texture points for m_T[] as an array of 8 byte doubles (so 0 or >= 3)

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Principal curvatures
    //
    // If m_K is not nullptr and m_K_stride>0, then m_K[] can accommodate up to m_P_capacity
    // principal curvatures (two doubles k1, k2). Otherwise there are no principal curvatures.
    // At exceptional points, the curvature values may be nan.
    // Never modify m_K_stride and the m_K pointer.
    // Use m_grid functions to get principal curvature indices and quad face indices.
    //
    // NOTE WELL:
    //  m_K_stride is the number of ON_SurfaceCurvature elements between m_K[i] and m_K[i+1].
    //  This is different than m_P_stride, m_N_stride, and m_T_stride, which count
    //  the number of doubles between successive
    //  points/normals/texture points in m_P[]/m_N[]/m_T[].
    //
    //  If m_K[] is interlaced, the number of bytes between successive elements of m_K[] must be a multiple of
    //  sizeof(ON_SurfaceCurvature)  because m_K_stride is a ON_SurfaceCurvature element stride.
    m_K:                   *ON_SurfaceCurvature;
    m_K_stride:            u64; // stride for m_K[] as an array of 16 byte ON_SurfaceCurvature elements (so 0 or >= 1).

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Per vertex colors
    //
    // Depending on the strides, m_P[], m_N[], m_T[], m_C[] and m_K[] can be separate or interlaced.
    //
    // If m_C is not nullptr and m_C_stride>0, then m_C[] can accommodate up to m_P_capacity
    // elements.
    // Otherwise there is no per vertex false color.
    // Never modify m_C_stride, m_C.
    // Use m_grid functions to get color indices and quad face indices.
    //
    // NOTE WELL:
    //   When m_C is interlaced with something containing doubles, m_C_stride must be
    //   a multiple of 2 to keep the doubles 8 bytes aligned.
    //   When m_C is not interlaced, m_C_stride is typically 1. If this is confusing,
    //   please learn more about alignment and interlacing before working on this code.
    m_C:                   *ON_Color;
    m_C_stride:            u64; // stride for m_C[] as an array of 4 byte ON_Color elements (so 0 or >= 1).

    // Information to resolve m_P[], m_N[], and m_T[] into a grid of NxN quads.
    m_grid:                ON_SubDMeshFragmentGrid;

    // 3d bounding box of grid vertex points.
    m_surface_bbox:        ON_BoundingBox;
}

/// <summary>
/// ON_SubDManagedMeshFragment is a legacy class that should not be used.
/// </summary>
ON_SubDManagedMeshFragment :: struct {
    #as using on_subdmeshfragment: ON_SubDMeshFragment;

    m_obsolete1: u64 = 0;
    m_obsolete2: ON__UINT_PTR = 0;
}

/// <summary>
/// ON_SubDMesh is used to store a high density traditional quad mesh
/// of a SubD surface or a mesh of a SubD control net.
/// In general, is is better to use an ON_SubDMeshFragmentIterator(subd)
/// that iterates the ON_MeshFragments cached on the ON_SubD.
/// </summary>
ON_SubDMesh :: struct {
    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_impl_sp is private and all code that manages m_impl_sp is explicitly implemented in the DLL.
    m_impl_sp: std.shared_ptr(ON_SubD.ON_SubDMeshImpl);
}

ON_SubDSectorSurfacePoint :: struct {
    m_limitP:                  [3] float64; // point
    m_limitT1:                 [3] float64; // first unit tangent
    m_limitT2:                 [3] float64; // second unit tangent
    m_limitN:                  [3] float64; // unit normal (same direction as m_limitT1 x m_limitT2)

    m_next_sector_limit_point: *ON_SubDSectorSurfacePoint; // nullptr for vertices with one sector
    m_sector_face:             *ON_SubDFace; // nullptr for vertices with one sector
}

////////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentBase
//
ON_SubDComponentBase :: struct {
    // m_subd_point1 points to the next level's vertex when this component
    // has been subdivided using an algorithm like Catmull-Clark or Loop-Warren.
    m_subd_point1:        *ON_SubDVertex = null;

    // Id assigned to this component. NEVER MODIFY THE m_id VALUE.
    // It is assigned by allocators and used to find the component
    // from an ON_COMPONENT_INDEX.
    m_id:                 u32 = 0;

    // The m_archive_id must be immediately after the m_id field.
    // A value of ON_UNSET_UINT_INDEX indicate the component was
    // in use and then deleted. See ON_SubDHeap Return...() functions
    // for more details.
    m_archive_id:         u32 = 0;

    m_status:             ON_ComponentStatus;

    SavedPointsFlags :: enum u8 {
        SubdivisionPointBit :: 64;

        SurfacePointBit     :: 128;

        CachedPointMask     :: 192;
    }

    ModifiedFlags :: enum u8 {
        Modified1Bit :: 1;

        Modified2Bit :: 2;

        Mask         :: 3;
        ModifiedFlagsMask :: Mask;
    }

    m_saved_points_flags: u8 = 0;

    m_level:              u8 = 0;

    // All the faces with the same nonzero value of m_group_id are in the same "group".
    // SDK interface on ON_SubD will be added after we get a better idea of how this
    // feature will be used.
    m_group_id:           u32 = 0;

    m_saved_subd_point1:  [3] float64; // saved subdivision point

    // Reserved for future use for attributes that apply to all SubD components (ON_SubDVertex, ON_SubDEdge, and ON_SubDFace).
    m_reserved8bytes1:    ON__UINT64;
    m_reserved8bytes2:    ON__UINT64;
    m_reserved8bytes3:    ON__UINT64;

    m_symmetry_set_next:  ON_SubDComponentPtr;
}

////////////////////////////////////////////////////////////////////////////
//
// ON_SubDVertexEdgeProperties
//
ON_SubDVertexEdgeProperties :: struct {
    // Number of null edges
    m_null_edge_count:        u16 = 0;

    // vertex->m_edge_count
    m_edge_count:             u16 = 0;

    // vertex->m_face_count
    m_face_count:             u16 = 0;

    // Number of edges tags ON_SubDEdgeTag::Unset
    m_unset_edge_count:       u16 = 0;

    // Number of edges tags ON_SubDEdgeTag::Smooth or ON_SubDEdgeTag::SmoothX
    m_smooth_edge_count:      u16 = 0;

    // Number of edges tags ON_SubDEdgeTag::Crease
    m_crease_edge_count:      u16 = 0;

    // Number of wire edges (0 attached faces)
    m_wire_edge_count:        u16 = 0;

    // Number of boundary edges (1 attached face)
    m_boundary_edge_count:    u16 = 0;

    // Number of interior edges (2 attached faces)
    m_interior_edge_count:    u16 = 0;

    // Number of nonmanifold edges (3 or more attached faces)
    m_nonmanifold_edge_count: u16 = 0;

    // Minimum value of attached edges's m_face_count.
    m_min_edge_face_count:    u16 = 0;

    // Maximum value of attached edges's m_face_count.
    m_max_edge_face_count:    u16 = 0;
}

////////////////////////////////////////////////////////////////////////////
//
// ON_SubDVertex
//
ON_SubDVertex :: struct {
    #as using on_subdcomponentbase: ON_SubDComponentBase;

    m_prev_vertex:   *ON_SubDVertex = null; // linked list of vertices on this level
    m_next_vertex:   *ON_SubDVertex = null; // linked list of vertices on this level

    m_vertex_tag:    ON_SubDVertexTag = .Unset;

    m_reserved1:     u8 = 0;

    m_reserved2:     u16 = 0;

    m_reserved3:     u32 = 0;

    m_edge_count:    u16 = 0;
    m_face_count:    u16 = 0;

    m_edge_capacity: u16 = 0;
    m_face_capacity: u16 = 0;

    // Array of m_edge_count edges.
    //   m_edge[i].EdgeDirection() indicates which edge end is located at this vertex
    //   If m_edge_capacity > 0, m_edge_capacity is the number of elements that
    //   may be used in m_edges[].
    m_edges:         *ON_SubDEdgePtr = null;

    // Array of m_face_count faces.
    //   If m_face_capacity > 0, m_face_capacity is the number of elements that
    //   may be used in m_faces[].
    m_faces:         **ON_SubDFace = null;

    m_P:             [3] float64; // vertex control net location

    // Cached limit point and limit normal
    // GetSurfacePoint( bUseSavedSurfacePoint=true ) can change the value of m_limit_point.
    // If the limit point is set and vertex has a single sector, then
    // m_limit_point.m_sector_face = nullptr and m_limit_point.m_next_sector_limit_point = nullptr.
    // If the limit point is set and vertex has a multiple sectors, then
    // m_limit_point.m_sector_face = first face in the sector.
    // If multiple limit points are set, then they are in a linked list
    // traversed using the ON_SubDSectorSurfacePoint.m_next_sector_limit_point.
    // The second and any additional limit points are managed by a fixed size pool.
    // Calling ClearSurfacePoint() will return these to the pool.
    m_limit_point:   ON_SubDSectorSurfacePoint;

    Maximum :: enum u32 {
        EdgeCount :: 65520;
        FaceCount :: 65520;

        MaximumEdgeCount :: EdgeCount;
        MaximumFaceCount :: FaceCount;
    }
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDEdge
//
ON_SubDEdge :: struct {
    #as using on_subdcomponentbase: ON_SubDComponentBase;

    m_prev_edge:          *ON_SubDEdge = null; // linked list of edges on this level
    m_next_edge:          *ON_SubDEdge = null; // linked list of edges on this level

    // When checking the edge tag, it is important to consider what
    // should happen in the ON_SubDEdgeTag::SmoothX case.  It is strongly
    // suggested that you use the member functions ON_SubDEdge::IsSmooth()
    // and ON_SubDEdge::IsCrease() instead of comparing m_edge_tag to
    // ON_SubDEdgeTag values.
    m_edge_tag:           ON_SubDEdgeTag = .Unset;

    m_reserved1:          u8 = 0;
    m_reserved2:          u16 = 0;

    // Array of m_face_count faces.
    //
    //  The first two are in m_face2[0] and m_face2[1].
    //  When m_face_count > 3, the third and additional faces
    //  are in m_facex[0], ..., m_facex[m_face_count-3];
    //
    //  The value of ON_SubDFacePtr.FaceDirection() is 0 if the
    //  edge's natural orientation from m_vertex[0] to m_vertex[1]
    //  agrees with the face's boundary orientation.
    //
    //  The value of ON_SubDFacePtr.FaceDirection() is 1 if the
    //  edge's natural orientation from m_vertex[0] to m_vertex[1]
    //  is opposited the face's boundary orientation.
    anon_enum_33 :: enum u32 {
        MaximumFaceCount :: 65520;
    }

    m_face_count:         u16 = 0;
    m_facex_capacity:     u16 = 0;
    m_face2:              [2] ON_SubDFacePtr;
    m_facex:              *ON_SubDFacePtr = null;

    // m_vertex[0] = vertex at the start of the edge.
    // m_vertex[1] = vertex at the end of the edge.
    m_vertex:             [2] *ON_SubDVertex;

    // NOTE:
    // The sector coefficient is a property of a smooth edge end
    // that is constant throughout subdivision. It exists at ends of
    // smooth edges that are attached to dart, crease, or corner vertices.
    // In all other cases the sector coefficient is ignored.
    // In particular crease edges and the ends of smooth edges
    // attached to smooth vertices do not have a sector coefficient.
    //
    // The ON_SubDSectorType class provides three static functions that
    // calculate sector coefficients:
    // ON_SubDSectorType::DartSectorCoefficient()
    // ON_SubDSectorType::CreaseSectorCoefficient()
    // ON_SubDSectorType::CornerSectorCoefficient()
    //
    // If the value of vertex->m_vertex_tag is not ON_SubDVertexTag::Smooth,
    // then that vertex is "tagged".
    //
    // If the value of m_edge_tag is ON_SubDEdgeTag::Crease,
    // then m_sector_coefficient[] should be {0,0}.
    // In any case m_sector_coefficient[] values are ignored and the
    // midpoint of the edge is the location of the edge.s subdivision point.
    // The edge's subdivision vertex will be tagged as ON_SubDVertexTag::Crease
    // and both subdivision edges will be tagged as ON_SubDEdgeTag::Crease.
    //
    // If the value of m_edge_tag is ON_SubDEdgeTag::Smooth
    // and neither end vertex is tagged, then m_sector_coefficient[] should be {0,0}.
    // In any case m_sector_coefficient[] values are ignored on smooth edges
    // with smooth vertices at both ends.
    // The edge's subdivision vertex will be tagged as ON_SubDVertexTag::Smooth
    // and both subdivision edges will be tagged as ON_SubDEdgeTag::Smooth.
    //
    // If the value of m_edge_tag is ON_SubDEdgeTag::Smooth and
    // exactly one end vertex is tagged, then the m_sector_coefficient[]
    // value for the tagged end is calculated by ON_SubDSectorType::SectorCoefficient().
    // tagged_coefficient*tagged_vertex + (1.0 - tagged_coefficient)*untagged_vertex
    // is used when combining the edge ends.
    // The edge's subdivision vertex will be tagged as ON_SubDVertexTag::Smooth
    // and both subdivision edges will be tagged as ON_SubDEdgeTag::Smooth.
    //
    // If the value of m_edge_tag is ON_SubDEdgeTag::SmoothX, then the edge
    // must have exactly two neighboring faces,
    // both vertices must be tagged and the m_sector_coefficient[]
    // values are calculated by ON_SubDSectorType::SectorCoefficient().
    // When the edge is subdivided, the midpoint of the edge is the
    // location of the edge.s subdivision point.
    // The edge's subdivision vertex will be tagged as ON_SubDVertexTag::Smooth
    // and both subdivision edges will be tagged as ON_SubDEdgeTag::Smooth.
    //
    // If the value of m_edge_tag is ON_SubDEdgeTag::Smooth
    // and both end vertices are tagged, that is a severe error
    // condition and the edge is subdivided at its midpoint.
    //
    // If the value of m_edge_tag is ON_SubDEdgeTag::SmoothX
    // and both end vertices are not tagged, that is a severe error
    // condition and the edge is subdivided at its midpoint.
    //
    // m_sector_coefficient[tagged_end] = 1/2 + 1/3*cos(theta_k)
    // where "theta_k" is the tagged end's "theta_k", which depends on the vertex tag (dart/crease/corner),
    // the number of faces k in the sector, and the control net crease angle alpha when the tagged end is a corner.
    // Dart:   theta_k = 2 * Pi / k
    // Crease: theta_k = Pi / k
    // Corner: theta_k = alpha / k
    //
    // The name "sector coefficient" is used because the value is a property of the
    // vertex's sector (every smooth edge inside a vertex sector has the same value at the tagged vertex).
    // The sector coefficient does not change which a subdivision is applied.
    //
    // ------------------------------
    // 2022-02-09, Pierre C, RH-67377
    // ------------------------------
    // Wrong values in 3dm files created by OpenNURBS 7.16 and before, fixed in 7.17.
    //
    // Since 2015-02-20,
    // ON_SubDSectorType::CornerSectorThetaFromCornerAngle(unsigned int sector_face_count, double corner_sector_angle_radians)
    // had been incorrectly computing theta as:
    // corner_sector_theta = corner_sector_angle_radians / (2 * sector_face_count)
    // instead of:
    // corner_sector_theta = corner_sector_angle_radians / sector_face_count.
    //
    // This is fixed as of Rhino 7.17, but 3dm files created before this version saved the incorrect value.
    //
    // This changes the coefficients saved in the SubD edge, and in the 3dm files.
    // Rhino recomputes all m_sector_coefficients cached in the SubD edges when
    // adding a SubD to a document, so all values are now correct. This changes
    // SubD subdivision, meshing, limit surface, and limit point editing results,
    // for SubDs that have a smooth edge connected to a corner vertex.
    //
    // If you are using this value from a SubD in a 3dm file created by Rhino 7.16 or earlier,
    // without adding the SubD to a Rhino document using CRhinoSubDObject::SetSubD(ON_SubDRef subd_ref),
    // you need to recompute all sector coefficients using subd->UpdateAllTagsAndSectorCoefficients(true);
    m_sector_coefficient: [2] float64;

    // For a smooth edge, m_sharpness is the edge's sharpness.
    // Edge sharpenss has no meaning for edges with a crease tag.
    // ON_SubDEdge::Sharpness() comments for details.
    m_sharpness:          ON_SubDEdgeSharpness;

    ON_SubDEdgeSurfaceCurve :: struct {}
    // Cached limit curve
    // GetEdgeSurfaceCurveControlPoints( bUseSavedSurfacePoint=true ) can change the value of m_limit_curve.
    // If 0 != ON_SUBD_CACHE_LIMIT_FLAG(m_saved_points_flags), then
    // m_limit_curve is the edge's limit surface curve.
    // The memory is managed by the parent ON_SubD.
    // If 0 == ON_SUBD_CACHE_LIMIT_FLAG(m_saved_points_flags),
    // then any information in m_limit_mesh_fragments is dirty
    // and should not be used.
    // ClearSavedSubdivisionPoints() zeros
    // the appropriate bit of m_saved_points_flags.
    m_limit_curve:        *ON_SubDEdgeSurfaceCurve = null;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDFace
//
ON_SubDFace :: struct {
    #as using on_subdcomponentbase: ON_SubDComponentBase;

    m_prev_face:              *ON_SubDFace = null; // linked list of faces on this level
    m_next_face:              *ON_SubDFace = null; // linked list of faces on this level

    m_reserved1:              u32 = 0;

    // If non zero, m_pack_id identifies the packed group of faces this faces belongs to.
    // Faces that are not quads are never in grouped with other faces.
    // When possible, quads are packed into groups that form larger rectangular regions.
    // ON_SubD::Packfaces() creates the packing information.
    // Packing information is saved in 3dm files.
    m_pack_id:                u32 = 0;

    // Location of this face's pack rectin normalized coordinates
    // Each face is assigned a unique rectangle in the unit square (0,1)x(0,1).
    // Groups of quad faces packed together.
    // If faces are added to an existing subd, the pack rects for the entire subd must be recalculated.
    // If faces in a quad group are removed from a subd, the pack rects for the entire subd must be recalculated.
    m_pack_rect_origin:       [2] float64;
    m_pack_rect_size:         [2] float64;
    m_reserved2:              u32 = 0; // m_packed_rect_u = 0;
    m_reserved3:              u32 = 0; // m_packed_rect_v = 0;

    PackStatusBits :: enum u8 {
        ZeroPackStatusBits :: 0;

        PackingRotate0     :: 0;
        PackingRotate90    :: 1;
        PackingRotate180   :: 2;
        PackingRotate270   :: 3;

        PackingRotateMask  :: 3;

        PackRectSet        :: 4;

        PackingBitsMask    :: 7;
        NotPackingBitsMask :: 248;
    }

    // NOT mutable on purpose
    m_pack_status_bits:       u8 = 0;

    TextureStatusBits :: enum u8 {
        ZeroTextureStatusBits    :: 0;

        TexturePointsSet         :: 1;
        TexturePointsBitsMask    :: 1;
        NotTexturePointsBitsMask :: 254;
    }

    // mutable because rendering code frequently modifis const objects in the Rhino.
    m_texture_status_bits:    u8 = 0;

    // The application specifies a base ON_Material used to render the subd this face belongs to.
    // If m_material_channel_index > 0 AND face_material_id = base.MaterialChannelIdFromIndex(m_material_channel_index)
    // is not nil, then face_material_id identifies an override rendering material for this face.
    // Otherwise base will be used to render this face.
    m_material_channel_index: u16 = 0;

    // The application specifies a base ON_Material used to render the subd this face belongs to.
    // If m_material_channel_index > 0 AND face_material_id = base.MaterialChannelIdFromIndex(m_material_channel_index)
    // is not nil, then face_material_id identifies an override rendering material for this face.
    // Otherwise base will be used to render this face.
    m_per_face_color:         ON_Color;

    m_level_zero_face_id:     u32 = 0; // id of level zero face

    // Array of m_edge_count edges that form the boundary of the face.
    // The edges are in ordered to form a continuous loop.
    //
    //  The first four are in m_edge4[0], ..., m_edge4[3].
    //  When m_edge_count > 4, the fifth and additional edges
    //  are in m_edgex[0], ..., m_edgex[m_edge_count-5];
    //
    //  The value of ON_SubDEdgePtr.EdgeDirection() is 0 if the
    //  edge's natural orientation from m_vertex[0] to m_vertex[1]
    //  agrees with the face's boundary orientation.
    //
    //  The value of ON_SubDEdgePtr.EdgeDirection() is 1 if the
    //  edge's natural orientation from m_vertex[0] to m_vertex[1]
    //  is opposited the face's boundary orientation.
    anon_enum_34 :: enum u32 {
        MaximumEdgeCount :: 65520;
    }

    m_edge_count:             u16 = 0;
    m_edgex_capacity:         u16 = 0;

    m_edge4:                  [4] ON_SubDEdgePtr;
    m_edgex:                  *ON_SubDEdgePtr = null;

    // If m_texture_points is not nullptr, it has capacity 4 + m_edgex_capacity.
    // Custom texture coordinates are stored in m_texture_points.
    // When texture coordinates are packed or come from a mapping,
    // m_texture_points is not used. Typically m_texture_points
    // is used when an ON_SubD is created from an ON_Mesh and the mesh
    // has custom texture coordinates. Here "custom" means
    // not from a mapping.
    // https://mcneel.myjetbrains.com/youtrack/issue/RH-59465
    m_texture_points:         *ON_3dPoint = null;

    // Mesh fragment(s) for this face
    m_mesh_fragments:         *ON_SubDMeshFragment = null;
}

/*
Description:
Avoid using ON_SubDVertexArray. ON_SubDVertexIterator is more efficient and a better choice.
*/
ON_SubDVertexArray :: struct {
    m_subd:         ON_SubD;
    m_a:            **ON_SubDVertex = null;
    m_vertex_count: u32 = 0;

    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_sp is private and all code that manages m_sp is explicitly implemented in the DLL.
    m_sp:           std.shared_ptr(*ON_SubDVertex);
}

/*
Description:
Avoid using ON_SubDEdgeArray. ON_SubDEdgeIterator is more efficient and a better choice.
*/
ON_SubDEdgeArray :: struct {
    m_subd:       ON_SubD;
    m_a:          **ON_SubDEdge = null;
    m_edge_count: u32 = 0;

    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_sp is private and all code that manages m_sp is explicitly implemented in the DLL.
    m_sp:         std.shared_ptr(*ON_SubDEdge);
}

/*
Description:
Avoid using ON_SubDFaceArray. ON_SubDFaceIterator is more efficient and a better choice.
*/
ON_SubDFaceArray :: struct {
    m_subd:       ON_SubD;
    m_a:          **ON_SubDFace = null;
    m_face_count: u32 = 0;

    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_sp is private and all code that manages m_sp is explicitly implemented in the DLL.
    m_sp:         std.shared_ptr(*ON_SubDFace);
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDVertexIterator
//
ON_SubDVertexIterator :: struct {
    m_subd_ref:      ON_SubDRef;
    m_v_first:       *ON_SubDVertex = null;
    m_v_last:        *ON_SubDVertex = null;
    m_v_current:     *ON_SubDVertex = null;
    m_vertex_index:  u32 = 0;
    m_vertex_count:  u32 = 0;
    m_component_ptr: ON_SubDComponentPtr;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDVertexIdIterator
//
ON_SubDVertexIdIterator :: struct {
    #as using on_fixedsizepooliterator: ON_FixedSizePoolIterator;

    m_subd_ref: ON_SubDRef;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDEdgeIterator
//
ON_SubDEdgeIterator :: struct {
    m_subd_ref:      ON_SubDRef;
    m_e_first:       *ON_SubDEdge = null;
    m_e_last:        *ON_SubDEdge = null;
    m_e_current:     *ON_SubDEdge = null;
    m_edge_index:    u32 = 0;
    m_edge_count:    u32 = 0;
    m_component_ptr: ON_SubDComponentPtr;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDEdgeIdIterator
//
ON_SubDEdgeIdIterator :: struct {
    #as using on_fixedsizepooliterator: ON_FixedSizePoolIterator;

    m_subd_ref: ON_SubDRef;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDFaceIterator
//
ON_SubDFaceIterator :: struct {
    m_subd_ref:      ON_SubDRef;
    m_face_first:    *ON_SubDFace = null;
    m_face_last:     *ON_SubDFace = null;
    m_face_current:  *ON_SubDFace = null;
    m_face_index:    u32 = 0;
    m_face_count:    u32 = 0;
    m_component_ptr: ON_SubDComponentPtr;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDFaceIdIterator
//
ON_SubDFaceIdIterator :: struct {
    #as using on_fixedsizepooliterator: ON_FixedSizePoolIterator;

    m_subd_ref: ON_SubDRef;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentIterator
//
ON_SubDComponentIterator :: struct {
    m_subd_ref:     ON_SubDRef;
    m_subd_level:   u32 = 0;
    m_vertex_first: *ON_SubDVertex = null;
    m_vertex_last:  *ON_SubDVertex = null;
    m_edge_first:   *ON_SubDEdge = null;
    m_edge_last:    *ON_SubDEdge = null;
    m_face_first:   *ON_SubDFace = null;
    m_face_last:    *ON_SubDFace = null;
    m_cptr_current: ON_SubDComponentPtr;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDMeshFragmentIterator
//
ON_SubDMeshFragmentIterator :: struct {
    anon_enum_35 :: enum u32 {
        DefaultMaximumMeshQuadCount :: 262144;
    }

    m_limit_mesh:                 ON_SubDMesh;
    m_subd:                       ON_SubD;
    m_fit:                        ON_SubDFaceIterator;
    m_current_fragment:           *ON_SubDMeshFragment = null;
    m_bFromFaceFragments          := false;
    m_bHaveCounts                 := false;

    // used to override the appearance of SubD().SubDApperance().
    m_subd_appearance_override:   ON_SubDComponentLocation = .Unset;

    m_reserved_density_reduction: u8 = 0; // 0 = none

    m_maximum_mesh_density:       u32 = 0; // See MaximumMeshDensity() comment

    // full sized fragment count (for quads)
    m_full_size_fragment_count:   u32 = 0;

    // half sized fragment count (for n-gons with n != 4)
    m_half_size_fragment_count:   u32 = 0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDSectorIterator
//
ON_SubDSectorIterator :: struct {
    StopAt :: enum u8 {
        Boundary   :: 0;

        AnyCrease  :: 1;

        HardCrease :: 2;
    }

    m_center_vertex:      *ON_SubDVertex = null;
    m_initial_face:       *ON_SubDFace = null;
    m_current_face:       *ON_SubDFace = null;

    m_current_eptr:       [2] ON_SubDEdgePtr; // default = { ON_SubDEdgePtr::Null, ON_SubDEdgePtr::Null };

    m_initial_fvi:        u32 = 0;
    m_current_fvi:        u32 = 0;
    m_current_fei:        [2] u32; // default = { 0, 0 }; // "prev" and "next"

    // m_initial_face_dir
    // 0: "next" means clockwise with respect to the initial face's orientation.
    // 1: "next" means counter-clockwise with respect to the initial face's orientation.
    m_initial_face_dir:   u32 = 0;

    // m_current_face_dir
    // 0: "next" means clockwise with respect to the initial face's orientation.
    // 1: "next" means counter-clockwise with respect to the initial face's orientation.
    // When the subd faces around the center vertex are consistently oriented,
    // m_current_face_dir is always equal to m_initial_face_dir.
    m_current_face_dir:   u32 = 0;

    m_current_ring_index: s32 = 0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDFaceEdgeIterator
//
ON_SubDFaceEdgeIterator :: struct {
    m_face:        *ON_SubDFace;
    m_edge_count:  u32;
    m_edge_index0: u32;
    m_edge_index:  u32;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDFromMeshParameters
//
ON_SubDFromMeshParameters :: struct {
    /// <summary>
    /// Specifies the test used to determine when an interior mesh edge generates an interior SubD creased edge.
    /// </summary>
    InteriorCreaseOption :: enum u8 {
        Unset            :: 0;

        None             :: 1;

        AtMeshDoubleEdge :: 2;
    }

    /// <summary>
    /// Defines how convex corners are treated.
    /// </summary>
    ConvexCornerOption :: enum u8 {
        Unset        :: 0;

        None         :: 1;

        AtMeshCorner :: 2;
    }

    /// <summary>
    /// Defines how concave corners are treated.
    /// </summary>
    ConcaveCornerOption :: enum u8 {
        Unset        :: 0;

        None         :: 1;

        AtMeshCorner :: 2;
    }

    /// <summary>
    /// Specifies how texture coordinate information is transferred from the mesh to the SubD.
    /// </summary>
    TextureCoordinatesOption :: enum u8 {
        Unset           :: 0;

        None            :: 1;

        Automatic       :: 2;

        Packed          :: 3;

        CopyMapping     :: 4;

        CopyCoordinates :: 5;
    }

    MergeColinear :: enum u8 {
        BoundaryEdgesMask :: 1;
        InteriorEdgesMask :: 2;

        MergeColinearBoundaryEdgesMask :: BoundaryEdgesMask;
        MergeColinearInteriorEdgesMask :: InteriorEdgesMask;
    }

    m_merge_edges_bits:                     u8 = 0; // clear bit (0) = "true, set bit (1) = "false"

    m_bInterpolateMeshVertices              := false;

    m_interior_crease_option:               InteriorCreaseOption = .None;
    m_convex_corner_option:                 ConvexCornerOption = .None;
    m_concave_corner_option:                ConcaveCornerOption = .None;
    m_texture_coordinates_option:           TextureCoordinatesOption = .None;

    m_maximum_convex_corner_edge_count:     u16 = 2;

    m_minimum_concave_corner_edge_count:    u16 = 4;

    m_reserved2:                            u16 = 0;
    m_reserved3:                            u32 = 0;

    m_reserved4:                            float64 = 0.0;

    // default = 2pi/3 = 120 degrees
    m_maximum_convex_corner_angle_radians:  float64 = 2.094395;

    // default 4pi/3 = 240 degrees
    m_minimum_concave_corner_angle_radians: float64 = 4.18879;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentRef
//
//  Used when an ON_SubD vertex, edge or face needs to be sent around as
//  a piece of ON_Geometry.
//
ON_SubDComponentRef :: struct {
    #as using on_geometry: ON_Geometry;

    m_subd_ref:           ON_SubDRef;
    m_component_ptr:      ON_SubDComponentPtr;
    m_component_index:    ON_COMPONENT_INDEX;
    m_component_location: ON_SubDComponentLocation = .Unset;
    m_reference_id:       ON__UINT_PTR = 0;
}

ON_SubDComponentRefList :: struct {
    // C4251: ... needs to have dll-interface to be used by clients of class ...
    // m_subdimple_sp is private and all code that manages m_subdimple_sp is explicitly implemented in the DLL.
    m_list:                     ON_SimpleArray(*ON_SubDComponentRef);

    m_subd_count:               s32 = 0;
    m_subd_vertex_smooth_count: s32 = 0;
    m_subd_vertex_dart_count:   s32 = 0;
    m_subd_vertex_crease_count: s32 = 0;
    m_subd_vertex_corner_count: s32 = 0;
    m_subd_edge_smooth_count:   s32 = 0;
    m_subd_edge_crease_count:   s32 = 0;
    m_subd_face_count:          s32 = 0;

    m_bIsClean                  := false; // true if m_list is clean.

    m_reserved1:                u8 = 0;
    m_reserved2:                u16 = 0;
    m_reserved3:                u32 = 0;
    m_reserved4:                ON__UINT_PTR = 0;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDComponentPoint
//
//  Used in selection tests to return a point and parameters on a component.
//
ON_SubDComponentPoint :: struct {
    // m_component_ptr will be face, edge or vertex
    m_component_ptr: ON_SubDComponentPtr;

    //// If m_level_index is ON_UNSET_UINT_INDEX, the point is on the limit surface.
    //// Otherwise the point is on the control net at the specified level.
    //unsigned int m_level_index = ON_UNSET_UINT_INDEX;
    m_pick_point:    ON_PickPoint;
}

//////////////////////////////////////////////////////////////////////////
//
// ON_SubDMatrix
//
ON_SubDMatrix :: struct {
    m_sector_type: ON_SubDSectorType;

    m_R:           u32 = 0; // the matrix m_S is m_R x m_R (m_R = m_sector_type.PointRingCount())

    // m_S = R x R subdivision matrix
    // If (vertexR[0], ..., vertexR[R-1]) is a list of standard vertex ring points,
    // then then the location of the subdivided ring points
    // (vertexR1[0], ..., vertexR1[R-1]) can be calculated from m_S.
    // vertexR1[i] = m_S[i][0]*vertexR[0] + ... + m_S[i][R-1]*vertexR[R-1]
    m_S:           **float64 = null;

    // m_LP[] = limit point evaluation vector.
    // The array m_LP[] has m_R elements.
    // If (vertexR[0], ..., vertexR[R-1]) is a list of standard vertex ring points,
    // then Limit point = m_LP[0]*vertexR[0] + ... + m_LP[R-1]*vertexR[R-1].
    // m_LP is the eigenvector of Transpose(m_S) with eigenvalue = 1.
    // Length(m_LP) = 1.
    m_LP:          *float64 = null;

    // m_L1 and m_L2 = tangent space evaluation vectors.
    // The arrays m_L1[] and m_L2[] have m_R elements.
    // If (vertexR[0], ..., vertexR[R-1]) is a list of standard vertex ring points,
    // then the two vectors
    // V1 = m_L1[0]*vertexR[0] + ... + m_L1[R-1]*vertexR[R-1].
    // V2 = m_L2[0]*vertexR[0] + ... + m_L2[R-1]*vertexR[R-1].
    // span the tangent plane and
    // N = V1 x V2 is perpendicular to the limit tangent plane.
    // In general and almost always in practice, V1 and V2 are not unit vectors
    // and it is best to normalize V1 and V2 before taking the cross product.
    // m_L1 and m_L2 are subdominant eigenvectors of Transpose(m_S).
    // When the subdominant eigenvalue has geometric multiplicity 2,
    // m_L1 and m_L2 span the same space as m_E1 and m_E2.
    // The values stored in m_L1 and m_L2 are chosen to provide accurate
    // evaluation. In come common cases m_L1 and m_L2 are equal to m_E1 and m_E2,
    // but not in all cases.
    m_L1:          *float64 = null;
    m_L2:          *float64 = null;

    m__max_R:      u32 = 0;
    m__S:          ON_Matrix; // m_S matrix memory
    m__buffer:     ON_SimpleArray(float64); // m_LP, m_L1, m_L2, m_E1, m_E2 memory  
}

/*
Description:
A ON_SubD_FixedSizeHeap is used to manage heap used for a local subdivision.
*/
ON_SubD_FixedSizeHeap :: struct {
    // The serial number is used for debugging purposes.
    m_sn:            u32;

    m_v:             *ON_SubDVertex = null;
    m_v_capacity:    u32 = 0;
    m_v_index:       u32 = 0;

    m_e:             *ON_SubDEdge = null;
    m_e_capacity:    u32 = 0;
    m_e_index:       u32 = 0;

    m_f:             *ON_SubDFace = null;
    m_f_capacity:    u32 = 0;
    m_f_index:       u32 = 0;

    m_p:             *ON__UINT_PTR = null;
    m_p_capacity:    u32 = 0;
    m_p_index:       u32 = 0;

    ON_SubD_FixedSizeHeap_ComponentPairHashElement :: struct {}
    // Used to find level 1 subdivision vertex from level 0 component
    m_hash_table:    **ON_SubD_FixedSizeHeap_ComponentPairHashElement = null;
    m_hash_elements: *ON_SubD_FixedSizeHeap_ComponentPairHashElement = null;
    m_h_capacity:    u32 = 0; // m_hash_table[] capacity.
    m_h_count:       u32 = 0; // 0xFFFFFFFFU means hash is disabled
    anon_enum_36 :: enum u32 {
        DisabledHashCount :: 4294967295;
    }
}

ON_SubDEdgeChain :: struct {
    m_subd_ref:                    ON_SubDRef;
    m_edge_chain:                  ON_SimpleArray(ON_SubDEdgePtr);

    // If m_persistent_subd_id, then the id identifies the parent subd in the model.
    // In an ONX_Model, this is the ON_ModelGeometryComponent.Id() value
    // of the corresponding ON_SubD in the ONX_Model.
    // In Rhino, this is the CRhinoObject.ModelObjectId() value
    // of the corresponding CRhinoSubDObject in the CRhinoDoc.
    m_persistent_subd_id:          ON_UUID;

    // If m_persistent_subd_id is set and m_persistent_edge_id[] is not empty,
    // m_persistent_edge_id[] is a list of edge ids and orientations.
    // unsigned id = m_persistent_edge_id[] & 0xFFFFFFFF.
    // reversed orientation = (0 != (m_persistent_edge_id[] & 0x8000000000000000)).
    // The persistent id information is saved in 3dm archives. When that archive is read,
    // the SetRuntimeEdgePtrsFromPersistentSubD() can be used to set the runtime edge chain values.
    // These mutable fields are set by Write and used by Read.
    m_persistent_edge_id:          ON_SimpleArray(u32);
    m_persistent_edge_orientation: ON_SimpleArray(ON__UINT8); // 0 = not reversed, 1 = reversed.

    m_unique_tester:               ON_UniqueTester;
    m_status_check_pass:           ON_ComponentStatus;
    m_status_check_fail:           ON_ComponentStatus;
    m_bEnableStatusCheck           := false;
}

ON_SubDComponentFilter :: struct {
    Topology :: enum u8 {
        Unset                 :: 0;

        Boundary              :: 1;

        Interior              :: 2;

        Nonmanifold           :: 4;

        BoundaryOrInterior    :: 3;

        BoundaryOrNonmanifold :: 5;

        InteriorOrNonmanifold :: 6;
    }

    m_bRejectVertices          := false;
    m_vertex_topology_filter:  Topology = .Unset;
    m_vertex_tag_filter:       [4] ON_SubDVertexTag;

    m_bRejectEdges             := false;
    m_edge_topology_filter:    Topology = .Unset;
    m_edge_tag_filter:         [2] ON_SubDEdgeTag;

    m_bRejectFaces             := false;
    m_face_topology_filter:    Topology = .Unset;
    m_minimum_face_edge_count: u32 = 0;
    m_maximum_face_edge_count: u32 = 0;
}

ON_SubDRTree :: struct {
    #as using on_rtree: ON_RTree;

    // Shares contents with the referenced subd.
    // Used to increment the reference count on the ON_SubDimple (not a real copy).
    // This is used to insure the vertex pointers in the rtree nodes are valid.
    m_subd: ON_SubD;
}

ON_SubDRTreeVertexFinder :: struct {
    MarkBitsFilter :: enum u8 {
        None     :: 0;
        Equal    :: 1;
        NotEqual :: 2;
    }

    m_P:                  ON_3dPoint;
    m_distance:           float64;
    m_v:                  *ON_SubDVertex = null;

    // When m_bMarkFilterEnabled is true, then vertices with Mark() == m_bMarkFilter are eligible
    // to be found and vertices with Mark() != m_bMarkFilter are ignored.
    m_bMarkFilterEnabled  := false;
    m_bMarkFilter         := false;

    m_mark_bits_filter:   MarkBitsFilter = .None;
    m_mark_bits:          ON__UINT8 = 0;

    m_reserved2:          u32 = 0;
}

ON_XMLRecurseChildrenCallback :: #type (unknown0: *ON_XMLNode, unknown1: *void) -> bool #c_call;

ON_XMLVariant :: struct {
    vtable: *ON_XMLVariant_VTable;
    Types :: enum u32 {
        Null         :: 0;
        Bool         :: 1;
        Integer      :: 2;
        Float        :: 3;
        Double       :: 4;
        String       :: 5;
        DoubleArray2 :: 6;
        DoubleArray3 :: 7;
        DoubleArray4 :: 8;
        DoubleColor4 :: 9;
        Matrix       :: 10;
        Uuid         :: 11;
        Time         :: 12;
        Buffer       :: 13;
    }

    ArrayTypes :: enum u32 {
        _2  :: 0;
        _3  :: 1;
        _4  :: 2;
        _16 :: 3;
        Array2  :: _2;
        Array3  :: _3;
        Array4  :: _4;
        Array16 :: _16;
    }

    ON_XMLVariantPrivate :: struct {}
    _private: *ON_XMLVariantPrivate;
    _PRIVATE: [232] ON__UINT8;
}
ON_XMLVariant_VTable :: struct #type_info_none {
    Destructor: (this: *ON_XMLVariant, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    DataCRC: (this: *ON_XMLVariant, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;

    Type: (this: *ON_XMLVariant) -> ON_XMLVariant.Types #cpp_method;
    TypeAsString: (this: *ON_XMLVariant) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;
    IsEmpty: (this: *ON_XMLVariant) -> bool #cpp_method;
    IsNull: (this: *ON_XMLVariant) -> bool #cpp_method;

    Varies: (this: *ON_XMLVariant) -> bool #cpp_method;
    SetVaries: (this: *ON_XMLVariant) -> void #cpp_method;

    Units: (this: *ON_XMLVariant) -> ON.LengthUnitSystem #cpp_method;
    SetUnits: (this: *ON_XMLVariant, units: ON.LengthUnitSystem) -> void #cpp_method;

    NeedsXMLEncode: (this: *ON_XMLVariant) -> bool #cpp_method;

    GetBuffer: (this: *ON_XMLVariant) -> *ON_Buffer #cpp_method;
    ClearBuffers: (this: *ON_XMLVariant) -> void #cpp_method;

    SetNull: (this: *ON_XMLVariant) -> void #cpp_method;

    SetValue: (this: *ON_XMLVariant, buffer: *ON_Buffer) -> void #cpp_method;

    SetValue_1: (this: *ON_XMLVariant, buffer: /*const*/ *void, size: u64) -> void #cpp_method;

    SetValue_2: (this: *ON_XMLVariant, xform: /*const reference*/ *ON_Xform) -> void #cpp_method;

    SetValue_3: (this: *ON_XMLVariant, uuid: /*const reference*/ *ON_UUID) -> void #cpp_method;

    SetValue_4: (this: *ON_XMLVariant, time: time_t) -> void #cpp_method;

    SetValue_5: (this: *ON_XMLVariant, b: bool) -> void #cpp_method;

    SetValue_6: (this: *ON_XMLVariant, c: /*const reference*/ *ON_4fColor) -> void #cpp_method;

    SetValue_7: (this: *ON_XMLVariant, p: /*const reference*/ *ON_4dPoint) -> void #cpp_method;

    SetValue_8: (this: *ON_XMLVariant, p: /*const reference*/ *ON_3dPoint) -> void #cpp_method;

    SetValue_9: (this: *ON_XMLVariant, p: /*const reference*/ *ON_2dPoint) -> void #cpp_method;

    SetValue_10: (this: *ON_XMLVariant, p: /*const*/ *float, at: ON_XMLVariant.ArrayTypes) -> void #cpp_method;

    SetValue_11: (this: *ON_XMLVariant, p: /*const*/ *float64, at: ON_XMLVariant.ArrayTypes) -> void #cpp_method;

    SetValue_12: (this: *ON_XMLVariant, s: /*const reference*/ *ON_wString) -> void #cpp_method;

    SetValue_13: (this: *ON_XMLVariant, s: /*const*/ *s16) -> void #cpp_method;

    SetValue_14: (this: *ON_XMLVariant, v: float) -> void #cpp_method;

    SetValue_15: (this: *ON_XMLVariant, v: float64) -> void #cpp_method;

    SetValue_16: (this: *ON_XMLVariant, v: s32) -> void #cpp_method;

    AsBool: (this: *ON_XMLVariant) -> bool #cpp_method;
    AsInteger: (this: *ON_XMLVariant) -> s32 #cpp_method;
    AsDouble: (this: *ON_XMLVariant) -> float64 #cpp_method;
    AsFloat: (this: *ON_XMLVariant) -> float #cpp_method;
    As2dPoint: (this: *ON_XMLVariant) -> ON_2dPoint #cpp_method #cpp_return_type_is_non_pod;
    As3dPoint: (this: *ON_XMLVariant) -> ON_3dPoint #cpp_method #cpp_return_type_is_non_pod;
    As4dPoint: (this: *ON_XMLVariant) -> ON_4dPoint #cpp_method #cpp_return_type_is_non_pod;
    AsUuid: (this: *ON_XMLVariant) -> ON_UUID #cpp_method;
    AsXform: (this: *ON_XMLVariant) -> ON_Xform #cpp_method #cpp_return_type_is_non_pod;
    AsTime: (this: *ON_XMLVariant) -> time_t #cpp_method;
    AsColor: (this: *ON_XMLVariant) -> ON_4fColor #cpp_method #cpp_return_type_is_non_pod;

    AsBuffer: (this: *ON_XMLVariant, size_out: *u64) -> *void #cpp_method;

    AsBuffer_1: (this: /*const*/ *ON_XMLVariant) -> ON_Buffer #cpp_method #cpp_return_type_is_non_pod;

    AsString: (this: *ON_XMLVariant) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    TypePending: (this: *ON_XMLVariant) -> bool #cpp_method;
    SetTypePendingFlag: (this: *ON_XMLVariant, bTypePending: bool) -> void #cpp_method;

    Format: (this: *ON_XMLVariant, s: *ON_wString) -> void #cpp_method;

    StringToPoint: (this: *ON_XMLVariant, iValues: s32) -> void #cpp_method;
}

ON_XMLVariant_Destructor :: inline (this: *ON_XMLVariant, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_XMLVariant_DataCRC :: inline (this: *ON_XMLVariant, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

ON_XMLVariant_Type :: inline (this: *ON_XMLVariant) -> ON_XMLVariant.Types { return this.vtable.Type(this); }
ON_XMLVariant_TypeAsString :: inline (this: *ON_XMLVariant) -> ON_wString { return this.vtable.TypeAsString(this); }
ON_XMLVariant_IsEmpty :: inline (this: *ON_XMLVariant) -> bool { return this.vtable.IsEmpty(this); }
ON_XMLVariant_IsNull :: inline (this: *ON_XMLVariant) -> bool { return this.vtable.IsNull(this); }

ON_XMLVariant_Varies :: inline (this: *ON_XMLVariant) -> bool { return this.vtable.Varies(this); }
ON_XMLVariant_SetVaries :: inline (this: *ON_XMLVariant) { this.vtable.SetVaries(this); }

ON_XMLVariant_Units :: inline (this: *ON_XMLVariant) -> ON.LengthUnitSystem { return this.vtable.Units(this); }
ON_XMLVariant_SetUnits :: inline (this: *ON_XMLVariant, units: ON.LengthUnitSystem) { this.vtable.SetUnits(this, units); }

ON_XMLVariant_NeedsXMLEncode :: inline (this: *ON_XMLVariant) -> bool { return this.vtable.NeedsXMLEncode(this); }

ON_XMLVariant_GetBuffer :: inline (this: *ON_XMLVariant) -> *ON_Buffer { return this.vtable.GetBuffer(this); }
ON_XMLVariant_ClearBuffers :: inline (this: *ON_XMLVariant) { this.vtable.ClearBuffers(this); }

ON_XMLVariant_SetNull :: inline (this: *ON_XMLVariant) { this.vtable.SetNull(this); }

ON_XMLVariant_SetValue :: inline (this: *ON_XMLVariant, buffer: /*const reference*/ *ON_Buffer) { this.vtable.SetValue(this, buffer); }

ON_XMLVariant_SetValue_1 :: inline (this: *ON_XMLVariant, buffer: /*const*/ *void, size: u64) { this.vtable.SetValue_1(this, buffer, size); }

ON_XMLVariant_SetValue_2 :: inline (this: *ON_XMLVariant, xform: /*const reference*/ *ON_Xform) { this.vtable.SetValue_2(this, xform); }

ON_XMLVariant_SetValue_3 :: inline (this: *ON_XMLVariant, uuid: /*const reference*/ *ON_UUID) { this.vtable.SetValue_3(this, uuid); }

ON_XMLVariant_SetValue_4 :: inline (this: *ON_XMLVariant, time: time_t) { this.vtable.SetValue_4(this, time); }

ON_XMLVariant_SetValue_5 :: inline (this: *ON_XMLVariant, b: bool) { this.vtable.SetValue_5(this, b); }

ON_XMLVariant_SetValue_6 :: inline (this: *ON_XMLVariant, c: /*const reference*/ *ON_4fColor) { this.vtable.SetValue_6(this, c); }

ON_XMLVariant_SetValue_7 :: inline (this: *ON_XMLVariant, p: /*const reference*/ *ON_4dPoint) { this.vtable.SetValue_7(this, p); }

ON_XMLVariant_SetValue_8 :: inline (this: *ON_XMLVariant, p: /*const reference*/ *ON_3dPoint) { this.vtable.SetValue_8(this, p); }

ON_XMLVariant_SetValue_9 :: inline (this: *ON_XMLVariant, p: /*const reference*/ *ON_2dPoint) { this.vtable.SetValue_9(this, p); }

ON_XMLVariant_SetValue_10 :: inline (this: *ON_XMLVariant, p: /*const*/ *float, at: ON_XMLVariant.ArrayTypes) { this.vtable.SetValue_10(this, p, at); }

ON_XMLVariant_SetValue_11 :: inline (this: *ON_XMLVariant, p: /*const*/ *float64, at: ON_XMLVariant.ArrayTypes) { this.vtable.SetValue_11(this, p, at); }

ON_XMLVariant_SetValue_12 :: inline (this: *ON_XMLVariant, s: /*const reference*/ *ON_wString) { this.vtable.SetValue_12(this, s); }

ON_XMLVariant_SetValue_13 :: inline (this: *ON_XMLVariant, s: /*const*/ *s16) { this.vtable.SetValue_13(this, s); }

ON_XMLVariant_SetValue_14 :: inline (this: *ON_XMLVariant, v: float) { this.vtable.SetValue_14(this, v); }

ON_XMLVariant_SetValue_15 :: inline (this: *ON_XMLVariant, v: float64) { this.vtable.SetValue_15(this, v); }

ON_XMLVariant_SetValue_16 :: inline (this: *ON_XMLVariant, v: s32) { this.vtable.SetValue_16(this, v); }

ON_XMLVariant_AsBool :: inline (this: *ON_XMLVariant) -> bool { return this.vtable.AsBool(this); }
ON_XMLVariant_AsInteger :: inline (this: *ON_XMLVariant) -> s32 { return this.vtable.AsInteger(this); }
ON_XMLVariant_AsDouble :: inline (this: *ON_XMLVariant) -> float64 { return this.vtable.AsDouble(this); }
ON_XMLVariant_AsFloat :: inline (this: *ON_XMLVariant) -> float { return this.vtable.AsFloat(this); }
ON_XMLVariant_As2dPoint :: inline (this: *ON_XMLVariant) -> ON_2dPoint { return this.vtable.As2dPoint(this); }
ON_XMLVariant_As3dPoint :: inline (this: *ON_XMLVariant) -> ON_3dPoint { return this.vtable.As3dPoint(this); }
ON_XMLVariant_As4dPoint :: inline (this: *ON_XMLVariant) -> ON_4dPoint { return this.vtable.As4dPoint(this); }
ON_XMLVariant_AsUuid :: inline (this: *ON_XMLVariant) -> ON_UUID { return this.vtable.AsUuid(this); }
ON_XMLVariant_AsXform :: inline (this: *ON_XMLVariant) -> ON_Xform { return this.vtable.AsXform(this); }
ON_XMLVariant_AsTime :: inline (this: *ON_XMLVariant) -> time_t { return this.vtable.AsTime(this); }
ON_XMLVariant_AsColor :: inline (this: *ON_XMLVariant) -> ON_4fColor { return this.vtable.AsColor(this); }

ON_XMLVariant_AsBuffer :: inline (this: /*const*/ *ON_XMLVariant, size_out: /*reference*/ *u64) -> *void { return this.vtable.AsBuffer(this, size_out); }

ON_XMLVariant_AsBuffer_1 :: inline (this: /*const*/ *ON_XMLVariant) -> ON_Buffer { return this.vtable.AsBuffer_1(this); }

ON_XMLVariant_AsString :: inline (this: *ON_XMLVariant) -> ON_wString { return this.vtable.AsString(this); }

ON_XMLVariant_TypePending :: inline (this: *ON_XMLVariant) -> bool { return this.vtable.TypePending(this); }
ON_XMLVariant_SetTypePendingFlag :: inline (this: *ON_XMLVariant, bTypePending: bool) { this.vtable.SetTypePendingFlag(this, bTypePending); }

ON_XMLVariant_Format :: inline (this: *ON_XMLVariant, s: *ON_wString) { this.vtable.Format(this, s); }

ON_XMLVariant_StringToPoint :: inline (this: *ON_XMLVariant, iValues: s32) { this.vtable.StringToPoint(this, iValues); }

vtable :: (obj: *ON_XMLVariant) -> *ON_XMLVariant_VTable { return obj.vtable; }


ON_XMLProperty :: struct {
    vtable: *ON_XMLProperty_VTable;
    ON_XMLPropertyPrivate :: struct {}
    _private: *ON_XMLPropertyPrivate;
    _PRIVATE: [88] ON__UINT8;
}
ON_XMLProperty_VTable :: struct #type_info_none {
    Destructor: (this: *ON_XMLProperty, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Name: (this: *ON_XMLProperty) -> *ON_wString #cpp_method;
    SetName: (this: *ON_XMLProperty, name: *s16) -> void #cpp_method;

    DataCRC: (this: *ON_XMLProperty, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;

    Next: (this: *ON_XMLProperty) -> *ON_XMLProperty #cpp_method;

    IsDefaultProperty: (this: *ON_XMLProperty) -> bool #cpp_method;

    GetValue: (this: *ON_XMLProperty) -> *ON_XMLVariant #cpp_method;
    SetValue: (this: *ON_XMLProperty, value: *ON_XMLVariant) -> void #cpp_method;

    GetNonConstValue: (this: *ON_XMLProperty) -> *ON_XMLVariant #cpp_method;

    SetHugeStringValue: (this: *ON_XMLProperty, s: *ON_wString) -> void #cpp_method;

    EVF: (this: *ON_XMLProperty, func: *s16, data: *void) -> *void #cpp_method;
}

ON_XMLProperty_Destructor :: inline (this: *ON_XMLProperty, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_XMLProperty_Name :: inline (this: *ON_XMLProperty) -> *ON_wString { return this.vtable.Name(this); }
ON_XMLProperty_SetName :: inline (this: *ON_XMLProperty, name: *s16) { this.vtable.SetName(this, name); }

ON_XMLProperty_DataCRC :: inline (this: *ON_XMLProperty, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

ON_XMLProperty_Next :: inline (this: *ON_XMLProperty) -> *ON_XMLProperty { return this.vtable.Next(this); }

ON_XMLProperty_IsDefaultProperty :: inline (this: *ON_XMLProperty) -> bool { return this.vtable.IsDefaultProperty(this); }

ON_XMLProperty_GetValue :: inline (this: *ON_XMLProperty) -> *ON_XMLVariant { return this.vtable.GetValue(this); }
ON_XMLProperty_SetValue :: inline (this: *ON_XMLProperty, value: *ON_XMLVariant) { this.vtable.SetValue(this, value); }

ON_XMLProperty_GetNonConstValue :: inline (this: *ON_XMLProperty) -> *ON_XMLVariant { return this.vtable.GetNonConstValue(this); }

ON_XMLProperty_SetHugeStringValue :: inline (this: *ON_XMLProperty, s: *ON_wString) { this.vtable.SetHugeStringValue(this, s); }

ON_XMLProperty_EVF :: inline (this: *ON_XMLProperty, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

vtable :: (obj: *ON_XMLProperty) -> *ON_XMLProperty_VTable { return obj.vtable; }


ON_XMLSegmentedStream :: struct {
    vtable: *ON_XMLSegmentedStream_VTable;
    ON_XMLSegmentedStreamPrivate :: struct {}
    _private: *ON_XMLSegmentedStreamPrivate;
}
ON_XMLSegmentedStream_VTable :: struct #type_info_none {
    Destructor: (this: *ON_XMLSegmentedStream, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Count: (this: *ON_XMLSegmentedStream) -> s32 #cpp_method;
    Append: (this: *ON_XMLSegmentedStream, s: *s16) -> void #cpp_method;
    Segment: (this: *ON_XMLSegmentedStream, index: s32) -> *s16 #cpp_method;

    EVF: (this: *ON_XMLSegmentedStream, func: *s16, data: *void) -> *void #cpp_method;
}

ON_XMLSegmentedStream_Destructor :: inline (this: *ON_XMLSegmentedStream, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_XMLSegmentedStream_Count :: inline (this: *ON_XMLSegmentedStream) -> s32 { return this.vtable.Count(this); }
ON_XMLSegmentedStream_Append :: inline (this: *ON_XMLSegmentedStream, s: *s16) { this.vtable.Append(this, s); }
ON_XMLSegmentedStream_Segment :: inline (this: *ON_XMLSegmentedStream, index: s32) -> *s16 { return this.vtable.Segment(this, index); }

ON_XMLSegmentedStream_EVF :: inline (this: *ON_XMLSegmentedStream, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

vtable :: (obj: *ON_XMLSegmentedStream) -> *ON_XMLSegmentedStream_VTable { return obj.vtable; }


ON_XMLNode :: struct {
    vtable: *ON_XMLNode_VTable;
    ReadError: ON__UINT32 : 4294967295; // Indicates ReadFromStream() failure.

    CharacterCounts :: struct {
        // Number of characters that would have been written if the buffer was big enough.
        // This value does not include the terminator.
        _logical:  ON__UINT32 = 0;

        // Number of characters that were physically written. Always zero if max_chars is zero.
        // It is otherwise usually the same as m_logical, but less when the buffer is too small.
        // This value does not include the terminator.
        _physical: ON__UINT32 = 0;

        _reserved: ON__UINT64 = 0;
    }

    ChildIterator :: struct {
        vtable: *ChildIterator_VTable;
        ON_XMLNodeChildIteratorPrivate :: struct {}
        _private: *ON_XMLNodeChildIteratorPrivate;
    }
    ChildIterator_VTable :: struct #type_info_none {
        Destructor: (this: *ChildIterator, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

        GetNextChild: (this: *ChildIterator) -> *ON_XMLNode #cpp_method;
        EVF: (this: *ChildIterator, func: *s16, data: *void) -> *void #cpp_method;
    }

    ChildIterator_Destructor :: inline (this: *ChildIterator, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

    ChildIterator_GetNextChild :: inline (this: *ChildIterator) -> *ON_XMLNode { return this.vtable.GetNextChild(this); }
    ChildIterator_EVF :: inline (this: *ChildIterator, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

    //vtable :: (obj: *ChildIterator) -> *ChildIterator_VTable { return obj.vtable; }


    PropertyIterator :: struct {
        vtable: *PropertyIterator_VTable;
        ON_XMLNodePropertyIteratorPrivate :: struct {}
        _private: *ON_XMLNodePropertyIteratorPrivate;
    }
    PropertyIterator_VTable :: struct #type_info_none {
        Destructor: (this: *PropertyIterator, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

        GetNextProperty: (this: *PropertyIterator) -> *ON_XMLProperty #cpp_method;
        EVF: (this: *PropertyIterator, func: *s16, data: *void) -> *void #cpp_method;
    }

    PropertyIterator_Destructor :: inline (this: *PropertyIterator, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

    PropertyIterator_GetNextProperty :: inline (this: *PropertyIterator) -> *ON_XMLProperty { return this.vtable.GetNextProperty(this); }
    PropertyIterator_EVF :: inline (this: *PropertyIterator, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

    //vtable :: (obj: *PropertyIterator) -> *PropertyIterator_VTable { return obj.vtable; }


    _private:  *ON_XMLNodePrivate;
    _PRIVATE:  [216] ON__UINT8;
}
ON_XMLNode_VTable :: struct #type_info_none {
    Destructor: (this: *ON_XMLNode, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    MergeFrom: (this: *ON_XMLNode, src: *ON_XMLNode) -> bool #cpp_method;

    TagName: (this: *ON_XMLNode) -> *ON_wString #cpp_method;
    SetTagName: (this: *ON_XMLNode, name: *s16) -> void #cpp_method;

    FirstChild: (this: *ON_XMLNode) -> *ON_XMLNode #cpp_method;

    PrevSibling: (this: *ON_XMLNode) -> *ON_XMLNode #cpp_method;

    NextSibling: (this: *ON_XMLNode) -> *ON_XMLNode #cpp_method;

    Parent: (this: *ON_XMLNode) -> *ON_XMLNode #cpp_method;

    TopLevel: (this: *ON_XMLNode) -> *ON_XMLNode #cpp_method;

    RecurseChildren: (this: *ON_XMLNode, callback: ON_XMLRecurseChildrenCallback, data: *void) -> bool #cpp_method;

    AttachChildNode: (this: *ON_XMLNode, node: *ON_XMLNode) -> *ON_XMLNode #cpp_method;

    AttachProperty: (this: *ON_XMLNode, prop: *ON_XMLProperty) -> *ON_XMLProperty #cpp_method;

    SetProperty: (this: *ON_XMLNode, prop: *ON_XMLProperty) -> *ON_XMLProperty #cpp_method;

    Remove: (this: *ON_XMLNode) -> void #cpp_method;

    RemoveChild: (this: *ON_XMLNode, child: *ON_XMLNode) -> bool #cpp_method;

    RemoveProperty: (this: *ON_XMLNode, prop_name: *s16) -> bool #cpp_method;

    DetachChild: (this: *ON_XMLNode, child: *ON_XMLNode) -> *ON_XMLNode #cpp_method;

    RemoveAllChildren: (this: *ON_XMLNode) -> void #cpp_method;

    RemoveAllProperties: (this: *ON_XMLNode) -> void #cpp_method;

    Clear: (this: *ON_XMLNode) -> void #cpp_method;

    MoveBefore: (this: *ON_XMLNode, other: *ON_XMLNode) -> void #cpp_method;

    MoveAfter: (this: *ON_XMLNode, other: *ON_XMLNode) -> void #cpp_method;

    ReadFromStream: (this: *ON_XMLNode, buf: *s16, warnings_as_errors := false, validate_tags := true) -> ON__UINT32 #cpp_method;

    LastReadBufferPointer: (this: *ON_XMLNode) -> *void #cpp_method;

    OnNodeReadFromStream: (this: *ON_XMLNode, node: *ON_XMLNode) -> void #cpp_method;

    String: (this: *ON_XMLNode, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    WriteToStream: (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON__UINT32 #cpp_method;

    WriteToStreamEx: (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_XMLNode.CharacterCounts #cpp_method;
    WriteHeaderToStream: (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_XMLNode.CharacterCounts #cpp_method;
    WriteChildrenToStream: (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_XMLNode.CharacterCounts #cpp_method;
    WriteFooterToStream: (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false) -> ON_XMLNode.CharacterCounts #cpp_method;

    WriteToSegmentedStream: (this: *ON_XMLNode, stream: *ON_XMLSegmentedStream, include_formatting := true, force_long_format := false, sorted_props := false) -> bool #cpp_method;

    PropertyCount: (this: *ON_XMLNode) -> s32 #cpp_method;
    ChildCount: (this: *ON_XMLNode) -> s32 #cpp_method;

    GetNestedDepth: (this: *ON_XMLNode) -> s32 #cpp_method;

    DataCRC: (this: *ON_XMLNode, current_remainder: ON__UINT32, recursive: bool) -> ON__UINT32 #cpp_method;

    GetNamedChild: (this: *ON_XMLNode, name: *s16) -> *ON_XMLNode #cpp_method;

    GetNamedProperty: (this: *ON_XMLNode, name: *s16) -> *ON_XMLProperty #cpp_method;

    GetDefaultProperty: (this: *ON_XMLNode) -> *ON_XMLProperty #cpp_method;

    GetPathFromRoot: (this: *ON_XMLNode) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    GetNodeAtPath: (this: *ON_XMLNode, path: *s16) -> *ON_XMLNode #cpp_method;

    CreateNodeAtPath: (this: *ON_XMLNode, path: *s16) -> *ON_XMLNode #cpp_method;

    EVF: (this: *ON_XMLNode, func: *s16, data: *void) -> *void #cpp_method;

    GetChildIterator: (this: *ON_XMLNode) -> ON_XMLNode.ChildIterator #cpp_method #cpp_return_type_is_non_pod;
    GetPropertyIterator: (this: *ON_XMLNode, alphabetized := false) -> ON_XMLNode.PropertyIterator #cpp_method #cpp_return_type_is_non_pod;

    SetInternalDebuggingFlags: (this: *ON_XMLNode, unknown0: ON__UINT64) -> void #cpp_method;
}

ON_XMLNode_Destructor :: inline (this: *ON_XMLNode, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_XMLNode_MergeFrom :: inline (this: *ON_XMLNode, src: *ON_XMLNode) -> bool { return this.vtable.MergeFrom(this, src); }

ON_XMLNode_TagName :: inline (this: *ON_XMLNode) -> *ON_wString { return this.vtable.TagName(this); }
ON_XMLNode_SetTagName :: inline (this: *ON_XMLNode, name: *s16) { this.vtable.SetTagName(this, name); }

ON_XMLNode_FirstChild :: inline (this: *ON_XMLNode) -> *ON_XMLNode { return this.vtable.FirstChild(this); }

ON_XMLNode_PrevSibling :: inline (this: *ON_XMLNode) -> *ON_XMLNode { return this.vtable.PrevSibling(this); }

ON_XMLNode_NextSibling :: inline (this: *ON_XMLNode) -> *ON_XMLNode { return this.vtable.NextSibling(this); }

ON_XMLNode_Parent :: inline (this: *ON_XMLNode) -> *ON_XMLNode { return this.vtable.Parent(this); }

ON_XMLNode_TopLevel :: inline (this: *ON_XMLNode) -> *ON_XMLNode { return this.vtable.TopLevel(this); }

ON_XMLNode_RecurseChildren :: inline (this: *ON_XMLNode, callback: ON_XMLRecurseChildrenCallback, data: *void) -> bool { return this.vtable.RecurseChildren(this, callback, data); }

ON_XMLNode_AttachChildNode :: inline (this: *ON_XMLNode, node: *ON_XMLNode) -> *ON_XMLNode { return this.vtable.AttachChildNode(this, node); }

ON_XMLNode_AttachProperty :: inline (this: *ON_XMLNode, prop: *ON_XMLProperty) -> *ON_XMLProperty { return this.vtable.AttachProperty(this, prop); }

ON_XMLNode_SetProperty :: inline (this: *ON_XMLNode, prop: *ON_XMLProperty) -> *ON_XMLProperty { return this.vtable.SetProperty(this, prop); }

ON_XMLNode_Remove :: inline (this: *ON_XMLNode) { this.vtable.Remove(this); }

ON_XMLNode_RemoveChild :: inline (this: *ON_XMLNode, child: *ON_XMLNode) -> bool { return this.vtable.RemoveChild(this, child); }

ON_XMLNode_RemoveProperty :: inline (this: *ON_XMLNode, prop_name: *s16) -> bool { return this.vtable.RemoveProperty(this, prop_name); }

ON_XMLNode_DetachChild :: inline (this: *ON_XMLNode, child: *ON_XMLNode) -> *ON_XMLNode { return this.vtable.DetachChild(this, child); }

ON_XMLNode_RemoveAllChildren :: inline (this: *ON_XMLNode) { this.vtable.RemoveAllChildren(this); }

ON_XMLNode_RemoveAllProperties :: inline (this: *ON_XMLNode) { this.vtable.RemoveAllProperties(this); }

ON_XMLNode_Clear :: inline (this: *ON_XMLNode) { this.vtable.Clear(this); }

ON_XMLNode_MoveBefore :: inline (this: *ON_XMLNode, other: *ON_XMLNode) { this.vtable.MoveBefore(this, other); }

ON_XMLNode_MoveAfter :: inline (this: *ON_XMLNode, other: *ON_XMLNode) { this.vtable.MoveAfter(this, other); }

ON_XMLNode_ReadFromStream :: inline (this: *ON_XMLNode, buf: *s16, warnings_as_errors := false, validate_tags := true) -> ON__UINT32 { return this.vtable.ReadFromStream(this, buf, warnings_as_errors, validate_tags); }

ON_XMLNode_LastReadBufferPointer :: inline (this: *ON_XMLNode) -> *void { return this.vtable.LastReadBufferPointer(this); }

ON_XMLNode_OnNodeReadFromStream :: inline (this: *ON_XMLNode, node: *ON_XMLNode) { this.vtable.OnNodeReadFromStream(this, node); }

ON_XMLNode_String :: inline (this: *ON_XMLNode, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_wString { return this.vtable.String(this, include_formatting, force_long_format, sorted_props); }

ON_XMLNode_WriteToStream :: inline (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON__UINT32 { return this.vtable.WriteToStream(this, stream, max_chars, include_formatting, force_long_format, sorted_props); }

ON_XMLNode_WriteToStreamEx :: inline (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_XMLNode.CharacterCounts { return this.vtable.WriteToStreamEx(this, stream, max_chars, include_formatting, force_long_format, sorted_props); }
ON_XMLNode_WriteHeaderToStream :: inline (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_XMLNode.CharacterCounts { return this.vtable.WriteHeaderToStream(this, stream, max_chars, include_formatting, force_long_format, sorted_props); }
ON_XMLNode_WriteChildrenToStream :: inline (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false, sorted_props := false) -> ON_XMLNode.CharacterCounts { return this.vtable.WriteChildrenToStream(this, stream, max_chars, include_formatting, force_long_format, sorted_props); }
ON_XMLNode_WriteFooterToStream :: inline (this: *ON_XMLNode, stream: *s16, max_chars: ON__UINT32, include_formatting := true, force_long_format := false) -> ON_XMLNode.CharacterCounts { return this.vtable.WriteFooterToStream(this, stream, max_chars, include_formatting, force_long_format); }

ON_XMLNode_WriteToSegmentedStream :: inline (this: *ON_XMLNode, stream: *ON_XMLSegmentedStream, include_formatting := true, force_long_format := false, sorted_props := false) -> bool { return this.vtable.WriteToSegmentedStream(this, stream, include_formatting, force_long_format, sorted_props); }

ON_XMLNode_PropertyCount :: inline (this: *ON_XMLNode) -> s32 { return this.vtable.PropertyCount(this); }
ON_XMLNode_ChildCount :: inline (this: *ON_XMLNode) -> s32 { return this.vtable.ChildCount(this); }

ON_XMLNode_GetNestedDepth :: inline (this: *ON_XMLNode) -> s32 { return this.vtable.GetNestedDepth(this); }

ON_XMLNode_DataCRC :: inline (this: *ON_XMLNode, current_remainder: ON__UINT32, recursive: bool) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder, recursive); }

ON_XMLNode_GetNamedChild :: inline (this: *ON_XMLNode, name: *s16) -> *ON_XMLNode { return this.vtable.GetNamedChild(this, name); }

ON_XMLNode_GetNamedProperty :: inline (this: *ON_XMLNode, name: *s16) -> *ON_XMLProperty { return this.vtable.GetNamedProperty(this, name); }

ON_XMLNode_GetDefaultProperty :: inline (this: *ON_XMLNode) -> *ON_XMLProperty { return this.vtable.GetDefaultProperty(this); }

ON_XMLNode_GetPathFromRoot :: inline (this: *ON_XMLNode) -> ON_wString { return this.vtable.GetPathFromRoot(this); }

ON_XMLNode_GetNodeAtPath :: inline (this: *ON_XMLNode, path: *s16) -> *ON_XMLNode { return this.vtable.GetNodeAtPath(this, path); }

ON_XMLNode_CreateNodeAtPath :: inline (this: *ON_XMLNode, path: *s16) -> *ON_XMLNode { return this.vtable.CreateNodeAtPath(this, path); }

ON_XMLNode_EVF :: inline (this: *ON_XMLNode, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_XMLNode_GetChildIterator :: inline (this: *ON_XMLNode) -> ON_XMLNode.ChildIterator { return this.vtable.GetChildIterator(this); }
ON_XMLNode_GetPropertyIterator :: inline (this: *ON_XMLNode, alphabetized := false) -> ON_XMLNode.PropertyIterator { return this.vtable.GetPropertyIterator(this, alphabetized); }

ON_XMLNode_SetInternalDebuggingFlags :: inline (this: *ON_XMLNode, unknown0: ON__UINT64) { this.vtable.SetInternalDebuggingFlags(this, unknown0); }

vtable :: (obj: *ON_XMLNode) -> *ON_XMLNode_VTable { return obj.vtable; }


ON_XMLRootNode :: struct {
    #as on_xmlnode: ON_XMLNode; // jai: no "using" to avoid name-clashes

    ON_XMLRootNodePrivate :: struct {}
    _private: *ON_XMLRootNodePrivate;
    #place on_xmlnode; on_xmlrootnode_vtable: *ON_XMLRootNode_VTable;
}
ON_XMLRootNode_VTable :: struct #type_info_none {
    using on_xmlnode: ON_XMLNode_VTable;
    NodeForRead: (this: *ON_XMLRootNode) -> *ON_XMLRootNode #cpp_method;
    NodeForWrite: (this: *ON_XMLRootNode) -> *ON_XMLRootNode #cpp_method;

    ReadFromFile: (this: *ON_XMLRootNode, path: *s16, warnings_as_errors := false, validate_tags := true) -> bool #cpp_method;
    WriteToFile: (this: *ON_XMLRootNode, path: *s16, include_formatting := true, utf8 := false, sorted_properties := false) -> bool #cpp_method;
}

ON_XMLRootNode_NodeForRead :: inline (this: *ON_XMLRootNode) -> *ON_XMLRootNode { return this.on_xmlrootnode_vtable.NodeForRead(this); }
ON_XMLRootNode_NodeForWrite :: inline (this: *ON_XMLRootNode) -> *ON_XMLRootNode { return this.on_xmlrootnode_vtable.NodeForWrite(this); }

ON_XMLRootNode_ReadFromFile :: inline (this: *ON_XMLRootNode, path: *s16, warnings_as_errors := false, validate_tags := true) -> bool { return this.on_xmlrootnode_vtable.ReadFromFile(this, path, warnings_as_errors, validate_tags); }
ON_XMLRootNode_WriteToFile :: inline (this: *ON_XMLRootNode, path: *s16, include_formatting := true, utf8 := false, sorted_properties := false) -> bool { return this.on_xmlrootnode_vtable.WriteToFile(this, path, include_formatting, utf8, sorted_properties); }

vtable :: (obj: *ON_XMLRootNode) -> *ON_XMLRootNode_VTable { return obj.on_xmlrootnode_vtable; }


ON_XMLUserData :: struct {
    #as using on_userdata: ON_UserData;

    ON_XMLUserDataPrivate :: struct {}
    _private: *ON_XMLUserDataPrivate;
    _PRIVATE: [304] ON__UINT8;
    #place on_userdata; on_xmluserdata_vtable: *ON_XMLUserData_VTable;
}
ON_XMLUserData_VTable :: struct #type_info_none {
    using on_userdata: ON_UserData_VTable;
    XMLRootForRead: (this: *ON_XMLUserData) -> *ON_XMLRootNode #cpp_method;
    XMLRootForWrite: (this: *ON_XMLUserData) -> *ON_XMLRootNode #cpp_method;

    Property: (this: *ON_XMLUserData, xml_path: *s16, prop_name: *s16) -> *ON_XMLProperty #cpp_method;

    Value: (this: *ON_XMLUserData, xml_path: *s16, prop_name: *s16 = xx "".data) -> ON_XMLVariant #cpp_method #cpp_return_type_is_non_pod;

    SetValue: (this: *ON_XMLUserData, xml_path: *s16, value: *ON_XMLVariant) -> void #cpp_method;

    SetValue_1: (this: *ON_XMLUserData, xml_path: /*const*/ *s16, prop_name: /*const*/ *s16, value: /*const reference*/ *ON_XMLVariant) -> bool #cpp_method;

    Clear: (this: *ON_XMLUserData) -> void #cpp_method;

    Version: (this: *ON_XMLUserData) -> s32 #cpp_method;

    SetToDefaults: (this: *ON_XMLUserData) -> void #cpp_method;
    ReportVersionError: (this: *ON_XMLUserData) -> void #cpp_method;

    _Dump: (this: *ON_XMLUserData, wszFileName: *s16) -> void #cpp_method;

    EVF: (this: *ON_XMLUserData, func: *s16, data: *void) -> *void #cpp_method;

    SetToDefaultsImpl: (this: *ON_XMLUserData, unknown0: s32) -> void #cpp_method;
}

ON_XMLUserData_XMLRootForRead :: inline (this: *ON_XMLUserData) -> *ON_XMLRootNode { return this.on_xmluserdata_vtable.XMLRootForRead(this); }
ON_XMLUserData_XMLRootForWrite :: inline (this: *ON_XMLUserData) -> *ON_XMLRootNode { return this.on_xmluserdata_vtable.XMLRootForWrite(this); }

ON_XMLUserData_Property :: inline (this: *ON_XMLUserData, xml_path: *s16, prop_name: *s16) -> *ON_XMLProperty { return this.on_xmluserdata_vtable.Property(this, xml_path, prop_name); }

ON_XMLUserData_Value :: inline (this: *ON_XMLUserData, xml_path: *s16, prop_name: *s16 = xx "".data) -> ON_XMLVariant { return this.on_xmluserdata_vtable.Value(this, xml_path, prop_name); }

ON_XMLUserData_SetValue :: inline (this: *ON_XMLUserData, xml_path: /*const*/ *s16, value: /*const reference*/ *ON_XMLVariant) { this.on_xmluserdata_vtable.SetValue(this, xml_path, value); }

ON_XMLUserData_SetValue_1 :: inline (this: *ON_XMLUserData, xml_path: /*const*/ *s16, prop_name: /*const*/ *s16, value: /*const reference*/ *ON_XMLVariant) -> bool { return this.on_xmluserdata_vtable.SetValue_1(this, xml_path, prop_name, value); }

ON_XMLUserData_Clear :: inline (this: *ON_XMLUserData) { this.on_xmluserdata_vtable.Clear(this); }

ON_XMLUserData_Version :: inline (this: *ON_XMLUserData) -> s32 { return this.on_xmluserdata_vtable.Version(this); }

ON_XMLUserData_SetToDefaults :: inline (this: *ON_XMLUserData) { this.on_xmluserdata_vtable.SetToDefaults(this); }
ON_XMLUserData_ReportVersionError :: inline (this: *ON_XMLUserData) { this.on_xmluserdata_vtable.ReportVersionError(this); }

ON_XMLUserData__Dump :: inline (this: *ON_XMLUserData, wszFileName: *s16) { this.on_xmluserdata_vtable._Dump(this, wszFileName); }

ON_XMLUserData_EVF :: inline (this: *ON_XMLUserData, func: *s16, data: *void) -> *void { return this.on_xmluserdata_vtable.EVF(this, func, data); }

ON_XMLUserData_SetToDefaultsImpl :: inline (this: *ON_XMLUserData, unknown0: s32) { this.on_xmluserdata_vtable.SetToDefaultsImpl(this, unknown0); }

vtable :: (obj: *ON_XMLUserData) -> *ON_XMLUserData_VTable { return obj.on_xmluserdata_vtable; }


ON_XMLParameters :: struct {
    vtable: *ON_XMLParameters_VTable;
    CIterator :: struct {
        vtable: *CIterator_VTable;
        ON_XMLParametersIteratorPrivate :: struct {}
        _private: *ON_XMLParametersIteratorPrivate;
    }
    CIterator_VTable :: struct #type_info_none {
        Destructor: (this: *CIterator, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

        EVF: (this: *CIterator, unknown0: *s16, unknown1: *void) -> *void #cpp_method;
    }

    CIterator_Destructor :: inline (this: *CIterator, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

    CIterator_EVF :: inline (this: *CIterator, unknown0: *s16, unknown1: *void) -> *void { return this.vtable.EVF(this, unknown0, unknown1); }

    //vtable :: (obj: *CIterator) -> *CIterator_VTable { return obj.vtable; }


    ON_XMLParametersPrivate :: struct {}
    _private: *ON_XMLParametersPrivate;
}
ON_XMLParameters_VTable :: struct #type_info_none {
    Destructor: (this: *ON_XMLParameters, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    SetWriteTypeProperty: (this: *ON_XMLParameters, b: bool) -> void #cpp_method;
    SetDefaultReadType: (this: *ON_XMLParameters, type: *s16) -> void #cpp_method;

    AsString: (this: *ON_XMLParameters) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;
    SetAsString: (this: *ON_XMLParameters, s: *s16) -> void #cpp_method;

    GetParam: (this: *ON_XMLParameters, param_name: *s16, param_value_out: *ON_XMLVariant) -> bool #cpp_method;
    SetParam: (this: *ON_XMLParameters, param_name: *s16, param_value: *ON_XMLVariant) -> *ON_XMLNode #cpp_method;

    GetParamNode: (this: *ON_XMLParameters, node: *ON_XMLNode, param_value: *ON_XMLVariant) -> bool #cpp_method;
    EVF: (this: *ON_XMLParameters, unknown0: *s16, unknown1: *void) -> *void #cpp_method;
    SetParamNode: (this: *ON_XMLParameters, node: *ON_XMLNode, param_name: *s16, param_value: *ON_XMLVariant) -> *ON_XMLNode #cpp_method;
    ObtainChildNodeForWrite: (this: *ON_XMLParameters, node: *ON_XMLNode, param_name: *s16) -> *ON_XMLNode #cpp_method;
}

ON_XMLParameters_Destructor :: inline (this: *ON_XMLParameters, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_XMLParameters_SetWriteTypeProperty :: inline (this: *ON_XMLParameters, b: bool) { this.vtable.SetWriteTypeProperty(this, b); }
ON_XMLParameters_SetDefaultReadType :: inline (this: *ON_XMLParameters, type: *s16) { this.vtable.SetDefaultReadType(this, type); }

ON_XMLParameters_AsString :: inline (this: *ON_XMLParameters) -> ON_wString { return this.vtable.AsString(this); }
ON_XMLParameters_SetAsString :: inline (this: *ON_XMLParameters, s: *s16) { this.vtable.SetAsString(this, s); }

ON_XMLParameters_GetParam :: inline (this: *ON_XMLParameters, param_name: *s16, param_value_out: *ON_XMLVariant) -> bool { return this.vtable.GetParam(this, param_name, param_value_out); }
ON_XMLParameters_SetParam :: inline (this: *ON_XMLParameters, param_name: *s16, param_value: *ON_XMLVariant) -> *ON_XMLNode { return this.vtable.SetParam(this, param_name, param_value); }

ON_XMLParameters_GetParamNode :: inline (this: *ON_XMLParameters, node: *ON_XMLNode, param_value: *ON_XMLVariant) -> bool { return this.vtable.GetParamNode(this, node, param_value); }
ON_XMLParameters_EVF :: inline (this: *ON_XMLParameters, unknown0: *s16, unknown1: *void) -> *void { return this.vtable.EVF(this, unknown0, unknown1); }
ON_XMLParameters_SetParamNode :: inline (this: *ON_XMLParameters, node: *ON_XMLNode, param_name: *s16, param_value: *ON_XMLVariant) -> *ON_XMLNode { return this.vtable.SetParamNode(this, node, param_name, param_value); }
ON_XMLParameters_ObtainChildNodeForWrite :: inline (this: *ON_XMLParameters, node: *ON_XMLNode, param_name: *s16) -> *ON_XMLNode { return this.vtable.ObtainChildNodeForWrite(this, node, param_name); }

vtable :: (obj: *ON_XMLParameters) -> *ON_XMLParameters_VTable { return obj.vtable; }


ON_XMLParametersV8 :: struct {
    #as using on_xmlparameters: ON_XMLParameters;
    #place on_xmlparameters; on_xmlparametersv8_vtable: *ON_XMLParametersV8_VTable;
}
ON_XMLParametersV8_VTable :: struct #type_info_none {
    using on_xmlparameters: ON_XMLParameters_VTable;
    FindNodeByNameProperty: (this: *ON_XMLParametersV8, param_name: *s16) -> *ON_XMLNode #cpp_method;
}
ON_XMLParametersV8_FindNodeByNameProperty :: inline (this: *ON_XMLParametersV8, param_name: *s16) -> *ON_XMLNode { return this.on_xmlparametersv8_vtable.FindNodeByNameProperty(this, param_name); }

vtable :: (obj: *ON_XMLParametersV8) -> *ON_XMLParametersV8_VTable { return obj.on_xmlparametersv8_vtable; }


// Class ON_XMLParamBlock is ON_XMLParameters with a built-in XML node.
ON_XMLParamBlock :: struct {
    #as using on_xmlparameters: ON_XMLParameters;

    _node:     ON_XMLRootNode;
    _reserved: ON__UINT64;
}

////////////////////////////////////////////////////////////////////////////////////////////
//
// ON_RdkUserData is for internal use only and is not intended for use by SDK clients.
//
////////////////////////////////////////////////////////////////////////////////////////////
ON_RdkUserData :: struct {
    #as using on_xmluserdata: ON_XMLUserData;

    ReadCallback :: #type (ud: *ON_RdkUserData) -> bool #c_call;
    WriteCallback :: #type (ud: *ON_RdkUserData) -> bool #c_call;
    TransformCallback :: #type (ud: *ON_RdkUserData, xform: *ON_Xform) -> bool #c_call;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// This class is for internal RDK use only.
ON_RdkDocumentDefaults :: struct {
    vtable: *ON_RdkDocumentDefaults_VTable;
    ValueSets :: enum s32 {
        All :: 0;
        New :: 1;
    }

    _root:          ON_XMLRootNode;
    _vs:            ValueSets;
    _major_version: s32;
    _reserved:      *void;
}
ON_RdkDocumentDefaults_VTable :: struct #type_info_none {
    Destructor: (this: *ON_RdkDocumentDefaults, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Node: (this: *ON_RdkDocumentDefaults) -> *ON_XMLNode #cpp_method;

    CopyDefaultsTo: (this: *ON_RdkDocumentDefaults, dest: *ON_XMLNode) -> void #cpp_method;

    EVF: (this: *ON_RdkDocumentDefaults, func: *s16, data: *void) -> *void #cpp_method;

    CreateXML: (this: *ON_RdkDocumentDefaults) -> void #cpp_method;
}

ON_RdkDocumentDefaults_Destructor :: inline (this: *ON_RdkDocumentDefaults, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_RdkDocumentDefaults_Node :: inline (this: *ON_RdkDocumentDefaults) -> *ON_XMLNode { return this.vtable.Node(this); }

ON_RdkDocumentDefaults_CopyDefaultsTo :: inline (this: *ON_RdkDocumentDefaults, dest: *ON_XMLNode) { this.vtable.CopyDefaultsTo(this, dest); }

ON_RdkDocumentDefaults_EVF :: inline (this: *ON_RdkDocumentDefaults, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_RdkDocumentDefaults_CreateXML :: inline (this: *ON_RdkDocumentDefaults) { this.vtable.CreateXML(this); }

vtable :: (obj: *ON_RdkDocumentDefaults) -> *ON_RdkDocumentDefaults_VTable { return obj.vtable; }


ON_Decal :: struct {
    vtable: *ON_Decal_VTable;
    ON_DecalCollection :: struct {}

    Mappings :: enum ON__INT32 {
        None        :: -1;
        Planar      :: 0;
        Cylindrical :: 1;
        Spherical   :: 2;
        UV          :: 3;
    }

    Projections :: enum ON__INT32 {
        None     :: -1;
        Forward  :: 0;
        Backward :: 1;
        Both     :: 2;
    }

    CImpl :: struct {}
    _impl: *CImpl;
}
ON_Decal_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Decal, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign : (this: *ON_Decal, d: *ON_Decal) -> *ON_Decal #cpp_method;

    //operator==: (this: *ON_Decal, d: *ON_Decal) -> bool #cpp_method;
    operator== :: (this: ON_Decal, d: ON_Decal) -> bool  {
        return operator==(*this, *d);
    }
    //operator!=: (this: *ON_Decal, d: *ON_Decal) -> bool #cpp_method;
    operator!= :: (this: ON_Decal, d: ON_Decal) -> bool  {
        return operator!=(*this, *d);
    }
}

ON_Decal_Destructor :: inline (this: *ON_Decal, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_Decal_operator_assign :: inline (this: *ON_Decal, d: *ON_Decal) -> *ON_Decal { return this.vtable.operator_assign(this, d); }

ON_Decal_operator_eqeq:: inline (this: *ON_Decal, d: *ON_Decal) -> bool { return this.vtable.operator==(this, d); }
ON_Decal_operator_noq :: inline (this: *ON_Decal, d: *ON_Decal) -> bool { return this.vtable.operator!=(this, d); }

vtable :: (obj: *ON_Decal) -> *ON_Decal_VTable { return obj.vtable; }


ON_Bitmap :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    m_file_reference: ON_FileReference;
    #place on_modelcomponent; on_bitmap_vtable: *ON_Bitmap_VTable;
}
ON_Bitmap_VTable :: struct #type_info_none {
    using on_object: ON_Object_VTable;
    Width: (this: *ON_Bitmap) -> s32 #cpp_method;

    Height: (this: *ON_Bitmap) -> s32 #cpp_method;

    BitsPerPixel: (this: *ON_Bitmap) -> s32 #cpp_method;

    SizeofScan: (this: *ON_Bitmap) -> u64 #cpp_method;

    SizeofImage: (this: *ON_Bitmap) -> u64 #cpp_method;

    Bits_1: (this: /*const*/ *ON_Bitmap, scan_line_index: s32) -> *u8 #cpp_method;

    Bits: (this: *ON_Bitmap, scan_line_index: s32) -> *u8 #cpp_method;
}

ON_Bitmap_Width :: inline (this: *ON_Bitmap) -> s32 { return this.on_bitmap_vtable.Width(this); }

ON_Bitmap_Height :: inline (this: *ON_Bitmap) -> s32 { return this.on_bitmap_vtable.Height(this); }

ON_Bitmap_BitsPerPixel :: inline (this: *ON_Bitmap) -> s32 { return this.on_bitmap_vtable.BitsPerPixel(this); }

ON_Bitmap_SizeofScan :: inline (this: *ON_Bitmap) -> u64 { return this.on_bitmap_vtable.SizeofScan(this); }

ON_Bitmap_SizeofImage :: inline (this: *ON_Bitmap) -> u64 { return this.on_bitmap_vtable.SizeofImage(this); }

ON_Bitmap_Bits_1 :: inline (this: /*const*/ *ON_Bitmap, scan_line_index: s32) -> *u8 { return this.on_bitmap_vtable.Bits_1(this, scan_line_index); }

ON_Bitmap_Bits :: inline (this: *ON_Bitmap, scan_line_index: s32) -> *u8 { return this.on_bitmap_vtable.Bits(this, scan_line_index); }

vtable :: (obj: *ON_Bitmap) -> *ON_Bitmap_VTable { return obj.on_bitmap_vtable; }


ON_WindowsBitmap :: struct {
    #as using on_bitmap: ON_Bitmap;

    m_bmi:      *BITMAPINFO = null;

    m_bits:     *u8 = null;

    m_bFreeBMI: s32 = 0; // 0 m_bmi and m_bits are not freed by ON_WindowsBitmap::Destroy
}

/*
Description:
ON_WindowsBitmapEx is identical to ON_WindowsBitmap except that
it's Read/Write functions save bitmap names.
*/
ON_WindowsBitmapEx :: struct {
    #as using on_windowsbitmap: ON_WindowsBitmap;
}

ON_EmbeddedBitmap :: struct {
    #as using on_bitmap: ON_Bitmap;

    m_buffer:         *void = null;
    m_sizeof_buffer:  u64 = 0;
    m_managed_buffer  := false; // true means the ON_EmbeddedBitmap class manages m_buffer memory.
    m_buffer_crc32:   ON__UINT32 = 0; // 32 bit crc from ON_CRC32
}

ON_ReferencedComponentSettings :: struct {
    ON_ReferencedComponentSettingsImpl :: struct {}

    m_impl: *ON_ReferencedComponentSettingsImpl = null;
}

/*
Description:
An ON_InstanceDefinition defines the geometry used by
instance references.
See Also:
ON_InstanceRef
*/
ON_InstanceDefinition :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    // IDEF_UPDATE_TYPE lists the possible relationships between
    // the instance definition geometry and the archive
    // (m_source_archive) containing the original definition.
    IDEF_UPDATE_TYPE :: enum u32 {
        Unset             :: 0;
        Static            :: 1;
        LinkedAndEmbedded :: 2;
        Linked            :: 3;
    }

    // Bits that identify subsets of the instance definition
    // fields. These bits are used to determine which fields to
    // set when an ON_InstanceDefinition class is used to
    // modify an existing instance definition.
    anon_enum_37 :: enum s32 {
        no_idef_settings            :: 0;
        idef_name_setting           :: 1;
        idef_description_setting    :: 2;
        idef_url_setting            :: 4;
        idef_units_setting          :: 8;
        idef_source_archive_setting :: 16;
        idef_userdata_setting       :: 32;
        all_idef_settings           :: -1;
    }

    // list of object ids in the instance geometry table.
    m_object_uuid:                    ON_SimpleArray(ON_UUID);

    m_description:                    ON_wString;
    m_url:                            ON_wString;
    m_url_tag:                        ON_wString; // UI link text for m_url

    m_bbox:                           ON_BoundingBox;

    m_us:                             ON_UnitSystem;

    // Note: the embedded_def type is obsolete.
    //  To avoid having to deal with this obsolete type in
    //  your code, using ON_InstanceDefintion::IdefUpdateType()
    //  to get this value.  The IdefUpdateType() function
    //  with convert the obsolete value to the correct
    //  value.
    m_idef_update_type:               IDEF_UPDATE_TYPE = .Static;

    m_bSkipNestedLinkedDefinitions    := false;

    /////////////////////////////////////////////////////////////
    //
    // linked instance definition internals
    //
    m_linked_file_reference:          ON_FileReference;

    // For V5 3dm archive compatibility.
    // Set as needed by the Write() function for new idefs and saved if the idef is read from a V5 file.
    m_linked_file_V5_checksum:        ON_CheckSum;

    // See comment for Internal_ReferencedComponentSettings() function.
    m_linked_idef_component_settings: *ON_ReferencedComponentSettings = null;

    /// <summary>
    /// ON_InstanceDefinition::LinkedComponentStates specifies how model components
    /// (layers, materials, dimension styles, ...) from linked instance definition files
    /// are appear in the active model.
    /// </summary>
    eLinkedComponentAppearance :: enum u8 {
        Unset     :: 0;

        Active    :: 1;

        Reference :: 2;
    }

    m_linked_component_appearance:    eLinkedComponentAppearance = .Unset;

    // Internal_AccumulateHash() uses lazy evaluation to set m_geometry_content_hash when needed.
    m_geometry_content_hash:          ON_SHA1_Hash;

    // Internal_AccumulateHash() uses lazy evaluation to set m_content_hash when needed.
    m_content_hash:                   ON_SHA1_Hash;

    m_reserved2A:                     u8 = 0;
    m_reserved2B:                     u8 = 0;
    m_reserved2C:                     u8 = 0;

    m_reserved1:                      u32 = 0;

    m_reserved_ptr:                   ON__UINT_PTR = 0;
}

/*
Description:
An ON_InstanceRef is a reference to an instance definition
along with transformation to apply to the definition.
See Also:
ON_InstanceRef
*/
ON_InstanceRef :: struct {
    #as using on_geometry: ON_Geometry;

    // Unique id of the instance definition (ON_InstanceDefinition)
    // in the instance definition table that defines the geometry
    // used by this reference.
    m_instance_definition_uuid: ON_UUID;

    // Transformation for this reference.
    m_xform:                    ON_Xform;

    // Bounding box for this reference.
    m_bbox:                     ON_BoundingBox;
}

//////////////////////////////////////////////////////////////////////////////////////////
ON_3dmRevisionHistory :: struct {
    m_sCreatedBy:     ON_wString;
    m_sLastEditedBy:  ON_wString;
    m_create_time:    tm; // UCT create time
    m_last_edit_time: tm; // UCT las edited time
    m_revision_count: s32 = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////
ON_3dmNotes :: struct {
    ////////////////////////////////////////////////////////////////
    //
    // Interface - this information is serialized.  Applications
    // may want to derive a runtime class that has additional
    // window and font information.
    m_notes:         ON_wString;

    m_bVisible:      bool; // true if notes window is showing
    m_bHTML:         bool; // true if notes are in HTML

    // last window position
    m_window_left:   s32;
    m_window_top:    s32;
    m_window_right:  s32;
    m_window_bottom: s32;
}

//////////////////////////////////////////////////////////////////////////////////////////
ON_3dmApplication :: struct {
    m_application_name:    ON_wString; // short name like "Rhino 2.0"
    m_application_URL:     ON_wString; // URL
    m_application_details: ON_wString; // whatever you want
}

//////////////////////////////////////////////////////////////////////////////////////////
ON_3dmProperties :: struct {
    m_RevisionHistory:        ON_3dmRevisionHistory;
    m_Notes:                  ON_3dmNotes;
    m_PreviewImage:           ON_WindowsBitmap; // preview image of model
    m_Application:            ON_3dmApplication; // application that created 3DM file

    // name of .3dm archive when it was written.  Used to find referenced files
    // when the archive is moved or copied and then read.
    m_3dmArchiveFullPathName: ON_wString;
}

///////////////////////////////////////////////////////////////////////
//
// units and tolerances
//
ON_3dmUnitsAndTolerances :: struct {
    // Expert access to member variables
    m_unit_system:                ON_UnitSystem;
    m_absolute_tolerance:         float64 = 0.001; // in units > 0.0
    m_angle_tolerance:            float64 = 0.017453; // in radians > 0.0 and <= ON_PI
    m_relative_tolerance:         float64 = 0.01; // fraction > 0.0 and < 1.0
    m_distance_display_mode:      ON.OBSOLETE_DistanceDisplayMode = .Decimal; // decimal or fractional
    // decimal mode: number of decimal places
    // fractional modes: denominator = (1/2)^m_distance_display_precision
    m_distance_display_precision: s32 = 3;
}

///////////////////////////////////////////////////////////////////////
//
// Model settings
//   render mesh defaults
//   viewports
//   construction planes
//
ON_3dmAnnotationSettings :: struct {
    m_dimscale:                            float64 = 1.0; // model size / plotted size
    m_textheight:                          float64 = 1.0;
    m_dimexe:                              float64 = 1.0;
    m_dimexo:                              float64 = 1.0;
    m_arrowlength:                         float64 = 1.0;
    m_arrowwidth:                          float64 = 1.0;
    m_centermark:                          float64 = 1.0;

    ON_3dmAnnotationSettingsPrivate :: struct {}
    m_private:                             *ON_3dmAnnotationSettingsPrivate = null;

    // If m_bEnableAnnotationScaling is false:
    //   * m_world_view_text_scale is ignored.
    //   * text is not scaled.
    //   * ON_DimStyle::DimScale() determines the scale
    //     applied to all other annotation objects in all
    //     types of views.
    //   * The value of ON_DetailView::m_page_per_model_ratio
    //     is applied to all objects (annotation and geometry)
    //     in the detail view.
    //
    // If m_bEnableAnnotationScaling is true:
    //   * m_world_view_text_scale is used as described above.
    //   * ON_DimStyle::DimScale() determines the scale
    //     applied to all non text annotation objects in
    //     world views.
    //   * ON_DimStyle::DimScale() is ignored in page and
    //     detail views.
    //   * ON_DetailView::m_page_per_model_ratio is ignored
    //     for annotation objects in detail views, other
    //     geometry is scaled.
    //
    // Default is true.
    m_b_V5_EnableAnnotationScaling:        u8 = 1;

    // [Lowell 3-28-2013] New fields for V6
    m_bEnableModelSpaceAnnotationScaling:  u8 = 1;
    m_bEnableLayoutSpaceAnnotationScaling: u8 = 1;

    m_bEnableHatchScaling:                 u8 = 1;

    m_reserved1:                           ON__UINT32 = 0;
    m_reserved2:                           ON__UINT8 = 0;
    m_reserved3:                           ON__UINT8 = 0;
    m_reserved4:                           ON__UINT8 = 0;

    m_dimunits:                            ON.LengthUnitSystem = .None; // units used to measure the dimension
    m_arrowtype:                           s32 = 0; // 0: filled narrow triangular arrow (= ((ON_Arrowhead::arrow_type enum value as int ) - 2))
    m_angularunits:                        s32 = 0; // 0: degrees, 1: radians
    m_lengthformat:                        s32 = 0; // 2 = ON_DimStyle::LengthDisplay::FeetAndInches, treat everything else as ON_DimStyle::LengthDisplay::ModelUnits
    m_angleformat:                         s32 = 0; // 0: decimal degrees, ... ( ON_DimStyle::angle_format enum as int )

    m_resolution:                          s32 = 0; // depends on m_lengthformat

    m_facename:                            ON_wString; // [LF_FACESIZE] // windows font name
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmConstructionPlaneGridDefaults
//
// Default settings used for construction plane grids
ON_3dmConstructionPlaneGridDefaults :: struct {
    m_grid_spacing:         float64 = 1.0; // distance between grid lines
    m_snap_spacing:         float64 = 1.0; // when "grid snap" is enabled, the

    m_grid_line_count:      s32 = 70; // number of grid lines in each direction
    m_grid_thick_frequency: s32 = 5; // thick line frequency

    // 0: none,
    // 1: all lines are thick,
    // 2: every other is thick, ...
    m_bShowGrid             := true;
    m_bShowGridAxes         := true;
    m_bShowWorldAxes        := true;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmConstructionPlane
//
ON_3dmConstructionPlane :: struct {
    m_plane:                ON_Plane;

    m_grid_spacing:         float64; // distance between grid lines
    // when "grid snap" is enabled, the
    // distance between snap points.  Typically
    // this is the same distance as grid spacing.
    m_snap_spacing:         float64;

    m_grid_line_count:      s32; // number of grid lines in each direction
    m_grid_thick_frequency: s32; // thick line frequency

    // false=grid is always drawn behind 3d geometry
    // true=grid is drawn at its depth as a 3d plane
    // and grid lines obscure things behind the grid.
    m_bDepthBuffer:         bool;

    m_name:                 ON_wString;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmViewPosition
//
ON_3dmViewPosition :: struct {
    m_wnd_left:          float64; // 0.0 to 1.0
    m_wnd_right:         float64;
    m_wnd_top:           float64;
    m_wnd_bottom:        float64;

    m_bMaximized:        bool; // true if view window is maximized

    // m_floating_viewport is used to track floating viewport information.
    //  0 = the view is docked in the main application window.
    // >0 = the view is floating. When floating, this corresponds to the
    //      number of monitors on on the user's computer when the file was saved
    m_floating_viewport: u8;

    // reserved for future use
    m_reserved_1:        u8;
    m_reserved_2:        u8;
    m_reserved_3:        u8;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmViewTraceImage
//
ON_3dmViewTraceImage :: struct {
    // view window relative position and state in parent frame
    m_plane:                ON_Plane;
    m_width:                float64;
    m_height:               float64;

    m_image_file_reference: ON_FileReference;

    m_bGrayScale:           bool; // true if image should be black and white
    m_bHidden:              bool; // true if image is currently hidden from view
    m_bFiltered:            bool; // true if image should be filtered (bilinear) before displayed.
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmViewTraceImage
//
ON_3dmWallpaperImage :: struct {
    m_image_file_reference: ON_FileReference;

    m_bGrayScale:           bool; // true if image should be black and white
    m_bHidden:              bool; // true if image is currently hidden from view
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmView
//
ON_3dmPageSettings :: struct {
    m_page_number:      s32;

    // Overall size of the page in millimeters
    m_width_mm:         float64;
    m_height_mm:        float64;

    // Page margins in millimeters
    m_left_margin_mm:   float64;
    m_right_margin_mm:  float64;
    m_top_margin_mm:    float64;
    m_bottom_margin_mm: float64;

    m_printer_name:     ON_wString;
}

ON_StandardDisplayModeId :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

ON_FocalBlurModes :: enum u32 {
    None      :: 0;
    Automatic :: 1;
    Manual    :: 2;
}

ON_3dmView :: struct {
    // view projection information
    m_vp:                     ON_Viewport;

    // clipping planes
    // Prior to Dec 14, 2010 m_clipping_planes was not saved with the view.
    // After Dec 14, 2010 m_clipping_planes is saved.
    m_clipping_planes:        ON_SimpleArray(ON_ClippingPlaneInfo);

    // If true, the the camera location, camera direction,
    // and lens angle should not be changed.
    // It is ok to adjust clipping planes.
    m_bLockedProjection:      bool;

    m_section_behavior:       ON.ViewSectionBehavior = .ClipAndSection;
    m_reserved:               [6] u8;

    m_name:                   ON_wString; // name on window

    // The value of m_display_mode_id can be one of the "standard" ids
    // from ON_StandardDisplayModeId, nil, or a custom display mode
    // settings on a particular computer.  If you encounter a nil id
    // or any other id that is not one of the "standard" display mode
    // ids, then your application should use a default display mode,
    // typically either wireframe or shaded, that is appropriate for
    // general model viewing.  The function ON::RhinoV3DisplayMode(id)
    // will convert a display mode id into a legacy Rhino V3 display
    // mode enum value.
    m_display_mode_id:        ON_UUID;

    // position of view in parent window
    // (relative display device coordinates)
    m_position:               ON_3dmViewPosition;

    m_view_type:              ON.view_type; // model, page, nested or uveditor

    // If m_view_type == ON::page_view_type, then the m_page_settings
    // records the page size.  Otherwise, m_page_settings should
    // be ignored.
    m_page_settings:          ON_3dmPageSettings;

    ///////////////////////////////////////////////////////////////////////
    //
    // Named view information
    //
    // If this view was created from a named view, then m_named_view_id
    // identifies the named view.
    //
    // The named views are ON_3dmView classes saved in ON_3dmSettings.m_named_views[].
    // A named view's id is the value returned by ON_3dmView.m_vp.ViewportId()
    // A named view's name is the value returned by ON_3dmView.m_name
    //
    // If this view is a named view, then m_named_view_id should be equal to
    // m_vp.m_viewport_id.
    //
    // If this view is not a named view and not created from a named view,
    // then m_named_view_id is equal to ON_nil_uuid.
    m_named_view_id:          ON_UUID;

    ///////////////////////////////////////////////////////////////////////
    //
    // Construction plane
    //
    m_cplane:                 ON_3dmConstructionPlane;
    m_bShowConstructionGrid:  bool;
    m_bShowConstructionAxes:  bool;
    m_bShowConstructionZAxis: bool;

    // world axes icon
    m_bShowWorldAxes:         bool;

    // tracing image
    m_trace_image:            ON_3dmViewTraceImage;

    // wallpaper image
    m_wallpaper_image:        ON_3dmWallpaperImage;

    //Focal blur settings - per view for renderers.
    m_dFocalBlurDistance:     float64 = 100.0;
    m_dFocalBlurAperture:     float64 = 64.0;
    m_dFocalBlurJitter:       float64 = 0.1;
    m_uFocalBlurSampleCount:  u32 = 10;
    m_FocalBlurMode:          ON_FocalBlurModes = .None;
    m_sizeRendering:          ON_2iSize = ON_2iSize.{640, 480};

    reserved:                 ON__INT_PTR = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmRenderSettings
//
ON_3dmRenderSettings :: struct {
    #as using on_object: ON_Object;

    //New for V6, rendering source (render directly from a NamedView or Snapshot)
    //https://mcneel.myjetbrains.com/youtrack/issue/RH-39593
    RenderingSources :: enum u32 {
        ActiveViewport   :: 0;
        SpecificViewport :: 1;
        NamedView        :: 2;
        SnapShot         :: 3;
    }

    m_rendering_source:           RenderingSources = .ActiveViewport;
    m_specific_viewport:          ON_wString;
    m_named_view:                 ON_wString;
    m_snapshot:                   ON_wString;

    // Access to information about which environments are used for rendering.
    EnvironmentUsage :: enum u32 {
        Background  :: 0;
        Reflection  :: 1;
        Skylighting :: 2;
    }

    EnvironmentPurpose :: enum u32 {
        Standard     :: 0;
        ForRendering :: 1;
    }

    m_reserved1:                  u16 = 0;

    //////////////////////////////////////////////////////////////
    //
    // Force viewport aspect ratio:
    //   If m_bCustomImageSize is true and m_bForceViewportAspectRatio is true
    //   then the image height should be calculated by multiplying the m_image_width
    //   by the viewport aspect ratio.  Note that this might be affected by m_rendering_source
    //   In this case, m_image_height should not be used.
    //
    m_bForceViewportAspectRatio   := false;

    //////////////////////////////////////////////////////////////
    //
    // Custom image size:
    //   If m_bCustomImageSize is true, then the image pixel size
    //   is m_image_width X m_image_height pixels.
    //   If m_bCustomImageSize is false, then the image pixel size
    //   is the size of the viewport being rendered.
    //
    m_bCustomImageSize            := false;
    m_image_width:                s32 = 800; // image width in pixels
    m_image_height:               s32 = 600; // image height in pixels

    m_reserved3:                  u32 = 0;

    ////////
    // Number of dots/inch (dots=pixels) to use when printing and
    // saving bitmaps. The default is 72.0 dots/inch.
    m_image_dpi:                  float64 = 72.0;

    //////////
    // unit system to use when converting image pixel size and dpi
    // information into a print size.  Default = inches
    m_image_us:                   ON.LengthUnitSystem = .Inches;

    m_ambient_light:              ON_Color #align 3;

    m_background_style:           s32 = 0; // 0 = solid color, 1 = "wallpaper" image, 2 = Gradient, 3 = Environment

    // m_background_color was changed from ON_Color::Gray160 to ON_Color::White for "white studio" look.
    // m_background_color = Top color of gradient...
    m_background_color:           ON_Color;
    m_background_bottom_color:    ON_Color;

    m_background_bitmap_filename: ON_wString;

    // If m_background_bitmap_filename is not empty, the file cannot be found,
    // and m_embedded_file_id identifes an embedded image file in the model,
    // then that file will be used as the background bitmap.
    m_embedded_image_file_id:     ON_UUID;

    m_bUseHiddenLights            := false;

    m_bDepthCue                   := false;
    m_bFlatShade                  := false;

    m_bRenderBackfaces            := true;
    m_bRenderPoints               := false;
    m_bRenderCurves               := false;
    m_bRenderIsoparams            := false;
    m_bRenderMeshEdges            := false;
    m_bRenderAnnotation           := false;
    m_bScaleBackgroundToFit       := false;
    m_bTransparentBackground      := false;

    m_reserved4:                  u8 = 0;
    m_reserved5:                  u32 = 0;

    m_antialias_style:            s32 = 1; // 0 = none, 1 = normal, 2 = medium, 3 = best

    m_shadowmap_style:            s32 = 1; // 0 = none, 1 = normal, 2 = best
    m_shadowmap_width:            s32 = 1000;
    m_shadowmap_height:           s32 = 1000;
    m_shadowmap_offset:           float64 = 0.75;

    // Flags that are used to determine which render settings a render
    // plugin uses, and which ones the display pipeline should use.
    // Note: Render plugins set these, and they don't need to persist
    //       in the document...Also, when set, they turn OFF their
    //       corresponding setting in the Display Attributes Manager's
    //       UI pages for "Rendered" mode.
    m_bUsesAmbientAttr            := true;
    m_bUsesBackgroundAttr         := true;
    m_bUsesBackfaceAttr           := false;
    m_bUsesPointsAttr             := false;
    m_bUsesCurvesAttr             := true;
    m_bUsesIsoparmsAttr           := true;
    m_bUsesMeshEdgesAttr          := false;
    m_bUsesAnnotationAttr         := true;
    m_bUsesHiddenLightsAttr       := true;

    m_reserved6:                  u8 = 0;
    m_reserved7:                  u16 = 0;
    m_reserved8:                  u16 = 0;

    m_private:                    *ON_3dmRenderSettingsPrivate = null;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_EarthAnchorPoint
//
ON_EarthAnchorPoint :: struct {
    m_earth_latitude:          float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // in decimal degrees
    m_earth_longitude:         float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // in decimal degrees
    m_earth_elevation_meters:  float64 = 0.0;

    m_earth_coordinate_system: ON.EarthCoordinateSystem = .Unset;

    m_reserved1:               u8 = 0;
    m_reserved2:               u8 = 0;
    m_reserved3:               u8 = 0;
    m_reserved4:               ON__UINT32 = 0;

    m_model_point:             ON_3dPoint; // in model coordinates

    m_model_north:             ON_3dVector; // in model coordinates
    m_model_east:              ON_3dVector; // in model coordinates

    m_id:                      ON_UUID; // unique id for this anchor point
    m_name:                    ON_wString;
    m_description:             ON_wString;
    m_url:                     ON_wString;
    m_url_tag:                 ON_wString; // UI link text for m_url
}

ON_3dmIOSettings :: struct {
    // bitmaps associated with rendering materials
    m_bSaveTextureBitmapsInFile  := false;

    // As of 7 February 2012, the m_idef_link_update setting
    // controls if, when and how linked and linked_and_embedded
    // instance definitions are updated when the source archive
    // that was used to create the idef has changed.
    m_idef_link_update:          s32 = 1;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmSettings
//
ON_3dmSettings :: struct {
    // model URL (can be empty)
    m_model_URL:                        ON_wString;

    // Model basepoint is used when the file is read as
    // an instance definition and is the point that is
    // mapped to the origin in the instance definition.
    m_model_basepoint:                  ON_3dPoint;

    // If set, this is the model's location on the earth.
    // This information is used when the model is used
    // with GIS information.
    m_earth_anchor_point:               ON_EarthAnchorPoint;

    // Model space tolerances and unit system
    m_ModelUnitsAndTolerances:          ON_3dmUnitsAndTolerances;

    // Page space (printing/paper) tolerances and unit system
    m_PageUnitsAndTolerances:           ON_3dmUnitsAndTolerances;

    // settings used for automatically created rendering meshes
    m_RenderMeshSettings:               ON_MeshParameters;

    // saved custom settings
    m_CustomRenderMeshSettings:         ON_MeshParameters;

    // settings used for automatically created analysis meshes
    m_AnalysisMeshSettings:             ON_MeshParameters;

    // settings used when annotation objects are created
    m_AnnotationSettings:               ON_3dmAnnotationSettings;

    m_named_cplanes:                    ON_ClassArray(ON_3dmConstructionPlane);
    m_named_views:                      ON_ClassArray(ON_3dmView);
    m_views:                            ON_ClassArray(ON_3dmView); // current viewports
    m_active_view_id:                   ON_UUID; // id of "active" viewport              

    // The index is for reading V5 and earlier files.
    m_V5_current_layer_index:           s32 = -2147483647;
    m_current_layer_id:                 ON_UUID;

    // The index is for reading V5 and earlier files.
    m_V5_current_render_material_index: s32 = -2147483647;
    m_current_render_material_id:       ON_UUID;

    m_current_material_source:          ON.object_material_source = .layer;

    m_current_color:                    ON_Color;
    m_current_color_source:             ON.object_color_source = .layer;

    m_current_plot_color:               ON_Color;
    m_current_plot_color_source:        ON.plot_color_source = .layer;

    // The index is for reading V5 and earlier files.
    m_V5_current_line_pattern_index:    s32 = -2147483647;
    m_current_line_pattern_id:          ON_UUID;

    m_current_linetype_source:          ON.object_linetype_source = .layer;

    // The index is for reading V5 and earlier files.
    m_V5_current_text_style_index:      s32 = -2147483647;
    m_current_text_style_id:            ON_UUID;

    // The index is for reading V5 and earlier files.
    m_V5_current_dimension_style_index: s32 = -2147483647;
    m_current_dimension_style_id:       ON_UUID;

    m_current_hatch_pattern_id:         ON_UUID;

    // Surface wireframe density
    //
    //   @untitled table
    //   0       boundary + "knot" wires
    //   1       boundary + "knot" wires + 1 interior wire if no interior "knots"
    //   N>=2    boundary + "knot" wires + (N-1) interior wires
    m_current_wire_density:             s32 = 1;

    m_RenderSettings:                   ON_3dmRenderSettings;

    // default settings for construction plane grids
    m_GridDefaults:                     ON_3dmConstructionPlaneGridDefaults;

    // World scale factor to apply to non-solid linetypes
    // for model display.  For plotting, the linetype settings
    // are used without scaling.
    m_linetype_display_scale:           float64 = 1.0;

    // Plugins that were loaded when the file was saved.
    m_plugin_list:                      ON_ClassArray(ON_PlugInRef);

    m_IO_settings:                      ON_3dmIOSettings;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
// ON_3dmAnimationProperties
//
ON_3dmAnimationProperties :: struct {
    CaptureTypes :: enum s32 {
        path               :: 0;
        turntable          :: 1;
        flythrough         :: 2;
        day_sun_study      :: 3;
        seasonal_sun_study :: 4;
        none               :: 5;
    }

    m_CaptureTypes:          CaptureTypes = .none;
    m_sFileExtension:        ON_wString;
    m_sCaptureMethod:        ON_wString;
    m_sHtmlFilename:         ON_wString;
    m_sViewport:             ON_wString;
    m_idDisplayMode:         ON_UUID;
    m_aCameraPoints:         ON_3dPointArray;
    m_aTargetPoints:         ON_3dPointArray;
    m_iFrameCount:           s32 = 100;
    m_iCurrentFrame:         s32 = 1;
    m_idCameraPath:          ON_UUID;
    m_idTargetPath:          ON_UUID;
    m_dLatitude:             float64 = 51.2838;
    m_dLongitude:            float64 = 0.0;
    m_dNorthAngle:           float64 = 0.0;
    m_iStartDay:             s32 = 1;
    m_iStartMonth:           s32 = 6;
    m_iStartYear:            s32 = 2010;
    m_iEndDay:               s32 = 1;
    m_iEndMonth:             s32 = 6;
    m_iEndYear:              s32 = 2012;
    m_iStartHour:            s32 = 6;
    m_iStartMinutes:         s32 = 0;
    m_iStartSeconds:         s32 = 0;
    m_iEndHour:              s32 = 18;
    m_iEndMinutes:           s32 = 0;
    m_iEndSeconds:           s32 = 59;
    m_iDaysBetweenFrames:    s32 = 30;
    m_iMinutesBetweenFrames: s32 = 30;
    m_iLightIndex:           s32 = -1;
    m_sFolderName:           ON_wString;
    m_aImages:               ON_ClassArray(ON_wString);
    m_aDates:                ON_ClassArray(ON_wString);
    m_bRenderFull            := false;
    m_bRenderPreview         := false;

    m_reserved1:             u8 = 0;
    m_reserved2:             u8 = 0;
    m_reserved4:             ON__UINT32 = 0;
    reserved:                ON__INT_PTR = 0;
}

/*
Description:
Top level OpenNURBS objects have geometry and attributes.  The
geometry is stored in some class derived from ON_Geometry and
the attributes are stored in an ON_3dmObjectAttributes class.
Examples of attributes are object name, object id, display
attributes, group membership, layer membership, and so on.
*/
ON_3dmObjectAttributes :: struct {
    #as using on_object: ON_Object;

    // Every OpenNURBS object has a UUID (universally unique identifier). When
    // an OpenNURBS object is added to a model, the value is checked.  If the
    // value is ON_nil_uuid, a new UUID is created.  If the value is not
    // ON_nil_uuid but it is already used by another object in the model, a new
    // UUID is created.  If the value is not ON_nil_uuid and it is not used by
    // another object in the model, then that value persists. When an object
    // is updated, by a move for example, the value of m_uuid persists.
    m_uuid:                 ON_UUID;

    // The m_name member is public to avoid breaking the SDK.
    // Use SetName() and Name() for proper validation.
    // OpenNURBS object have optional text names.  More than one object in
    // a model can have the same name and some objects may have no name.
    // ON_ModelComponent::IsValidComponentName(m_name) should be true.
    m_name:                 ON_wString;

    // OpenNURBS objects may have an URL.  There are no restrictions on what
    // value this URL may have.  As an example, if the object came from a
    // commercial part library, the URL might point to the definition of that
    // part.
    m_url:                  ON_wString;

    // Layer definitions in an OpenNURBS model are stored in a layer table.
    // The layer table is conceptually an array of ON_Layer classes.  Every
    // OpenNURBS object in a model is on some layer.  The object's layer
    // is specified by zero based indices into the ON_Layer array.
    m_layer_index:          s32 = 0;

    // Linetype definitions in an OpenNURBS model are stored in a linetype table.
    // The linetype table is conceptually an array of ON_Linetype classes.  Every
    // OpenNURBS object in a model references some linetype.  The object's linetype
    // is specified by zero based indices into the ON_Linetype array.
    // index 0 is reserved for continuous linetype (no pattern)
    m_linetype_index:       s32 = -1;

    // Rendering material:
    //   If you want something simple and fast, set
    //   m_material_index to the index of the rendering material
    //   and ignore m_rendering_attributes.
    //   If you are developing a high quality plug-in renderer,
    //   and a user is assigning one of your fabulous rendering
    //   materials to this object, then add rendering material
    //   information to the  m_rendering_attributes.m_materials[]
    //   array.
    //
    // Developers:
    //   As soon as m_rendering_attributes.m_materials[] is not empty,
    //   rendering material queries slow down.  Do not populate
    //   m_rendering_attributes.m_materials[] when setting
    //   m_material_index will take care of your needs.
    m_material_index:       s32 = -1;
    m_rendering_attributes: ON_ObjectRenderingAttributes;

    // If ON::color_from_object == ColorSource(), then m_color is the object's
    // display color.
    m_color:                ON_Color;

    // If ON::plot_color_from_object == PlotColorSource(), then m_color is the object's
    // display color.
    m_plot_color:           ON_Color;

    // Display order used to force objects to be drawn on top or behind each other
    // 0  = draw object in standard depth buffered order
    // <0 = draw object behind "normal" draw order objects
    // >0 = draw object on top of "normal" draw order objects
    // Larger number draws on top of smaller number.
    m_display_order:        s32 = 0;

    // Plot weight in millimeters.
    //   =0.0 means use the default width
    //   <0.0 means don't plot (visible for screen display, but does not show on plot)
    m_plot_weight_mm:       float64 = 0;

    // Used to indicate an object has a decoration (like an arrowhead on a curve)
    m_object_decoration:    ON.object_decoration = .no_object_decoration;

    // When a surface object is displayed in wireframe, m_wire_density controls
    // how many isoparametric wires are used.
    //
    //   @table
    //   value    number of isoparametric wires
    //   -1       boundary wires
    //    0       boundary and knot wires
    //    1       boundary and knot wires and, if there are no
    //            interior knots, a single interior wire.
    //   N>=2     boundary and knot wires and (N-1) interior wires
    m_wire_density:         s32 = 1;

    // If m_viewport_id is ON_nil_uuid, the object is active in all viewports.
    // If m_viewport_id is not ON_nil_uuid, then this object is only active in a
    // specific view. This field is primarily used to assign page space objects
    // to a specific page, but it can also be used to restrict model space to a
    // specific view.
    m_viewport_id:          ON_UUID;

    // Starting with V4, objects can be in either model space
    // or page space.  If an object is in page space, then
    // m_viewport_id is not nil and identifies the page it
    // is on.
    m_space:                ON.active_space = .model_space;

    m_bVisible              := true;

    // (m_mode % 16) = ON::object_mode values
    // (m_mode / 16) = ON::display_mode values
    m_mode:                 u8 = xx object_mode.normal_object;
    m_color_source:         u8 = xx object_color_source.layer;
    m_plot_color_source:    u8 = xx plot_color_source.layer;
    m_plot_weight_source:   u8 = xx plot_weight_source.layer;
    m_material_source:      u8 = xx object_material_source.layer;
    m_linetype_source:      u8 = xx object_linetype_source.layer;

    m_reserved_0:           u8 = 0;

    m_object_frame:         ON_Plane;

    m_group:                ON_SimpleArray(s32); // array of zero based group indices

    ON_3dmObjectAttributesPrivate :: struct {}
    m_private:              *ON_3dmObjectAttributesPrivate = null;

    m_dmref:                ON_SimpleArray(ON_DisplayMaterialRef);
}

//----------------------------------------------------------
ON_TextContext :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

ON_StackedText :: struct {
    m_top_run:    *ON_TextRun = null;
    m_bottom_run: *ON_TextRun = null;
    m_parent_run: *ON_TextRun = null;
    m_separator:  s16 = xx ON_UnicodeCodePoint.Slash;

    StackStyle :: enum u8 {
        Unset              :: 0;
        HorizontalToScreen :: 1;
        Slanted            :: 2;

        kUnset              :: Unset;
        kHorizontalToScreen :: HorizontalToScreen;
        kSlanted            :: Slanted;
    }
}

// A range of text with all the same attributes
ON_TextRun :: struct {
    RunType :: enum u8 {
        None       :: 0;
        Text       :: 1;
        Newline    :: 2;
        Softreturn :: 3;
        Paragraph  :: 4;
        Column     :: 5;
        Field      :: 6;
        FieldValue :: 7;
        Fontdef    :: 8;
        Header     :: 9;
        Fonttbl    :: 10;
        Colortbl   :: 11;

        kNone       :: None;
        kText       :: Text;
        kNewline    :: Newline;
        kSoftreturn :: Softreturn;
        kParagraph  :: Paragraph;
        kColumn     :: Column;
        kField      :: Field;
        kFieldValue :: FieldValue;
        kFontdef    :: Fontdef;
        kHeader     :: Header;
        kFonttbl    :: Fonttbl;
        kColortbl   :: Colortbl;
    }

    Stacked :: enum u8 {
        None    :: 0;
        Stacked :: 1;
        Top     :: 2;
        Bottom  :: 3;

        kNone    :: None;
        kStacked :: Stacked;
        kTop     :: Top;
        kBottom  :: Bottom;
    }

    RunDirection :: enum u8 {
        LtR :: 0;
        RtL :: 1;

        kLtR :: LtR;
        kRtL :: RtL;
    }

    // Font used to draw, pick, or otherwise evaluate this
    // ON_TextRun.  This pointer is run-time only and must be
    // set and point to a valid ON_Font for any font related
    // operations to work.
    m_managed_font:          *ON_Font = null;

    m_codepoints:            *ON__UINT32 = null; // Parsed text as UTF32

    // Set from m_codepoints when required.
    // Always use TextString() to get this value
    m_text_string:           ON_wString;

    // Parsed text as wchar_t*
    // If this string is non-empty, it is valid and can be used
    // instead of m_codepoints
    // This string may have unevaluated field definitions - %<field_name>%
    m_display_string:        ON_wString;

    // Text to display when this is drawn.
    // If this text has field definitions, m_display_string will have the
    // evaluation results to display
    // This string may change often if there are fields to evaluate.
    m_text_run_hash:         ON_SHA1_Hash;
    m_text_run_display_hash: ON_SHA1_Hash;

    m_text_stacked:          Stacked = .None; // 0: Normal text, 1: Run is stacked container, 2: Run is top of stacked fraction, 3: Run is bottom of stacked fraction

    m_stacked_text:          *ON_StackedText = null; // pointers to runs for the top and bottom parts

    m_color:                 ON_Color;

    m_run_type:              RunType = .None;
    m_direction:             RunDirection = .LtR;

    // This value of m_managed_status is not copied
    // 0: Not managed
    // 1: Managed by GetManagedTextRun() / ReturnManagedTextRun()
    m_managed_status:        u8 : 0;
    m_active_status:         u8 = 0 #align 2; // 0: active, 1: inactive managed text_run

    m_run_text_height:       float64 = 1.0; // (ECS) text height in model units or page units

    m_offset:                ON_2dVector; // (ECS) offset to lower left of bounding box from ON_TextContent plane origin

    m_advance:               ON_2dVector; // (ECS) distance and direction from m_offset to start of next run

    m_bbox:                  ON_BoundingBox; // (ECS) 3d Bounding box oriented to ON_TextContent object's plane (z == 0) with run offset already included

    m_height_scale:          float64 = -1.0; // Font HeightOfI / text height - Converts from font units to model units or page units
    m_stackscale:            float64 = 0.7; // fraction for scaling textheight in stacked text

    m_indent:                float64 = 0.0; // First line indentation for this paragraph
    m_left_margin:           float64 = 0.0; // left margin in formatting rect for this paragraph
    m_right_margin:          float64 = 0.0; // right margin in formatting rect for this paragraph

    m_line_index:            s32 = -1; // line position in ON_TextContent

    m_reserved:              ON__UINT_PTR = 0;
}

ON_TextRunArray :: struct {
    #as using on_simplearray: ON_SimpleArray(*ON_TextRun);
    vtable: *ON_TextRunArray_VTable;
}
ON_TextRunArray_VTable :: struct #type_info_none {
    Destructor: (this: *ON_TextRunArray, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ON_TextRunArray_Destructor :: inline (this: *ON_TextRunArray, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

vtable :: (obj: *ON_TextRunArray) -> *ON_TextRunArray_VTable { return obj.vtable; }


/// <summary>
/// https://monotype.github.io/panose/pan1.htm
/// </summary>
ON_PANOSE1 :: struct {
    /// The Family Kind digit is not controlled by specific measurements,
    /// and there has been no attempt to mathematically determine the
    /// appropriate category for a given font design. Visual and aesthetic
    /// classification of Latin faces that are obviously script, decorative,
    /// or symbol fonts is required.
    /// </summary>
    FamilyKind :: enum ON__UINT8 {
        _Any            :: 0;

        NoFit           :: 1;

        LatinText       :: 2;

        LatinScript     :: 3;

        LatinDecorative :: 4;

        LatinSymbol     :: 5;

    }

    // PANOSE 1.0 properties (10 bytes)
    //  // text / script / decrorative / symbol
    m_family_kind: FamilyKind = ._Any;

    m_prop1:       ON__UINT8 = 0; // serif style      / tool kind       / decorative class    / symbol kind
    m_prop2:       ON__UINT8 = 0; // weight           / weight          / weight              / weight
    m_prop3:       ON__UINT8 = 0; // proportion       / spacing         / aspect              / spacing
    m_prop4:       ON__UINT8 = 0; // contrast         / aspect ratio    / contrast            / aspect ration and contrast
    m_prop5:       ON__UINT8 = 0; // stroke variation / contrast        / serif variant       / aspect ratio 94
    m_prop6:       ON__UINT8 = 0; // arm style        / script topology / fill                / aspect ratio 119
    m_prop7:       ON__UINT8 = 0; // letter form      / script form     / lining              / aspect ratio 157
    m_prop8:       ON__UINT8 = 0; // midline          / finials         / decorative topology / aspect ratio 163
    m_prop9:       ON__UINT8 = 0; // x-height         / x-ascent        / character range     / aspect ratio 211
}

ON_FontMetrics :: struct {
    DWRITE_FONT_METRICS :: struct {}
    IDWriteFont :: struct {}

    m_UPM:                  s32 = 0; // units per EM
    m_ascent:               s32 = 0; // max over all glyphs in font of (highest outline point - baseline point).y
    m_descent:              s32 = 0; // min over all glyphs in font of (lowest outline point - baseline point).y
    m_line_space:           s32 = 0; // distance between baselines 
    m_ascent_of_capital:    ON__UINT16 = 0;
    m_ascent_of_x:          ON__UINT16 = 0; // same units as m_ascent_of_capital

    m_strikeout_thickness:  s32 = 0; //
    m_strikeout_position:   s32 = 0; // 

    m_underscore_thickness: s32 = 0; //
    m_underscore_position:  s32 = 0; //

    m_reserved1:            s32 = 0;
    m_reserved2:            float64 = 0.0;
    m_reserved3:            float64 = 0.0;
    m_reserved_ptr:         ON__UINT_PTR = 0;
}

ON_TextBox :: struct {
    DWRITE_GLYPH_METRICS :: struct {}

    // The use context determines the length units. Common units include font glyph design units,
    // normalizied font design units, various display units.  Typically x increases to the right,
    // y increases upwards. For glyph and text run boxes, (0,0) is the horizontal base
    //
    m_bbmin:         ON_2dex;
    m_bbmax:         ON_2dex;

    // m_max_basepoint.i = maximum horizontal delta in any line. Increases to the right, decreases to the left.
    // m_max_basepoint.i = vertical delta to baseline of bottom line. Increases upward, decreases downward.
    m_max_basepoint: ON_2dex;

    // m_advance is a vector that specifies where the basepoint should be moved
    // to after the text is rendered. m_advance.i and m_advance.j are always >= 0.
    // When glyphs are rendered right to left (Arabic and Hebrew being examples)
    // or bottom to top, the rendering code must apply the correct sign. Some
    // reasons for using positive advance values for every glyph is that left to right
    // and right to left languages can be appear on a single line and the sign of y
    // associated with "up" is sometimes positive and sometimes negative.
    // ON_TextBox::Translate does not modify the vector m_advance.
    // ON_TextBox::Union ignored input advance values and returns a box with advance = (0,0).
    // 0 <= m_advance.i will be <= m_max_basepoint.i.
    m_advance:       ON_2dex;
}

ON_OutlineFigurePoint :: struct {
    Type :: enum ON__UINT8 {
        Unset                :: 0;

        BeginFigureUnknown   :: 1;

        BeginFigureOpen      :: 2;

        BeginFigureClosed    :: 3;

        LineTo               :: 6;

        QuadraticBezierPoint :: 7;

        CubicBezierPoint     :: 8;

        EndFigureOpen        :: 11;

        EndFigureClosed      :: 12;

        Error                :: 15;
    }

    Proximity :: enum ON__UINT8 {
        Unset     :: 0;

        OnFigure  :: 1;

        OffFigure :: 2;

        Error     :: 15;
    }

    m_point_type:      Type = .Unset;

    m_point_proximity: Proximity = .Unset;

    // 0 = unset. The first figure in an outline has m_figure_index = 1.
    m_figure_index:    ON__UINT16 = 0;

    // point location
    m_point:           ON_2fPoint;
}

ON_OutlineFigure :: struct {
    Orientation :: enum ON__UINT8 {
        Unset            :: 0;

        CounterClockwise :: 1;

        Clockwise        :: 2;

        NotOriented      :: 3;

        Error            :: 15;
    }

    /// <summary>
    /// ON_OutlineFigure::Type identifies the structure of the figure.
    /// </summary>
    Type :: enum ON__UINT8 {
        Unset        :: 0;

        Unknown      :: 1;

        SingleStroke :: 2;

        DoubleStroke :: 3;

        Perimeter    :: 4;

        NotPerimeter :: 5;

        Mixed        :: 7;
    }

    m_units_per_em:    ON__UINT32 = 0;

    m_orientation:     Orientation = .Unset;
    m_figure_type:     Type = .Unset;

    m_bbox_status:     ON__UINT8 = 0; // 0 = unset, 1 = set, 7 = error
    m_area_status:     ON__UINT8 = 0; // 0 = unset, 1 = set, 7 = error

    m_figure_index:    ON__UINT16 = 0;

    m_bbox_min:        ON_2fPoint;
    m_bbox_max:        ON_2fPoint;

    m_short_tolerance: float64 = 0.0;
    m_area_estimate:   float64;

    m_points:          ON_SimpleArray(ON_OutlineFigurePoint);
}

ON_Outline :: struct {
    m_units_per_em:                    ON__UINT32 = 0;
    m_figure_type:                     ON_OutlineFigure.Type = .Unset;
    m_bbox_status:                     ON__UINT8 = 0; // 0 = unset, 1 = set, 7 = error

    // Unset = unsorted
    // CounterClockwise: outer figures are CCW
    // Clockwise: outer fitures are CW
    // Error: error occurred during sorting
    m_sorted_figure_outer_orientation: ON_OutlineFigure.Orientation = .Unset;

    m_reserved1:                       ON__UINT8 = 0;

    m_short_tolerance:                 float64 = 0.0;

    m_bbox:                            ON_BoundingBox;
    m_glyph_metrics:                   ON_TextBox;

    m_figures:                         ON_ClassArray(ON_OutlineFigure);
}

ON_OutlineAccumulator :: struct {
    // Units per EM > 0
    // This is the height and width of the square grid font design grid.
    //     The width of the 'M' glyph in a font can be  different from UPM.
    //     The height of the 'M' glyph in a font is typically less than UPM.
    //     In TrueType fonts, UPM is often a power of two and generally 1024 or 2048.
    //     In OpenType fonts, UPM is often 1000.
    //     In PostScript fonts, UPM is often 1000.
    m_units_per_em:      ON__UINT32 = 0;

    m_status:            ON__UINT8 = 0; // 0 = none, 1 initialized, 2 finalized.
    m_figure_type:       ON_OutlineFigure.Type = .Unset;

    // 0 = not accumulating points in a figure.
    // 1 = accumulating points in a figure.
    m_figure_depth:      s32 = 0;

    // Total number of errors
    m_error_count:       ON__UINT32 = 0;

    // current figure accumulator
    m_figure_start:      ON_OutlineFigurePoint;
    m_figure_prev:       ON_OutlineFigurePoint;
    m_figure_current:    ON_OutlineFigurePoint;
    m_point_accumulator: ON_SimpleArray(ON_OutlineFigurePoint);
    m_outline:           *ON_Outline = null;
    m_managed_outline:   *ON_Outline = null;
}

/*
The best way to get a useful ON_FontGlyph is to call
ON_Font.CodePointGlyph(unicode_code_point)
*/
ON_FontGlyph :: struct {
    m_font_unit_glyph_bbox:  ON_TextBox; // values in the native font definition units (freetype FT_LOAD_NO_SCALE units)
    m_normalized_glyph_bbox: ON_TextBox; // bounding box in opennurbs normalized font coordinates

    // When font does not contain a glyph to render  a specified unicode codepoint,
    // then one or more glyphs from one or more substitution fonts are used to
    // render the codepoint. In this case, m_substitutes points to a linked
    // list of substitute used to render the glyph.
    //
    m_code_point:            ON__UINT32 = xx ON_UnicodeCodePoint.InvalidCodePoint;

    m_is_managed:            ON__UINT8 = 0; // 1 = managed glyph
    m_reserved1:             ON__UINT8 = 0;
    m_reserved2:             ON__UINT16 = 0;
    m_reserved3:             ON__UINT32 = 0;
    m_font_glyph_index:      ON__UINT32 = 0;
    m_managed_font:          *ON_Font = null;
    m_substitute:            *ON_FontGlyph = null;
}

ON_WindowsDWriteFontInformation :: struct {
    // value passed to IDWriteFontCollection.GetFontFamily(m_family_index,...)
    // IDWriteFactory.GetSystemFontCollection() is used to get the IDWriteFontCollection.
    m_family_index:                        u32 = 0;

    // value passed to IDWriteFontFamily.GetFont(m_family_font_index,...)
    m_family_font_index:                   u32 = 0;

    m_dwrite_font:                         *ON_FontMetrics.IDWriteFont = null;

    // preferred locale used to get the localized name values.
    // If the a parrticular string was not available in the preferred locale,
    // then other locales are used with "en-us" being the preferred alternate locale.
    m_prefered_locale:                     ON_wString;

    m_loc_family_name:                     ON_wString;
    m_en_family_name:                      ON_wString;

    m_loc_face_name:                       ON_wString;
    m_en_face_name:                        ON_wString;

    // DWRITE_FONT_WEIGHT value from IDWriteFont.GetWeight()
    m_weight:                              u32 = 0;

    // DWRITE_FONT_STRETCH value from IDWriteFont.GetStretch()
    m_stretch:                             u32 = 0;

    // DWRITE_FONT_STYLE value from IDWriteFont.GetStyle()
    m_style:                               u32 = 0;

    // from IDWriteFont.IsSymbolFont()
    m_bIsSymbolFont                        := false;

    m_bSimulatedBold                       := false; // DWRITE_FONT_SIMULATIONS_BOLD
    m_bSimulatedOblique                    := false; // DWRITE_FONT_SIMULATIONS_OBLIQUE
    m_bSimulatedOther                      := false; // future DWRITE_FONT_SIMULATIONS_...

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_FULL_NAME, ... )
    m_loc_full_name:                       ON_wString;
    m_en_full_name:                        ON_wString;

    m_loc_postscript_name:                 ON_wString;
    m_en_postscript_name:                  ON_wString;

    m_loc_gdi_family_name:                 ON_wString;
    m_en_gdi_family_name:                  ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES, ... )
    m_loc_gdi_subfamily_name:              ON_wString;
    m_en_gdi_subfamily_name:               ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME, ... )
    m_loc_weight_stretch_style_model_name: ON_wString;
    m_en_weight_stretch_style_model_name:  ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE, ... )
    m_loc_field_0_copyright:               ON_wString;
    m_en_field_0_copyright:                ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS, ... )
    m_loc_field_5_version:                 ON_wString;
    m_en_field_5_version:                  ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_TRADEMARK, ... )
    m_loc_field_7_trademark:               ON_wString;
    m_en_field_7_trademark:                ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_MANUFACTURER, ... )
    m_loc_field_8_manufacturer:            ON_wString;
    m_en_field_8_manufacturer:             ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_DESIGNER, ... )
    m_loc_field_9_designer:                ON_wString;
    m_en_field_9_designer:                 ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_DESCRIPTION, ... )
    // Opennurbs searches the description saved in field 10 of the name table
    // for the strings "Engraving - single stroke" / "Engraving - double stroke" / "Engraving"
    // to identify fonts that are desgned for engraving (and which tend to render poorly when
    // used to display text devices like screens, monitors, and printers).
    // The SLF (single line fonts) are examples of fonts that have Engraving in field 10.
    m_loc_field_10_description:            ON_wString;
    m_en_field_10_description:             ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL, ... )
    m_loc_field_11_vendor_URL:             ON_wString;
    m_en_field_11_vendor_URL:              ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_DESIGNER_URL, ... )
    m_loc_field_12_designer_URL:           ON_wString;
    m_en_field_12_designer_URL:            ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION, ... )
    m_loc_field_13_license:                ON_wString;
    m_en_field_13_license:                 ON_wString;

    // from IDWriteFont.GetInformationalStrings( DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL, ... )
    m_loc_field_14_license_URL:            ON_wString;
    m_en_field_14_license_URL:             ON_wString;

    m_loc_field_20_postscript_cid:         ON_wString; // NOT the same as PostScriptName
    m_en_field_20_postscript_cid:          ON_wString;

    // from IDWriteGdiInterop.ConvertFontToLOGFONT
    m_gdi_interop_logfont:                 LOGFONT;

    // from IDWriteGdiInterop.ConvertFontToLOGFONT
    m_gdi_interop_logfont_bIsSystemFont    := false;

    // from IDWriteFont.GetMetrics
    m_font_metrics:                        ON_FontMetrics;

    // "standard" metric glyphs
    m_Spacebox:                            ON_FontGlyph;
    m_Hbox:                                ON_FontGlyph;
    m_Ibox:                                ON_FontGlyph;
    m_xbox:                                ON_FontGlyph;

    m_panose1:                             ON_PANOSE1;

    m_outline_figure_type:                 ON_OutlineFigure.Type = .Unset;
}

ON_FontFaceQuartet :: struct {
    Member :: enum u8 {
        Unset      :: 0;
        Regular    :: 1;
        Bold       :: 2;
        Italic     :: 3;
        BoldItalic :: 4;
    }

    m_quartet_name: ON_wString;
    m_regular:      *ON_Font = null;
    m_bold:         *ON_Font = null;
    m_italic:       *ON_Font = null;
    m_bold_italic:  *ON_Font = null;
}

/// <summary>
/// An ON_Font is a face in a font family. It corresponds to a Windows LOGFONT,
/// a .NET System.Drawing.Font or a FreeType FT_Face.
/// </summary>
ON_Font :: struct {
    /// <summary>
    /// Platform where font originated. This information is useful when
    /// searching for appropriate substitutes.
    /// </summary>
    Origin :: enum u8 {
        Unset       :: 0;

        Unknown     :: 1;

        WindowsFont :: 2;

        AppleFont   :: 3;
    }

    /// <summary>
    /// An enum that reports if the font face is available on the current device.
    /// </summary>
    FontType :: enum u8 {
        Unset         :: 0;

        ManagedFont   :: 1;

        InstalledFont :: 2;
    }

    /// <summary>
    /// Weight enum values
    /// Avoid casting these values to int.
    /// Use ON_Font::WindowsLogfontWeightFromWeight() or
    /// ON_Font::AppleWeightOfFontFromWeight() or
    /// add another converter.
    /// </summary>
    Weight :: enum u8 {
        Unset      :: 0;

        Thin       :: 1;

        Ultralight :: 2;

        Light      :: 3;

        Normal     :: 4;

        Medium     :: 5;

        Semibold   :: 6;

        Bold       :: 7;

        Ultrabold  :: 8;

        Heavy      :: 9;
    }

    /// <summary>
    /// Horizontal expansion or contraction of font
    /// </summary>
    Stretch :: enum u8 {
        Unset          :: 0;

        Ultracondensed :: 1;

        Extracondensed :: 2;

        Condensed      :: 3;

        Semicondensed  :: 4;

        Medium         :: 5;

        Semiexpanded   :: 6;

        Expanded       :: 7;

        Extraexpanded  :: 8;

        Ultraexpanded  :: 9;
    }

    /// <summary>
    /// Vertical angle of font
    /// Upright, Italic, or Oblique
    /// </summary>
    Style :: enum u8 {
        Unset   :: 0;

        Upright :: 1;

        Italic  :: 2;

        Oblique :: 3;
    }

    anon_enum_38 :: enum s32 {
        MAP_MODE_ZERO_ERROR_SUPPRESS :: 11;
    }

    // BUSTED #pragma region RH_BUSTED_C_SHARED_ENUM [ON_Font::NameLocale] [Rhino.DocObjects.Font.NameLocale] [nested:byte]
    /// <summary>
    /// ON_Font::NameLocale selects what locale is used for font name (PostScript, family, face, LOGFONT) queries.
    /// </summary>
    NameLocale :: enum ON__UINT8 {
        LocalizedFirst :: 0;

        Localized      :: 1;

        English        :: 2;
    }

    //////////////////////////////////////////////////////////////////////
    //
    // Interface
    WindowsConstants :: enum u8 {
        ansi_charset     :: 0;
        default_charset  :: 1;
        symbol_charset   :: 2;
        out_precis       :: 7;

        quality          :: 0;

        pitch_and_family :: 0;

        logfont_ansi_charset     :: ansi_charset;
        logfont_default_charset  :: default_charset;
        logfont_symbol_charset   :: symbol_charset;
        logfont_out_precis       :: out_precis;

        logfont_quality          :: quality;

        logfont_pitch_and_family :: pitch_and_family;
    }

    // miscellaneous constants use to initialize Windows LOGFONT fields
    Constants :: enum s32 {
        AnnotationFontCellHeight     :: 256;

        AnnotationFontApplePointSize :: 256;

        MetricsGlyphCodePoint        :: 73;
    }

    m_runtime_serial_number:           u32 : 0;

    m_windows_logfont_weight:          s32 = 400 #align 8; // 100 <= m_windows_logfont_weight <= 1000
    m_point_size:                      float64 = 0.0; // 0.0 indicates the annotation font size will be used.
    m_apple_font_weight_trait:         float64 = 0.0; // = Apple WeightTrait value -1.0 <= m_apple_font_weight < 1.0, 0.0 = "normal"
    m_font_weight:                     Weight = .Normal;

    m_font_style:                      Style = .Upright; // m_font_style corresponds to Windows LOGFONT.lfItalic field
    m_font_stretch:                    Stretch = .Medium;
    m_font_bUnderlined                 := false; // Same as Windows LOGFONT.lfUnderlined
    m_font_bStrikethrough              := false; // Same as Windows LOGFONT.lfStrikeOut

    // There are two permitted values for m_logfont_charset.
    //   ON_Font::WindowsConstants::logfont_default_charset = 1
    //   ON_Font::WindowsConstants::logfont_symbol_charset = 2
    m_logfont_charset:                 u8 = xx WindowsConstants.default_charset;

    m_font_origin:                     Origin = .Unset;

    m_font_type:                       FontType : .Unset;

    // Locale for localized m_locale_* font names.
    m_locale_name:                     ON_wString;

    // Localized and English font PostScript name
    //  Apple: = CTFontCopyPostScriptName() / NSFont.fontName
    //  Windows: = IDWriteFont.GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME,...)
    //  NOTE WELL:
    //    This is NOT the GDI LOGFONT.lfFaceName.
    m_loc_postscript_name:             ON_wString;
    m_en_postscript_name:              ON_wString;

    // Localized and English font family name
    //  Apple: = CTFontCopyFamilyName() / NSFont.familyName
    //  Windows: = IDWriteFontFamily.GetFamilyNames()
    //  NOTE WELL:
    //    This is NOT the GDI LOGFONT.lfFaceName.
    m_loc_family_name:                 ON_wString;
    m_en_family_name:                  ON_wString;

    // Localized and English font face name
    //  Apple: = CTFontCopyName( ..., kCTFontStyleNameKey)
    //  Windows: = IDWriteFont.GetFaceNames()
    //  NOTE WELL:
    //    This is NOT the GDI LOGFONT.lfFaceName.
    m_loc_face_name:                   ON_wString;
    m_en_face_name:                    ON_wString;

    // Localized and English Windows GDI LOGFONT.lfFaceName
    //  Apple: = not available
    //  Windows: = IDWriteFont.GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES,...)
    m_loc_windows_logfont_name:        ON_wString;
    m_en_windows_logfont_name:         ON_wString;

    m_simulated:                       ON__UINT8 = 0; // bit field (&1 = some simulation, &2 simulated weight, &4 simulated stretch, &8 simulated italic)

    // = 1 if this is a managed font and the face is installed on the current device.
    m_reserved1:                       ON__UINT8 = 0;

    m_panose1:                         ON_PANOSE1;

    // A sha1 hash of all font characteristics.
    // This value is set using lazy evaluation.
    // A zero digest indicates it is not set.
    m_font_characteristics_hash:       ON_SHA1_Hash;

    m_apple_font_width_trait:          float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0;

    m_outline_figure_type:             ON_OutlineFigure.Type = .Unset;

    // When then is unset, it is the best way to determine what face this font
    // corresponds to in its quartet of faces. (regular,bold,italic,bold-italic)
    // The Windows OS LOGFONT partitions specify this. On Apple we have a table
    // for common fonts and we make it up on the fly for the rest.
    // This field is not included in the font hash because it is mutable
    // and may get changed as the application adds more managed fonts.
    m_quartet_member:                  ON_FontFaceQuartet.Member = .Unset;

    m_reserved2:                       ON__UINT16 = 0;
    m_reserved3:                       ON__UINT32 = 0;
    m_reserved4:                       float64 = 0.0;

    ON_FontGlyphCache :: struct {}

    // C4251: '...std::shared_ptr<class ON_FontGlyphCache>...'
    //         needs to have dll-interface to be used by clients of class 'ON_Font'
    // m_font_glyph_cache is private and all code that manages m_font_glyph_cache is explicitly implemented in the DLL.
    m_font_glyph_cache:                *ON_FontGlyphCache;

    ON_FreeTypeFace :: struct {}
    // LEGACY field. Windows opennurbs never uses freetype.
    // In rare cases, Apple opennurbs used freetype.
    m_free_type_face:                  *ON_FreeTypeFace = null;

    // If this font is a managed font, then m_managed_installed_font_and_bits encodes
    // 1. The installed font used to render this font
    // 2. If the installed font is a substituted for font not installed on this device.
    // If this font is not a managed font, then m_managed_installed_font_and_bits = 0.
    // LEGACY mutable ON__UINT8 m_managed_face_is_installed = 0; 1 = managed and installed 2 = managed and substituted
    m_managed_installed_font_and_bits: ON__UINT_PTR = 0;

    /*
    Parameters:
    font_glyph - [in]
    glyph_metrics_in_font_design_units - [out]
    glyph metrics in font design units
    Returns:
    >0: Glyph index
    0: failed
    */
    ON_GetGlyphMetricsFuncType :: #type (font_glyph: *ON_FontGlyph, glyph_metrics_in_font_design_units: *ON_TextBox) -> u32 #c_call;

    /*
    Parameters:
    font - [in]
    font_metrics_in_font_design_units - [out]
    font metrics in font design units
    */
    ON_GetFontMetricsFuncType :: #type (font: *ON_Font, font_metrics_in_font_design_units: *ON_FontMetrics) -> void #c_call;

    ON_GetGlyphOutlineFuncType :: #type (glyph: *ON_FontGlyph, bSingleStrokeFont: bool, outline: *ON_Outline) -> bool #c_call;
}

ON_FontPtrCompareFunc :: #type (lhs: **ON_Font, rhs: **ON_Font) -> s32 #c_call;

ON_FontList :: struct {
    m_name_locale:                              ON_Font.NameLocale : .LocalizedFirst;
    m_bMatchUnderlineStrikethroughAndPointSize  := false #align 2;

    // List of all added fonts in the order they were added
    m_by_index:                                 ON_SimpleArray(*ON_Font);

    // List of recently added fonts unsorted
    m_unsorted:                                 ON_SimpleArray(*ON_Font);

    ON_FontListImpl :: struct {}
    // A single instance is allocated in the default constructor
    // and freed in the destructor. You may assume this point is valid.
    // ON_FontListImpl contains the sorted lists.
    m_sorted:                                   *ON_FontListImpl;

    // this reserved block is here to keep sizeof(ON_FontList) unchanged between
    // Rhino 7.3 and Rhino 7.4 and to insure that any 3rd party code that used ON_FontList
    // in Rhino 7.3 will continue to work as expected in Rhino 7.4.
    m_reserved:                                 [20] ON__UINT_PTR;

    // List of quartets sorted by quartet name.
    m_quartet_list:                             ON_ClassArray(ON_FontFaceQuartet);
}

ON_TextStyle :: struct {
    #as on_modelcomponent: ON_ModelComponent; // jai: no "using" to avoid name-clashes

    // V5 files had a single string used for different purposes
    // on Windows and Apple platforms. These two strings are runtime
    // information.
    m_font_description:  ON_wString;

    m_apple_font_name:   ON_wString;

    // m_managed_font points to a managed ON_Font and is the font returned by Font().
    m_managed_font:      *ON_Font = null;

    anon_enum_39 :: enum u8 {
        font_bit :: 1;
    }

    m_is_set_bits:       u8 = 0;
    m_is_locked_bits:    u8 = 0;

    m_reserved1:         u8 = 0;
    m_reserved2:         u32 = 0;
    m_reserved_ptr_1:    ON__UINT_PTR = 0;
    m_reserved_ptr_2:    ON__UINT_PTR = 0;
    m_reserved_double_0: float64 = 0.0;
    m_reserved_double_1: float64 = 0.0;
}

ON_Arrowhead :: struct {
    /// <summary>
    /// Defines enumerated values for arrowhead shapes.
    /// </summary>
    arrow_type :: enum u32 {
        None           :: 0;

        UserBlock      :: 1;

        SolidTriangle  :: 2;

        Dot            :: 3;

        Tick           :: 4;

        ShortTriangle  :: 5;

        OpenArrow      :: 6;

        Rectangle      :: 7;

        LongTriangle   :: 8;

        LongerTriangle :: 9;
    }

    m_arrowhead_type: arrow_type = .SolidTriangle;
    m_arrow_block_id: ON_UUID;
}

ON_TextMask :: struct {
    /// <summary>
    /// Text mask drawn with background color or explicit color
    /// </summary>
    MaskType :: enum u8 {
        BackgroundColor :: 0;

        MaskColor       :: 1;
    }

    /// <summary>
    /// Draw a frame stroke around the text mask area
    /// </summary>
    MaskFrame :: enum u8 {
        NoFrame      :: 0;

        RectFrame    :: 1;

        CapsuleFrame :: 2;
    }

    m_bDrawMask     := false;
    m_mask_type:    MaskType = .BackgroundColor;
    m_mask_frame:   MaskFrame = .NoFrame;

    m_reserved2:    u8 = 0;

    m_mask_color:   ON_Color;
    m_mask_border:  float64 = 0.0;

    // At some point, the reserved fields may have the name changed and be
    // used to store additional information of how to draw the mask,
    // (feathered edges, rounded corners, etc.).
    m_reserved3:    u32 = 0;
    m_content_hash: ON_SHA1_Hash;
}

ON_DimStyle :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    /// <summary>
    /// Dimension display length unit system and style
    /// </summary>
    LengthDisplay :: enum u32 {
        ModelUnits       :: 0;

        Millmeters       :: 3;

        Centimeters      :: 4;

        Meters           :: 5;

        Kilometers       :: 6;

        InchesDecimal    :: 7;

        InchesFractional :: 1;

        FeetDecimal      :: 8;

        FeetAndInches    :: 2;

        Miles            :: 9;
    }

    /// <summary>
    /// Style of tolerance display for dimensions
    /// </summary>
    tolerance_format :: enum u8 {
        None        :: 0;

        Symmetrical :: 1;

        Deviation   :: 2;

        Limits      :: 3;
    }

    /// <summary>
    /// Angle for text or other leader or dimension content
    /// </summary>
    ContentAngleStyle :: enum u8 {
        Horizontal :: 0;

        Aligned    :: 1;

        Rotated    :: 2;
    }

    /// <summary>
    /// Type of leader curve
    /// </summary>
    leader_curve_type :: enum u8 {
        None     :: 0;

        Polyline :: 1;

        Spline   :: 2;
    }

    // Don't change these enum values. They are used in file reading and writing.
    /// <summary>
    /// Field identifiers used for file i/o and getting/setting values
    /// </summary>
    field :: enum u32 {
        Unset                           :: 0;

        Name                            :: 1;

        Index                           :: 2;

        ExtensionLineExtension          :: 3;

        ExtensionLineOffset             :: 4;

        Arrowsize                       :: 5;

        LeaderArrowsize                 :: 6;

        Centermark                      :: 7;

        TextGap                         :: 8;

        TextHeight                      :: 9;

        DimTextLocation                 :: 10;

        MaskFrameType                   :: 11;

        LengthResolution                :: 12;

        AngleFormat                     :: 13;

        AngleResolution                 :: 14;

        Font                            :: 15;

        LengthFactor                    :: 16;

        Alternate                       :: 17;

        AlternateLengthFactor           :: 18;

        AlternateLengthResolution       :: 20;

        Prefix                          :: 21;

        Suffix                          :: 22;

        AlternatePrefix                 :: 23;

        AlternateSuffix                 :: 24;

        DimensionLineExtension          :: 25;

        SuppressExtension1              :: 26;

        SuppressExtension2              :: 27;

        ExtLineColorSource              :: 28;

        DimLineColorSource              :: 29;

        ArrowColorSource                :: 30;

        TextColorSource                 :: 31;

        ExtLineColor                    :: 32;

        DimLineColor                    :: 33;

        ArrowColor                      :: 34;

        TextColor                       :: 35;

        ExtLinePlotColorSource          :: 36;

        DimLinePlotColorSource          :: 37;

        ArrowPlotColorSource            :: 38;

        TextPlotColorSource             :: 39;

        ExtLinePlotColor                :: 40;

        DimLinePlotColor                :: 41;

        ArrowPlotColor                  :: 42;

        TextPlotColor                   :: 43;

        ExtLinePlotWeightSource         :: 44;

        DimLinePlotWeightSource         :: 45;

        ExtLinePlotWeight_mm            :: 46;

        DimLinePlotWeight_mm            :: 47;

        ToleranceFormat                 :: 48;

        ToleranceResolution             :: 49;

        ToleranceUpperValue             :: 50;

        ToleranceLowerValue             :: 51;

        AltToleranceResolution          :: 52;

        ToleranceHeightScale            :: 53;

        BaselineSpacing                 :: 54;

        DrawMask                        :: 55;

        MaskColorSource                 :: 56;

        MaskColor                       :: 57;

        MaskBorder                      :: 58;

        DimensionScale                  :: 59;

        DimscaleSource                  :: 60;

        FixedExtensionLength            :: 61;

        FixedExtensionOn                :: 62;

        TextRotation                    :: 63;

        SuppressArrow1                  :: 64;

        SuppressArrow2                  :: 65;

        TextmoveLeader                  :: 66;

        ArclengthSymbol                 :: 67;

        StackTextheightScale            :: 68;

        StackFormat                     :: 69;

        AltRound                        :: 70;

        Round                           :: 71;

        AngularRound                    :: 72;

        AltZeroSuppress                 :: 73;

        AngleZeroSuppress               :: 75;

        ZeroSuppress                    :: 76;

        AltBelow                        :: 77;

        ArrowType1                      :: 78;

        ArrowType2                      :: 79;

        LeaderArrowType                 :: 80;

        ArrowBlockId1                   :: 81;

        ArrowBlockId2                   :: 82;

        LeaderArrowBlock                :: 83;

        DimRadialTextLocation           :: 84;

        TextVerticalAlignment           :: 85;

        LeaderTextVerticalAlignment     :: 86;

        LeaderContentAngleStyle         :: 87;

        LeaderCurveType                 :: 88;

        LeaderContentAngle              :: 89;

        LeaderHasLanding                :: 90;

        LeaderLandingLength             :: 91;

        MaskFlags                       :: 92;

        CentermarkStyle                 :: 93;

        TextHorizontalAlignment         :: 94;

        LeaderTextHorizontalAlignment   :: 95;

        DrawForward                     :: 96;

        SignedOrdinate                  :: 97;

        UnitSystem                      :: 98;

        TextMask                        :: 99;

        TextOrientation                 :: 100;

        LeaderTextOrientation           :: 101;

        DimTextOrientation              :: 102;

        DimRadialTextOrientation        :: 103;

        DimTextAngleStyle               :: 104;

        DimRadialTextAngleStyle         :: 105;

        TextUnderlined                  :: 106;

        DimensionLengthDisplay          :: 109;

        AlternateDimensionLengthDisplay :: 110;

        ForceDimLine                    :: 111;

        ArrowFit                        :: 112;

        TextFit                         :: 113;

        DecimalSeparator                :: 114;

        Count                           :: 115;
    }

    anon_enum_40 :: enum u32 {
        FieldCount :: 115;
    }

    /// <summary>
    /// Display format for angles
    /// </summary>
    angle_format :: enum u8 {
        DecimalDegrees :: 0;

        DegMinSec      :: 1;

        Radians        :: 2;

        Grads          :: 3;
    }

    /// <summary>
    /// Obsolete format for length display - use ON_DimStyle::DimensionLengthDisplay instead
    /// </summary>
    OBSOLETE_length_format :: enum u8 {
        Decimal           :: 0;

        Fractional        :: 1;

        FeetInches        :: 2;

        FeetDecimalInches :: 3;
    }

    /// <summary>
    /// The location of text in linear, angular, radial, and ordinate dimensions.
    /// </summary>
    TextLocation :: enum u8 {
        AboveDimLine :: 0;

        InDimLine    :: 1;

        BelowDimLine :: 2;
    }

    /// <summary>
    /// Marks leading and trailing zeros for removal.
    /// </summary>
    suppress_zero :: enum u8 {
        None                          :: 0;

        SuppressLeading               :: 1;

        SuppressTrailing              :: 2;

        SuppressLeadingAndTrailing    :: 3;

        SuppressZeroFeet              :: 4;

        SuppressZeroInches            :: 8;

        SuppressZeroFeetAndZeroInches :: 12;
    }

    /// <summary>
    /// Format of stacked fractions
    /// </summary>
    stack_format :: enum u8 {
        None            :: 0;

        StackHorizontal :: 1;

        StackDiagonal   :: 2;
    }

    /// <summary>
    /// Style for drawing centermark for Radial dimensions and Centermark objects
    /// </summary>
    centermark_style :: enum u8 {
        None         :: 0;

        Mark         :: 1;

        MarkAndLines :: 2;
    }

    /// <summary>
    /// Arrow display position inside or outside extension lines
    /// </summary>
    arrow_fit :: enum u8 {
        uto          :: 0;

        rrowsInside  :: 1;

        rrowsOutside :: 2;

        Auto          :: uto;

        ArrowsInside  :: rrowsInside;

        ArrowsOutside :: rrowsOutside;
    }

    /// <summary>
    /// Text display position inside or outside extension lines
    /// </summary>
    text_fit :: enum u8 {
        Auto          :: 0;

        TextInside    :: 1;

        TextRight     :: 2;

        TextLeft      :: 3;

        TextHintRight :: 4;

        TextHintLeft  :: 5;
    }

    //// Colors of Text
    //ON_Color TextColor() const;
    //void SetTextColor(ON_Color color);
    //
    // Combines a field id and a field value
    // Dimensions will have an array of DimstyleField's to record
    // dimension style overrides for individual dimensions
    DimstyleField :: struct {
        m_next:     *DimstyleField;
        m_field_id: field;
        m_val:      union {
            b_val:  bool;
            i_val:  s32;
            uc_val: u8;
            d_val:  float64;
            c_val:  u32;
            s_val:  *ON_wString;
        };
    }

    m_extextension:                       float64 = 0.5; // extension line extension
    m_extoffset:                          float64 = 0.5; // extension line offset
    m_arrowsize:                          float64 = 1.0; // length of an arrow - may mean different things to different arrows
    m_leaderarrowsize:                    float64 = 1.0; // length of an arrow for leader style dimensions
    m_centermark:                         float64 = 0.5; // size of the + at circle centers
    m_centermark_style:                   centermark_style = .Mark; // Display style for centermarks
    m_textgap:                            float64 = 0.25; // gap around the text for clipping dim line
    m_textheight:                         float64 = 1.0; // model unit height of dimension text before applying dimscale

    //ON::OBSOLETE_V5_TextDisplayMode m_REMOVE_ME_dimstyle_textalign  = ON::OBSOLETE_V5_TextDisplayMode::kAboveLine;
    m_dim_text_location:                  TextLocation = .AboveDimLine;
    m_dimradial_text_location:            TextLocation = .InDimLine;

    m_angleformat:                        angle_format = .DecimalDegrees;
    m_angleresolution:                    s32 = 2; // for decimal degrees, digits past decimal

    m_dimension_length_display:           LengthDisplay = .ModelUnits;

    m_alternate_dimension_length_display: LengthDisplay = .ModelUnits;

    /// <summary>
    /// The LengthResolution property controls the precision of dimension length display.
    ///
    /// DECIMAL LENGTH DISPLAY:
    ///   If m_dimension_length_display is any of the ON_DimStyle::LengthDisplay decimal formats,
    ///   then m_lengthresolution is the number of digits after the decimal point.
    ///   For example, if m_lengthresolution is 2, then dimension length display will be n.ff
    ///   If m_lengthresolution=7,  then dimension length display will be n.fffffff.
    ///
    /// FRACTONAL LENGTH DISPLAY:
    ///   If m_dimension_length_display is ON_DimStyle::LengthDisplay::InchesFractional or
    ///   ON_DimStyle::LengthDisplay::FeetAndInches, then fractional length display is used.
    ///   In this case any fractional part will be rouded to the closest multiple
    ///   of 1/(2^m_alternate_lengthresolution).
    ///   Examples: If fractional length display is used and m_lengthresolution=2,
    //    then the possible fractions are 1/4, 1/2(=2/4), 3/4.
    ///   If fractional length display is used and m_lengthresolution=7,
    //    then any fractional part is rounded to the closest multipl of 1/128 (128=2^7).
    /// </summary>
    m_lengthresolution:                   s32 = 2;

    m_alternate_lengthresolution:         s32 = 2;

    m_lengthfactor:                       float64 = 1.0; // (dimlfac) model units multiplier for length display

    m_alternate_lengthfactor:             float64 = 1.0; // (dimaltf) model units multiplier for alternate length display

    // A copy of the font_characteristics passed to SetFont.
    // This information is saved in 3dm archives.
    m_font_characteristics:               ON_Font;

    // The managed font returned by ON_Font::GetManagedFont(m_font).
    // This is the value returned by ON_DimStyle.Font().
    m_managed_font:                       *ON_Font;

    // all dim style content
    m_content_hash:                       ON_SHA1_Hash;

    // text position properties content
    m_text_position_properties_hash:      ON_SHA1_Hash;

    m_reserved_hash2:                     ON_SHA1_Hash;

    // parent dim style content
    // All code should use ParentContentHash() to inspect this value.
    // Is is set by OverrideFields(). It may be cleared by a call to ParentContentHash().
    m_parent_dim_style_content_hash:      ON_SHA1_Hash;

    m_bAlternate                          := false; // (dimalt) display alternate dimension string (or not)

    m_bForceDimLine                       := true; // 4/30/2019
    m_ArrowFit:                           arrow_fit = .uto; // 4/30/2019
    m_TextFit:                            text_fit = .Auto; // 4/30/2019
    m_decimal_separator:                  s16 = ON_wString.DecimalAsPeriod;

    m_prefix:                             ON_wString; // string preceding dimension value string
    m_suffix:                             ON_wString; // string following dimension value string
    m_alternate_prefix:                   ON_wString; // string preceding alternate value string (Default = " [")
    m_alternate_suffix:                   ON_wString; // string following alternate value string (Default = "]")

    m_dimextension:                       float64 = 0.0; // (dimdle) dimension line extension past the "tip" location

    m_bSuppressExtension1                 := false; // flag to not draw extension lines
    m_bSuppressExtension2                 := false; // flag to not draw extension lines
    m_bReserved1                          := false;
    m_bReserved2                          := false;

    // m_field_override_count
    //   number of ON_DimStyle::field settings that are independent of the parent dimension style.
    //   (not inherited from)
    //   A value of 0 indicates every possible setting is inherited from the parent dimension style.
    //   A value > 0 indicates at least one setting is independent of the parent dimension style.
    m_field_override_parent_count:        ON__UINT32 = 0;

    // m_field_override_bitsN (Up to 128 true/false) values.
    //   Each ON_DimStyle::field enum value > ON_DimStyle::field::Unset and < ON_DimStyle::field::Count
    //   has a corresponding bit in on of the m_field_override_bitsN values.
    //   When the bit is clear (0), the corresponding override parent setting value = false and
    //   that setting is inheritied from the parent dimension style. 0 is the default setting.
    //   When the bit is set (1), the corresponding override parent setting value = true and
    //   that setting is independent of the parent dimension style.
    m_field_override_parent_bits0:        ON__UINT32 = 0;
    m_field_override_parent_bits1:        ON__UINT32 = 0;
    m_field_override_parent_bits2:        ON__UINT32 = 0;
    m_field_override_parent_bits3:        ON__UINT32 = 0;

    m_tolerance_format:                   tolerance_format = .None;
    m_tolerance_resolution:               s32 = 4;
    m_tolerance_upper_value:              float64 = 0.0; // or both upper and lower in symmetrical style
    m_tolerance_lower_value:              float64 = 0.0;
    m_tolerance_height_scale:             float64 = 0.7; // relative to the main dimension text

    m_baseline_spacing:                   float64 = 3.0;

    m_text_mask:                          ON_TextMask;

    // m_dimscale replaced by m_scale_value.RightToLeftScale()
    //double   m_dimscale                              = 1.0;
    m_dimscale_source:                    s32 = 0;

    // Uuid of source dimstyle to restore defaults
    m_source_dimstyle:                    ON_UUID;

    // Sub-object draw colors
    m_ext_line_color_source:              u8 = 0;
    m_dim_line_color_source:              u8 = 0;
    m_arrow_color_source:                 u8 = 0;
    m_text_color_source:                  u8 = 0;
    m_ext_line_color:                     ON_Color;
    m_dim_line_color:                     ON_Color;
    m_arrow_color:                        ON_Color;
    m_text_color:                         ON_Color;
    m_ext_line_plot_color_source:         u8 = 0;
    m_dim_line_plot_color_source:         u8 = 0;
    m_arrow_plot_color_source:            u8 = 0;
    m_text_plot_color_source:             u8 = 0;
    m_ext_line_plot_color:                ON_Color;
    m_dim_line_plot_color:                ON_Color;
    m_arrow_plot_color:                   ON_Color;
    m_text_plot_color:                    ON_Color;
    m_ext_line_plot_weight_source:        u8 = 0;
    m_dim_line_plot_weight_source:        u8 = 0;
    m_ext_line_plot_weight_mm:            float64 = 0.0;
    m_dim_line_plot_weight_mm:            float64 = 0.0;

    m_fixed_extension_len:                float64 = 1.0; // Fixed extension line length if m_fixed_extension_len_on is true
    m_fixed_extension_len_on              := false; // true: use fixed_extension_len, false: don't use m_fixed_extension_len

    m_ReservedChar1:                      u8 = 0;
    m_ReservedShort1:                     u16 = 0;
    m_ReservedInt1:                       u32 = 0;

    m_text_rotation:                      float64 = 0.0; // Dimension text rotation around text point (radians)
    m_alternate_tolerance_resolution:     s32 = 4; // for decimal, digits past the decimal point, fractions: 1/2^n
    m_tol_textheight_fraction:            float64 = 0.6; // fraction of main text height

    m_suppress_arrow1                     := false; // false: dont suppress, true: suppress
    m_suppress_arrow2                     := false; // false: dont suppress, true: suppress

    m_ReservedShort2:                     u16 = 0;

    m_textmove_leader:                    s32 = 0; // 0: move text anywhere, 1: add leader when moving text
    m_arclength_sym:                      s32 = 0; // 0: symbol before dim text, 1: symbol above dim text, no symbol
    m_stack_textheight_fraction:          float64 = 0.7; // fraction of main text height
    m_stack_format:                       stack_format = .StackHorizontal;
    m_alt_round:                          float64 = 0.0; // rounds to nearest specified value
    m_round:                              float64 = 0.0;
    m_angular_round:                      float64 = 0.0;

    m_zero_suppress:                      suppress_zero = .None;
    m_alt_zero_suppress:                  suppress_zero = .None;

    m_ang_zero_suppress:                  suppress_zero = .None;

    m_alt_below                           := false; // true: display alternate text below main text

    m_arrow_type_1:                       ON_Arrowhead.arrow_type = .SolidTriangle; // Arrow types for ON_Dimension derived dimensions
    m_arrow_type_2:                       ON_Arrowhead.arrow_type = .SolidTriangle;
    m_leader_arrow_type:                  ON_Arrowhead.arrow_type = .SolidTriangle;
    m_arrow_block_id_1:                   ON_UUID;
    m_arrow_block_id_2:                   ON_UUID;
    m_leader_arrow_block_id:              ON_UUID;

    // Text
    m_text_vertical_alignment:            ON.TextVerticalAlignment = .Top;
    m_text_horizontal_alignment:          ON.TextHorizontalAlignment = .Left;

    // Leader
    m_leader_text_vertical_alignment:     ON.TextVerticalAlignment = .Middle;
    m_leader_text_horizontal_alignment:   ON.TextHorizontalAlignment = .Left;

    m_leader_content_angle_style:         ContentAngleStyle = .Horizontal;
    m_leader_curve_type:                  leader_curve_type = .Polyline;
    m_leader_content_angle:               float64 = 0.0;
    m_leader_has_landing                  := true;

    m_leader_landing_length:              float64 = 1.0;

    m_draw_forward                        := true;
    m_signed_ordinate                     := true;

    m_scale_value:                        ON_ScaleValue;

    /// NOTE WELL: A dimstyle unit system was added in V6, but has never been fully used.
    /// The idea was this would make it easier to figure out what text height/ arrow size,
    /// ... actually meant. Especially in situations where model space and page space have
    /// different unit systems, and in more complex cases like text in instance definitions
    /// and inserting annotation from models with mismatched unit systems.
    /// It is used internally to get some scales properly set and use in limited
    /// merging contexts.
    ///
    /// From a user's perspective, in Rhino 6 and Rhino 7 ON_DimStyle lengths like TextHeight(), ArrowSize(), ...
    /// are with respect to the context the annotation resides in. For example, if TextHeight() = 3.5,
    /// model units = meters, page units = millimters, and DimScale() = 1, then
    /// text created in model space will be 3.5 meters high and
    /// text created in page space will be 3.5 millimeters high.
    ///
    /// Ideally, ON_DimStyle::UnitSystem() would specify the text height units
    /// and ON_DimStyle::DimScale() cound be adjusted as model space extents require.
    /// Text in instance definitions would have a well defined height and references
    /// to those instance definitions would display predictably in both model space and page space.
    m_dimstyle_unitsystem:                ON.LengthUnitSystem = .None;

    m_text_orientation:                   ON.TextOrientation = .Plane;
    m_leader_text_orientation:            ON.TextOrientation = .Plane;
    m_dim_text_orientation:               ON.TextOrientation = .Plane;
    m_dimradial_text_orientation:         ON.TextOrientation = .Plane;

    m_dim_text_angle_style:               ContentAngleStyle = .Aligned;
    m_dimradial_text_angle_style:         ContentAngleStyle = .Horizontal;

    m_text_underlined                     := false; // extra/extended line under text block in leaders and radial dimensions

    // The parent dimstyle's managed font.
    // Use the ParentDimStyleFont() member function to query this field.
    //
    m_parent_dimstyle_managed_font:       *ON_Font = null;
}

/*
Description:
A general and portable interface to access a model's available dimension styles.
Remarks:
The Rhino C++ SDK function CRhinoDoc.DimStyleContext() will return an ON_DimStyleContext for the Rhino model.
The ONX_Model function ONX_Model.DimStyleContext() will return an ON_DimStyleContext for ONX_Model model.
*/
ON_DimStyleContext :: struct {
    vtable: *ON_DimStyleContext_VTable;
    m_unit_system:         ON.LengthUnitSystem = .Millimeters;
    m_model_serial_number: ON__UINT64 = 0;
}
ON_DimStyleContext_VTable :: struct #type_info_none {
    Destructor: (this: *ON_DimStyleContext, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    CurrentDimStyle: (this: *ON_DimStyleContext) -> *ON_DimStyle #cpp_method;

    DimStyleFromId: (this: *ON_DimStyleContext, id: ON_UUID, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle #cpp_method;

    DimStyleFromName: (this: *ON_DimStyleContext, name_hash: *ON_NameHash, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle #cpp_method;

    DimStyleFromContentHash: (this: *ON_DimStyleContext, content_hash: *ON_SHA1_Hash, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle #cpp_method;

    DimStyleFromFont: (this: *ON_DimStyleContext, font: *ON_Font, model_space_text_scale: float64, text_height: float64, text_height_unit_system: ON.LengthUnitSystem, bReturnClosestMatch := true, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle #cpp_method;

    AddDimStyle: (this: *ON_DimStyleContext, dim_style: *ON_DimStyle, bResolveNameAndIdConflicts: bool) -> bool #cpp_method;

    ModifyDimStyle: (this: *ON_DimStyleContext, model_dim_style_id: ON_UUID, dim_style: *ON_DimStyle) -> bool #cpp_method;

    FirstDimStyle: (this: *ON_DimStyleContext, bIncludeSystemDimStyles := false, bIncludeDeletedDimStyles := false) -> *ON_DimStyle #cpp_method;

    NextDimStyle: (this: *ON_DimStyleContext, id: ON_UUID, bIncludeSystemDimStyles := false, bIncludeDeletedDimStyles := false) -> *ON_DimStyle #cpp_method;

    PrevDimStyle: (this: *ON_DimStyleContext, id: ON_UUID, bIncludeSystemDimStyles := false, bIncludeDeletedDimStyles := false) -> *ON_DimStyle #cpp_method;

    ModelUnitSystem: (this: *ON_DimStyleContext) -> ON.LengthUnitSystem #cpp_method;

    ModelSerialNumber: (this: *ON_DimStyleContext) -> ON__UINT64 #cpp_method;
}

ON_DimStyleContext_Destructor :: inline (this: *ON_DimStyleContext, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_DimStyleContext_CurrentDimStyle :: inline (this: *ON_DimStyleContext) -> *ON_DimStyle { return this.vtable.CurrentDimStyle(this); }

ON_DimStyleContext_DimStyleFromId :: inline (this: *ON_DimStyleContext, id: ON_UUID, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle { return this.vtable.DimStyleFromId(this, id, not_found_result); }

ON_DimStyleContext_DimStyleFromName :: inline (this: *ON_DimStyleContext, name_hash: *ON_NameHash, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle { return this.vtable.DimStyleFromName(this, name_hash, not_found_result); }

ON_DimStyleContext_DimStyleFromContentHash :: inline (this: *ON_DimStyleContext, content_hash: *ON_SHA1_Hash, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle { return this.vtable.DimStyleFromContentHash(this, content_hash, not_found_result); }

ON_DimStyleContext_DimStyleFromFont :: inline (this: *ON_DimStyleContext, font: *ON_Font, model_space_text_scale: float64, text_height: float64, text_height_unit_system: ON.LengthUnitSystem, bReturnClosestMatch := true, not_found_result: *ON_DimStyle = null) -> *ON_DimStyle { return this.vtable.DimStyleFromFont(this, font, model_space_text_scale, text_height, text_height_unit_system, bReturnClosestMatch, not_found_result); }

ON_DimStyleContext_AddDimStyle :: inline (this: *ON_DimStyleContext, dim_style: *ON_DimStyle, bResolveNameAndIdConflicts: bool) -> bool { return this.vtable.AddDimStyle(this, dim_style, bResolveNameAndIdConflicts); }

ON_DimStyleContext_ModifyDimStyle :: inline (this: *ON_DimStyleContext, model_dim_style_id: ON_UUID, dim_style: *ON_DimStyle) -> bool { return this.vtable.ModifyDimStyle(this, model_dim_style_id, dim_style); }

ON_DimStyleContext_FirstDimStyle :: inline (this: *ON_DimStyleContext, bIncludeSystemDimStyles := false, bIncludeDeletedDimStyles := false) -> *ON_DimStyle { return this.vtable.FirstDimStyle(this, bIncludeSystemDimStyles, bIncludeDeletedDimStyles); }

ON_DimStyleContext_NextDimStyle :: inline (this: *ON_DimStyleContext, id: ON_UUID, bIncludeSystemDimStyles := false, bIncludeDeletedDimStyles := false) -> *ON_DimStyle { return this.vtable.NextDimStyle(this, id, bIncludeSystemDimStyles, bIncludeDeletedDimStyles); }

ON_DimStyleContext_PrevDimStyle :: inline (this: *ON_DimStyleContext, id: ON_UUID, bIncludeSystemDimStyles := false, bIncludeDeletedDimStyles := false) -> *ON_DimStyle { return this.vtable.PrevDimStyle(this, id, bIncludeSystemDimStyles, bIncludeDeletedDimStyles); }

ON_DimStyleContext_ModelUnitSystem :: inline (this: *ON_DimStyleContext) -> ON.LengthUnitSystem { return this.vtable.ModelUnitSystem(this); }

ON_DimStyleContext_ModelSerialNumber :: inline (this: *ON_DimStyleContext) -> ON__UINT64 { return this.vtable.ModelSerialNumber(this); }

vtable :: (obj: *ON_DimStyleContext) -> *ON_DimStyleContext_VTable { return obj.vtable; }


ON_TextContent :: struct {
    #as using on_geometry: ON_Geometry;

    m_text:                                   ON_wString; // Rtf laden string
    m_rect_width:                             float64 = 1000000000000000052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // formatting rectangle width in model units
    m_rotation_radians:                       float64 = 0.0; // radians rotation around origin
    m_reserved_dbl:                           float64 = 0.0;
    m_h_align:                                ON.TextHorizontalAlignment = .Left; // Left, Center, Right
    m_v_align:                                ON.TextVerticalAlignment = .Bottom; // Top, Middle, Bottom

    // true when text is wrapped
    // Set by calling WrapText() or SetTextIsWrapped(true).
    // Query by calling TextIsWrapped().
    m_bWrapText                               := false;

    m_runtime_halign:                         ON.TextHorizontalAlignment = .Auto;

    // m__runs and m__wrapped_runs are runtime information
    // generated by parsing m_text and other information.
    m__runs:                                  ON_TextRunArray;

    m__wrapped_runs:                          *ON_TextRunArray = null;

    // display cache runtime value
    m_run_evaluation_sn:                      u32 = 0;

    // annotation type used to select dimstyle text alignment settings.
    m_annotation_type:                        ON.AnnotationType = .Unset;

    // dimstyle text position properties used to calculate the runs
    m_dimstyle_text_position_properties_hash: ON_SHA1_Hash;

    // hash of m_text, m_bWrapping, m_rect_width, m_rotation_radians, alignment
    m_text_content_sub_hash:                  ON_SHA1_Hash;

    // runtime bounding box
    // Value of TextContentHash() when m_text_content_bbox was set.
    m_text_content_bbox_hash:                 ON_SHA1_Hash;
    m_text_content_bbox:                      ON_BoundingBox;

    // Stores a pointer to the top level installed font for the entire textContent
    // May be overridden by font in individual runs
    // Dec. 12, 2019
    m_default_font:                           *ON_Font;
}

/*
class ON_HatchLoop
/////////////////////////////////////////////////////////////////
Represents a 3d boundary loop curve
*/
ON_HatchLoop :: struct {
    eLoopType :: enum s32 {
        Outer :: 0;
        Inner :: 1;

        ltOuter :: Outer;
        ltInner :: Inner;
    }

    m_type:     eLoopType; // loop type flag - inner or outer
    // 2d closed curve bounding the hatch
    // This is really a 3d curve with z coordinates = 0
    m_p2dCurve: *ON_Curve;
}

/*
class ON_HatchLine
/////////////////////////////////////////////////////////////////
Represents one line of a hatch pattern
Similar to AutoCAD's .pat file definition
ON_HatchLine's are used by ON_HatchPattern
to specify the dashes and offset patterns of the lines.

Each line has the following information:
Angle is the direction of the line CCW from the x axis
The first line origin is at base
Each line repetition is offset by offset from the previous line
offset.x is parallel to the line and
offset.y is perpendicular to the line
The base and offset values are rotated by the line's angle to
produce a location in the hatch pattern's coordinate system
There can be gaps and dashes specified for drawing the line

If there are no dashes, the line is solid
Negative length dashes are gaps
Positive length dashes are drawn as line segments
*/
ON_HatchLine :: struct {
    m_angle_radians: float64 = 0.0;
    m_base:          ON_2dPoint;
    m_offset:        ON_2dVector;
    m_dashes:        ON_SimpleArray(float64);
}

/*
class ON_HatchPattern
/////////////////////////////////////////////////////////////////
Fill definition for a hatch

The hatch  will be one of
ON_Hatch::ON_HatchPattern::HatchFillType::Lines     - pat file style definition
ON_Hatch::ON_HatchPattern::HatchFillType::Gradient  - uses a color function
ON_Hatch::ON_HatchPattern::HatchFillType::Solid     - uses entity color

*/
ON_HatchPattern :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    HatchFillType :: enum u32 {
        Solid :: 0;
        Lines :: 1;
    }

    m_type:        HatchFillType = .Solid;

    m_description: ON_wString; // String description of the pattern

    m_lines:       ON_ClassArray(ON_HatchLine); // used by line hatches
}

/*
class ON_Hatch
/////////////////////////////////////////////////////////////////
Represents a hatch in planar boundary loop or loops
This is a 2d entity with a plane defining a local coordinate system
The loops, patterns, angles, etc are all in this local coordinate system

The ON_Hatch object manages the plane and loop array
Fill definitions are in the ON_HatchPattern or class derived from ON_HatchPattern
ON_Hatch has an index to get the pattern definition from the pattern table

*/
ON_Hatch :: struct {
    #as using on_geometry: ON_Geometry;

    m_plane:            ON_Plane;
    m_pattern_scale:    float64 = 1.0;
    m_pattern_rotation: float64 = 0.0;
    m_basepoint:        ON_2dPoint;
    m_loops:            ON_SimpleArray(*ON_HatchLoop);
    m_pattern_index:    s32 = -1;
    #place on_geometry; on_hatch_vtable: *ON_Hatch_VTable;
}
ON_Hatch_VTable :: struct #type_info_none {
    using on_geometry: ON_Geometry_VTable;
    DuplicateHatch: (this: *ON_Hatch) -> *ON_Hatch #cpp_method;
}
ON_Hatch_DuplicateHatch :: inline (this: *ON_Hatch) -> *ON_Hatch { return this.on_hatch_vtable.DuplicateHatch(this); }

vtable :: (obj: *ON_Hatch) -> *ON_Hatch_VTable { return obj.on_hatch_vtable; }


//Part of a boundary. An element has a curve subdomain and a flag to say
//whether that piece of curve should be reversed
ON_CurveRegionBoundaryElement :: struct {
    m_curve_id:  s32;
    m_subdomain: ON_Interval;
    m_bReversed: bool;
}

//A list of curve subdomains that form a closed boundary with active space on the left.
ON_CurveRegionBoundary :: ON_ClassArray(ON_CurveRegionBoundaryElement);

//A list of region boundaries that bound a single connected region of the plane.
//The first boundary is always the outer boundary.
ON_CurveRegion :: ON_ClassArray(ON_CurveRegionBoundary);

ON_ObjRefEvaluationParameter :: struct {
    // If m_point != ON_3dPoint::UnsetPoint and m_t_type != 0, then
    // m_t_type, m_t, and m_t_ci record the m_geometry evaluation
    // parameters of the m_point.
    //
    //  m_t_type values
    //
    //  0: no parameter values; m_t_ci and m_t[] have no meaning.
    //
    //  1: m_geometry points to a curve, m_t[0] is a curve
    //     parameter for m_point, and m_t_ci has no meaning.
    //
    //  2: m_geometry points to surface or single faced brep,
    //     (m_t[0],m_t[1]) is a surface parameter for m_point,
    //     and m_t_ci has no meaning.
    //     In this case, m_component_index may not be set or,
    //     if m_geometry points to a brep face, m_component_index
    //     may identify the face in the parent brep.
    //
    //  3: m_geometry points to a brep edge with an associated
    //     trim and m_t[0] is the edge parameter for m_point.
    //     m_t_ci is the ON_BrepTrim component index and m_t[1]
    //     is the ON_BrepTrim parameter that corresponds to the
    //     edge point.  m_s[0] and m_s[1] are normalized parameters.
    //     In this case m_component_index identifies the
    //     the edge in the brep and m_t_ci identifies a trim.
    //
    //  4: m_geometry points to a mesh or mesh face and
    //     m_t_ci identifies the mesh face.
    //     If the face is a triangle, the barycentric coordinates
    //     of m_point are(m_t[0], m_t[1], m_t[2]) and m_t[3] is zero.
    //     If the mesh face is a quadrangle, the barycentric coordinates
    //     of m_point are (m_t[0], m_t[1], m_t[2], m_t[3]) and at least
    //     one of the coordinates is zero.  In both cases, the point
    //     can be evaluated using the formula
    //     m_t[0]*mesh.m_V[f.vi[0]] + ... + m_t[3]*mesh.m_V[f.vi[3]],
    //     where f = mesh.m_F[m_component_index.m_index].
    //     In this case, if m_geometry points to a mesh, then
    //     m_component_index !=  m_t_ci.
    //
    //  5: m_geometry points to a mesh or mesh edge and m_t_ci
    //     identifies the mesh edge. The normalized coordinate of
    //     the point on the mesh edge is m_t[0].  The point can be evaluated
    //     using the formula
    //     m_t[0]*mesh.m_V[v0] + (1.0-m_t[0])*mesh.m_V[v1],
    //     where v0 and v1 are the indices of the mesh vertices at
    //     the edge's ends.
    //     In this case, if m_geometry points to a mesh, then
    //     m_component_index !=  m_t_ci.
    //
    //  6: m_geometry points to a NURBS cage and (m_t[0],m_t[1],m_t[2])
    //     are cage evaluation parameters.
    //
    //  7: m_geometry points to an annotation object and m_t_ci identifies
    //     a point on the annotation object.
    //
    //  8: m_geometry points to a mesh or mesh vertex object and m_t_ci
    //     identifies a vertex on the mesh object.
    //
    m_t_type:   s32;

    m_reserved: s32; // for future use to record snap info.

    m_t:        [4] float64;
    m_s:        [3] ON_Interval; // curve/surface/cage domains
    // Not necessarily the same as m_component_index
    // See comment above for details.
    m_t_ci:     ON_COMPONENT_INDEX;
}

ON_ObjRef_IRefID :: struct {
    // m_iref_uuid is the CRhinoInstanceObject's uuid stored
    // in its ON_3dmObjectAttributes.m_uuid.
    m_iref_uuid:           ON_UUID;

    // m_iref_xform is the value stored in ON_InstanceRef.m_xform.
    m_iref_xform:          ON_Xform;

    // m_idef_uuid is the instance definition id stored in
    // ON_InstanceRef.m_instance_definition_uuid and
    // ON_InstanceDefinition.m_uuid.
    m_idef_uuid:           ON_UUID;

    // m_geometry_index is the index of the uuid of the pertinent
    // piece of geometry in the ON_InstanceRef.m_object_uuid[]
    // array.  This index is identical to the index of the
    // geometry's CRhinoObject in the
    // CRhinoInstanceDefinition.m_objects[] array.
    m_idef_geometry_index: s32 = 0;

    // m_geometry_xform is the transformation to map the
    // base geometry to world coordinates.  If the
    // instance reference is not nested, then
    // m_geometry_xform = m_iref_xform.  If the instance
    // reference is nested, then
    //   m_geometry_xform = m_iref_xform * .... * T1
    // where the Ts are the transformations from the children.
    m_geometry_xform:      ON_Xform;

    // If this ON_ObjRef_IRefID is the first entry in the
    // ON_ObjRef.m__iref[] array, then it references a "real"
    // piece of geometry (not a nested instance reference).
    // If the reference is to a subobject of the real piece
    // of geometry, then m_component_index records
    // the subobject index.
    // In all other cases, m_component_index is not set.
    m_component_index:     ON_COMPONENT_INDEX;

    // If this ON_ObjRef_IRefID is the first entry in the
    // ON_ObjRef.m__iref[] array, then it references a "real"
    // piece of geometry (not a nested instance reference).
    // If there is an evaluation parameter for the geometry,
    // it is saved in m_evp.
    // In all other cases, m_evp is not set.
    m_evp:                 ON_ObjRefEvaluationParameter;
}

ON_ObjRef :: struct {
    // In Rhino, this uuid is the persistent id of the CRhinoObject
    // that owns the referenced geometry.  The value of the
    // CRhinoObject id is stored on ON_3dmObjectAttributes.m_uuid.
    m_uuid:             ON_UUID;

    // The m_geometry and m_parent_geometry pointers are runtime values
    // that point to the object being referenced.  The destructor
    // ~ON_ObjRef  does not delete the objects these pointers reference.
    //
    // m_geometry_type records the type of geometry m_geometry points to.
    //
    // When the referenced object is a subobject, like a part of a brep
    // or mesh, m_geometry points to the subobject and m_parent_geometry
    // points to the parent object, like the brep or mesh.  In this case
    // m_component_index records the location of the subobject.
    //
    // Parts of instance reference objects:
    //   When the geometry belongs to an instance reference
    //   m_uuid is the id of the CRhinoInstanceObject,
    //   m_parent_geometry points to the instance definition
    //   geometry or a transformed proxy, and m_geometry points
    //   to the piece of m_geometry.  The m__iref[] array records
    //   the connection between the instance reference and the
    //   geometry the ON_ObjRef refers to.
    //
    //   For example if the ON_ObjRef is to an edge of a brep in
    //   and instance reference, m_uuid would be the Rhino id of
    //   the CRhinoInstanceObject, m_parent_geometry would point
    //   to a, possibly proxy, ON_Brep object, m_geometry would point
    //   to the ON_BrepEdge in the ON_Brep, m_component_index would
    //   record the edge's index in the ON_Brep.m_E[] array and
    //   m_geometry_type would be ON::curve_object or ON::brep_edge.
    //   m__iref->Last() would contain the information about the
    //   top level instance reference.  If the brep was at the bottom
    //   of a chain of instance references, m__iref[0] would be the
    //   reference that immediately used the brep.
    m_geometry:         *ON_Geometry;
    m_parent_geometry:  *ON_Geometry;
    m_component_index:  ON_COMPONENT_INDEX;
    m_geometry_type:    s32;

    // If m_runtime_sn > 0, then it is the value of a Rhino object's
    // CRhinoObject::m_runtime_object_serial_number field.
    // The serial number is used instead of the pointer to
    // prevent crashes in cases when the CRhinoObject is deleted
    // but an ON_ObjRef continues to reference the Rhino object.
    // The value of m_runtime_sn is not saved in archives because
    // it generally changes if you save and reload an archive.
    m_runtime_sn:       u32;

    // If m_point != ON_3dPoint::UnsetPoint, then the ObjRef resolves to
    // a point location.  The point location is saved here so the
    // information can persist if the object itself vanishes.
    m_point:            ON_3dPoint;

    // If the point was the result of some type of object snap, then
    // the object snap is recorded here.
    m_osnap_mode:       ON.osnap_mode;

    // If m_point != ON_3dPoint::UnsetPoint and m_evp.m_t_type != 0, then
    // m_evp records the records the m_geometry evaluation
    // parameters for the m_point.
    m_evp:              ON_ObjRefEvaluationParameter;

    // If m__iref[] is not empty, then m_uuid identifies
    // and instance reference (ON_InstanceRef/CRhinoInstanceObject)
    // and m__iref[] records the chain of instance references from
    // the base piece of geometry to the instance reference.
    // The top level instance reference is last in the list.
    m__iref:            ON_SimpleArray(ON_ObjRef_IRefID);

    // In simple (and the most common) cases where m_geometry
    // is managed by something outside of the ON_ObjRef class,
    // m__proxy_ref_count is nullptr.  In this case, the m__proxy1
    // and m__proxy2 pointers may still be used to store
    // references to a parent object.
    //
    // In cases when the referenced geometry pointed at by
    // m_geometry is not being managed by another class,
    // m_proxy1 and m_proxy2 are not nullptr and *m_proxy_ref_count
    // counts the number of ON_ObjRef classes that refer to m__proxy1/2.
    // When the last ON_ObjRef is destroyed, m__proxy1/2 is deleted.
    // When the ON_ObjRef is using reference counting and managing
    // m__proxy1/2, m_geometry points to some part of m__proxy1/2 and
    // m_geometry is destroyed when m__proxy1/2 is destroyed.
    //
    // The convention is to use m__proxy1 to store
    // ON_MeshVertex/Edge/FaceRefs and CRhinoPolyEdges
    // and m__proxy2 to store transformed copies if instance
    // definition geometry.
    m__proxy1:          *ON_Object;
    m__proxy2:          *ON_Object;
    m__proxy_ref_count: *s32;
}

ON_BumpFunction :: struct {
    m_point: ON_2dPoint; // center of bump
    m_type:  [2] s32; //  // = {0,0}  // 1 = linear, 5 = quintic, else linear;

    // numbers used in evaluation
    m_x0:    float64 = 0.0;
    m_y0:    float64 = 0.0;
    m_sx:    [2] float64; // = {0.0, 0.0} // 1/(support radius)
    m_sy:    [2] float64; // = {0.0, 0.0} // 1/(support radius)
    m_a:     float64 = 0.0; // evaluation coefficient
}

ON_OffsetSurfaceValue :: struct {
    m_s:        float64;
    m_t:        float64;
    m_distance: float64;
    m_radius:   float64;
    m_index:    s32 = -2147483647;
}

ON_OffsetSurfaceFunction :: struct {
    m_srf:                 *ON_Surface;

    m_domain:              [2] ON_Interval;

    m_bZeroSideDerivative: [4] bool; // S,E,N,W side

    m_offset_value:        ON_SimpleArray(ON_OffsetSurfaceValue);

    m_bumps:               ON_SimpleArray(ON_BumpFunction);

    m_bValid:              bool;
}

ON_OffsetSurface :: struct {
    #as using on_surfaceproxy: ON_SurfaceProxy;

    // If not nullptr, this points to the base surface
    m__pSrf:           *ON_Surface;
    m_offset_function: ON_OffsetSurfaceFunction;
}

ON_DetailView :: struct {
    #as using on_geometry: ON_Geometry;

    // m_page_per_model_ratio is the ratio of page length / model length
    // where both lengths are in the same unit system
    // (ex. 1/4" on page = 1' in model = 0.25/12 = 0.02083)
    // (    1mm on page  = 1m in model = 1/1000  = 0.001)
    // If m_page_per_model_ratio > 0.0, then the detail
    // is drawn using the specified scale.
    m_page_per_model_ratio: float64;

    // A view with ON_3dmView::m_view_type = ON::nested_view_type
    // This field is used for IO purposes only.  Runtime detail
    // view projection information is on CRhDetailViewObject.
    m_view:                 ON_3dmView;

    // 2d curve in page layout coordinates in mm
    // (0,0) = lower left corner of page
    m_boundary:             ON_NurbsCurve;
}

/*
Description:
ON_SerialNumberMap provides a way to map set of unique
serial number - uuid pairs to application defined values
so that adding, finding and removing serial numbers is
fast and efficient.  The class is designed to handle
several millions of unique serial numbers.  There are no
restrictions on what order numbers are added and removed.
The minimum memory footprint is less than 150KB and doesn't
increase until you have more than 8000 serial numbers.
It is possible to have an active serial number and an
inactive id.
*/
ON_SerialNumberMap :: struct {
    MAP_VALUE :: struct {
        m_u_type: ON__UINT32;
        m_u32:    ON__UINT32;
        m_u:      union {
            _u64: ON__UINT64;
            i64:  ON__INT64;
            ptr:  *void;
            ui:   [2] ON__UINT32;
            i:    [2] ON__INT32;
        };
    }

    SN_ELEMENT :: struct {
        ////////////////////////////////////////////////////////////
        //
        // ID
        //
        m_id:        ON_UUID;

        ////////////////////////////////////////////////////////////
        //
        // Serial number:
        //
        m_sn:        ON__UINT64;

        m_sn_active: ON__UINT8; // 1 = serial number is active
        m_id_active: ON__UINT8; // 1 = id is active
        m_reserved1: ON__UINT8;
        m_reserved2: ON__UINT8;

        m_id_crc32:  ON__UINT32; // id hash = IdCRC(id)

        m_next:      *SN_ELEMENT; // id hash table linked list

        ////////////////////////////////////////////////////////////
        //
        // User information:
        //
        //   ON_SerialNumberMap does not use the m_value field.
        //   When a new element is added, m_value is memset to
        //   zero.  Other than that, m_value is not changed by
        //   this class.  The location of m_value in memory,
        //   (&m_value) may change at any time.
        m_value:     MAP_VALUE;
    }

    m_maxsn:               ON__UINT64 = 0; // largest sn stored anywhere

    m_sn_count:            ON__UINT64 = 0; // total number of elements                       
    m_sn_purged:           ON__UINT64 = 0; // total number of purged elements

    m_snblk_list_capacity: ON__UINT64 = 0; // capacity of m_blk_list[]
    m_snblk_list_count:    ON__UINT64 = 0; // used elements in m_snblk_list[]
    ON_SN_BLOCK :: struct {}
    m_snblk_list:          **ON_SN_BLOCK = null;

    // If FindElementHelper() returns a non-null pointer
    // to an element, then m_e_blk points to the ON_SN_BLOCK
    // that contains the returned element.  In all other
    // situations the value in m_e_blk is undefined and
    // m_e_blk must not be dereferenced.
    m_e_blk:               *ON_SN_BLOCK = null;

    m_sn_block0:           *ON_SN_BLOCK;

    m_reserved1:           ON__UINT8 = 0;
    m_reserved2:           ON__UINT8 = 0;
    m_reserved3:           ON__UINT8 = 0;

    // When m_bHashTableIsValid == 1, the id hash table is valid.
    // Otherwise it is not built or out of date.
    // When m_bHashTableIsValid and nullptr != m_hash_table,
    // then m_hash1_count > 0 and m_hash_table[i][j] is a
    // linked list of elements whose id satisfies
    // i = e->m_id_crc32 % m_hash_block_count
    // j = (e->m_id_crc32/ID_HASH_BLOCK_CAPACITY) % ID_HASH_BLOCK_CAPACITY
    m_bHashTableIsValid:   ON__UINT8 = 0;

    m_hash_block_count:    ON__UINT32 = 0; // number of blocks in m_hash_tableX[] 
    m_hash_capacity:       ON__UINT64 = 0; // == m_hash_block_count*ID_HASH_BLOCK_CAPACITY

    // ideally, m_active_id_count/m_hash_capacity is close to 4
    m_hash_table_blocks:   ***SN_ELEMENT = null;

    m_active_id_count:     ON__UINT64 = 0; // number of active ids in the hash table
    m_inactive_id:         ON_UUID; // frequently an id is removed and
}

ON_CurveProxyHistory :: struct {
    m_curve_ref:              ON_ObjRef; // from ON_CurveProxy.m_real_curve
    m_bReversed:              bool; // from ON_CurveProxy.m_bReversed
    m_full_real_curve_domain: ON_Interval; // from ON_CurveProxy.m_real_curve.Domain()
    m_sub_real_curve_domain:  ON_Interval; // from ON_CurveProxy.m_real_curve_domain
    m_proxy_curve_domain:     ON_Interval; // from ON_CurveProxy.m_this_domain

    // If these are empty intervals, they are from old files. Ignore them.
    m_segment_edge_domain:    ON_Interval;
    m_segment_trim_domain:    ON_Interval;

    m_reserved:               [32] ON__UINT8;
}

ON_PolyEdgeHistory :: struct {
    m_segment:         ON_ClassArray(ON_CurveProxyHistory);
    m_t:               ON_SimpleArray(float64);
    m_evaluation_mode: s32;

    m_reserved:        [64] ON__UINT8;
}

ON_HistoryRecord :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    // CRhinoCommand::CommandId() value of the command that
    // created this history record.  Each time the command
    // is run, it can create a history record.
    m_command_id:           ON_UUID;

    // A YYYYMMDDn version number that gets updated when
    // a command changes.  This version is checked so that
    // new versions of a command's ReplayHistory don't
    // attempt to use information saved in old files.
    m_version:              s32 = 0;

    RECORD_TYPE :: enum u32 {
        history_parameters :: 0;
        feature_parameters :: 1;
    }

    m_record_type:          RECORD_TYPE = .history_parameters;

    // List of object id values of antecedent objects that
    // are referenced in the list of input events in m_value[].
    // These were the command's "input" objects.
    m_antecedents:          ON_UuidList;

    // List of object id values of descendant objects that
    // were created.  These were the command's "output" objects
    m_descendants:          ON_UuidList;

    ON_Value :: struct {}
    // Information needed to update the descendant objects
    // when an antecedent object is modified.
    m_value:                ON_SimpleArray(*ON_Value);

    m_bValuesSorted         := true;
    m_bCopyOnReplaceObject  := false;
}

ON_Annotation :: struct {
    #as using on_geometry: ON_Geometry;

    ON_OBSOLETE_V2_Annotation :: struct {}

    m_annotation_type:                        ON.AnnotationType = .Unset;
    m_allow_text_scaling                      := true;
    m_reserved2:                              u8 = 0;
    m_reserved3:                              u8 = 0;
    m_reserved4:                              u32 = 0;
    m_dimstyle_id:                            ON_UUID;
    m_plane:                                  ON_Plane; // plane origin used for alignment point
    m_horizontal_direction:                   ON_2dVector; // direction used as horizontal to draw annotation, especially text
    m_text:                                   *ON_TextContent = null; // Deleted by ~ON_Annotation()

    // Pointer to an override dimstyle when style properties are overridden for this annotation object
    // If this pointer is null, use the style with id = m_dimstyle_id
    // Copy and delete this dimstyle (not this pointer) with the object.
    // This dimstyle should never be one held in a dimstyle table.  It is owned by this object
    m_override_dimstyle:                      *ON_DimStyle = null;
    m_parent_dimstyle_content_version_number: ON__UINT64 = 0;

    m_bbox_cache:                             ON_BoundingBoxCache;
    #place on_geometry; on_annotation_vtable: *ON_Annotation_VTable;
}
ON_Annotation_VTable :: struct #type_info_none {
    using on_geometry: ON_Geometry_VTable;
    GetAnnotationBoundingBox: (this: *ON_Annotation, vp: *ON_Viewport, dimstyle: *ON_DimStyle, dimscale: float64, boxmin: *float64, boxmax: *float64, bGrow := false) -> bool #cpp_method;

    GetTextXform: (this: *ON_Annotation, vp: *ON_Viewport, dimstyle: *ON_DimStyle, dimscale: float64, text_xform_out: *ON_Xform) -> bool #cpp_method;

    TextRotationRadians: (this: *ON_Annotation) -> float64 #cpp_method;
    SetTextRotationRadians: (this: *ON_Annotation, rotation: float64) -> void #cpp_method;

    TextRotationDegrees: (this: *ON_Annotation) -> float64 #cpp_method;
    SetTextRotationDegrees: (this: *ON_Annotation, rotation: float64) -> void #cpp_method;
}

ON_Annotation_GetAnnotationBoundingBox :: inline (this: *ON_Annotation, vp: *ON_Viewport, dimstyle: *ON_DimStyle, dimscale: float64, boxmin: *float64, boxmax: *float64, bGrow := false) -> bool { return this.on_annotation_vtable.GetAnnotationBoundingBox(this, vp, dimstyle, dimscale, boxmin, boxmax, bGrow); }

ON_Annotation_GetTextXform :: inline (this: *ON_Annotation, vp: *ON_Viewport, dimstyle: *ON_DimStyle, dimscale: float64, text_xform_out: *ON_Xform) -> bool { return this.on_annotation_vtable.GetTextXform(this, vp, dimstyle, dimscale, text_xform_out); }

ON_Annotation_TextRotationRadians :: inline (this: *ON_Annotation) -> float64 { return this.on_annotation_vtable.TextRotationRadians(this); }
ON_Annotation_SetTextRotationRadians :: inline (this: *ON_Annotation, rotation: float64) { this.on_annotation_vtable.SetTextRotationRadians(this, rotation); }

ON_Annotation_TextRotationDegrees :: inline (this: *ON_Annotation) -> float64 { return this.on_annotation_vtable.TextRotationDegrees(this); }
ON_Annotation_SetTextRotationDegrees :: inline (this: *ON_Annotation, rotation: float64) { this.on_annotation_vtable.SetTextRotationDegrees(this, rotation); }

vtable :: (obj: *ON_Annotation) -> *ON_Annotation_VTable { return obj.on_annotation_vtable; }


/*
A simple dot with text that doesn't rotate with the world axes
*/
ON_TextDot :: struct {
    #as using on_geometry: ON_Geometry;

    ON_OBSOLETE_V2_TextDot :: struct {}

    // Location of the center of the text dot.
    m_center_point:     ON_3dPoint;

    m_primary_text:     ON_wString; // default is empty

    m_secondary_text:   ON_wString; // default is empty

    m_font_face:        ON_wString; // Empty means ON_TextDot::DefaultFontFace

    m_display_bits:     u32 = 0;

    m_height_in_points: s32;
}

ON_Text :: struct {
    #as using on_annotation: ON_Annotation;

    ON_OBSOLETE_V5_TextObject :: struct {}
}

ON_Leader :: struct {
    #as using on_annotation: ON_Annotation;

    ON_OBSOLETE_V5_Leader :: struct {}

    m_points:     ON_2dPointArray;

    m_curve:      *ON_NurbsCurve = null; // Deleted by ~ON_Leader()
    m_text_point: ON_2dPoint;
}

ON_Dimension :: struct {
    #as using on_annotation: ON_Annotation;

    /// <summary>
    /// OBSOLETE enum do not use.
    /// </summary>
    ForceArrow :: enum u32 {
        Auto    :: 0;

        Inside  :: 1;

        Outside :: 2;
    }

    /// <summary>
    /// OBSOLETE enum do not use.
    /// </summary>
    ForceText :: enum u32 {
        Auto      :: 0;

        Inside    :: 1;

        Right     :: 2;

        Left      :: 3;

        HintRight :: 4;

        HintLeft  :: 5;
    }

    m_user_text:              ON_wString; // If user overridden, or "<>" to use default
    m_reserved:               float64 = 0.0;
    m_plain_user_text:        ON_wString;

    m_use_default_text_point  := true;
    m_user_text_point:        ON_2dPoint; // Text point if default isn't used

    m_flip_arrow_1            := false;
    m_flip_arrow_2            := false;
    m_text_outside            := false;
    m_reserved98:             u32 = 0;
    m_reserved99:             u32 = 0;

    // UUID of detail if dimension is in page space measuring model space geometry
    m_detail_measured:        ON_UUID;

    // Conversion from model space size to paper space size if dimension is in page space measuring model space geometry
    m_distance_scale:         float64 = 1.0;
    #place on_annotation; on_dimension_vtable: *ON_Dimension_VTable;
}
ON_Dimension_VTable :: struct #type_info_none {
    using on_annotation: ON_Annotation_VTable;
    DefaultTextPoint: (this: *ON_Dimension) -> ON_2dPoint #cpp_method #cpp_return_type_is_non_pod;
    UseDefaultTextPoint: (this: *ON_Dimension) -> bool #cpp_method;
    SetUseDefaultTextPoint: (this: *ON_Dimension, usedefault: bool) -> void #cpp_method;

    Measurement: (this: *ON_Dimension) -> float64 #cpp_method;

    GetTextRect: (this: *ON_Dimension, text_rect: *[4] ON_3dPoint) -> bool #cpp_method;

    UpdateDimensionText: (this: *ON_Dimension, units_in: ON.LengthUnitSystem, dimstyle: *ON_DimStyle) -> bool #cpp_method;

    GetDistanceDisplayText: (this: *ON_Dimension, units_in: ON.LengthUnitSystem, dimstyle: *ON_DimStyle, displaytext: *ON_wString) -> bool #cpp_method;
}

ON_Dimension_DefaultTextPoint :: inline (this: *ON_Dimension) -> ON_2dPoint { return this.on_dimension_vtable.DefaultTextPoint(this); }
ON_Dimension_UseDefaultTextPoint :: inline (this: *ON_Dimension) -> bool { return this.on_dimension_vtable.UseDefaultTextPoint(this); }
ON_Dimension_SetUseDefaultTextPoint :: inline (this: *ON_Dimension, usedefault: bool) { this.on_dimension_vtable.SetUseDefaultTextPoint(this, usedefault); }

ON_Dimension_Measurement :: inline (this: *ON_Dimension) -> float64 { return this.on_dimension_vtable.Measurement(this); }

ON_Dimension_GetTextRect :: inline (this: *ON_Dimension, text_rect: *[4] ON_3dPoint) -> bool { return this.on_dimension_vtable.GetTextRect(this, text_rect); }

ON_Dimension_UpdateDimensionText :: inline (this: *ON_Dimension, units_in: ON.LengthUnitSystem, dimstyle: *ON_DimStyle) -> bool { return this.on_dimension_vtable.UpdateDimensionText(this, units_in, dimstyle); }

ON_Dimension_GetDistanceDisplayText :: inline (this: *ON_Dimension, units_in: ON.LengthUnitSystem, dimstyle: *ON_DimStyle, displaytext: *ON_wString) -> bool { return this.on_dimension_vtable.GetDistanceDisplayText(this, units_in, dimstyle, displaytext); }

vtable :: (obj: *ON_Dimension) -> *ON_Dimension_VTable { return obj.on_dimension_vtable; }


ON_DimLinear :: struct {
    #as using on_dimension: ON_Dimension;

    ON_OBSOLETE_V5_DimLinear :: struct {}

    m_def_pt_2:   ON_2dPoint;
    m_dimline_pt: ON_2dPoint;
}

//---------------------------------------------------------------------
ON_DimAngular :: struct {
    #as using on_dimension: ON_Dimension;

    ON_OBSOLETE_V5_DimAngular :: struct {}

    // Center point is at plane origin (0,0)
    m_vec_1:        ON_2dVector;
    m_vec_2:        ON_2dVector;
    m_ext_offset_1: float64 = 0.0; // distance along m_vec_1 to start extension line 1
    m_ext_offset_2: float64 = 0.0; // distance along m_vec_2 to start extension line 2
    m_dimline_pt:   ON_2dPoint = ON_2dPoint.{1.0, 1.0}; // point on interior of dimension arc
}

//---------------------------------------------------------------------
ON_DimRadial :: struct {
    #as using on_dimension: ON_Dimension;

    ON_OBSOLETE_V5_DimRadial :: struct {}

    m_radius_pt:  ON_2dPoint;
    m_dimline_pt: ON_2dPoint;
}

//---------------------------------------------------------------------
//            + dimpt
//            |
//            |
//            |
//            + kinkpt2
//             \
//              \  kinkoffset2
//               \
//                + kinkpt1
//                |
//                |  kinkoffset1
//                |
//                +  ldrpt
//                1
//                2
//                3
ON_DimOrdinate :: struct {
    #as using on_dimension: ON_Dimension;

    /// <summary>
    /// Ordinate dimension measures x or y direction
    /// </summary>
    MeasuredDirection :: enum u8 {
        Unset :: 0;

        Xaxis :: 1;

        Yaxis :: 2;
    }

    ON_OBSOLETE_V5_DimOrdinate :: struct {}

    // Plane origin is base for measurements
    // Measurements are from plane origin to dimension point
    // in either x or y axis direction
    m_direction:     MeasuredDirection = .Unset;

    m_def_pt:        ON_2dPoint;
    m_ldr_pt:        ON_2dPoint;

    m_kink_offset_1: float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // measures from defpt1 toward defpt2 to kink1
    m_kink_offset_2: float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0; // measures from kink1 toward defpt2 to kink2
}

//---------------------------------------------------------------------
ON_Centermark :: struct {
    #as using on_dimension: ON_Dimension;

    m_radius: float64 = 0.0;
}

ON_NumberFormatter :: struct {
    __empty_struct_padding: u8; // C++ makes empty structs have length 1
}

ON_AerialPhotoImageFrustum :: struct {
    // The frustum unit system must be set. It is common
    // for the frustum unit system to be millimeters.
    m_unit_system: ON_UnitSystem;

    // The frustum's apex height must be positive.
    // It is common for the image frustum height
    // to be a camera's focal length.
    m_height:      float64;

    // The corners must be the vertices of a 3 or 4 sided
    // convex region and must have counter-clockwise order
    // in the 2d plane.  It is common for the corners to be
    // a rectangle (lower left, lower right, upper right,
    // upper left) and for the rectangle to be symmetric
    // about (0,0).  However, when the image has been cropped,
    // the frustum can be skew.  The frustum's apex point is
    // always directly above (0,0).
    m_corners:     [4] ON_2dPoint;
}

ON_AerialPhotoCameraPosition :: struct {
    m_status:                     u8;
    m_reserved1:                  [3] u8;
    m_reserved2:                  u32;

    m_unit_system:                ON_UnitSystem;

    m_location:                   ON_3dPoint;

    m_orientation_angles_degrees: ON_3dVector;
    m_orientation_angles_radians: ON_3dVector;

    m_orientation_direction:      ON_3dVector;
    m_orientation_up:             ON_3dVector;
    m_orientation_right:          ON_3dVector;

    m_orientation_rotation:       ON_Xform;
}

ON_AerialPhotoImage :: struct {
    m_name:                ON_wString;

    m_id:                  ON_UUID;

    m_camera_position:     ON_AerialPhotoCameraPosition;

    m_image_frustum:       ON_AerialPhotoImageFrustum;

    m_image_file_name:     ON_wString;

    m_image_width_pixels:  s32;
    m_image_height_pixels: s32;
}

ON_ArchivableDictionary :: struct {
    vtable: *ON_ArchivableDictionary_VTable;
    ON_ArchivableDictionaryPrivate :: struct {}
    m_private:  *ON_ArchivableDictionaryPrivate = null;
    m_reserved: ON__UINT_PTR = 0;
}
ON_ArchivableDictionary_VTable :: struct #type_info_none {
    Destructor: (this: *ON_ArchivableDictionary, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Write: (this: *ON_ArchivableDictionary, binary_archive: *ON_BinaryArchive) -> bool #cpp_method;
    Read: (this: *ON_ArchivableDictionary, binary_archive: *ON_BinaryArchive) -> bool #cpp_method;
}

ON_ArchivableDictionary_Destructor :: inline (this: *ON_ArchivableDictionary, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_ArchivableDictionary_Write :: inline (this: *ON_ArchivableDictionary, binary_archive: *ON_BinaryArchive) -> bool { return this.vtable.Write(this, binary_archive); }
ON_ArchivableDictionary_Read :: inline (this: *ON_ArchivableDictionary, binary_archive: *ON_BinaryArchive) -> bool { return this.vtable.Read(this, binary_archive); }

vtable :: (obj: *ON_ArchivableDictionary) -> *ON_ArchivableDictionary_VTable { return obj.vtable; }


ON_Dithering :: struct {
    vtable: *ON_Dithering_VTable;
    Methods :: enum s32 {
        SimpleNoise    :: 0;
        FloydSteinberg :: 1;
    }

    CImpl :: struct {}
    m_impl: *CImpl;
}
ON_Dithering_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Dithering, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_Dithering, dit: *ON_Dithering) -> *ON_Dithering #cpp_method;

    //operator==: (this: *ON_Dithering, dit: *ON_Dithering) -> bool #cpp_method;
    operator== :: (this: ON_Dithering, dit: ON_Dithering) -> bool  {
        push_context context {
        return operator==(*this, *dit);
        }
    }
    //operator!=: (this: *ON_Dithering, dit: *ON_Dithering) -> bool #cpp_method;
    operator!= :: (this: ON_Dithering, dit: ON_Dithering) -> bool  {
        push_context context {
        return operator!=(*this, *dit);
        }
    }

    Enabled: (this: *ON_Dithering) -> bool #cpp_method;

    SetEnabled: (this: *ON_Dithering, b: bool) -> void #cpp_method;

    Method: (this: *ON_Dithering) -> ON_Dithering.Methods #cpp_method;

    SetMethod: (this: *ON_Dithering, m: ON_Dithering.Methods) -> void #cpp_method;

    DataCRC: (this: *ON_Dithering, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;

    EVF: (this: *ON_Dithering, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_Dithering, unknown0: *ON_Dithering) -> void #cpp_method;
}

ON_Dithering_Destructor :: inline (this: *ON_Dithering, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_Dithering_operator_assign :: inline (this: *ON_Dithering, dit: *ON_Dithering) -> *ON_Dithering { return this.vtable.operator_assign(this, dit); }

operator== :: inline (this: *ON_Dithering, dit: *ON_Dithering) -> bool { return this.vtable.operator==(this, dit); }
operator!= :: inline (this: *ON_Dithering, dit: *ON_Dithering) -> bool { return this.vtable.operator!=(this, dit); }

ON_Dithering_Enabled :: inline (this: *ON_Dithering) -> bool { return this.vtable.Enabled(this); }

ON_Dithering_SetEnabled :: inline (this: *ON_Dithering, b: bool) { this.vtable.SetEnabled(this, b); }

ON_Dithering_Method :: inline (this: *ON_Dithering) -> ON_Dithering.Methods { return this.vtable.Method(this); }

ON_Dithering_SetMethod :: inline (this: *ON_Dithering, m: ON_Dithering.Methods) { this.vtable.SetMethod(this, m); }

ON_Dithering_DataCRC :: inline (this: *ON_Dithering, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

ON_Dithering_EVF :: inline (this: *ON_Dithering, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_Dithering_OnInternalXmlChanged :: inline (this: *ON_Dithering, unknown0: *ON_Dithering) { this.vtable.OnInternalXmlChanged(this, unknown0); }

vtable :: (obj: *ON_Dithering) -> *ON_Dithering_VTable { return obj.vtable; }


ON_EmbeddedFile :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    CImpl :: struct {}
    m_impl: *CImpl;
    #place on_modelcomponent; on_embeddedfile_vtable: *ON_EmbeddedFile_VTable;
}
ON_EmbeddedFile_VTable :: struct #type_info_none {
    using on_object: ON_Object_VTable;
    operator_assign: (this: *ON_EmbeddedFile, unknown0: *ON_EmbeddedFile) -> *ON_EmbeddedFile #cpp_method;

    Filename: (this: *ON_EmbeddedFile) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    SetFilename: (this: *ON_EmbeddedFile, filename: *s16) -> void #cpp_method;

    LoadFromFile: (this: *ON_EmbeddedFile, filename: *s16) -> bool #cpp_method;

    SaveToFile: (this: *ON_EmbeddedFile, filename: *s16) -> bool #cpp_method;

    LoadFromBuffer: (this: *ON_EmbeddedFile, buf: *ON_Buffer) -> bool #cpp_method;

    SaveToBuffer: (this: *ON_EmbeddedFile, buf: *ON_Buffer) -> bool #cpp_method;

    Length: (this: *ON_EmbeddedFile) -> u64 #cpp_method;

    CompressedLength: (this: *ON_EmbeddedFile) -> u64 #cpp_method;

    Clear: (this: *ON_EmbeddedFile) -> bool #cpp_method;

    EVF: (this: *ON_EmbeddedFile, func: *s16, data: *void) -> *void #cpp_method;
}

ON_EmbeddedFile_operator_assign :: inline (this: *ON_EmbeddedFile, unknown0: *ON_EmbeddedFile) -> *ON_EmbeddedFile { return this.on_embeddedfile_vtable.operator_assign(this, unknown0); }

ON_EmbeddedFile_Filename :: inline (this: *ON_EmbeddedFile) -> ON_wString { return this.on_embeddedfile_vtable.Filename(this); }

ON_EmbeddedFile_SetFilename :: inline (this: *ON_EmbeddedFile, filename: *s16) { this.on_embeddedfile_vtable.SetFilename(this, filename); }

ON_EmbeddedFile_LoadFromFile :: inline (this: *ON_EmbeddedFile, filename: *s16) -> bool { return this.on_embeddedfile_vtable.LoadFromFile(this, filename); }

ON_EmbeddedFile_SaveToFile :: inline (this: *ON_EmbeddedFile, filename: *s16) -> bool { return this.on_embeddedfile_vtable.SaveToFile(this, filename); }

ON_EmbeddedFile_LoadFromBuffer :: inline (this: *ON_EmbeddedFile, buf: *ON_Buffer) -> bool { return this.on_embeddedfile_vtable.LoadFromBuffer(this, buf); }

ON_EmbeddedFile_SaveToBuffer :: inline (this: *ON_EmbeddedFile, buf: *ON_Buffer) -> bool { return this.on_embeddedfile_vtable.SaveToBuffer(this, buf); }

ON_EmbeddedFile_Length :: inline (this: *ON_EmbeddedFile) -> u64 { return this.on_embeddedfile_vtable.Length(this); }

ON_EmbeddedFile_CompressedLength :: inline (this: *ON_EmbeddedFile) -> u64 { return this.on_embeddedfile_vtable.CompressedLength(this); }

ON_EmbeddedFile_Clear :: inline (this: *ON_EmbeddedFile) -> bool { return this.on_embeddedfile_vtable.Clear(this); }

ON_EmbeddedFile_EVF :: inline (this: *ON_EmbeddedFile, func: *s16, data: *void) -> *void { return this.on_embeddedfile_vtable.EVF(this, func, data); }

vtable :: (obj: *ON_EmbeddedFile) -> *ON_EmbeddedFile_VTable { return obj.on_embeddedfile_vtable; }


ON_GroundPlane :: struct {
    vtable: *ON_GroundPlane_VTable;
    CImpl :: struct {}
    _impl: *CImpl;
}
ON_GroundPlane_VTable :: struct #type_info_none {
    Destructor: (this: *ON_GroundPlane, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_GroundPlane, gp: *ON_GroundPlane) -> *ON_GroundPlane #cpp_method;

    //operator==: (this: *ON_GroundPlane, gp: *ON_GroundPlane) -> bool #cpp_method;
    operator== :: (this: ON_GroundPlane, gp: ON_GroundPlane) -> bool  {
        push_context context {
        return operator==(*this, *gp);
        }
    }
    //operator!=: (this: *ON_GroundPlane, gp: *ON_GroundPlane) -> bool #cpp_method;
    operator!= :: (this: ON_GroundPlane, gp: ON_GroundPlane) -> bool  {
        push_context context {
        return operator!=(*this, *gp);
        }
    }

    Enabled: (this: *ON_GroundPlane) -> bool #cpp_method;

    ShowUnderside: (this: *ON_GroundPlane) -> bool #cpp_method;

    Altitude: (this: *ON_GroundPlane) -> float64 #cpp_method;

    AutoAltitude: (this: *ON_GroundPlane) -> bool #cpp_method;

    ShadowOnly: (this: *ON_GroundPlane) -> bool #cpp_method;

    MaterialInstanceId: (this: *ON_GroundPlane) -> ON_UUID #cpp_method;

    TextureOffset: (this: *ON_GroundPlane) -> ON_2dVector #cpp_method #cpp_return_type_is_non_pod;

    TextureOffsetLocked: (this: *ON_GroundPlane) -> bool #cpp_method;

    TextureSize: (this: *ON_GroundPlane) -> ON_2dVector #cpp_method #cpp_return_type_is_non_pod;

    TextureSizeLocked: (this: *ON_GroundPlane) -> bool #cpp_method;

    TextureRotation: (this: *ON_GroundPlane) -> float64 #cpp_method;

    SetEnabled: (this: *ON_GroundPlane, on: bool) -> void #cpp_method;

    SetShowUnderside: (this: *ON_GroundPlane, on: bool) -> void #cpp_method;

    SetAltitude: (this: *ON_GroundPlane, altitude: float64) -> void #cpp_method;

    SetAutoAltitude: (this: *ON_GroundPlane, on: bool) -> void #cpp_method;

    SetShadowOnly: (this: *ON_GroundPlane, on: bool) -> void #cpp_method;

    SetMaterialInstanceId: (this: *ON_GroundPlane, uuid: *ON_UUID) -> void #cpp_method;

    SetTextureOffset: (this: *ON_GroundPlane, vec: *ON_2dVector) -> void #cpp_method;

    SetTextureOffsetLocked: (this: *ON_GroundPlane, locked: bool) -> void #cpp_method;

    SetTextureSize: (this: *ON_GroundPlane, vec: *ON_2dVector) -> void #cpp_method;

    SetTextureSizeLocked: (this: *ON_GroundPlane, locked: bool) -> void #cpp_method;

    SetTextureRotation: (this: *ON_GroundPlane, angle: float64) -> void #cpp_method;

    PopulateMaterial: (this: *ON_GroundPlane, mat: *ON_Material) -> bool #cpp_method;

    EVF: (this: *ON_GroundPlane, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_GroundPlane, unknown0: *ON_GroundPlane) -> void #cpp_method;
}

ON_GroundPlane_Destructor :: inline (this: *ON_GroundPlane, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_GroundPlane_operator_assign :: inline (this: *ON_GroundPlane, gp: *ON_GroundPlane) -> *ON_GroundPlane { return this.vtable.operator_assign(this, gp); }

operator== :: inline (this: *ON_GroundPlane, gp: *ON_GroundPlane) -> bool { return this.vtable.operator==(this, gp); }
operator!= :: inline (this: *ON_GroundPlane, gp: *ON_GroundPlane) -> bool { return this.vtable.operator!=(this, gp); }

ON_GroundPlane_Enabled :: inline (this: *ON_GroundPlane) -> bool { return this.vtable.Enabled(this); }

ON_GroundPlane_ShowUnderside :: inline (this: *ON_GroundPlane) -> bool { return this.vtable.ShowUnderside(this); }

ON_GroundPlane_Altitude :: inline (this: *ON_GroundPlane) -> float64 { return this.vtable.Altitude(this); }

ON_GroundPlane_AutoAltitude :: inline (this: *ON_GroundPlane) -> bool { return this.vtable.AutoAltitude(this); }

ON_GroundPlane_ShadowOnly :: inline (this: *ON_GroundPlane) -> bool { return this.vtable.ShadowOnly(this); }

ON_GroundPlane_MaterialInstanceId :: inline (this: *ON_GroundPlane) -> ON_UUID { return this.vtable.MaterialInstanceId(this); }

ON_GroundPlane_TextureOffset :: inline (this: *ON_GroundPlane) -> ON_2dVector { return this.vtable.TextureOffset(this); }

ON_GroundPlane_TextureOffsetLocked :: inline (this: *ON_GroundPlane) -> bool { return this.vtable.TextureOffsetLocked(this); }

ON_GroundPlane_TextureSize :: inline (this: *ON_GroundPlane) -> ON_2dVector { return this.vtable.TextureSize(this); }

ON_GroundPlane_TextureSizeLocked :: inline (this: *ON_GroundPlane) -> bool { return this.vtable.TextureSizeLocked(this); }

ON_GroundPlane_TextureRotation :: inline (this: *ON_GroundPlane) -> float64 { return this.vtable.TextureRotation(this); }

ON_GroundPlane_SetEnabled :: inline (this: *ON_GroundPlane, on: bool) { this.vtable.SetEnabled(this, on); }

ON_GroundPlane_SetShowUnderside :: inline (this: *ON_GroundPlane, on: bool) { this.vtable.SetShowUnderside(this, on); }

ON_GroundPlane_SetAltitude :: inline (this: *ON_GroundPlane, altitude: float64) { this.vtable.SetAltitude(this, altitude); }

ON_GroundPlane_SetAutoAltitude :: inline (this: *ON_GroundPlane, on: bool) { this.vtable.SetAutoAltitude(this, on); }

ON_GroundPlane_SetShadowOnly :: inline (this: *ON_GroundPlane, on: bool) { this.vtable.SetShadowOnly(this, on); }

ON_GroundPlane_SetMaterialInstanceId :: inline (this: *ON_GroundPlane, uuid: *ON_UUID) { this.vtable.SetMaterialInstanceId(this, uuid); }

ON_GroundPlane_SetTextureOffset :: inline (this: *ON_GroundPlane, vec: *ON_2dVector) { this.vtable.SetTextureOffset(this, vec); }

ON_GroundPlane_SetTextureOffsetLocked :: inline (this: *ON_GroundPlane, locked: bool) { this.vtable.SetTextureOffsetLocked(this, locked); }

ON_GroundPlane_SetTextureSize :: inline (this: *ON_GroundPlane, vec: *ON_2dVector) { this.vtable.SetTextureSize(this, vec); }

ON_GroundPlane_SetTextureSizeLocked :: inline (this: *ON_GroundPlane, locked: bool) { this.vtable.SetTextureSizeLocked(this, locked); }

ON_GroundPlane_SetTextureRotation :: inline (this: *ON_GroundPlane, angle: float64) { this.vtable.SetTextureRotation(this, angle); }

ON_GroundPlane_PopulateMaterial :: inline (this: *ON_GroundPlane, mat: *ON_Material) -> bool { return this.vtable.PopulateMaterial(this, mat); }

ON_GroundPlane_EVF :: inline (this: *ON_GroundPlane, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_GroundPlane_OnInternalXmlChanged :: inline (this: *ON_GroundPlane, unknown0: *ON_GroundPlane) { this.vtable.OnInternalXmlChanged(this, unknown0); }

vtable :: (obj: *ON_GroundPlane) -> *ON_GroundPlane_VTable { return obj.vtable; }


ON_LinearWorkflow :: struct {
    vtable: *ON_LinearWorkflow_VTable;
    CImpl :: struct {}
    _impl: *CImpl;
}
ON_LinearWorkflow_VTable :: struct #type_info_none {
    Destructor: (this: *ON_LinearWorkflow, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_LinearWorkflow, lw: *ON_LinearWorkflow) -> *ON_LinearWorkflow #cpp_method;

    //operator==: (this: *ON_LinearWorkflow, lw: *ON_LinearWorkflow) -> bool #cpp_method;
    operator== :: (this: ON_LinearWorkflow, lw: ON_LinearWorkflow) -> bool  {
        push_context context {
        return operator==(*this, *lw);
        }
    }
    //operator!=: (this: *ON_LinearWorkflow, lw: *ON_LinearWorkflow) -> bool #cpp_method;
    operator!= :: (this: ON_LinearWorkflow, lw: ON_LinearWorkflow) -> bool  {
        push_context context {
        return operator!=(*this, *lw);
        }
    }

    PreProcessTexturesOn: (this: *ON_LinearWorkflow) -> bool #cpp_method;

    SetPreProcessTexturesOn: (this: *ON_LinearWorkflow, b: bool) -> void #cpp_method;

    PreProcessColorsOn: (this: *ON_LinearWorkflow) -> bool #cpp_method;

    SetPreProcessColorsOn: (this: *ON_LinearWorkflow, b: bool) -> void #cpp_method;

    PostProcessFrameBufferOn: (this: *ON_LinearWorkflow) -> bool #cpp_method;

    SetPostProcessFrameBufferOn: (this: *ON_LinearWorkflow, on: bool) -> void #cpp_method;

    PreProcessGammaOn: (this: *ON_LinearWorkflow) -> bool #cpp_method;

    SetPreProcessGammaOn: (this: *ON_LinearWorkflow, on: bool) -> void #cpp_method;

    PreProcessGamma: (this: *ON_LinearWorkflow) -> float #cpp_method;

    SetPreProcessGamma: (this: *ON_LinearWorkflow, gamma: float) -> void #cpp_method;

    PostProcessGammaOn: (this: *ON_LinearWorkflow) -> bool #cpp_method;

    SetPostProcessGammaOn: (this: *ON_LinearWorkflow, on: bool) -> void #cpp_method;

    PostProcessGamma: (this: *ON_LinearWorkflow) -> float #cpp_method;

    SetPostProcessGamma: (this: *ON_LinearWorkflow, gamma: float) -> void #cpp_method;

    ApplyPreProcessGamma: (this: *ON_LinearWorkflow, col: *ON_4fColor, for_texture: bool) -> void #cpp_method;

    DataCRC: (this: *ON_LinearWorkflow, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;

    EVF: (this: *ON_LinearWorkflow, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_LinearWorkflow, unknown0: *ON_LinearWorkflow) -> void #cpp_method;
}

ON_LinearWorkflow_Destructor :: inline (this: *ON_LinearWorkflow, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_LinearWorkflow_operator_assign :: inline (this: *ON_LinearWorkflow, lw: *ON_LinearWorkflow) -> *ON_LinearWorkflow { return this.vtable.operator_assign(this, lw); }

operator== :: inline (this: *ON_LinearWorkflow, lw: *ON_LinearWorkflow) -> bool { return this.vtable.operator==(this, lw); }
operator!= :: inline (this: *ON_LinearWorkflow, lw: *ON_LinearWorkflow) -> bool { return this.vtable.operator!=(this, lw); }

ON_LinearWorkflow_PreProcessTexturesOn :: inline (this: *ON_LinearWorkflow) -> bool { return this.vtable.PreProcessTexturesOn(this); }

ON_LinearWorkflow_SetPreProcessTexturesOn :: inline (this: *ON_LinearWorkflow, b: bool) { this.vtable.SetPreProcessTexturesOn(this, b); }

ON_LinearWorkflow_PreProcessColorsOn :: inline (this: *ON_LinearWorkflow) -> bool { return this.vtable.PreProcessColorsOn(this); }

ON_LinearWorkflow_SetPreProcessColorsOn :: inline (this: *ON_LinearWorkflow, b: bool) { this.vtable.SetPreProcessColorsOn(this, b); }

ON_LinearWorkflow_PostProcessFrameBufferOn :: inline (this: *ON_LinearWorkflow) -> bool { return this.vtable.PostProcessFrameBufferOn(this); }

ON_LinearWorkflow_SetPostProcessFrameBufferOn :: inline (this: *ON_LinearWorkflow, on: bool) { this.vtable.SetPostProcessFrameBufferOn(this, on); }

ON_LinearWorkflow_PreProcessGammaOn :: inline (this: *ON_LinearWorkflow) -> bool { return this.vtable.PreProcessGammaOn(this); }

ON_LinearWorkflow_SetPreProcessGammaOn :: inline (this: *ON_LinearWorkflow, on: bool) { this.vtable.SetPreProcessGammaOn(this, on); }

ON_LinearWorkflow_PreProcessGamma :: inline (this: *ON_LinearWorkflow) -> float { return this.vtable.PreProcessGamma(this); }

ON_LinearWorkflow_SetPreProcessGamma :: inline (this: *ON_LinearWorkflow, gamma: float) { this.vtable.SetPreProcessGamma(this, gamma); }

ON_LinearWorkflow_PostProcessGammaOn :: inline (this: *ON_LinearWorkflow) -> bool { return this.vtable.PostProcessGammaOn(this); }

ON_LinearWorkflow_SetPostProcessGammaOn :: inline (this: *ON_LinearWorkflow, on: bool) { this.vtable.SetPostProcessGammaOn(this, on); }

ON_LinearWorkflow_PostProcessGamma :: inline (this: *ON_LinearWorkflow) -> float { return this.vtable.PostProcessGamma(this); }

ON_LinearWorkflow_SetPostProcessGamma :: inline (this: *ON_LinearWorkflow, gamma: float) { this.vtable.SetPostProcessGamma(this, gamma); }

ON_LinearWorkflow_ApplyPreProcessGamma :: inline (this: *ON_LinearWorkflow, col: *ON_4fColor, for_texture: bool) { this.vtable.ApplyPreProcessGamma(this, col, for_texture); }

ON_LinearWorkflow_DataCRC :: inline (this: *ON_LinearWorkflow, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

ON_LinearWorkflow_EVF :: inline (this: *ON_LinearWorkflow, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_LinearWorkflow_OnInternalXmlChanged :: inline (this: *ON_LinearWorkflow, unknown0: *ON_LinearWorkflow) { this.vtable.OnInternalXmlChanged(this, unknown0); }

vtable :: (obj: *ON_LinearWorkflow) -> *ON_LinearWorkflow_VTable { return obj.vtable; }


// ON_Environment
ON_Environment :: struct {
    #as using on_object: ON_Object;

    BackgroundProjections :: enum u32 {
        Planar                 :: 0;
        Spherical              :: 1;
        Emap                   :: 2;
        Box                    :: 3;
        Automatic              :: 4;
        LightProbe             :: 5;
        CubeMap                :: 6;
        VerticalCrossCubeMap   :: 7;
        HorizontalCrossCubeMap :: 8;
        Hemispherical          :: 9;
    }

    CImpl :: struct {}
    m_impl: *CImpl;
    #place on_object; on_environment_vtable: *ON_Environment_VTable;
}
ON_Environment_VTable :: struct #type_info_none {
    using on_object: ON_Object_VTable;
    operator_assign: (this: *ON_Environment, src: *ON_Environment) -> *ON_Environment #cpp_method;

    //operator==: (this: *ON_Environment, src: *ON_Environment) -> bool #cpp_method;
    operator== :: (this: ON_Environment, src: ON_Environment) -> bool  {
        push_context context {
        return operator==(*this, *src);
        }
    }
    //operator!=: (this: *ON_Environment, src: *ON_Environment) -> bool #cpp_method;
    operator!= :: (this: ON_Environment, src: ON_Environment) -> bool  {
        push_context context {
        return operator!=(*this, *src);
        }
    }

    BackgroundColor: (this: *ON_Environment) -> ON_Color #cpp_method #cpp_return_type_is_non_pod;
    SetBackgroundColor: (this: *ON_Environment, col: *ON_Color) -> void #cpp_method;

    BackgroundImage: (this: *ON_Environment) -> *ON_Texture #cpp_method;
    SetBackgroundImage: (this: *ON_Environment, tex: *ON_Texture) -> void #cpp_method;

    BackgroundProjection: (this: *ON_Environment) -> ON_Environment.BackgroundProjections #cpp_method;
    SetBackgroundProjection: (this: *ON_Environment, proj: ON_Environment.BackgroundProjections) -> void #cpp_method;

    EVF: (this: *ON_Environment, wszFunc: *s16, pvData: *void) -> *void #cpp_method;
}

ON_Environment_operator_assign :: inline (this: *ON_Environment, src: *ON_Environment) -> *ON_Environment { return this.on_environment_vtable.operator_assign(this, src); }

operator== :: inline (this: *ON_Environment, src: *ON_Environment) -> bool { return this.on_environment_vtable.operator==(this, src); }
operator!= :: inline (this: *ON_Environment, src: *ON_Environment) -> bool { return this.on_environment_vtable.operator!=(this, src); }

ON_Environment_BackgroundColor :: inline (this: *ON_Environment) -> ON_Color { return this.on_environment_vtable.BackgroundColor(this); }
ON_Environment_SetBackgroundColor :: inline (this: *ON_Environment, col: *ON_Color) { this.on_environment_vtable.SetBackgroundColor(this, col); }

ON_Environment_BackgroundImage :: inline (this: *ON_Environment) -> *ON_Texture { return this.on_environment_vtable.BackgroundImage(this); }
ON_Environment_SetBackgroundImage :: inline (this: *ON_Environment, tex: *ON_Texture) { this.on_environment_vtable.SetBackgroundImage(this, tex); }

ON_Environment_BackgroundProjection :: inline (this: *ON_Environment) -> ON_Environment.BackgroundProjections { return this.on_environment_vtable.BackgroundProjection(this); }
ON_Environment_SetBackgroundProjection :: inline (this: *ON_Environment, proj: ON_Environment.BackgroundProjections) { this.on_environment_vtable.SetBackgroundProjection(this, proj); }

ON_Environment_EVF :: inline (this: *ON_Environment, wszFunc: *s16, pvData: *void) -> *void { return this.on_environment_vtable.EVF(this, wszFunc, pvData); }

vtable :: (obj: *ON_Environment) -> *ON_Environment_VTable { return obj.on_environment_vtable; }


ON_RenderContent :: struct {
    #as using on_modelcomponent: ON_ModelComponent;

    ChildIterator :: struct {
        vtable: *ChildIterator_VTable;
        ON_RenderContentChildIteratorPrivate :: struct {}
        _private: *ON_RenderContentChildIteratorPrivate;
    }
    ChildIterator_VTable :: struct #type_info_none {
        Destructor: (this: *ChildIterator, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

        GetNextChild: (this: *ChildIterator) -> *ON_RenderContent #cpp_method;

        EVF: (this: *ChildIterator, func: *s16, data: *void) -> *void #cpp_method;
    }

    ChildIterator_Destructor :: inline (this: *ChildIterator, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

    ChildIterator_GetNextChild :: inline (this: *ChildIterator) -> *ON_RenderContent { return this.vtable.GetNextChild(this); }

    ChildIterator_EVF :: inline (this: *ChildIterator, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

    //vtable :: (obj: *ChildIterator) -> *ChildIterator_VTable { return obj.vtable; }


    ON_RenderContentPrivate :: struct {}
    _private: *ON_RenderContentPrivate;

    _PRIVATE: [424] ON__UINT8;
    #place on_modelcomponent; on_rendercontent_vtable: *ON_RenderContent_VTable;
}
ON_RenderContent_VTable :: struct #type_info_none {
    using on_object: ON_Object_VTable;
    operator_assign: (this: *ON_RenderContent, unknown0: *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    TypeName: (this: *ON_RenderContent) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    SetTypeName: (this: *ON_RenderContent, name: *s16) -> void #cpp_method;

    TypeId: (this: *ON_RenderContent) -> ON_UUID #cpp_method;

    SetTypeId: (this: *ON_RenderContent, uuid: *ON_UUID) -> void #cpp_method;

    RenderEngineId: (this: *ON_RenderContent) -> ON_UUID #cpp_method;

    SetRenderEngineId: (this: *ON_RenderContent, uuid: *ON_UUID) -> void #cpp_method;

    PlugInId: (this: *ON_RenderContent) -> ON_UUID #cpp_method;

    SetPlugInId: (this: *ON_RenderContent, uuid: *ON_UUID) -> void #cpp_method;

    Notes: (this: *ON_RenderContent) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    SetNotes: (this: *ON_RenderContent, notes: *s16) -> void #cpp_method;

    Tags: (this: *ON_RenderContent) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    SetTags: (this: *ON_RenderContent, tags: *s16) -> void #cpp_method;

    GroupId: (this: *ON_RenderContent) -> ON_UUID #cpp_method;

    SetGroupId: (this: *ON_RenderContent, group: *ON_UUID) -> void #cpp_method;

    Hidden: (this: *ON_RenderContent) -> bool #cpp_method;

    SetHidden: (this: *ON_RenderContent, hidden: bool) -> void #cpp_method;

    Reference: (this: *ON_RenderContent) -> bool #cpp_method;

    SetReference: (this: *ON_RenderContent, ref: bool) -> void #cpp_method;

    AutoDelete: (this: *ON_RenderContent) -> bool #cpp_method;

    SetAutoDelete: (this: *ON_RenderContent, autodel: bool) -> void #cpp_method;

    GetParameter: (this: *ON_RenderContent, name: *s16) -> ON_XMLVariant #cpp_method #cpp_return_type_is_non_pod;

    SetParameter: (this: *ON_RenderContent, name: *s16, value: *ON_XMLVariant) -> bool #cpp_method;

    GetChildIterator: (this: *ON_RenderContent) -> ON_RenderContent.ChildIterator #cpp_method #cpp_return_type_is_non_pod;

    Parent_1: (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    Parent: (this: *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    FirstChild_1: (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    FirstChild: (this: *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    NextSibling_1: (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    NextSibling: (this: *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    TopLevel_1: (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    TopLevel: (this: *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    IsTopLevel: (this: *ON_RenderContent) -> bool #cpp_method;

    IsChild: (this: *ON_RenderContent) -> bool #cpp_method;

    SetChild: (this: *ON_RenderContent, child: *ON_RenderContent, child_slot_name: *s16) -> bool #cpp_method;

    ChildSlotName: (this: *ON_RenderContent) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    SetChildSlotName: (this: *ON_RenderContent, child_slot_name: *s16) -> void #cpp_method;

    ChildSlotOn: (this: *ON_RenderContent, child_slot_name: *s16) -> bool #cpp_method;

    SetChildSlotOn: (this: *ON_RenderContent, on: bool, child_slot_name: *s16) -> bool #cpp_method;

    ChildSlotAmount: (this: *ON_RenderContent, child_slot_name: *s16, default_value: float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) -> float64 #cpp_method;

    SetChildSlotAmount: (this: *ON_RenderContent, amount: float64, child_slot_name: *s16) -> bool #cpp_method;

    DeleteChild: (this: *ON_RenderContent, child_slot_name: *s16) -> bool #cpp_method;

    FindChild_1: (this: /*const*/ *ON_RenderContent, child_slot_name: /*const*/ *s16) -> *ON_RenderContent #cpp_method;

    FindChild: (this: *ON_RenderContent, child_slot_name: /*const*/ *s16) -> *ON_RenderContent #cpp_method;

    XML: (this: *ON_RenderContent, recursive: bool) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    SetXML: (this: *ON_RenderContent, xml: *s16) -> bool #cpp_method;

    XMLNode: (this: *ON_RenderContent) -> *ON_XMLNode #cpp_method;

    Kind: (this: *ON_RenderContent) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    NewRenderContent: (this: *ON_RenderContent) -> *ON_RenderContent #cpp_method;

    EVF: (this: *ON_RenderContent, func: *s16, data: *void) -> *void #cpp_method;
}

ON_RenderContent_operator_assign :: inline (this: *ON_RenderContent, unknown0: *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.operator_assign(this, unknown0); }

ON_RenderContent_TypeName :: inline (this: *ON_RenderContent) -> ON_wString { return this.on_rendercontent_vtable.TypeName(this); }

ON_RenderContent_SetTypeName :: inline (this: *ON_RenderContent, name: *s16) { this.on_rendercontent_vtable.SetTypeName(this, name); }

ON_RenderContent_TypeId :: inline (this: *ON_RenderContent) -> ON_UUID { return this.on_rendercontent_vtable.TypeId(this); }

ON_RenderContent_SetTypeId :: inline (this: *ON_RenderContent, uuid: *ON_UUID) { this.on_rendercontent_vtable.SetTypeId(this, uuid); }

ON_RenderContent_RenderEngineId :: inline (this: *ON_RenderContent) -> ON_UUID { return this.on_rendercontent_vtable.RenderEngineId(this); }

ON_RenderContent_SetRenderEngineId :: inline (this: *ON_RenderContent, uuid: *ON_UUID) { this.on_rendercontent_vtable.SetRenderEngineId(this, uuid); }

ON_RenderContent_PlugInId :: inline (this: *ON_RenderContent) -> ON_UUID { return this.on_rendercontent_vtable.PlugInId(this); }

ON_RenderContent_SetPlugInId :: inline (this: *ON_RenderContent, uuid: *ON_UUID) { this.on_rendercontent_vtable.SetPlugInId(this, uuid); }

ON_RenderContent_Notes :: inline (this: *ON_RenderContent) -> ON_wString { return this.on_rendercontent_vtable.Notes(this); }

ON_RenderContent_SetNotes :: inline (this: *ON_RenderContent, notes: *s16) { this.on_rendercontent_vtable.SetNotes(this, notes); }

ON_RenderContent_Tags :: inline (this: *ON_RenderContent) -> ON_wString { return this.on_rendercontent_vtable.Tags(this); }

ON_RenderContent_SetTags :: inline (this: *ON_RenderContent, tags: *s16) { this.on_rendercontent_vtable.SetTags(this, tags); }

ON_RenderContent_GroupId :: inline (this: *ON_RenderContent) -> ON_UUID { return this.on_rendercontent_vtable.GroupId(this); }

ON_RenderContent_SetGroupId :: inline (this: *ON_RenderContent, group: *ON_UUID) { this.on_rendercontent_vtable.SetGroupId(this, group); }

ON_RenderContent_Hidden :: inline (this: *ON_RenderContent) -> bool { return this.on_rendercontent_vtable.Hidden(this); }

ON_RenderContent_SetHidden :: inline (this: *ON_RenderContent, hidden: bool) { this.on_rendercontent_vtable.SetHidden(this, hidden); }

ON_RenderContent_Reference :: inline (this: *ON_RenderContent) -> bool { return this.on_rendercontent_vtable.Reference(this); }

ON_RenderContent_SetReference :: inline (this: *ON_RenderContent, ref: bool) { this.on_rendercontent_vtable.SetReference(this, ref); }

ON_RenderContent_AutoDelete :: inline (this: *ON_RenderContent) -> bool { return this.on_rendercontent_vtable.AutoDelete(this); }

ON_RenderContent_SetAutoDelete :: inline (this: *ON_RenderContent, autodel: bool) { this.on_rendercontent_vtable.SetAutoDelete(this, autodel); }

ON_RenderContent_GetParameter :: inline (this: *ON_RenderContent, name: *s16) -> ON_XMLVariant { return this.on_rendercontent_vtable.GetParameter(this, name); }

ON_RenderContent_SetParameter :: inline (this: *ON_RenderContent, name: *s16, value: *ON_XMLVariant) -> bool { return this.on_rendercontent_vtable.SetParameter(this, name, value); }

ON_RenderContent_GetChildIterator :: inline (this: *ON_RenderContent) -> ON_RenderContent.ChildIterator { return this.on_rendercontent_vtable.GetChildIterator(this); }

ON_RenderContent_Parent_1 :: inline (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.Parent_1(this); }

ON_RenderContent_Parent :: inline (this: *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.Parent(this); }

ON_RenderContent_FirstChild_1 :: inline (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.FirstChild_1(this); }

ON_RenderContent_FirstChild :: inline (this: *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.FirstChild(this); }

ON_RenderContent_NextSibling_1 :: inline (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.NextSibling_1(this); }

ON_RenderContent_NextSibling :: inline (this: *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.NextSibling(this); }

ON_RenderContent_TopLevel_1 :: inline (this: /*const*/ *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.TopLevel_1(this); }

ON_RenderContent_TopLevel :: inline (this: *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.TopLevel(this); }

ON_RenderContent_IsTopLevel :: inline (this: *ON_RenderContent) -> bool { return this.on_rendercontent_vtable.IsTopLevel(this); }

ON_RenderContent_IsChild :: inline (this: *ON_RenderContent) -> bool { return this.on_rendercontent_vtable.IsChild(this); }

ON_RenderContent_SetChild :: inline (this: *ON_RenderContent, child: *ON_RenderContent, child_slot_name: *s16) -> bool { return this.on_rendercontent_vtable.SetChild(this, child, child_slot_name); }

ON_RenderContent_ChildSlotName :: inline (this: *ON_RenderContent) -> ON_wString { return this.on_rendercontent_vtable.ChildSlotName(this); }

ON_RenderContent_SetChildSlotName :: inline (this: *ON_RenderContent, child_slot_name: *s16) { this.on_rendercontent_vtable.SetChildSlotName(this, child_slot_name); }

ON_RenderContent_ChildSlotOn :: inline (this: *ON_RenderContent, child_slot_name: *s16) -> bool { return this.on_rendercontent_vtable.ChildSlotOn(this, child_slot_name); }

ON_RenderContent_SetChildSlotOn :: inline (this: *ON_RenderContent, on: bool, child_slot_name: *s16) -> bool { return this.on_rendercontent_vtable.SetChildSlotOn(this, on, child_slot_name); }

ON_RenderContent_ChildSlotAmount :: inline (this: *ON_RenderContent, child_slot_name: *s16, default_value: float64 = -123432101234321008400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0) -> float64 { return this.on_rendercontent_vtable.ChildSlotAmount(this, child_slot_name, default_value); }

ON_RenderContent_SetChildSlotAmount :: inline (this: *ON_RenderContent, amount: float64, child_slot_name: *s16) -> bool { return this.on_rendercontent_vtable.SetChildSlotAmount(this, amount, child_slot_name); }

ON_RenderContent_DeleteChild :: inline (this: *ON_RenderContent, child_slot_name: *s16) -> bool { return this.on_rendercontent_vtable.DeleteChild(this, child_slot_name); }

ON_RenderContent_FindChild_1 :: inline (this: /*const*/ *ON_RenderContent, child_slot_name: /*const*/ *s16) -> *ON_RenderContent { return this.on_rendercontent_vtable.FindChild_1(this, child_slot_name); }

ON_RenderContent_FindChild :: inline (this: *ON_RenderContent, child_slot_name: /*const*/ *s16) -> *ON_RenderContent { return this.on_rendercontent_vtable.FindChild(this, child_slot_name); }

ON_RenderContent_XML :: inline (this: *ON_RenderContent, recursive: bool) -> ON_wString { return this.on_rendercontent_vtable.XML(this, recursive); }

ON_RenderContent_SetXML :: inline (this: *ON_RenderContent, xml: *s16) -> bool { return this.on_rendercontent_vtable.SetXML(this, xml); }

ON_RenderContent_XMLNode :: inline (this: *ON_RenderContent) -> *ON_XMLNode { return this.on_rendercontent_vtable.XMLNode(this); }

ON_RenderContent_Kind :: inline (this: *ON_RenderContent) -> ON_wString { return this.on_rendercontent_vtable.Kind(this); }

ON_RenderContent_NewRenderContent :: inline (this: *ON_RenderContent) -> *ON_RenderContent { return this.on_rendercontent_vtable.NewRenderContent(this); }

ON_RenderContent_EVF :: inline (this: *ON_RenderContent, func: *s16, data: *void) -> *void { return this.on_rendercontent_vtable.EVF(this, func, data); }

vtable :: (obj: *ON_RenderContent) -> *ON_RenderContent_VTable { return obj.on_rendercontent_vtable; }


ON_RenderMaterial :: struct {
    #as using on_rendercontent: ON_RenderContent;
    #place on_rendercontent; on_rendermaterial_vtable: *ON_RenderMaterial_VTable;
}
ON_RenderMaterial_VTable :: struct #type_info_none {
    using on_rendercontent: ON_RenderContent_VTable;
    operator_assign_1: (this: *ON_RenderMaterial, unknown0: /*const reference*/ *ON_RenderMaterial) -> *ON_RenderMaterial #cpp_method;

    ToOnMaterial: (this: *ON_RenderMaterial) -> ON_Material #cpp_method #cpp_return_type_is_non_pod;
}

ON_RenderMaterial_operator_assign_1 :: inline (this: *ON_RenderMaterial, unknown0: /*const reference*/ *ON_RenderMaterial) -> *ON_RenderMaterial { return this.on_rendermaterial_vtable.operator_assign_1(this, unknown0); }

ON_RenderMaterial_ToOnMaterial :: inline (this: *ON_RenderMaterial) -> ON_Material { return this.on_rendermaterial_vtable.ToOnMaterial(this); }

vtable :: (obj: *ON_RenderMaterial) -> *ON_RenderMaterial_VTable { return obj.on_rendermaterial_vtable; }


ON_RenderEnvironment :: struct {
    #as using on_rendercontent: ON_RenderContent;
    #place on_rendercontent; on_renderenvironment_vtable: *ON_RenderEnvironment_VTable;
}
ON_RenderEnvironment_VTable :: struct #type_info_none {
    using on_rendercontent: ON_RenderContent_VTable;
    operator_assign_1: (this: *ON_RenderEnvironment, unknown0: /*const reference*/ *ON_RenderEnvironment) -> *ON_RenderEnvironment #cpp_method;

    ToOnEnvironment: (this: *ON_RenderEnvironment) -> ON_Environment #cpp_method #cpp_return_type_is_non_pod;
}

ON_RenderEnvironment_operator_assign_1 :: inline (this: *ON_RenderEnvironment, unknown0: /*const reference*/ *ON_RenderEnvironment) -> *ON_RenderEnvironment { return this.on_renderenvironment_vtable.operator_assign_1(this, unknown0); }

ON_RenderEnvironment_ToOnEnvironment :: inline (this: *ON_RenderEnvironment) -> ON_Environment { return this.on_renderenvironment_vtable.ToOnEnvironment(this); }

vtable :: (obj: *ON_RenderEnvironment) -> *ON_RenderEnvironment_VTable { return obj.on_renderenvironment_vtable; }


ON_RenderTexture :: struct {
    #as using on_rendercontent: ON_RenderContent;
    #place on_rendercontent; on_rendertexture_vtable: *ON_RenderTexture_VTable;
}
ON_RenderTexture_VTable :: struct #type_info_none {
    using on_rendercontent: ON_RenderContent_VTable;
    operator_assign_1: (this: *ON_RenderTexture, unknown0: /*const reference*/ *ON_RenderTexture) -> *ON_RenderTexture #cpp_method;

    ToOnTexture: (this: *ON_RenderTexture) -> ON_Texture #cpp_method #cpp_return_type_is_non_pod;

    Filename: (this: *ON_RenderTexture) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    SetFilename: (this: *ON_RenderTexture, unknown0: *s16) -> bool #cpp_method;
}

ON_RenderTexture_operator_assign_1 :: inline (this: *ON_RenderTexture, unknown0: /*const reference*/ *ON_RenderTexture) -> *ON_RenderTexture { return this.on_rendertexture_vtable.operator_assign_1(this, unknown0); }

ON_RenderTexture_ToOnTexture :: inline (this: *ON_RenderTexture) -> ON_Texture { return this.on_rendertexture_vtable.ToOnTexture(this); }

ON_RenderTexture_Filename :: inline (this: *ON_RenderTexture) -> ON_wString { return this.on_rendertexture_vtable.Filename(this); }

ON_RenderTexture_SetFilename :: inline (this: *ON_RenderTexture, unknown0: *s16) -> bool { return this.on_rendertexture_vtable.SetFilename(this, unknown0); }

vtable :: (obj: *ON_RenderTexture) -> *ON_RenderTexture_VTable { return obj.on_rendertexture_vtable; }


ON_RenderChannels :: struct {
    vtable: *ON_RenderChannels_VTable;
    Modes :: enum u32 {
        Automatic :: 0;
        Custom    :: 1;
    }

    CImpl :: struct {}
    m_impl: *CImpl;
}
ON_RenderChannels_VTable :: struct #type_info_none {
    Destructor: (this: *ON_RenderChannels, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_RenderChannels, rch: *ON_RenderChannels) -> *ON_RenderChannels #cpp_method;

    //operator==: (this: *ON_RenderChannels, rch: *ON_RenderChannels) -> bool #cpp_method;
    operator== :: (this: ON_RenderChannels, rch: ON_RenderChannels) -> bool  {
        push_context context {
        return operator==(*this, *rch);
        }
    }
    //operator!=: (this: *ON_RenderChannels, rch: *ON_RenderChannels) -> bool #cpp_method;
    operator!= :: (this: ON_RenderChannels, rch: ON_RenderChannels) -> bool  {
        push_context context {
        return operator!=(*this, *rch);
        }
    }

    Mode: (this: *ON_RenderChannels) -> ON_RenderChannels.Modes #cpp_method;

    SetMode: (this: *ON_RenderChannels, m: ON_RenderChannels.Modes) -> void #cpp_method;

    GetCustomList: (this: *ON_RenderChannels, chan: *ON_SimpleArray(ON_UUID)) -> void #cpp_method;

    SetCustomList: (this: *ON_RenderChannels, chan: *ON_SimpleArray(ON_UUID)) -> void #cpp_method;

    EVF: (this: *ON_RenderChannels, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_RenderChannels, unknown0: *ON_RenderChannels) -> void #cpp_method;
}

ON_RenderChannels_Destructor :: inline (this: *ON_RenderChannels, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_RenderChannels_operator_assign :: inline (this: *ON_RenderChannels, rch: *ON_RenderChannels) -> *ON_RenderChannels { return this.vtable.operator_assign(this, rch); }

operator== :: inline (this: *ON_RenderChannels, rch: *ON_RenderChannels) -> bool { return this.vtable.operator==(this, rch); }
operator!= :: inline (this: *ON_RenderChannels, rch: *ON_RenderChannels) -> bool { return this.vtable.operator!=(this, rch); }

ON_RenderChannels_Mode :: inline (this: *ON_RenderChannels) -> ON_RenderChannels.Modes { return this.vtable.Mode(this); }

ON_RenderChannels_SetMode :: inline (this: *ON_RenderChannels, m: ON_RenderChannels.Modes) { this.vtable.SetMode(this, m); }

ON_RenderChannels_GetCustomList :: inline (this: *ON_RenderChannels, chan: *ON_SimpleArray(ON_UUID)) { this.vtable.GetCustomList(this, chan); }

ON_RenderChannels_SetCustomList :: inline (this: *ON_RenderChannels, chan: *ON_SimpleArray(ON_UUID)) { this.vtable.SetCustomList(this, chan); }

ON_RenderChannels_EVF :: inline (this: *ON_RenderChannels, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_RenderChannels_OnInternalXmlChanged :: inline (this: *ON_RenderChannels, unknown0: *ON_RenderChannels) { this.vtable.OnInternalXmlChanged(this, unknown0); }

vtable :: (obj: *ON_RenderChannels) -> *ON_RenderChannels_VTable { return obj.vtable; }


ON_SafeFrame :: struct {
    vtable: *ON_SafeFrame_VTable;
    CImpl :: struct {}
    m_impl: *CImpl;
}
ON_SafeFrame_VTable :: struct #type_info_none {
    Destructor: (this: *ON_SafeFrame, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_SafeFrame, sf: *ON_SafeFrame) -> *ON_SafeFrame #cpp_method;

    //operator==: (this: *ON_SafeFrame, sf: *ON_SafeFrame) -> bool #cpp_method;
    operator== :: (this: ON_SafeFrame, sf: ON_SafeFrame) -> bool  {
        push_context context {
        return operator==(*this, *sf);
        }
    }
    //operator!=: (this: *ON_SafeFrame, sf: *ON_SafeFrame) -> bool #cpp_method;
    operator!= :: (this: ON_SafeFrame, sf: ON_SafeFrame) -> bool  {
        push_context context {
        return operator!=(*this, *sf);
        }
    }

    Enabled: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetEnabled: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    PerspectiveOnly: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetPerspectiveOnly: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    FieldGridOn: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetFieldGridOn: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    LiveFrameOn: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetLiveFrameOn: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    ActionFrameOn: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetActionFrameOn: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    ActionFrameLinked: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetActionFrameLinked: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    ActionFrameXScale: (this: *ON_SafeFrame) -> float64 #cpp_method;

    SetActionFrameXScale: (this: *ON_SafeFrame, d: float64) -> void #cpp_method;

    ActionFrameYScale: (this: *ON_SafeFrame) -> float64 #cpp_method;

    SetActionFrameYScale: (this: *ON_SafeFrame, d: float64) -> void #cpp_method;

    TitleFrameOn: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetTitleFrameOn: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    TitleFrameLinked: (this: *ON_SafeFrame) -> bool #cpp_method;

    SetTitleFrameLinked: (this: *ON_SafeFrame, b: bool) -> void #cpp_method;

    TitleFrameXScale: (this: *ON_SafeFrame) -> float64 #cpp_method;

    SetTitleFrameXScale: (this: *ON_SafeFrame, d: float64) -> void #cpp_method;

    TitleFrameYScale: (this: *ON_SafeFrame) -> float64 #cpp_method;

    SetTitleFrameYScale: (this: *ON_SafeFrame, d: float64) -> void #cpp_method;

    EVF: (this: *ON_SafeFrame, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_SafeFrame, unknown0: *ON_SafeFrame) -> void #cpp_method;
}

ON_SafeFrame_Destructor :: inline (this: *ON_SafeFrame, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_SafeFrame_operator_assign :: inline (this: *ON_SafeFrame, sf: *ON_SafeFrame) -> *ON_SafeFrame { return this.vtable.operator_assign(this, sf); }

operator== :: inline (this: *ON_SafeFrame, sf: *ON_SafeFrame) -> bool { return this.vtable.operator==(this, sf); }
operator!= :: inline (this: *ON_SafeFrame, sf: *ON_SafeFrame) -> bool { return this.vtable.operator!=(this, sf); }

ON_SafeFrame_Enabled :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.Enabled(this); }

ON_SafeFrame_SetEnabled :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetEnabled(this, b); }

ON_SafeFrame_PerspectiveOnly :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.PerspectiveOnly(this); }

ON_SafeFrame_SetPerspectiveOnly :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetPerspectiveOnly(this, b); }

ON_SafeFrame_FieldGridOn :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.FieldGridOn(this); }

ON_SafeFrame_SetFieldGridOn :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetFieldGridOn(this, b); }

ON_SafeFrame_LiveFrameOn :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.LiveFrameOn(this); }

ON_SafeFrame_SetLiveFrameOn :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetLiveFrameOn(this, b); }

ON_SafeFrame_ActionFrameOn :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.ActionFrameOn(this); }

ON_SafeFrame_SetActionFrameOn :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetActionFrameOn(this, b); }

ON_SafeFrame_ActionFrameLinked :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.ActionFrameLinked(this); }

ON_SafeFrame_SetActionFrameLinked :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetActionFrameLinked(this, b); }

ON_SafeFrame_ActionFrameXScale :: inline (this: *ON_SafeFrame) -> float64 { return this.vtable.ActionFrameXScale(this); }

ON_SafeFrame_SetActionFrameXScale :: inline (this: *ON_SafeFrame, d: float64) { this.vtable.SetActionFrameXScale(this, d); }

ON_SafeFrame_ActionFrameYScale :: inline (this: *ON_SafeFrame) -> float64 { return this.vtable.ActionFrameYScale(this); }

ON_SafeFrame_SetActionFrameYScale :: inline (this: *ON_SafeFrame, d: float64) { this.vtable.SetActionFrameYScale(this, d); }

ON_SafeFrame_TitleFrameOn :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.TitleFrameOn(this); }

ON_SafeFrame_SetTitleFrameOn :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetTitleFrameOn(this, b); }

ON_SafeFrame_TitleFrameLinked :: inline (this: *ON_SafeFrame) -> bool { return this.vtable.TitleFrameLinked(this); }

ON_SafeFrame_SetTitleFrameLinked :: inline (this: *ON_SafeFrame, b: bool) { this.vtable.SetTitleFrameLinked(this, b); }

ON_SafeFrame_TitleFrameXScale :: inline (this: *ON_SafeFrame) -> float64 { return this.vtable.TitleFrameXScale(this); }

ON_SafeFrame_SetTitleFrameXScale :: inline (this: *ON_SafeFrame, d: float64) { this.vtable.SetTitleFrameXScale(this, d); }

ON_SafeFrame_TitleFrameYScale :: inline (this: *ON_SafeFrame) -> float64 { return this.vtable.TitleFrameYScale(this); }

ON_SafeFrame_SetTitleFrameYScale :: inline (this: *ON_SafeFrame, d: float64) { this.vtable.SetTitleFrameYScale(this, d); }

ON_SafeFrame_EVF :: inline (this: *ON_SafeFrame, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_SafeFrame_OnInternalXmlChanged :: inline (this: *ON_SafeFrame, unknown0: *ON_SafeFrame) { this.vtable.OnInternalXmlChanged(this, unknown0); }

vtable :: (obj: *ON_SafeFrame) -> *ON_SafeFrame_VTable { return obj.vtable; }


ON_Skylight :: struct {
    vtable: *ON_Skylight_VTable;
    CImpl :: struct {}
    m_impl: *CImpl;
}
ON_Skylight_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Skylight, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_Skylight, sl: *ON_Skylight) -> *ON_Skylight #cpp_method;

    //operator==: (this: *ON_Skylight, sl: *ON_Skylight) -> bool #cpp_method;
    operator== :: (this: ON_Skylight, sl: ON_Skylight) -> bool  {
        push_context context {
        return operator==(*this, *sl);
        }
    }
    //operator!=: (this: *ON_Skylight, sl: *ON_Skylight) -> bool #cpp_method;
    operator!= :: (this: ON_Skylight, sl: ON_Skylight) -> bool  {
        push_context context {
        return operator!=(*this, *sl);
        }
    }

    Enabled: (this: *ON_Skylight) -> bool #cpp_method;

    SetEnabled: (this: *ON_Skylight, b: bool) -> void #cpp_method;

    ShadowIntensity: (this: *ON_Skylight) -> float64 #cpp_method;

    SetShadowIntensity: (this: *ON_Skylight, d: float64) -> void #cpp_method;

    EVF: (this: *ON_Skylight, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_Skylight, unknown0: *ON_Skylight) -> void #cpp_method;
}

ON_Skylight_Destructor :: inline (this: *ON_Skylight, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_Skylight_operator_assign :: inline (this: *ON_Skylight, sl: *ON_Skylight) -> *ON_Skylight { return this.vtable.operator_assign(this, sl); }

operator== :: inline (this: *ON_Skylight, sl: *ON_Skylight) -> bool { return this.vtable.operator==(this, sl); }
operator!= :: inline (this: *ON_Skylight, sl: *ON_Skylight) -> bool { return this.vtable.operator!=(this, sl); }

ON_Skylight_Enabled :: inline (this: *ON_Skylight) -> bool { return this.vtable.Enabled(this); }

ON_Skylight_SetEnabled :: inline (this: *ON_Skylight, b: bool) { this.vtable.SetEnabled(this, b); }

ON_Skylight_ShadowIntensity :: inline (this: *ON_Skylight) -> float64 { return this.vtable.ShadowIntensity(this); }

ON_Skylight_SetShadowIntensity :: inline (this: *ON_Skylight, d: float64) { this.vtable.SetShadowIntensity(this, d); }

ON_Skylight_EVF :: inline (this: *ON_Skylight, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_Skylight_OnInternalXmlChanged :: inline (this: *ON_Skylight, unknown0: *ON_Skylight) { this.vtable.OnInternalXmlChanged(this, unknown0); }

vtable :: (obj: *ON_Skylight) -> *ON_Skylight_VTable { return obj.vtable; }


// Class ON_SunEngine is a sun astronomical calculation engine.
ON_SunEngine :: struct {
    vtable: *ON_SunEngine_VTable;
    Accuracy :: enum s32 {
        inimum :: 0;
        aximum :: 1;

        Minimum :: inimum;
        Maximum :: aximum;
    }

    CImpl :: struct {}
    _impl: *CImpl;
}
ON_SunEngine_VTable :: struct #type_info_none {
    Destructor: (this: *ON_SunEngine, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Latitude: (this: *ON_SunEngine) -> float64 #cpp_method;

    Longitude: (this: *ON_SunEngine) -> float64 #cpp_method;

    SetLatitude: (this: *ON_SunEngine, dLat: float64) -> bool #cpp_method;

    SetLongitude: (this: *ON_SunEngine, dLong: float64) -> bool #cpp_method;

    SetTimeZoneHours: (this: *ON_SunEngine, dHours: float64) -> bool #cpp_method;

    SetDaylightSavingMinutes: (this: *ON_SunEngine, iMinutes: s32) -> bool #cpp_method;

    SetLocalDateTime: (this: *ON_SunEngine, iYear: s32, iMonth: s32, iDay: s32, dHours: float64) -> bool #cpp_method;

    SetLocalJulianDay: (this: *ON_SunEngine, dLocalJulianDay: float64) -> bool #cpp_method;

    Azimuth: (this: *ON_SunEngine) -> float64 #cpp_method;

    Altitude: (this: *ON_SunEngine) -> float64 #cpp_method;

    JulianDay: (this: *ON_SunEngine) -> float64 #cpp_method;

    LocalJulianDay: (this: *ON_SunEngine) -> float64 #cpp_method;

    TimeZoneHours: (this: *ON_SunEngine) -> float64 #cpp_method;

    DaylightSavingMinutes: (this: *ON_SunEngine) -> s32 #cpp_method;

    LocalDateTime: (this: *ON_SunEngine, year: *s32, month: *s32, day: *s32, hours: *float64) -> void #cpp_method;
}

ON_SunEngine_Destructor :: inline (this: *ON_SunEngine, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_SunEngine_Latitude :: inline (this: *ON_SunEngine) -> float64 { return this.vtable.Latitude(this); }

ON_SunEngine_Longitude :: inline (this: *ON_SunEngine) -> float64 { return this.vtable.Longitude(this); }

ON_SunEngine_SetLatitude :: inline (this: *ON_SunEngine, dLat: float64) -> bool { return this.vtable.SetLatitude(this, dLat); }

ON_SunEngine_SetLongitude :: inline (this: *ON_SunEngine, dLong: float64) -> bool { return this.vtable.SetLongitude(this, dLong); }

ON_SunEngine_SetTimeZoneHours :: inline (this: *ON_SunEngine, dHours: float64) -> bool { return this.vtable.SetTimeZoneHours(this, dHours); }

ON_SunEngine_SetDaylightSavingMinutes :: inline (this: *ON_SunEngine, iMinutes: s32) -> bool { return this.vtable.SetDaylightSavingMinutes(this, iMinutes); }

ON_SunEngine_SetLocalDateTime :: inline (this: *ON_SunEngine, iYear: s32, iMonth: s32, iDay: s32, dHours: float64) -> bool { return this.vtable.SetLocalDateTime(this, iYear, iMonth, iDay, dHours); }

ON_SunEngine_SetLocalJulianDay :: inline (this: *ON_SunEngine, dLocalJulianDay: float64) -> bool { return this.vtable.SetLocalJulianDay(this, dLocalJulianDay); }

ON_SunEngine_Azimuth :: inline (this: *ON_SunEngine) -> float64 { return this.vtable.Azimuth(this); }

ON_SunEngine_Altitude :: inline (this: *ON_SunEngine) -> float64 { return this.vtable.Altitude(this); }

ON_SunEngine_JulianDay :: inline (this: *ON_SunEngine) -> float64 { return this.vtable.JulianDay(this); }

ON_SunEngine_LocalJulianDay :: inline (this: *ON_SunEngine) -> float64 { return this.vtable.LocalJulianDay(this); }

ON_SunEngine_TimeZoneHours :: inline (this: *ON_SunEngine) -> float64 { return this.vtable.TimeZoneHours(this); }

ON_SunEngine_DaylightSavingMinutes :: inline (this: *ON_SunEngine) -> s32 { return this.vtable.DaylightSavingMinutes(this); }

ON_SunEngine_LocalDateTime :: inline (this: *ON_SunEngine, year: *s32, month: *s32, day: *s32, hours: *float64) { this.vtable.LocalDateTime(this, year, month, day, hours); }

vtable :: (obj: *ON_SunEngine) -> *ON_SunEngine_VTable { return obj.vtable; }


// Class ON_Sun represents a 'sun'. It can calculate the apparent position of the sun in the sky
// at a particular instant for a particular location on the Earth's surface. It can also be used
// to get the sun's color, a light representing the sun, or to generate an ephemeris.
ON_Sun :: struct {
    vtable: *ON_Sun_VTable;
    CImpl :: struct {}
    _impl: *CImpl;
}
ON_Sun_VTable :: struct #type_info_none {
    Destructor: (this: *ON_Sun, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_Sun, sun: *ON_Sun) -> *ON_Sun #cpp_method;

    //operator==: (this: *ON_Sun, sun: *ON_Sun) -> bool #cpp_method;
    operator== :: (this: ON_Sun, sun: ON_Sun) -> bool  {
        push_context context {
        return operator==(*this, *sun);
        }
    }
    //operator!=: (this: *ON_Sun, sun: *ON_Sun) -> bool #cpp_method;
    operator!= :: (this: ON_Sun, sun: ON_Sun) -> bool  {
        push_context context {
        return operator!=(*this, *sun);
        }
    }

    EnableAllowed: (this: *ON_Sun) -> bool #cpp_method;

    EnableOn: (this: *ON_Sun) -> bool #cpp_method;

    ManualControlAllowed: (this: *ON_Sun) -> bool #cpp_method;

    ManualControlOn: (this: *ON_Sun) -> bool #cpp_method;

    North: (this: *ON_Sun) -> float64 #cpp_method;

    Azimuth: (this: *ON_Sun) -> float64 #cpp_method;

    Altitude: (this: *ON_Sun) -> float64 #cpp_method;

    Latitude: (this: *ON_Sun) -> float64 #cpp_method;

    Longitude: (this: *ON_Sun) -> float64 #cpp_method;

    TimeZone: (this: *ON_Sun) -> float64 #cpp_method;

    DaylightSavingOn: (this: *ON_Sun) -> bool #cpp_method;

    DaylightSavingMinutes: (this: *ON_Sun) -> s32 #cpp_method;

    LocalDateTime: (this: *ON_Sun, year: *s32, month: *s32, day: *s32, hours: *float64) -> void #cpp_method;

    Intensity: (this: *ON_Sun) -> float64 #cpp_method;

    ShadowIntensity: (this: *ON_Sun) -> float64 #cpp_method;

    SetEnableAllowed: (this: *ON_Sun, allowed: bool) -> void #cpp_method;

    SetEnableOn: (this: *ON_Sun, on: bool) -> void #cpp_method;

    SetManualControlAllowed: (this: *ON_Sun, allowed: bool) -> void #cpp_method;

    SetManualControlOn: (this: *ON_Sun, manual: bool) -> void #cpp_method;

    SetNorth: (this: *ON_Sun, north: float64) -> void #cpp_method;

    SetAzimuth: (this: *ON_Sun, azimuth: float64) -> void #cpp_method;

    SetAltitude: (this: *ON_Sun, altitude: float64) -> void #cpp_method;

    SetLatitude: (this: *ON_Sun, latitude: float64) -> void #cpp_method;

    SetLongitude: (this: *ON_Sun, longitude: float64) -> void #cpp_method;

    SetTimeZone: (this: *ON_Sun, hours: float64) -> void #cpp_method;

    SetDaylightSavingOn: (this: *ON_Sun, on: bool) -> void #cpp_method;

    SetDaylightSavingMinutes: (this: *ON_Sun, minutes: s32) -> void #cpp_method;

    SetLocalDateTime: (this: *ON_Sun, year: s32, month: s32, day: s32, hours: float64) -> bool #cpp_method;

    SetShadowIntensity: (this: *ON_Sun, intensity: float64) -> void #cpp_method;

    SetIntensity: (this: *ON_Sun, intensity: float64) -> void #cpp_method;

    DataCRC: (this: *ON_Sun, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;

    IsValid: (this: *ON_Sun) -> bool #cpp_method;

    LoadFromXMLNode: (this: *ON_Sun, node: *ON_XMLNode) -> void #cpp_method;

    SaveToXMLNode: (this: *ON_Sun, node: *ON_XMLNode) -> void #cpp_method;

    WriteToArchive: (this: *ON_Sun, archive: *ON_BinaryArchive) -> bool #cpp_method;

    ReadFromArchive: (this: *ON_Sun, archive: *ON_BinaryArchive) -> bool #cpp_method;

    EVF: (this: *ON_Sun, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_Sun, unknown0: *ON_Sun) -> void #cpp_method;

    Accuracy: (this: *ON_Sun) -> ON_SunEngine.Accuracy #cpp_method;

    SetAccuracy: (this: *ON_Sun, acc: ON_SunEngine.Accuracy) -> void #cpp_method;

    Light: (this: *ON_Sun) -> ON_Light #cpp_method #cpp_return_type_is_non_pod;

    UTCDateTime: (this: *ON_Sun, year: *s32, month: *s32, day: *s32, hours: *float64) -> void #cpp_method;

    SetUTCDateTime: (this: *ON_Sun, year: s32, month: s32, day: s32, hours: float64) -> bool #cpp_method;

    CalculateVectorFromAzimuthAndAltitude: (this: *ON_Sun) -> ON_3dVector #cpp_method #cpp_return_type_is_non_pod;

    SetAzimuthAndAltitudeFromVector: (this: *ON_Sun, v: *ON_3dVector) -> void #cpp_method;
}

ON_Sun_Destructor :: inline (this: *ON_Sun, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_Sun_operator_assign :: inline (this: *ON_Sun, sun: *ON_Sun) -> *ON_Sun { return this.vtable.operator_assign(this, sun); }

operator== :: inline (this: *ON_Sun, sun: *ON_Sun) -> bool { return this.vtable.operator==(this, sun); }
operator!= :: inline (this: *ON_Sun, sun: *ON_Sun) -> bool { return this.vtable.operator!=(this, sun); }

ON_Sun_EnableAllowed :: inline (this: *ON_Sun) -> bool { return this.vtable.EnableAllowed(this); }

ON_Sun_EnableOn :: inline (this: *ON_Sun) -> bool { return this.vtable.EnableOn(this); }

ON_Sun_ManualControlAllowed :: inline (this: *ON_Sun) -> bool { return this.vtable.ManualControlAllowed(this); }

ON_Sun_ManualControlOn :: inline (this: *ON_Sun) -> bool { return this.vtable.ManualControlOn(this); }

ON_Sun_North :: inline (this: *ON_Sun) -> float64 { return this.vtable.North(this); }

ON_Sun_Azimuth :: inline (this: *ON_Sun) -> float64 { return this.vtable.Azimuth(this); }

ON_Sun_Altitude :: inline (this: *ON_Sun) -> float64 { return this.vtable.Altitude(this); }

ON_Sun_Latitude :: inline (this: *ON_Sun) -> float64 { return this.vtable.Latitude(this); }

ON_Sun_Longitude :: inline (this: *ON_Sun) -> float64 { return this.vtable.Longitude(this); }

ON_Sun_TimeZone :: inline (this: *ON_Sun) -> float64 { return this.vtable.TimeZone(this); }

ON_Sun_DaylightSavingOn :: inline (this: *ON_Sun) -> bool { return this.vtable.DaylightSavingOn(this); }

ON_Sun_DaylightSavingMinutes :: inline (this: *ON_Sun) -> s32 { return this.vtable.DaylightSavingMinutes(this); }

ON_Sun_LocalDateTime :: inline (this: *ON_Sun, year: *s32, month: *s32, day: *s32, hours: *float64) { this.vtable.LocalDateTime(this, year, month, day, hours); }

ON_Sun_Intensity :: inline (this: *ON_Sun) -> float64 { return this.vtable.Intensity(this); }

ON_Sun_ShadowIntensity :: inline (this: *ON_Sun) -> float64 { return this.vtable.ShadowIntensity(this); }

ON_Sun_SetEnableAllowed :: inline (this: *ON_Sun, allowed: bool) { this.vtable.SetEnableAllowed(this, allowed); }

ON_Sun_SetEnableOn :: inline (this: *ON_Sun, on: bool) { this.vtable.SetEnableOn(this, on); }

ON_Sun_SetManualControlAllowed :: inline (this: *ON_Sun, allowed: bool) { this.vtable.SetManualControlAllowed(this, allowed); }

ON_Sun_SetManualControlOn :: inline (this: *ON_Sun, manual: bool) { this.vtable.SetManualControlOn(this, manual); }

ON_Sun_SetNorth :: inline (this: *ON_Sun, north: float64) { this.vtable.SetNorth(this, north); }

ON_Sun_SetAzimuth :: inline (this: *ON_Sun, azimuth: float64) { this.vtable.SetAzimuth(this, azimuth); }

ON_Sun_SetAltitude :: inline (this: *ON_Sun, altitude: float64) { this.vtable.SetAltitude(this, altitude); }

ON_Sun_SetLatitude :: inline (this: *ON_Sun, latitude: float64) { this.vtable.SetLatitude(this, latitude); }

ON_Sun_SetLongitude :: inline (this: *ON_Sun, longitude: float64) { this.vtable.SetLongitude(this, longitude); }

ON_Sun_SetTimeZone :: inline (this: *ON_Sun, hours: float64) { this.vtable.SetTimeZone(this, hours); }

ON_Sun_SetDaylightSavingOn :: inline (this: *ON_Sun, on: bool) { this.vtable.SetDaylightSavingOn(this, on); }

ON_Sun_SetDaylightSavingMinutes :: inline (this: *ON_Sun, minutes: s32) { this.vtable.SetDaylightSavingMinutes(this, minutes); }

ON_Sun_SetLocalDateTime :: inline (this: *ON_Sun, year: s32, month: s32, day: s32, hours: float64) -> bool { return this.vtable.SetLocalDateTime(this, year, month, day, hours); }

ON_Sun_SetShadowIntensity :: inline (this: *ON_Sun, intensity: float64) { this.vtable.SetShadowIntensity(this, intensity); }

ON_Sun_SetIntensity :: inline (this: *ON_Sun, intensity: float64) { this.vtable.SetIntensity(this, intensity); }

ON_Sun_DataCRC :: inline (this: *ON_Sun, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

ON_Sun_IsValid :: inline (this: *ON_Sun) -> bool { return this.vtable.IsValid(this); }

ON_Sun_LoadFromXMLNode :: inline (this: *ON_Sun, node: *ON_XMLNode) { this.vtable.LoadFromXMLNode(this, node); }

ON_Sun_SaveToXMLNode :: inline (this: *ON_Sun, node: *ON_XMLNode) { this.vtable.SaveToXMLNode(this, node); }

ON_Sun_WriteToArchive :: inline (this: *ON_Sun, archive: *ON_BinaryArchive) -> bool { return this.vtable.WriteToArchive(this, archive); }

ON_Sun_ReadFromArchive :: inline (this: *ON_Sun, archive: *ON_BinaryArchive) -> bool { return this.vtable.ReadFromArchive(this, archive); }

ON_Sun_EVF :: inline (this: *ON_Sun, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_Sun_OnInternalXmlChanged :: inline (this: *ON_Sun, unknown0: *ON_Sun) { this.vtable.OnInternalXmlChanged(this, unknown0); }

ON_Sun_Accuracy :: inline (this: *ON_Sun) -> ON_SunEngine.Accuracy { return this.vtable.Accuracy(this); }

ON_Sun_SetAccuracy :: inline (this: *ON_Sun, acc: ON_SunEngine.Accuracy) { this.vtable.SetAccuracy(this, acc); }

ON_Sun_Light :: inline (this: *ON_Sun) -> ON_Light { return this.vtable.Light(this); }

ON_Sun_UTCDateTime :: inline (this: *ON_Sun, year: *s32, month: *s32, day: *s32, hours: *float64) { this.vtable.UTCDateTime(this, year, month, day, hours); }

ON_Sun_SetUTCDateTime :: inline (this: *ON_Sun, year: s32, month: s32, day: s32, hours: float64) -> bool { return this.vtable.SetUTCDateTime(this, year, month, day, hours); }

ON_Sun_CalculateVectorFromAzimuthAndAltitude :: inline (this: *ON_Sun) -> ON_3dVector { return this.vtable.CalculateVectorFromAzimuthAndAltitude(this); }

ON_Sun_SetAzimuthAndAltitudeFromVector :: inline (this: *ON_Sun, v: *ON_3dVector) { this.vtable.SetAzimuthAndAltitudeFromVector(this, v); }

vtable :: (obj: *ON_Sun) -> *ON_Sun_VTable { return obj.vtable; }


// Class ON_PostEffectParams represents a collection of arbitrary post effect parameters.
ON_PostEffectParams :: struct {
    vtable: *ON_PostEffectParams_VTable;
    CImpl :: struct {}
    _impl: *CImpl;
}
ON_PostEffectParams_VTable :: struct #type_info_none {
    Destructor: (this: *ON_PostEffectParams, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    GetParam: (this: *ON_PostEffectParams, name: *s16, value_out: *ON_XMLVariant) -> bool #cpp_method;

    SetParam: (this: *ON_PostEffectParams, name: *s16, value: *ON_XMLVariant) -> bool #cpp_method;

    AsXMLParameters: (this: *ON_PostEffectParams) -> *ON_XMLParameters #cpp_method;

    DataCRC: (this: *ON_PostEffectParams, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;

    EVF: (this: *ON_PostEffectParams, func: *s16, data: *void) -> *void #cpp_method;
}

ON_PostEffectParams_Destructor :: inline (this: *ON_PostEffectParams, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_PostEffectParams_GetParam :: inline (this: *ON_PostEffectParams, name: *s16, value_out: *ON_XMLVariant) -> bool { return this.vtable.GetParam(this, name, value_out); }

ON_PostEffectParams_SetParam :: inline (this: *ON_PostEffectParams, name: *s16, value: *ON_XMLVariant) -> bool { return this.vtable.SetParam(this, name, value); }

ON_PostEffectParams_AsXMLParameters :: inline (this: *ON_PostEffectParams) -> *ON_XMLParameters { return this.vtable.AsXMLParameters(this); }

ON_PostEffectParams_DataCRC :: inline (this: *ON_PostEffectParams, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

ON_PostEffectParams_EVF :: inline (this: *ON_PostEffectParams, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

vtable :: (obj: *ON_PostEffectParams) -> *ON_PostEffectParams_VTable { return obj.vtable; }


// Class ON_PostEffect represents a single post effect.
ON_PostEffect :: struct {
    vtable: *ON_PostEffect_VTable;
    Types :: enum u32 {
        Unset       :: 0;
        Early       :: 1;
        ToneMapping :: 2;
        Late        :: 3;
    }

    CImpl :: struct {}
    _impl: *CImpl;
}
ON_PostEffect_VTable :: struct #type_info_none {
    Destructor: (this: *ON_PostEffect, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_PostEffect, pep: *ON_PostEffect) -> *ON_PostEffect #cpp_method;

    //operator==: (this: *ON_PostEffect, pep: *ON_PostEffect) -> bool #cpp_method;
    operator== :: (this: ON_PostEffect, pep: ON_PostEffect) -> bool  {
        push_context context {
        return operator==(*this, *pep);
        }
    }
    //operator!=: (this: *ON_PostEffect, pep: *ON_PostEffect) -> bool #cpp_method;
    operator!= :: (this: ON_PostEffect, pep: ON_PostEffect) -> bool  {
        push_context context {
        return operator!=(*this, *pep);
        }
    }

    Type: (this: *ON_PostEffect) -> ON_PostEffect.Types #cpp_method;

    Id: (this: *ON_PostEffect) -> ON_UUID #cpp_method;

    LocalName: (this: *ON_PostEffect) -> ON_wString #cpp_method #cpp_return_type_is_non_pod;

    On: (this: *ON_PostEffect) -> bool #cpp_method;

    SetOn: (this: *ON_PostEffect, on: bool) -> void #cpp_method;

    Shown: (this: *ON_PostEffect) -> bool #cpp_method;

    SetShown: (this: *ON_PostEffect, shown: bool) -> void #cpp_method;

    GetParameter: (this: *ON_PostEffect, param_name: *s16) -> ON_XMLVariant #cpp_method #cpp_return_type_is_non_pod;

    SetParameter: (this: *ON_PostEffect, param_name: *s16, param_value: *ON_XMLVariant) -> bool #cpp_method;

    GetAllParameters: (this: *ON_PostEffect, params: *ON_PostEffectParams) -> bool #cpp_method;

    SetAllParameters: (this: *ON_PostEffect, params: *ON_PostEffectParams) -> bool #cpp_method;

    XMLNode_1: (this: /*const*/ *ON_PostEffect) -> *ON_XMLNode #cpp_method;

    XMLNode: (this: *ON_PostEffect) -> *ON_XMLNode #cpp_method;

    DataCRC: (this: *ON_PostEffect, current_remainder: ON__UINT32) -> ON__UINT32 #cpp_method;
}

ON_PostEffect_Destructor :: inline (this: *ON_PostEffect, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_PostEffect_operator_assign :: inline (this: *ON_PostEffect, pep: *ON_PostEffect) -> *ON_PostEffect { return this.vtable.operator_assign(this, pep); }

operator== :: inline (this: *ON_PostEffect, pep: *ON_PostEffect) -> bool { return this.vtable.operator==(this, pep); }
operator!= :: inline (this: *ON_PostEffect, pep: *ON_PostEffect) -> bool { return this.vtable.operator!=(this, pep); }

ON_PostEffect_Type :: inline (this: *ON_PostEffect) -> ON_PostEffect.Types { return this.vtable.Type(this); }

ON_PostEffect_Id :: inline (this: *ON_PostEffect) -> ON_UUID { return this.vtable.Id(this); }

ON_PostEffect_LocalName :: inline (this: *ON_PostEffect) -> ON_wString { return this.vtable.LocalName(this); }

ON_PostEffect_On :: inline (this: *ON_PostEffect) -> bool { return this.vtable.On(this); }

ON_PostEffect_SetOn :: inline (this: *ON_PostEffect, on: bool) { this.vtable.SetOn(this, on); }

ON_PostEffect_Shown :: inline (this: *ON_PostEffect) -> bool { return this.vtable.Shown(this); }

ON_PostEffect_SetShown :: inline (this: *ON_PostEffect, shown: bool) { this.vtable.SetShown(this, shown); }

ON_PostEffect_GetParameter :: inline (this: *ON_PostEffect, param_name: *s16) -> ON_XMLVariant { return this.vtable.GetParameter(this, param_name); }

ON_PostEffect_SetParameter :: inline (this: *ON_PostEffect, param_name: *s16, param_value: *ON_XMLVariant) -> bool { return this.vtable.SetParameter(this, param_name, param_value); }

ON_PostEffect_GetAllParameters :: inline (this: *ON_PostEffect, params: *ON_PostEffectParams) -> bool { return this.vtable.GetAllParameters(this, params); }

ON_PostEffect_SetAllParameters :: inline (this: *ON_PostEffect, params: *ON_PostEffectParams) -> bool { return this.vtable.SetAllParameters(this, params); }

ON_PostEffect_XMLNode_1 :: inline (this: /*const*/ *ON_PostEffect) -> *ON_XMLNode { return this.vtable.XMLNode_1(this); }

ON_PostEffect_XMLNode :: inline (this: *ON_PostEffect) -> *ON_XMLNode { return this.vtable.XMLNode(this); }

ON_PostEffect_DataCRC :: inline (this: *ON_PostEffect, current_remainder: ON__UINT32) -> ON__UINT32 { return this.vtable.DataCRC(this, current_remainder); }

vtable :: (obj: *ON_PostEffect) -> *ON_PostEffect_VTable { return obj.vtable; }


// Class ON_PostEffects represents a collection of post effects.
ON_PostEffects :: struct {
    vtable: *ON_PostEffects_VTable;
    CImpl :: struct {}
    _impl: *CImpl;
}
ON_PostEffects_VTable :: struct #type_info_none {
    Destructor: (this: *ON_PostEffects, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    operator_assign: (this: *ON_PostEffects, peps: *ON_PostEffects) -> *ON_PostEffects #cpp_method;

    //operator==: (this: *ON_PostEffects, peps: *ON_PostEffects) -> bool #cpp_method;
    operator== :: (this: ON_PostEffects, peps: ON_PostEffects) -> bool  {
        push_context context {
        return operator==(*this, *peps);
        }
    }
    //operator!=: (this: *ON_PostEffects, peps: *ON_PostEffects) -> bool #cpp_method;
    operator!= :: (this: ON_PostEffects, peps: ON_PostEffects) -> bool  {
        push_context context {
            return operator!=(*this, *peps);
        }
    }

    PostEffectFromId_1: (this: /*const*/ *ON_PostEffects, id: /*const reference*/ *ON_UUID) -> *ON_PostEffect #cpp_method;

    PostEffectFromId: (this: *ON_PostEffects, id: /*const reference*/ *ON_UUID) -> *ON_PostEffect #cpp_method;

    GetPostEffects_1: (this: /*const*/ *ON_PostEffects, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) -> void #cpp_method;

    GetPostEffects: (this: *ON_PostEffects, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) -> void #cpp_method;

    GetPostEffects_1_1: (this: /*const*/ *ON_PostEffects, type: ON_PostEffect.Types, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) -> void #cpp_method;

    GetPostEffects_2: (this: *ON_PostEffects, type: ON_PostEffect.Types, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) -> void #cpp_method;

    AddPostEffect: (this: *ON_PostEffects, type: ON_PostEffect.Types, id: *ON_UUID, local_name: *s16, params: *ON_PostEffectParams, is_listable: bool, listable_on: bool, listable_shown: bool) -> bool #cpp_method;

    MovePostEffectBefore: (this: *ON_PostEffects, id_move: *ON_UUID, id_before: *ON_UUID) -> bool #cpp_method;

    GetSelectedPostEffect: (this: *ON_PostEffects, type: ON_PostEffect.Types, id_out: *ON_UUID) -> bool #cpp_method;

    SetSelectedPostEffect: (this: *ON_PostEffects, type: ON_PostEffect.Types, id: *ON_UUID) -> void #cpp_method;

    EVF: (this: *ON_PostEffects, func: *s16, data: *void) -> *void #cpp_method;

    OnInternalXmlChanged: (this: *ON_PostEffects, unknown0: *ON_PostEffects) -> void #cpp_method;
}

ON_PostEffects_Destructor :: inline (this: *ON_PostEffects, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_PostEffects_operator_assign :: inline (this: *ON_PostEffects, peps: *ON_PostEffects) -> *ON_PostEffects { return this.vtable.operator_assign(this, peps); }

operator== :: inline (this: *ON_PostEffects, peps: *ON_PostEffects) -> bool { return this.vtable.operator==(this, peps); }
operator!= :: inline (this: *ON_PostEffects, peps: *ON_PostEffects) -> bool { return this.vtable.operator!=(this, peps); }

ON_PostEffects_PostEffectFromId_1 :: inline (this: /*const*/ *ON_PostEffects, id: /*const reference*/ *ON_UUID) -> *ON_PostEffect { return this.vtable.PostEffectFromId_1(this, id); }

ON_PostEffects_PostEffectFromId :: inline (this: *ON_PostEffects, id: /*const reference*/ *ON_UUID) -> *ON_PostEffect { return this.vtable.PostEffectFromId(this, id); }

ON_PostEffects_GetPostEffects_1 :: inline (this: /*const*/ *ON_PostEffects, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) { this.vtable.GetPostEffects_1(this, a); }

ON_PostEffects_GetPostEffects :: inline (this: *ON_PostEffects, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) { this.vtable.GetPostEffects(this, a); }

ON_PostEffects_GetPostEffects_1_1 :: inline (this: /*const*/ *ON_PostEffects, type: ON_PostEffect.Types, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) { this.vtable.GetPostEffects_1_1(this, type, a); }

ON_PostEffects_GetPostEffects_2 :: inline (this: *ON_PostEffects, type: ON_PostEffect.Types, a: /*reference*/ *ON_SimpleArray(*ON_PostEffect)) { this.vtable.GetPostEffects_2(this, type, a); }

ON_PostEffects_AddPostEffect :: inline (this: *ON_PostEffects, type: ON_PostEffect.Types, id: *ON_UUID, local_name: *s16, params: *ON_PostEffectParams, is_listable: bool, listable_on: bool, listable_shown: bool) -> bool { return this.vtable.AddPostEffect(this, type, id, local_name, params, is_listable, listable_on, listable_shown); }

ON_PostEffects_MovePostEffectBefore :: inline (this: *ON_PostEffects, id_move: *ON_UUID, id_before: *ON_UUID) -> bool { return this.vtable.MovePostEffectBefore(this, id_move, id_before); }

ON_PostEffects_GetSelectedPostEffect :: inline (this: *ON_PostEffects, type: ON_PostEffect.Types, id_out: *ON_UUID) -> bool { return this.vtable.GetSelectedPostEffect(this, type, id_out); }

ON_PostEffects_SetSelectedPostEffect :: inline (this: *ON_PostEffects, type: ON_PostEffect.Types, id: *ON_UUID) { this.vtable.SetSelectedPostEffect(this, type, id); }

ON_PostEffects_EVF :: inline (this: *ON_PostEffects, func: *s16, data: *void) -> *void { return this.vtable.EVF(this, func, data); }

ON_PostEffects_OnInternalXmlChanged :: inline (this: *ON_PostEffects, unknown0: *ON_PostEffects) { this.vtable.OnInternalXmlChanged(this, unknown0); }

vtable :: (obj: *ON_PostEffects) -> *ON_PostEffects_VTable { return obj.vtable; }


ON_MeshModifier :: struct {
    vtable: *ON_MeshModifier_VTable;
    CImpl :: struct {}
    m_impl: *CImpl;
}
ON_MeshModifier_VTable :: struct #type_info_none {
    Destructor: (this: *ON_MeshModifier, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;

    Uuid: (this: *ON_MeshModifier) -> ON_UUID #cpp_method;

    AddChildXML: (this: *ON_MeshModifier, root: *ON_XMLRootNode) -> *ON_XMLNode #cpp_method;
}

ON_MeshModifier_Destructor :: inline (this: *ON_MeshModifier, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

ON_MeshModifier_Uuid :: inline (this: *ON_MeshModifier) -> ON_UUID { return this.vtable.Uuid(this); }

ON_MeshModifier_AddChildXML :: inline (this: *ON_MeshModifier, root: *ON_XMLRootNode) -> *ON_XMLNode { return this.vtable.AddChildXML(this, root); }

vtable :: (obj: *ON_MeshModifier) -> *ON_MeshModifier_VTable { return obj.vtable; }


ON_DisplacementUserData :: struct {
    #as using on_xmluserdata: ON_XMLUserData;
}

ON_Displacement :: struct {
    #as using on_meshmodifier: ON_MeshModifier;

    // Specifies which formula is used to calculate sweep resolution from initial quality.
    // Default = Default formula.
    // AbsoluteToleranceDependent = Formula used in Rhino 5. Dependent on absolute tolerance.
    SweepResolutionFormulas :: enum s32 {
        Default                    :: 0;
        AbsoluteToleranceDependent :: 1;
    }

    // Sub-items can exist to override the top-level parameters for polysurface/SubD faces.
    SubItem :: struct {
        CImpl :: struct {}
        m_impl: *CImpl;
    }

    SubItemIterator :: struct {
        CImpl :: struct {}
        m_impl: *CImpl;
    }

    Defaults :: struct {
        __empty_struct_padding: u8; // C++ makes empty structs have length 1
    }

    CImplDSP :: struct {}
    m_impl_dsp: *CImplDSP;
}

ON_EdgeSofteningUserData :: struct {
    #as using on_xmluserdata: ON_XMLUserData;
}

ON_EdgeSoftening :: struct {
    #as using on_meshmodifier: ON_MeshModifier;

    Defaults :: struct {
        __empty_struct_padding: u8; // C++ makes empty structs have length 1
    }
}

ON_ThickeningUserData :: struct {
    #as using on_xmluserdata: ON_XMLUserData;
}

ON_Thickening :: struct {
    #as using on_meshmodifier: ON_MeshModifier;

    Defaults :: struct {
        __empty_struct_padding: u8; // C++ makes empty structs have length 1
    }
}

ON_CurvePipingUserData :: struct {
    #as using on_xmluserdata: ON_XMLUserData;
}

ON_CurvePiping :: struct {
    #as using on_meshmodifier: ON_MeshModifier;

    CapTypes :: enum s32 {
        None :: 0;
        Flat :: 1;
        Box  :: 2;
        Dome :: 3;
    }

    Defaults :: struct {
        __empty_struct_padding: u8; // C++ makes empty structs have length 1
    }
}

ON_ShutLiningUserData :: struct {
    #as using on_xmluserdata: ON_XMLUserData;
}

ON_ShutLining :: struct {
    #as using on_meshmodifier: ON_MeshModifier;

    Curve :: struct {
        Defaults :: struct {
            __empty_struct_padding: u8; // C++ makes empty structs have length 1
        }

        CImpl :: struct {}
        m_impl: *CImpl;
    }

    CurveIterator :: struct {
        CImpl :: struct {}
        m_impl: *CImpl;
    }

    Defaults :: struct {
        __empty_struct_padding: u8; // C++ makes empty structs have length 1
    }

    CImplSL :: struct {}
    m_impl_sl: *CImplSL;
}

ON_MeshModifiers :: struct {
    CImpl :: struct {}
    m_impl: *CImpl;
}

/*
Description:
The ONX_ErrorCounter is useful for counting errors that occur in a section of code.
*/
ONX_ErrorCounter :: struct {
    m_failure_count:                   u32 = 0;
    m_error_count:                     u32 = 0;
    m_warning_count:                   u32 = 0;

    m_state_bit_field:                 u32 = 0;
    m_opennurbs_library_error_count:   u32 = 0;
    m_opennurbs_library_warning_count: u32 = 0;
}

/*
Description:
Used to store user data information in an ONX_Model.
*/
ONX_Model_UserData :: struct {
    m_uuid:                        ON_UUID;
    m_goo:                         ON_3dmGoo;

    // 3dm version = 1,2,3,4,5,50,60,...
    m_usertable_3dm_version:       u32 = 0;

    // opennurbs_version = old yyyymmddn value or
    // a value from ON_VersionNumberConstruct().
    m_usertable_opennurbs_version: u32 = 0;
}

/*
Description:
Pedegodgical example of all the things in an OpenNURBS 3dm archive.
The openNURBS examples use ONX_Model to store the information
read from 3dm archives.  Please study example_read.cpp for
details.
*/
ONX_Model :: struct {
    vtable: *ONX_Model_VTable;
    // 3dm archive start section information
    m_3dm_file_version:         s32 = 0;
    m_3dm_opennurbs_version:    u32 = 0;
    m_3dm_file_byte_count:      ON__UINT64 = 0;

    m_sStartSectionComments:    ON_String;

    // Properties include revision history, notes, information about
    // the application that created the file, and an optional preview image.
    m_properties:               ON_3dmProperties;

    // Settings include tolerance, and unit system, and defaults used
    // for creating views and objects.
    m_settings:                 ON_3dmSettings;

    m_userdata_table:           ON_SimpleArray(*ONX_Model_UserData);

    m_default_render_material:  ON_ModelComponentReference;
    m_default_line_pattern:     ON_ModelComponentReference;
    m_default_layer:            ON_ModelComponentReference;
    m_default_text_style:       ON_ModelComponentReference;
    m_default_dimension_style:  ON_ModelComponentReference;

    //m_private:                  *ONX_ModelPrivate;

    // A manifest of everything in the model. Use the manifest to find
    // objects from a name, id or index.
    m_manifest:                 ON_ComponentManifest;
    m_original_to_manifest_map: ON_ManifestMap;
    m_manifest_to_original_map: ON_ManifestMap;

    ONX_ModelComponentReferenceLink :: struct {}

    // A map used to lookup by serial number.
    m_mcr_sn_map:               ON_SerialNumberMap;
    m_mcr_link_fsp:             ON_FixedSizePool;

    // C4251: "...needs to have dll-interface to be used by clients of class". This warning is not correct.
    // m_mcr_lists is private and all code that manages it is explicitly implemented in the DLL.
    ONX_ModelComponentList :: struct {
        m_component_type: ON_ModelComponent.Type = .Unset;
        m_count:          u32 = 0;
        m_first_mcr_link: *ONX_ModelComponentReferenceLink = null;
        m_last_mcr_link:  *ONX_ModelComponentReferenceLink = null;
    }

    //-------------------------------------------------------------------------------------------
    // The following two lines are deprecated due to limiting the number of types to 16.
    // They are no longer used. Instead, a new list inside the extension is used. This is private
    // and is only used internally to ONX_Model but it can't be removed without breaking the SDK.
    //-------------------------------------------------------------------------------------------
    anon_enum_41 :: enum u32 {
        ONX_MCR_LIST_COUNT :: 16;
    }
    m_mcr_lists:                [16] ONX_ModelComponentList; // DEPRECATED -- not used.

    //
    // END Rendering information
    //
    /////////////////////////////////////////////////////////////////////
    m_model_geometry_bbox:      ON_BoundingBox;
    m_render_light_bbox:        ON_BoundingBox;
    m_model_user_string_list:   *ON_DocumentUserStringList = null;
}
ONX_Model_VTable :: struct #type_info_none {
    #import "Windows";
    Destructor: (this: *ONX_Model, flags: Msvc_Destructor_Flags = .NONE) -> void #cpp_method;
}
ONX_Model_Destructor :: inline (this: *ONX_Model, flags: Msvc_Destructor_Flags = .NONE) { this.vtable.Destructor(this, flags); }

//vtable :: (obj: *ONX_Model) -> *ONX_Model_VTable { return obj.vtable; }


ONX_ModelComponentIterator :: struct {
    m_component_type:             ON_ModelComponent.Type = .Unset;
    m_model:                      *ONX_Model = null;
    m_model_content_version:      ON__UINT64 = 0;
    m_list:                       *ONX_Model.ONX_ModelComponentList = null;
    m_link:                       *ONX_Model.ONX_ModelComponentReferenceLink = null;
    m_current_component_sn:       ON__UINT64 = 0;
    m_next_component_sn:          ON__UINT64 = 0;
    m_prev_component_sn:          ON__UINT64 = 0;

    // The current component is a weak ref so that a stand alone iterator cannot
    // keep the current element alive since iterations often involve deletion.
    // The iterators next/prev will still work as expected when the current element
    // is deleted. In particular, an iterator can be used to efficiently delete
    // portions of a model and have the deletion occur when many people
    // expect it to occur and not at a later time. This makes debugging
    // invalid deletions much easier.
    m_current_component_weak_ref: ON_ModelComponentWeakReference;
}

ONX_ModelTest :: struct {
    /// <summary>
    /// ONX_ModelTest::Type identifies the type of file reading test to perform.
    /// </summary>
    Type :: enum u8 {
        Unset                :: 0;

        Read                 :: 1;

        ReadWrite            :: 2;

        ReadWriteRead        :: 3;

        ReadWriteReadCompare :: 4;
    }

    /// <summary>
    /// ONX_ModelTest::Result reports the result of a test.
    /// </summary>
    Result :: enum u8 {
        Unset    :: 0;

        Fail     :: 1;

        Errors   :: 2;

        Warnings :: 3;

        Pass     :: 4;

        Skip     :: 5;
    }

    m_test_type:              Type = .Unset;

    m_source_3dm_file_path:   ON_wString;

    // if set, used when printing the name of m_source_3dm_file_path in the text
    // log so results from different computers can be compared.
    m_text_log_3dm_file_path: ON_wString;

    m_model_3dm_file_version: [3] u32;

    m_current_test_index:     u32 = 0;

    m_test_result:            Result = .Unset;
    m_test_results:           [7] Result;

    m_error_count:            ONX_ErrorCounter;
    m_error_counts:           [7] ONX_ErrorCounter;

    // m_model[0] = model from source file
    // m_model[1] = model[0] -> write to current 3dm version -> read into model[1]
    // m_model[2] = model[0] -> write to prev 3dm version -> read into model[2]
    m_model:                  [3] *ONX_Model;

    // m_model_hash[i] = m_model[0].Hash()
    m_model_hash:             [3] ON_SHA1_Hash;
}

#scope_file

#import "Basic"; // For assert


#run {
    {
        instance: ON_U;
        assert(((cast(*void)(*instance.b)) - cast(*void)(*instance)) == 0, "ON_U.b has unexpected offset % instead of 0", ((cast(*void)(*instance.b)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_U.b)) == 8, "ON_U.b has unexpected size % instead of 8", size_of(type_of(ON_U.b)));
        assert(((cast(*void)(*instance.h)) - cast(*void)(*instance)) == 0, "ON_U.h has unexpected offset % instead of 0", ((cast(*void)(*instance.h)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_U.h)) == 8, "ON_U.h has unexpected size % instead of 8", size_of(type_of(ON_U.h)));
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ON_U.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_U.i)) == 4, "ON_U.i has unexpected size % instead of 4", size_of(type_of(ON_U.i)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 0, "ON_U.j has unexpected offset % instead of 0", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_U.j)) == 8, "ON_U.j has unexpected size % instead of 8", size_of(type_of(ON_U.j)));
        assert(((cast(*void)(*instance.p)) - cast(*void)(*instance)) == 0, "ON_U.p has unexpected offset % instead of 0", ((cast(*void)(*instance.p)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_U.p)) == 8, "ON_U.p has unexpected size % instead of 8", size_of(type_of(ON_U.p)));
        assert(((cast(*void)(*instance.d)) - cast(*void)(*instance)) == 0, "ON_U.d has unexpected offset % instead of 0", ((cast(*void)(*instance.d)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_U.d)) == 8, "ON_U.d has unexpected size % instead of 8", size_of(type_of(ON_U.d)));
        assert(size_of(ON_U) == 8, "ON_U has size % instead of 8", size_of(ON_U));
    }

    {
        instance: ON_2dex;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ON_2dex.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dex.i)) == 4, "ON_2dex.i has unexpected size % instead of 4", size_of(type_of(ON_2dex.i)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 4, "ON_2dex.j has unexpected offset % instead of 4", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dex.j)) == 4, "ON_2dex.j has unexpected size % instead of 4", size_of(type_of(ON_2dex.j)));
        assert(size_of(ON_2dex) == 8, "ON_2dex has size % instead of 8", size_of(ON_2dex));
    }

    {
        instance: ON_2udex;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ON_2udex.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2udex.i)) == 4, "ON_2udex.i has unexpected size % instead of 4", size_of(type_of(ON_2udex.i)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 4, "ON_2udex.j has unexpected offset % instead of 4", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2udex.j)) == 4, "ON_2udex.j has unexpected size % instead of 4", size_of(type_of(ON_2udex.j)));
        assert(size_of(ON_2udex) == 8, "ON_2udex has size % instead of 8", size_of(ON_2udex));
    }

    {
        instance: ON_3dex;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ON_3dex.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dex.i)) == 4, "ON_3dex.i has unexpected size % instead of 4", size_of(type_of(ON_3dex.i)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 4, "ON_3dex.j has unexpected offset % instead of 4", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dex.j)) == 4, "ON_3dex.j has unexpected size % instead of 4", size_of(type_of(ON_3dex.j)));
        assert(((cast(*void)(*instance.k)) - cast(*void)(*instance)) == 8, "ON_3dex.k has unexpected offset % instead of 8", ((cast(*void)(*instance.k)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dex.k)) == 4, "ON_3dex.k has unexpected size % instead of 4", size_of(type_of(ON_3dex.k)));
        assert(size_of(ON_3dex) == 12, "ON_3dex has size % instead of 12", size_of(ON_3dex));
    }

    {
        instance: ON_3udex;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ON_3udex.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3udex.i)) == 4, "ON_3udex.i has unexpected size % instead of 4", size_of(type_of(ON_3udex.i)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 4, "ON_3udex.j has unexpected offset % instead of 4", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3udex.j)) == 4, "ON_3udex.j has unexpected size % instead of 4", size_of(type_of(ON_3udex.j)));
        assert(((cast(*void)(*instance.k)) - cast(*void)(*instance)) == 8, "ON_3udex.k has unexpected offset % instead of 8", ((cast(*void)(*instance.k)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3udex.k)) == 4, "ON_3udex.k has unexpected size % instead of 4", size_of(type_of(ON_3udex.k)));
        assert(size_of(ON_3udex) == 12, "ON_3udex has size % instead of 12", size_of(ON_3udex));
    }

    {
        instance: ON_4dex;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ON_4dex.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dex.i)) == 4, "ON_4dex.i has unexpected size % instead of 4", size_of(type_of(ON_4dex.i)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 4, "ON_4dex.j has unexpected offset % instead of 4", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dex.j)) == 4, "ON_4dex.j has unexpected size % instead of 4", size_of(type_of(ON_4dex.j)));
        assert(((cast(*void)(*instance.k)) - cast(*void)(*instance)) == 8, "ON_4dex.k has unexpected offset % instead of 8", ((cast(*void)(*instance.k)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dex.k)) == 4, "ON_4dex.k has unexpected size % instead of 4", size_of(type_of(ON_4dex.k)));
        assert(((cast(*void)(*instance.l)) - cast(*void)(*instance)) == 12, "ON_4dex.l has unexpected offset % instead of 12", ((cast(*void)(*instance.l)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dex.l)) == 4, "ON_4dex.l has unexpected size % instead of 4", size_of(type_of(ON_4dex.l)));
        assert(size_of(ON_4dex) == 16, "ON_4dex has size % instead of 16", size_of(ON_4dex));
    }

    {
        instance: ON_4udex;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ON_4udex.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4udex.i)) == 4, "ON_4udex.i has unexpected size % instead of 4", size_of(type_of(ON_4udex.i)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 4, "ON_4udex.j has unexpected offset % instead of 4", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4udex.j)) == 4, "ON_4udex.j has unexpected size % instead of 4", size_of(type_of(ON_4udex.j)));
        assert(((cast(*void)(*instance.k)) - cast(*void)(*instance)) == 8, "ON_4udex.k has unexpected offset % instead of 8", ((cast(*void)(*instance.k)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4udex.k)) == 4, "ON_4udex.k has unexpected size % instead of 4", size_of(type_of(ON_4udex.k)));
        assert(((cast(*void)(*instance.l)) - cast(*void)(*instance)) == 12, "ON_4udex.l has unexpected offset % instead of 12", ((cast(*void)(*instance.l)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4udex.l)) == 4, "ON_4udex.l has unexpected size % instead of 4", size_of(type_of(ON_4udex.l)));
        assert(size_of(ON_4udex) == 16, "ON_4udex has size % instead of 16", size_of(ON_4udex));
    }

    assert(size_of(ON) == 1, "ON has size % instead of 1", size_of(ON));

    {
        instance: ON_COMPONENT_INDEX;
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 0, "ON_COMPONENT_INDEX.m_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_COMPONENT_INDEX.m_type)) == 4, "ON_COMPONENT_INDEX.m_type has unexpected size % instead of 4", size_of(type_of(ON_COMPONENT_INDEX.m_type)));
        assert(((cast(*void)(*instance.m_index)) - cast(*void)(*instance)) == 4, "ON_COMPONENT_INDEX.m_index has unexpected offset % instead of 4", ((cast(*void)(*instance.m_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_COMPONENT_INDEX.m_index)) == 4, "ON_COMPONENT_INDEX.m_index has unexpected size % instead of 4", size_of(type_of(ON_COMPONENT_INDEX.m_index)));
        assert(size_of(ON_COMPONENT_INDEX) == 8, "ON_COMPONENT_INDEX has size % instead of 8", size_of(ON_COMPONENT_INDEX));
    }

    {
        instance: ON_ComponentIndexAndNumber;
        assert(((cast(*void)(*instance.m_ci)) - cast(*void)(*instance)) == 0, "ON_ComponentIndexAndNumber.m_ci has unexpected offset % instead of 0", ((cast(*void)(*instance.m_ci)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentIndexAndNumber.m_ci)) == 8, "ON_ComponentIndexAndNumber.m_ci has unexpected size % instead of 8", size_of(type_of(ON_ComponentIndexAndNumber.m_ci)));
        assert(((cast(*void)(*instance.m_x)) - cast(*void)(*instance)) == 8, "ON_ComponentIndexAndNumber.m_x has unexpected offset % instead of 8", ((cast(*void)(*instance.m_x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentIndexAndNumber.m_x)) == 8, "ON_ComponentIndexAndNumber.m_x has unexpected size % instead of 8", size_of(type_of(ON_ComponentIndexAndNumber.m_x)));
        assert(size_of(ON_ComponentIndexAndNumber) == 16, "ON_ComponentIndexAndNumber has size % instead of 16", size_of(ON_ComponentIndexAndNumber));
    }

    {
        instance: ON_ErrorEvent;
        assert(((cast(*void)(*instance.m_event_type)) - cast(*void)(*instance)) == 0, "ON_ErrorEvent.m_event_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_event_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_event_type)) == 1, "ON_ErrorEvent.m_event_type has unexpected size % instead of 1", size_of(type_of(ON_ErrorEvent.m_event_type)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 1, "ON_ErrorEvent.m_reserved1 has unexpected offset % instead of 1", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_reserved1)) == 1, "ON_ErrorEvent.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_ErrorEvent.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 2, "ON_ErrorEvent.m_reserved2 has unexpected offset % instead of 2", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_reserved2)) == 2, "ON_ErrorEvent.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_ErrorEvent.m_reserved2)));
        assert(((cast(*void)(*instance.m_line_number)) - cast(*void)(*instance)) == 4, "ON_ErrorEvent.m_line_number has unexpected offset % instead of 4", ((cast(*void)(*instance.m_line_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_line_number)) == 4, "ON_ErrorEvent.m_line_number has unexpected size % instead of 4", size_of(type_of(ON_ErrorEvent.m_line_number)));
        assert(((cast(*void)(*instance.m_file_name)) - cast(*void)(*instance)) == 8, "ON_ErrorEvent.m_file_name has unexpected offset % instead of 8", ((cast(*void)(*instance.m_file_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_file_name)) == 8, "ON_ErrorEvent.m_file_name has unexpected size % instead of 8", size_of(type_of(ON_ErrorEvent.m_file_name)));
        assert(((cast(*void)(*instance.m_function_name)) - cast(*void)(*instance)) == 16, "ON_ErrorEvent.m_function_name has unexpected offset % instead of 16", ((cast(*void)(*instance.m_function_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_function_name)) == 8, "ON_ErrorEvent.m_function_name has unexpected size % instead of 8", size_of(type_of(ON_ErrorEvent.m_function_name)));
        assert(((cast(*void)(*instance.m_description)) - cast(*void)(*instance)) == 24, "ON_ErrorEvent.m_description has unexpected offset % instead of 24", ((cast(*void)(*instance.m_description)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_description)) == 8, "ON_ErrorEvent.m_description has unexpected size % instead of 8", size_of(type_of(ON_ErrorEvent.m_description)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 32, "ON_ErrorEvent.m_buffer has unexpected offset % instead of 32", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorEvent.m_buffer)) == 128, "ON_ErrorEvent.m_buffer has unexpected size % instead of 128", size_of(type_of(ON_ErrorEvent.m_buffer)));
        assert(size_of(ON_ErrorEvent) == 160, "ON_ErrorEvent has size % instead of 160", size_of(ON_ErrorEvent));
    }

    {
        instance: ON_ErrorLog;
        assert(((cast(*void)(*instance.m_event_count)) - cast(*void)(*instance)) == 8, "ON_ErrorLog.m_event_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_event_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorLog.m_event_count)) == 4, "ON_ErrorLog.m_event_count has unexpected size % instead of 4", size_of(type_of(ON_ErrorLog.m_event_count)));
        assert(((cast(*void)(*instance.m_events)) - cast(*void)(*instance)) == 16, "ON_ErrorLog.m_events has unexpected offset % instead of 16", ((cast(*void)(*instance.m_events)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ErrorLog.m_events)) == 5120, "ON_ErrorLog.m_events has unexpected size % instead of 5120", size_of(type_of(ON_ErrorLog.m_events)));
        assert(size_of(ON_ErrorLog) == 5136, "ON_ErrorLog has size % instead of 5136", size_of(ON_ErrorLog));
    }

    {
        instance: ON_MemoryAllocationTracking;
        assert(((cast(*void)(*instance.m_this_statck_depth)) - cast(*void)(*instance)) == 0, "ON_MemoryAllocationTracking.m_this_statck_depth has unexpected offset % instead of 0", ((cast(*void)(*instance.m_this_statck_depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MemoryAllocationTracking.m_this_statck_depth)) == 4, "ON_MemoryAllocationTracking.m_this_statck_depth has unexpected size % instead of 4", size_of(type_of(ON_MemoryAllocationTracking.m_this_statck_depth)));
        assert(((cast(*void)(*instance.m_this_crt_dbg_flag0)) - cast(*void)(*instance)) == 4, "ON_MemoryAllocationTracking.m_this_crt_dbg_flag0 has unexpected offset % instead of 4", ((cast(*void)(*instance.m_this_crt_dbg_flag0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MemoryAllocationTracking.m_this_crt_dbg_flag0)) == 4, "ON_MemoryAllocationTracking.m_this_crt_dbg_flag0 has unexpected size % instead of 4", size_of(type_of(ON_MemoryAllocationTracking.m_this_crt_dbg_flag0)));
        assert(size_of(ON_MemoryAllocationTracking) == 8, "ON_MemoryAllocationTracking has size % instead of 8", size_of(ON_MemoryAllocationTracking));
    }

    {
        instance: ON_RANDOM_NUMBER_CONTEXT;
        assert(((cast(*void)(*instance.mti)) - cast(*void)(*instance)) == 0, "ON_RANDOM_NUMBER_CONTEXT.mti has unexpected offset % instead of 0", ((cast(*void)(*instance.mti)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RANDOM_NUMBER_CONTEXT.mti)) == 4, "ON_RANDOM_NUMBER_CONTEXT.mti has unexpected size % instead of 4", size_of(type_of(ON_RANDOM_NUMBER_CONTEXT.mti)));
        assert(((cast(*void)(*instance.mt)) - cast(*void)(*instance)) == 4, "ON_RANDOM_NUMBER_CONTEXT.mt has unexpected offset % instead of 4", ((cast(*void)(*instance.mt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RANDOM_NUMBER_CONTEXT.mt)) == 2496, "ON_RANDOM_NUMBER_CONTEXT.mt has unexpected size % instead of 2496", size_of(type_of(ON_RANDOM_NUMBER_CONTEXT.mt)));
        assert(size_of(ON_RANDOM_NUMBER_CONTEXT) == 2500, "ON_RANDOM_NUMBER_CONTEXT has size % instead of 2500", size_of(ON_RANDOM_NUMBER_CONTEXT));
    }

    {
        instance: ON_RandomNumberGenerator;
        assert(((cast(*void)(*instance.m_rand_context)) - cast(*void)(*instance)) == 0, "ON_RandomNumberGenerator.m_rand_context has unexpected offset % instead of 0", ((cast(*void)(*instance.m_rand_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RandomNumberGenerator.m_rand_context)) == 2500, "ON_RandomNumberGenerator.m_rand_context has unexpected size % instead of 2500", size_of(type_of(ON_RandomNumberGenerator.m_rand_context)));
        assert(size_of(ON_RandomNumberGenerator) == 2500, "ON_RandomNumberGenerator has size % instead of 2500", size_of(ON_RandomNumberGenerator));
    }

    {
        instance: ON_UuidIndex;
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 0, "ON_UuidIndex.m_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidIndex.m_id)) == 16, "ON_UuidIndex.m_id has unexpected size % instead of 16", size_of(type_of(ON_UuidIndex.m_id)));
        assert(((cast(*void)(*instance.m_i)) - cast(*void)(*instance)) == 16, "ON_UuidIndex.m_i has unexpected offset % instead of 16", ((cast(*void)(*instance.m_i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidIndex.m_i)) == 4, "ON_UuidIndex.m_i has unexpected size % instead of 4", size_of(type_of(ON_UuidIndex.m_i)));
        assert(size_of(ON_UuidIndex) == 20, "ON_UuidIndex has size % instead of 20", size_of(ON_UuidIndex));
    }

    {
        instance: ON_UuidPtr;
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 0, "ON_UuidPtr.m_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidPtr.m_id)) == 16, "ON_UuidPtr.m_id has unexpected size % instead of 16", size_of(type_of(ON_UuidPtr.m_id)));
        assert(((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)) == 16, "ON_UuidPtr.m_ptr has unexpected offset % instead of 16", ((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidPtr.m_ptr)) == 8, "ON_UuidPtr.m_ptr has unexpected size % instead of 8", size_of(type_of(ON_UuidPtr.m_ptr)));
        assert(size_of(ON_UuidPtr) == 24, "ON_UuidPtr has size % instead of 24", size_of(ON_UuidPtr));
    }

    {
        instance: ON_UnicodeErrorParameters;
        assert(((cast(*void)(*instance.m_error_status)) - cast(*void)(*instance)) == 0, "ON_UnicodeErrorParameters.m_error_status has unexpected offset % instead of 0", ((cast(*void)(*instance.m_error_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnicodeErrorParameters.m_error_status)) == 4, "ON_UnicodeErrorParameters.m_error_status has unexpected size % instead of 4", size_of(type_of(ON_UnicodeErrorParameters.m_error_status)));
        assert(((cast(*void)(*instance.m_error_mask)) - cast(*void)(*instance)) == 4, "ON_UnicodeErrorParameters.m_error_mask has unexpected offset % instead of 4", ((cast(*void)(*instance.m_error_mask)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnicodeErrorParameters.m_error_mask)) == 4, "ON_UnicodeErrorParameters.m_error_mask has unexpected size % instead of 4", size_of(type_of(ON_UnicodeErrorParameters.m_error_mask)));
        assert(((cast(*void)(*instance.m_error_code_point)) - cast(*void)(*instance)) == 8, "ON_UnicodeErrorParameters.m_error_code_point has unexpected offset % instead of 8", ((cast(*void)(*instance.m_error_code_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnicodeErrorParameters.m_error_code_point)) == 4, "ON_UnicodeErrorParameters.m_error_code_point has unexpected size % instead of 4", size_of(type_of(ON_UnicodeErrorParameters.m_error_code_point)));
        assert(size_of(ON_UnicodeErrorParameters) == 12, "ON_UnicodeErrorParameters has size % instead of 12", size_of(ON_UnicodeErrorParameters));
    }

    {
        instance: ON_UnicodeShortCodePoint;
        assert(((cast(*void)(*instance.m_unicode_code_point)) - cast(*void)(*instance)) == 0, "ON_UnicodeShortCodePoint.m_unicode_code_point has unexpected offset % instead of 0", ((cast(*void)(*instance.m_unicode_code_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnicodeShortCodePoint.m_unicode_code_point)) == 2, "ON_UnicodeShortCodePoint.m_unicode_code_point has unexpected size % instead of 2", size_of(type_of(ON_UnicodeShortCodePoint.m_unicode_code_point)));
        assert(size_of(ON_UnicodeShortCodePoint) == 2, "ON_UnicodeShortCodePoint has size % instead of 2", size_of(ON_UnicodeShortCodePoint));
    }

    {
        instance: ON_Big5CodePoint;
        assert(((cast(*void)(*instance.m_big5_code_point)) - cast(*void)(*instance)) == 0, "ON_Big5CodePoint.m_big5_code_point has unexpected offset % instead of 0", ((cast(*void)(*instance.m_big5_code_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Big5CodePoint.m_big5_code_point)) == 2, "ON_Big5CodePoint.m_big5_code_point has unexpected size % instead of 2", size_of(type_of(ON_Big5CodePoint.m_big5_code_point)));
        assert(size_of(ON_Big5CodePoint) == 2, "ON_Big5CodePoint has size % instead of 2", size_of(ON_Big5CodePoint));
    }

    {
        instance: ON_SleepLock;
        assert(((cast(*void)(*instance.m_locked)) - cast(*void)(*instance)) == 0, "ON_SleepLock.m_locked has unexpected offset % instead of 0", ((cast(*void)(*instance.m_locked)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SleepLock.m_locked)) == 4, "ON_SleepLock.m_locked has unexpected size % instead of 4", size_of(type_of(ON_SleepLock.m_locked)));
        assert(size_of(ON_SleepLock) == 4, "ON_SleepLock has size % instead of 4", size_of(ON_SleepLock));
    }

    {
        instance: ON_SleepLockGuard;
        assert(((cast(*void)(*instance.m_sleep_lock)) - cast(*void)(*instance)) == 0, "ON_SleepLockGuard.m_sleep_lock has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sleep_lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SleepLockGuard.m_sleep_lock)) == 8, "ON_SleepLockGuard.m_sleep_lock has unexpected size % instead of 8", size_of(type_of(ON_SleepLockGuard.m_sleep_lock)));
        assert(((cast(*void)(*instance.m_bIsManagingLock)) - cast(*void)(*instance)) == 8, "ON_SleepLockGuard.m_bIsManagingLock has unexpected offset % instead of 8", ((cast(*void)(*instance.m_bIsManagingLock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SleepLockGuard.m_bIsManagingLock)) == 1, "ON_SleepLockGuard.m_bIsManagingLock has unexpected size % instead of 1", size_of(type_of(ON_SleepLockGuard.m_bIsManagingLock)));
        assert(size_of(ON_SleepLockGuard) == 16, "ON_SleepLockGuard has size % instead of 16", size_of(ON_SleepLockGuard));
    }

    assert(size_of(ON_ComponentAttributes) == 1, "ON_ComponentAttributes has size % instead of 1", size_of(ON_ComponentAttributes));

    {
        instance: ON_StopWatch;
        assert(((cast(*void)(*instance.m_state)) - cast(*void)(*instance)) == 0, "ON_StopWatch.m_state has unexpected offset % instead of 0", ((cast(*void)(*instance.m_state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StopWatch.m_state)) == 1, "ON_StopWatch.m_state has unexpected size % instead of 1", size_of(type_of(ON_StopWatch.m_state)));
        assert(((cast(*void)(*instance.m_start)) - cast(*void)(*instance)) == 8, "ON_StopWatch.m_start has unexpected offset % instead of 8", ((cast(*void)(*instance.m_start)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StopWatch.m_start)) == 8, "ON_StopWatch.m_start has unexpected size % instead of 8", size_of(type_of(ON_StopWatch.m_start)));
        assert(((cast(*void)(*instance.m_stop)) - cast(*void)(*instance)) == 16, "ON_StopWatch.m_stop has unexpected offset % instead of 16", ((cast(*void)(*instance.m_stop)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StopWatch.m_stop)) == 8, "ON_StopWatch.m_stop has unexpected size % instead of 8", size_of(type_of(ON_StopWatch.m_stop)));
        assert(size_of(ON_StopWatch) == 24, "ON_StopWatch has size % instead of 24", size_of(ON_StopWatch));
    }

    {
        instance: ON_Locale;
        assert(((cast(*void)(*instance.m_numeric_locale)) - cast(*void)(*instance)) == 0, "ON_Locale.m_numeric_locale has unexpected offset % instead of 0", ((cast(*void)(*instance.m_numeric_locale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_numeric_locale)) == 8, "ON_Locale.m_numeric_locale has unexpected size % instead of 8", size_of(type_of(ON_Locale.m_numeric_locale)));
        assert(((cast(*void)(*instance.m_string_coll_map_locale)) - cast(*void)(*instance)) == 8, "ON_Locale.m_string_coll_map_locale has unexpected offset % instead of 8", ((cast(*void)(*instance.m_string_coll_map_locale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_string_coll_map_locale)) == 8, "ON_Locale.m_string_coll_map_locale has unexpected size % instead of 8", size_of(type_of(ON_Locale.m_string_coll_map_locale)));
        assert(((cast(*void)(*instance.m_bcp47_language_tag)) - cast(*void)(*instance)) == 16, "ON_Locale.m_bcp47_language_tag has unexpected offset % instead of 16", ((cast(*void)(*instance.m_bcp47_language_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_bcp47_language_tag)) == 85, "ON_Locale.m_bcp47_language_tag has unexpected size % instead of 85", size_of(type_of(ON_Locale.m_bcp47_language_tag)));
        assert(((cast(*void)(*instance.m_language_subtag)) - cast(*void)(*instance)) == 101, "ON_Locale.m_language_subtag has unexpected offset % instead of 101", ((cast(*void)(*instance.m_language_subtag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_language_subtag)) == 9, "ON_Locale.m_language_subtag has unexpected size % instead of 9", size_of(type_of(ON_Locale.m_language_subtag)));
        assert(((cast(*void)(*instance.m_script_subtag)) - cast(*void)(*instance)) == 110, "ON_Locale.m_script_subtag has unexpected offset % instead of 110", ((cast(*void)(*instance.m_script_subtag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_script_subtag)) == 5, "ON_Locale.m_script_subtag has unexpected size % instead of 5", size_of(type_of(ON_Locale.m_script_subtag)));
        assert(((cast(*void)(*instance.m_region_subtag)) - cast(*void)(*instance)) == 115, "ON_Locale.m_region_subtag has unexpected offset % instead of 115", ((cast(*void)(*instance.m_region_subtag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_region_subtag)) == 5, "ON_Locale.m_region_subtag has unexpected size % instead of 5", size_of(type_of(ON_Locale.m_region_subtag)));
        assert(((cast(*void)(*instance.m_windows_sortorder)) - cast(*void)(*instance)) == 120, "ON_Locale.m_windows_sortorder has unexpected offset % instead of 120", ((cast(*void)(*instance.m_windows_sortorder)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_windows_sortorder)) == 7, "ON_Locale.m_windows_sortorder has unexpected size % instead of 7", size_of(type_of(ON_Locale.m_windows_sortorder)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 127, "ON_Locale.m_reserved2 has unexpected offset % instead of 127", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_reserved2)) == 21, "ON_Locale.m_reserved2 has unexpected size % instead of 21", size_of(type_of(ON_Locale.m_reserved2)));
        assert(((cast(*void)(*instance.m_windows_lcid)) - cast(*void)(*instance)) == 148, "ON_Locale.m_windows_lcid has unexpected offset % instead of 148", ((cast(*void)(*instance.m_windows_lcid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_windows_lcid)) == 4, "ON_Locale.m_windows_lcid has unexpected size % instead of 4", size_of(type_of(ON_Locale.m_windows_lcid)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 152, "ON_Locale.m_reserved3 has unexpected offset % instead of 152", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Locale.m_reserved3)) == 4, "ON_Locale.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_Locale.m_reserved3)));
        assert(size_of(ON_Locale) == 160, "ON_Locale has size % instead of 160", size_of(ON_Locale));
    }

    {
        instance: ON_ComponentStatus;
        assert(((cast(*void)(*instance.m_status_flags)) - cast(*void)(*instance)) == 0, "ON_ComponentStatus.m_status_flags has unexpected offset % instead of 0", ((cast(*void)(*instance.m_status_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentStatus.m_status_flags)) == 1, "ON_ComponentStatus.m_status_flags has unexpected size % instead of 1", size_of(type_of(ON_ComponentStatus.m_status_flags)));
        assert(((cast(*void)(*instance.m_mark_bits)) - cast(*void)(*instance)) == 1, "ON_ComponentStatus.m_mark_bits has unexpected offset % instead of 1", ((cast(*void)(*instance.m_mark_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentStatus.m_mark_bits)) == 1, "ON_ComponentStatus.m_mark_bits has unexpected size % instead of 1", size_of(type_of(ON_ComponentStatus.m_mark_bits)));
        assert(size_of(ON_ComponentStatus) == 2, "ON_ComponentStatus has size % instead of 2", size_of(ON_ComponentStatus));
    }

    {
        instance: ON_AggregateComponentStatus;
        assert(((cast(*void)(*instance.m_aggregate_status)) - cast(*void)(*instance)) == 0, "ON_AggregateComponentStatus.m_aggregate_status has unexpected offset % instead of 0", ((cast(*void)(*instance.m_aggregate_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_aggregate_status)) == 2, "ON_AggregateComponentStatus.m_aggregate_status has unexpected size % instead of 2", size_of(type_of(ON_AggregateComponentStatus.m_aggregate_status)));
        assert(((cast(*void)(*instance.m_current)) - cast(*void)(*instance)) == 2, "ON_AggregateComponentStatus.m_current has unexpected offset % instead of 2", ((cast(*void)(*instance.m_current)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_current)) == 1, "ON_AggregateComponentStatus.m_current has unexpected size % instead of 1", size_of(type_of(ON_AggregateComponentStatus.m_current)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 3, "ON_AggregateComponentStatus.m_reserved1 has unexpected offset % instead of 3", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_reserved1)) == 1, "ON_AggregateComponentStatus.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_AggregateComponentStatus.m_reserved1)));
        assert(((cast(*void)(*instance.m_component_count)) - cast(*void)(*instance)) == 4, "ON_AggregateComponentStatus.m_component_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_component_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_component_count)) == 4, "ON_AggregateComponentStatus.m_component_count has unexpected size % instead of 4", size_of(type_of(ON_AggregateComponentStatus.m_component_count)));
        assert(((cast(*void)(*instance.m_selected_count)) - cast(*void)(*instance)) == 8, "ON_AggregateComponentStatus.m_selected_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_selected_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_selected_count)) == 4, "ON_AggregateComponentStatus.m_selected_count has unexpected size % instead of 4", size_of(type_of(ON_AggregateComponentStatus.m_selected_count)));
        assert(((cast(*void)(*instance.m_selected_persistent_count)) - cast(*void)(*instance)) == 12, "ON_AggregateComponentStatus.m_selected_persistent_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_selected_persistent_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_selected_persistent_count)) == 4, "ON_AggregateComponentStatus.m_selected_persistent_count has unexpected size % instead of 4", size_of(type_of(ON_AggregateComponentStatus.m_selected_persistent_count)));
        assert(((cast(*void)(*instance.m_highlighted_count)) - cast(*void)(*instance)) == 16, "ON_AggregateComponentStatus.m_highlighted_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_highlighted_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_highlighted_count)) == 4, "ON_AggregateComponentStatus.m_highlighted_count has unexpected size % instead of 4", size_of(type_of(ON_AggregateComponentStatus.m_highlighted_count)));
        assert(((cast(*void)(*instance.m_hidden_count)) - cast(*void)(*instance)) == 20, "ON_AggregateComponentStatus.m_hidden_count has unexpected offset % instead of 20", ((cast(*void)(*instance.m_hidden_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_hidden_count)) == 4, "ON_AggregateComponentStatus.m_hidden_count has unexpected size % instead of 4", size_of(type_of(ON_AggregateComponentStatus.m_hidden_count)));
        assert(((cast(*void)(*instance.m_locked_count)) - cast(*void)(*instance)) == 24, "ON_AggregateComponentStatus.m_locked_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_locked_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_locked_count)) == 4, "ON_AggregateComponentStatus.m_locked_count has unexpected size % instead of 4", size_of(type_of(ON_AggregateComponentStatus.m_locked_count)));
        assert(((cast(*void)(*instance.m_damaged_count)) - cast(*void)(*instance)) == 28, "ON_AggregateComponentStatus.m_damaged_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_damaged_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatus.m_damaged_count)) == 4, "ON_AggregateComponentStatus.m_damaged_count has unexpected size % instead of 4", size_of(type_of(ON_AggregateComponentStatus.m_damaged_count)));
        assert(size_of(ON_AggregateComponentStatus) == 32, "ON_AggregateComponentStatus has size % instead of 32", size_of(ON_AggregateComponentStatus));
    }

    {
        instance: ON_AggregateComponentStatusEx;
        assert(((cast(*void)(*instance.m_component_status_serial_number)) - cast(*void)(*instance)) == 32, "ON_AggregateComponentStatusEx.m_component_status_serial_number has unexpected offset % instead of 32", ((cast(*void)(*instance.m_component_status_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AggregateComponentStatusEx.m_component_status_serial_number)) == 8, "ON_AggregateComponentStatusEx.m_component_status_serial_number has unexpected size % instead of 8", size_of(type_of(ON_AggregateComponentStatusEx.m_component_status_serial_number)));
        assert(size_of(ON_AggregateComponentStatusEx) == 40, "ON_AggregateComponentStatusEx has size % instead of 40", size_of(ON_AggregateComponentStatusEx));
    }

    {
        instance: ON_UniqueTester.Block;
        assert(((cast(*void)(*instance.m_count)) - cast(*void)(*instance)) == 0, "ON_UniqueTester.Block.m_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UniqueTester.Block.m_count)) == 8, "ON_UniqueTester.Block.m_count has unexpected size % instead of 8", size_of(type_of(ON_UniqueTester.Block.m_count)));
        assert(((cast(*void)(*instance.m_a)) - cast(*void)(*instance)) == 8, "ON_UniqueTester.Block.m_a has unexpected offset % instead of 8", ((cast(*void)(*instance.m_a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UniqueTester.Block.m_a)) == 8, "ON_UniqueTester.Block.m_a has unexpected size % instead of 8", size_of(type_of(ON_UniqueTester.Block.m_a)));
        assert(((cast(*void)(*instance.m_next)) - cast(*void)(*instance)) == 16, "ON_UniqueTester.Block.m_next has unexpected offset % instead of 16", ((cast(*void)(*instance.m_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UniqueTester.Block.m_next)) == 8, "ON_UniqueTester.Block.m_next has unexpected size % instead of 8", size_of(type_of(ON_UniqueTester.Block.m_next)));
        assert(size_of(ON_UniqueTester.Block) == 24, "ON_UniqueTester.Block has size % instead of 24", size_of(ON_UniqueTester.Block));
    }

    {
        instance: ON_UniqueTester;
        assert(((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)) == 0, "ON_UniqueTester.m_sorted_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UniqueTester.m_sorted_count)) == 8, "ON_UniqueTester.m_sorted_count has unexpected size % instead of 8", size_of(type_of(ON_UniqueTester.m_sorted_count)));
        assert(((cast(*void)(*instance.m_block_list)) - cast(*void)(*instance)) == 8, "ON_UniqueTester.m_block_list has unexpected offset % instead of 8", ((cast(*void)(*instance.m_block_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UniqueTester.m_block_list)) == 8, "ON_UniqueTester.m_block_list has unexpected size % instead of 8", size_of(type_of(ON_UniqueTester.m_block_list)));
        assert(size_of(ON_UniqueTester) == 16, "ON_UniqueTester has size % instead of 16", size_of(ON_UniqueTester));
    }

    {
        instance: ON_ProgressReporter;
        assert(((cast(*void)(*instance.m_callback_function)) - cast(*void)(*instance)) == 0, "ON_ProgressReporter.m_callback_function has unexpected offset % instead of 0", ((cast(*void)(*instance.m_callback_function)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressReporter.m_callback_function)) == 8, "ON_ProgressReporter.m_callback_function has unexpected size % instead of 8", size_of(type_of(ON_ProgressReporter.m_callback_function)));
        assert(((cast(*void)(*instance.m_callback_context)) - cast(*void)(*instance)) == 8, "ON_ProgressReporter.m_callback_context has unexpected offset % instead of 8", ((cast(*void)(*instance.m_callback_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressReporter.m_callback_context)) == 8, "ON_ProgressReporter.m_callback_context has unexpected size % instead of 8", size_of(type_of(ON_ProgressReporter.m_callback_context)));
        assert(((cast(*void)(*instance.m_fraction_complete)) - cast(*void)(*instance)) == 16, "ON_ProgressReporter.m_fraction_complete has unexpected offset % instead of 16", ((cast(*void)(*instance.m_fraction_complete)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressReporter.m_fraction_complete)) == 8, "ON_ProgressReporter.m_fraction_complete has unexpected size % instead of 8", size_of(type_of(ON_ProgressReporter.m_fraction_complete)));
        assert(((cast(*void)(*instance.m_previous_callback_fraction_complete)) - cast(*void)(*instance)) == 24, "ON_ProgressReporter.m_previous_callback_fraction_complete has unexpected offset % instead of 24", ((cast(*void)(*instance.m_previous_callback_fraction_complete)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressReporter.m_previous_callback_fraction_complete)) == 8, "ON_ProgressReporter.m_previous_callback_fraction_complete has unexpected size % instead of 8", size_of(type_of(ON_ProgressReporter.m_previous_callback_fraction_complete)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 32, "ON_ProgressReporter.m_reserved has unexpected offset % instead of 32", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressReporter.m_reserved)) == 32, "ON_ProgressReporter.m_reserved has unexpected size % instead of 32", size_of(type_of(ON_ProgressReporter.m_reserved)));
        assert(size_of(ON_ProgressReporter) == 64, "ON_ProgressReporter has size % instead of 64", size_of(ON_ProgressReporter));
    }

    {
        instance: ON_ProgressStepCounter;
        assert(((cast(*void)(*instance.m_progress_reporter)) - cast(*void)(*instance)) == 0, "ON_ProgressStepCounter.m_progress_reporter has unexpected offset % instead of 0", ((cast(*void)(*instance.m_progress_reporter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressStepCounter.m_progress_reporter)) == 8, "ON_ProgressStepCounter.m_progress_reporter has unexpected size % instead of 8", size_of(type_of(ON_ProgressStepCounter.m_progress_reporter)));
        assert(((cast(*void)(*instance.m_step_index)) - cast(*void)(*instance)) == 8, "ON_ProgressStepCounter.m_step_index has unexpected offset % instead of 8", ((cast(*void)(*instance.m_step_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressStepCounter.m_step_index)) == 4, "ON_ProgressStepCounter.m_step_index has unexpected size % instead of 4", size_of(type_of(ON_ProgressStepCounter.m_step_index)));
        assert(((cast(*void)(*instance.m_step_count)) - cast(*void)(*instance)) == 12, "ON_ProgressStepCounter.m_step_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_step_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressStepCounter.m_step_count)) == 4, "ON_ProgressStepCounter.m_step_count has unexpected size % instead of 4", size_of(type_of(ON_ProgressStepCounter.m_step_count)));
        assert(((cast(*void)(*instance.m_step_interval)) - cast(*void)(*instance)) == 16, "ON_ProgressStepCounter.m_step_interval has unexpected offset % instead of 16", ((cast(*void)(*instance.m_step_interval)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressStepCounter.m_step_interval)) == 4, "ON_ProgressStepCounter.m_step_interval has unexpected size % instead of 4", size_of(type_of(ON_ProgressStepCounter.m_step_interval)));
        assert(((cast(*void)(*instance.m_progress_interval_start)) - cast(*void)(*instance)) == 24, "ON_ProgressStepCounter.m_progress_interval_start has unexpected offset % instead of 24", ((cast(*void)(*instance.m_progress_interval_start)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressStepCounter.m_progress_interval_start)) == 8, "ON_ProgressStepCounter.m_progress_interval_start has unexpected size % instead of 8", size_of(type_of(ON_ProgressStepCounter.m_progress_interval_start)));
        assert(((cast(*void)(*instance.m_progress_interval_finish)) - cast(*void)(*instance)) == 32, "ON_ProgressStepCounter.m_progress_interval_finish has unexpected offset % instead of 32", ((cast(*void)(*instance.m_progress_interval_finish)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ProgressStepCounter.m_progress_interval_finish)) == 8, "ON_ProgressStepCounter.m_progress_interval_finish has unexpected size % instead of 8", size_of(type_of(ON_ProgressStepCounter.m_progress_interval_finish)));
        assert(size_of(ON_ProgressStepCounter) == 40, "ON_ProgressStepCounter has size % instead of 40", size_of(ON_ProgressStepCounter));
    }

    {
        instance: ON_Terminator;
        assert(((cast(*void)(*instance.m_callback_function)) - cast(*void)(*instance)) == 0, "ON_Terminator.m_callback_function has unexpected offset % instead of 0", ((cast(*void)(*instance.m_callback_function)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_callback_function)) == 8, "ON_Terminator.m_callback_function has unexpected size % instead of 8", size_of(type_of(ON_Terminator.m_callback_function)));
        assert(((cast(*void)(*instance.m_callback_context)) - cast(*void)(*instance)) == 8, "ON_Terminator.m_callback_context has unexpected offset % instead of 8", ((cast(*void)(*instance.m_callback_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_callback_context)) == 8, "ON_Terminator.m_callback_context has unexpected size % instead of 8", size_of(type_of(ON_Terminator.m_callback_context)));
        assert(((cast(*void)(*instance.m_previous_query_clock)) - cast(*void)(*instance)) == 16, "ON_Terminator.m_previous_query_clock has unexpected offset % instead of 16", ((cast(*void)(*instance.m_previous_query_clock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_previous_query_clock)) == 8, "ON_Terminator.m_previous_query_clock has unexpected size % instead of 8", size_of(type_of(ON_Terminator.m_previous_query_clock)));
        assert(((cast(*void)(*instance.m_bTerminationRequested)) - cast(*void)(*instance)) == 24, "ON_Terminator.m_bTerminationRequested has unexpected offset % instead of 24", ((cast(*void)(*instance.m_bTerminationRequested)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_bTerminationRequested)) == 1, "ON_Terminator.m_bTerminationRequested has unexpected size % instead of 1", size_of(type_of(ON_Terminator.m_bTerminationRequested)));
        assert(((cast(*void)(*instance.m_bAllowDefaultCancellationHandling)) - cast(*void)(*instance)) == 25, "ON_Terminator.m_bAllowDefaultCancellationHandling has unexpected offset % instead of 25", ((cast(*void)(*instance.m_bAllowDefaultCancellationHandling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_bAllowDefaultCancellationHandling)) == 1, "ON_Terminator.m_bAllowDefaultCancellationHandling has unexpected size % instead of 1", size_of(type_of(ON_Terminator.m_bAllowDefaultCancellationHandling)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 26, "ON_Terminator.m_reserved1 has unexpected offset % instead of 26", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_reserved1)) == 6, "ON_Terminator.m_reserved1 has unexpected size % instead of 6", size_of(type_of(ON_Terminator.m_reserved1)));
        assert(((cast(*void)(*instance.m_thread_id)) - cast(*void)(*instance)) == 32, "ON_Terminator.m_thread_id has unexpected offset % instead of 32", ((cast(*void)(*instance.m_thread_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_thread_id)) == 8, "ON_Terminator.m_thread_id has unexpected size % instead of 8", size_of(type_of(ON_Terminator.m_thread_id)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 40, "ON_Terminator.m_reserved2 has unexpected offset % instead of 40", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Terminator.m_reserved2)) == 16, "ON_Terminator.m_reserved2 has unexpected size % instead of 16", size_of(type_of(ON_Terminator.m_reserved2)));
        assert(size_of(ON_Terminator) == 56, "ON_Terminator has size % instead of 56", size_of(ON_Terminator));
    }

    {
        instance: ON_Lock;
        assert(((cast(*void)(*instance.m_lock_value)) - cast(*void)(*instance)) == 0, "ON_Lock.m_lock_value has unexpected offset % instead of 0", ((cast(*void)(*instance.m_lock_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Lock.m_lock_value)) == 4, "ON_Lock.m_lock_value has unexpected size % instead of 4", size_of(type_of(ON_Lock.m_lock_value)));
        assert(size_of(ON_Lock) == 4, "ON_Lock has size % instead of 4", size_of(ON_Lock));
    }

    {
        instance: ON_FixedSizePoolElement;
        assert(((cast(*void)(*instance.m_next)) - cast(*void)(*instance)) == 0, "ON_FixedSizePoolElement.m_next has unexpected offset % instead of 0", ((cast(*void)(*instance.m_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePoolElement.m_next)) == 8, "ON_FixedSizePoolElement.m_next has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePoolElement.m_next)));
        assert(size_of(ON_FixedSizePoolElement) == 8, "ON_FixedSizePoolElement has size % instead of 8", size_of(ON_FixedSizePoolElement));
    }

    {
        instance: ON_FixedSizePool;
        assert(((cast(*void)(*instance.m_first_block)) - cast(*void)(*instance)) == 0, "ON_FixedSizePool.m_first_block has unexpected offset % instead of 0", ((cast(*void)(*instance.m_first_block)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_first_block)) == 8, "ON_FixedSizePool.m_first_block has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePool.m_first_block)));
        assert(((cast(*void)(*instance.m_al_element_stack)) - cast(*void)(*instance)) == 8, "ON_FixedSizePool.m_al_element_stack has unexpected offset % instead of 8", ((cast(*void)(*instance.m_al_element_stack)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_al_element_stack)) == 8, "ON_FixedSizePool.m_al_element_stack has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePool.m_al_element_stack)));
        assert(((cast(*void)(*instance.m_al_block)) - cast(*void)(*instance)) == 16, "ON_FixedSizePool.m_al_block has unexpected offset % instead of 16", ((cast(*void)(*instance.m_al_block)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_al_block)) == 8, "ON_FixedSizePool.m_al_block has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePool.m_al_block)));
        assert(((cast(*void)(*instance.m_al_element_array)) - cast(*void)(*instance)) == 24, "ON_FixedSizePool.m_al_element_array has unexpected offset % instead of 24", ((cast(*void)(*instance.m_al_element_array)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_al_element_array)) == 8, "ON_FixedSizePool.m_al_element_array has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePool.m_al_element_array)));
        assert(((cast(*void)(*instance.m_al_count)) - cast(*void)(*instance)) == 32, "ON_FixedSizePool.m_al_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_al_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_al_count)) == 8, "ON_FixedSizePool.m_al_count has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePool.m_al_count)));
        assert(((cast(*void)(*instance.m_sizeof_element)) - cast(*void)(*instance)) == 40, "ON_FixedSizePool.m_sizeof_element has unexpected offset % instead of 40", ((cast(*void)(*instance.m_sizeof_element)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_sizeof_element)) == 8, "ON_FixedSizePool.m_sizeof_element has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePool.m_sizeof_element)));
        assert(((cast(*void)(*instance.m_block_element_count)) - cast(*void)(*instance)) == 48, "ON_FixedSizePool.m_block_element_count has unexpected offset % instead of 48", ((cast(*void)(*instance.m_block_element_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_block_element_count)) == 8, "ON_FixedSizePool.m_block_element_count has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePool.m_block_element_count)));
        assert(((cast(*void)(*instance.m_active_element_count)) - cast(*void)(*instance)) == 56, "ON_FixedSizePool.m_active_element_count has unexpected offset % instead of 56", ((cast(*void)(*instance.m_active_element_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_active_element_count)) == 4, "ON_FixedSizePool.m_active_element_count has unexpected size % instead of 4", size_of(type_of(ON_FixedSizePool.m_active_element_count)));
        assert(((cast(*void)(*instance.m_total_element_count)) - cast(*void)(*instance)) == 60, "ON_FixedSizePool.m_total_element_count has unexpected offset % instead of 60", ((cast(*void)(*instance.m_total_element_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_total_element_count)) == 4, "ON_FixedSizePool.m_total_element_count has unexpected size % instead of 4", size_of(type_of(ON_FixedSizePool.m_total_element_count)));
        assert(((cast(*void)(*instance.m_sleep_lock)) - cast(*void)(*instance)) == 64, "ON_FixedSizePool.m_sleep_lock has unexpected offset % instead of 64", ((cast(*void)(*instance.m_sleep_lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_sleep_lock)) == 4, "ON_FixedSizePool.m_sleep_lock has unexpected size % instead of 4", size_of(type_of(ON_FixedSizePool.m_sleep_lock)));
        assert(((cast(*void)(*instance.m_reserved0)) - cast(*void)(*instance)) == 68, "ON_FixedSizePool.m_reserved0 has unexpected offset % instead of 68", ((cast(*void)(*instance.m_reserved0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePool.m_reserved0)) == 4, "ON_FixedSizePool.m_reserved0 has unexpected size % instead of 4", size_of(type_of(ON_FixedSizePool.m_reserved0)));
        assert(size_of(ON_FixedSizePool) == 72, "ON_FixedSizePool has size % instead of 72", size_of(ON_FixedSizePool));
    }

    {
        instance: ON_FixedSizePoolIterator;
        assert(((cast(*void)(*instance.m_fsp)) - cast(*void)(*instance)) == 0, "ON_FixedSizePoolIterator.m_fsp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_fsp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePoolIterator.m_fsp)) == 8, "ON_FixedSizePoolIterator.m_fsp has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePoolIterator.m_fsp)));
        assert(((cast(*void)(*instance.m_it_block)) - cast(*void)(*instance)) == 8, "ON_FixedSizePoolIterator.m_it_block has unexpected offset % instead of 8", ((cast(*void)(*instance.m_it_block)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePoolIterator.m_it_block)) == 8, "ON_FixedSizePoolIterator.m_it_block has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePoolIterator.m_it_block)));
        assert(((cast(*void)(*instance.m_it_element)) - cast(*void)(*instance)) == 16, "ON_FixedSizePoolIterator.m_it_element has unexpected offset % instead of 16", ((cast(*void)(*instance.m_it_element)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FixedSizePoolIterator.m_it_element)) == 8, "ON_FixedSizePoolIterator.m_it_element has unexpected size % instead of 8", size_of(type_of(ON_FixedSizePoolIterator.m_it_element)));
        assert(size_of(ON_FixedSizePoolIterator) == 24, "ON_FixedSizePoolIterator has size % instead of 24", size_of(ON_FixedSizePoolIterator));
    }

    {
        instance: ON_FunctionList;
        assert(((cast(*void)(*instance.m_fsp)) - cast(*void)(*instance)) == 0, "ON_FunctionList.m_fsp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_fsp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FunctionList.m_fsp)) == 72, "ON_FunctionList.m_fsp has unexpected size % instead of 72", size_of(type_of(ON_FunctionList.m_fsp)));
        assert(((cast(*void)(*instance.m_head)) - cast(*void)(*instance)) == 72, "ON_FunctionList.m_head has unexpected offset % instead of 72", ((cast(*void)(*instance.m_head)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FunctionList.m_head)) == 8, "ON_FunctionList.m_head has unexpected size % instead of 8", size_of(type_of(ON_FunctionList.m_head)));
        assert(((cast(*void)(*instance.m_tail)) - cast(*void)(*instance)) == 80, "ON_FunctionList.m_tail has unexpected offset % instead of 80", ((cast(*void)(*instance.m_tail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FunctionList.m_tail)) == 8, "ON_FunctionList.m_tail has unexpected size % instead of 8", size_of(type_of(ON_FunctionList.m_tail)));
        assert(((cast(*void)(*instance.m_lock)) - cast(*void)(*instance)) == 88, "ON_FunctionList.m_lock has unexpected offset % instead of 88", ((cast(*void)(*instance.m_lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FunctionList.m_lock)) == 4, "ON_FunctionList.m_lock has unexpected size % instead of 4", size_of(type_of(ON_FunctionList.m_lock)));
        assert(size_of(ON_FunctionList) == 96, "ON_FunctionList has size % instead of 96", size_of(ON_FunctionList));
    }

    {
        instance: ON_MD5_Hash;
        assert(((cast(*void)(*instance.m_digest)) - cast(*void)(*instance)) == 0, "ON_MD5_Hash.m_digest has unexpected offset % instead of 0", ((cast(*void)(*instance.m_digest)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5_Hash.m_digest)) == 16, "ON_MD5_Hash.m_digest has unexpected size % instead of 16", size_of(type_of(ON_MD5_Hash.m_digest)));
        assert(size_of(ON_MD5_Hash) == 16, "ON_MD5_Hash has size % instead of 16", size_of(ON_MD5_Hash));
    }

    {
        instance: ON_MD5;
        assert(((cast(*void)(*instance.m_byte_count)) - cast(*void)(*instance)) == 0, "ON_MD5.m_byte_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_byte_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5.m_byte_count)) == 8, "ON_MD5.m_byte_count has unexpected size % instead of 8", size_of(type_of(ON_MD5.m_byte_count)));
        assert(((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)) == 8, "ON_MD5.m_status_bits has unexpected offset % instead of 8", ((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5.m_status_bits)) == 4, "ON_MD5.m_status_bits has unexpected size % instead of 4", size_of(type_of(ON_MD5.m_status_bits)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 12, "ON_MD5.m_reserved has unexpected offset % instead of 12", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5.m_reserved)) == 4, "ON_MD5.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_MD5.m_reserved)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 16, "ON_MD5.m_buffer has unexpected offset % instead of 16", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5.m_buffer)) == 64, "ON_MD5.m_buffer has unexpected size % instead of 64", size_of(type_of(ON_MD5.m_buffer)));
        assert(((cast(*void)(*instance.m_bit_count)) - cast(*void)(*instance)) == 80, "ON_MD5.m_bit_count has unexpected offset % instead of 80", ((cast(*void)(*instance.m_bit_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5.m_bit_count)) == 8, "ON_MD5.m_bit_count has unexpected size % instead of 8", size_of(type_of(ON_MD5.m_bit_count)));
        assert(((cast(*void)(*instance.m_state)) - cast(*void)(*instance)) == 88, "ON_MD5.m_state has unexpected offset % instead of 88", ((cast(*void)(*instance.m_state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5.m_state)) == 16, "ON_MD5.m_state has unexpected size % instead of 16", size_of(type_of(ON_MD5.m_state)));
        assert(((cast(*void)(*instance.m_md5_hash)) - cast(*void)(*instance)) == 104, "ON_MD5.m_md5_hash has unexpected offset % instead of 104", ((cast(*void)(*instance.m_md5_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MD5.m_md5_hash)) == 16, "ON_MD5.m_md5_hash has unexpected size % instead of 16", size_of(type_of(ON_MD5.m_md5_hash)));
        assert(size_of(ON_MD5) == 120, "ON_MD5 has size % instead of 120", size_of(ON_MD5));
    }

    {
        instance: ON_SHA1_Hash;
        assert(((cast(*void)(*instance.m_digest)) - cast(*void)(*instance)) == 0, "ON_SHA1_Hash.m_digest has unexpected offset % instead of 0", ((cast(*void)(*instance.m_digest)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1_Hash.m_digest)) == 20, "ON_SHA1_Hash.m_digest has unexpected size % instead of 20", size_of(type_of(ON_SHA1_Hash.m_digest)));
        assert(size_of(ON_SHA1_Hash) == 20, "ON_SHA1_Hash has size % instead of 20", size_of(ON_SHA1_Hash));
    }

    {
        instance: ON_SHA1;
        assert(((cast(*void)(*instance.m_byte_count)) - cast(*void)(*instance)) == 0, "ON_SHA1.m_byte_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_byte_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1.m_byte_count)) == 8, "ON_SHA1.m_byte_count has unexpected size % instead of 8", size_of(type_of(ON_SHA1.m_byte_count)));
        assert(((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)) == 8, "ON_SHA1.m_status_bits has unexpected offset % instead of 8", ((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1.m_status_bits)) == 4, "ON_SHA1.m_status_bits has unexpected size % instead of 4", size_of(type_of(ON_SHA1.m_status_bits)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 12, "ON_SHA1.m_reserved has unexpected offset % instead of 12", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1.m_reserved)) == 4, "ON_SHA1.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_SHA1.m_reserved)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 16, "ON_SHA1.m_buffer has unexpected offset % instead of 16", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1.m_buffer)) == 64, "ON_SHA1.m_buffer has unexpected size % instead of 64", size_of(type_of(ON_SHA1.m_buffer)));
        assert(((cast(*void)(*instance.m_bit_count)) - cast(*void)(*instance)) == 80, "ON_SHA1.m_bit_count has unexpected offset % instead of 80", ((cast(*void)(*instance.m_bit_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1.m_bit_count)) == 8, "ON_SHA1.m_bit_count has unexpected size % instead of 8", size_of(type_of(ON_SHA1.m_bit_count)));
        assert(((cast(*void)(*instance.m_state)) - cast(*void)(*instance)) == 88, "ON_SHA1.m_state has unexpected offset % instead of 88", ((cast(*void)(*instance.m_state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1.m_state)) == 20, "ON_SHA1.m_state has unexpected size % instead of 20", size_of(type_of(ON_SHA1.m_state)));
        assert(((cast(*void)(*instance.m_sha1_hash)) - cast(*void)(*instance)) == 108, "ON_SHA1.m_sha1_hash has unexpected offset % instead of 108", ((cast(*void)(*instance.m_sha1_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SHA1.m_sha1_hash)) == 20, "ON_SHA1.m_sha1_hash has unexpected size % instead of 20", size_of(type_of(ON_SHA1.m_sha1_hash)));
        assert(size_of(ON_SHA1) == 128, "ON_SHA1 has size % instead of 128", size_of(ON_SHA1));
    }

    {
        instance: ON_CheckSum;
        assert(((cast(*void)(*instance.m_size)) - cast(*void)(*instance)) == 0, "ON_CheckSum.m_size has unexpected offset % instead of 0", ((cast(*void)(*instance.m_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CheckSum.m_size)) == 8, "ON_CheckSum.m_size has unexpected size % instead of 8", size_of(type_of(ON_CheckSum.m_size)));
        assert(((cast(*void)(*instance.m_time)) - cast(*void)(*instance)) == 8, "ON_CheckSum.m_time has unexpected offset % instead of 8", ((cast(*void)(*instance.m_time)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CheckSum.m_time)) == 8, "ON_CheckSum.m_time has unexpected size % instead of 8", size_of(type_of(ON_CheckSum.m_time)));
        assert(((cast(*void)(*instance.m_crc)) - cast(*void)(*instance)) == 16, "ON_CheckSum.m_crc has unexpected offset % instead of 16", ((cast(*void)(*instance.m_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CheckSum.m_crc)) == 32, "ON_CheckSum.m_crc has unexpected size % instead of 32", size_of(type_of(ON_CheckSum.m_crc)));
        assert(size_of(ON_CheckSum) == 48, "ON_CheckSum has size % instead of 48", size_of(ON_CheckSum));
    }

    {
        instance: ON_StringBuffer;
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 0, "ON_StringBuffer.m_buffer has unexpected offset % instead of 0", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StringBuffer.m_buffer)) == 8, "ON_StringBuffer.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_StringBuffer.m_buffer)));
        assert(((cast(*void)(*instance.m_buffer_capacity)) - cast(*void)(*instance)) == 8, "ON_StringBuffer.m_buffer_capacity has unexpected offset % instead of 8", ((cast(*void)(*instance.m_buffer_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StringBuffer.m_buffer_capacity)) == 8, "ON_StringBuffer.m_buffer_capacity has unexpected size % instead of 8", size_of(type_of(ON_StringBuffer.m_buffer_capacity)));
        assert(((cast(*void)(*instance.m_heap_buffer)) - cast(*void)(*instance)) == 16, "ON_StringBuffer.m_heap_buffer has unexpected offset % instead of 16", ((cast(*void)(*instance.m_heap_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StringBuffer.m_heap_buffer)) == 8, "ON_StringBuffer.m_heap_buffer has unexpected size % instead of 8", size_of(type_of(ON_StringBuffer.m_heap_buffer)));
        assert(((cast(*void)(*instance.m_heap_buffer_capacity)) - cast(*void)(*instance)) == 24, "ON_StringBuffer.m_heap_buffer_capacity has unexpected offset % instead of 24", ((cast(*void)(*instance.m_heap_buffer_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StringBuffer.m_heap_buffer_capacity)) == 8, "ON_StringBuffer.m_heap_buffer_capacity has unexpected size % instead of 8", size_of(type_of(ON_StringBuffer.m_heap_buffer_capacity)));
        assert(size_of(ON_StringBuffer) == 32, "ON_StringBuffer has size % instead of 32", size_of(ON_StringBuffer));
    }

    {
        instance: ON_wStringBuffer;
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 0, "ON_wStringBuffer.m_buffer has unexpected offset % instead of 0", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_wStringBuffer.m_buffer)) == 8, "ON_wStringBuffer.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_wStringBuffer.m_buffer)));
        assert(((cast(*void)(*instance.m_buffer_capacity)) - cast(*void)(*instance)) == 8, "ON_wStringBuffer.m_buffer_capacity has unexpected offset % instead of 8", ((cast(*void)(*instance.m_buffer_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_wStringBuffer.m_buffer_capacity)) == 8, "ON_wStringBuffer.m_buffer_capacity has unexpected size % instead of 8", size_of(type_of(ON_wStringBuffer.m_buffer_capacity)));
        assert(((cast(*void)(*instance.m_heap_buffer)) - cast(*void)(*instance)) == 16, "ON_wStringBuffer.m_heap_buffer has unexpected offset % instead of 16", ((cast(*void)(*instance.m_heap_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_wStringBuffer.m_heap_buffer)) == 8, "ON_wStringBuffer.m_heap_buffer has unexpected size % instead of 8", size_of(type_of(ON_wStringBuffer.m_heap_buffer)));
        assert(((cast(*void)(*instance.m_heap_buffer_capacity)) - cast(*void)(*instance)) == 24, "ON_wStringBuffer.m_heap_buffer_capacity has unexpected offset % instead of 24", ((cast(*void)(*instance.m_heap_buffer_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_wStringBuffer.m_heap_buffer_capacity)) == 8, "ON_wStringBuffer.m_heap_buffer_capacity has unexpected size % instead of 8", size_of(type_of(ON_wStringBuffer.m_heap_buffer_capacity)));
        assert(size_of(ON_wStringBuffer) == 32, "ON_wStringBuffer has size % instead of 32", size_of(ON_wStringBuffer));
    }

    {
        instance: ON_String;
        assert(((cast(*void)(*instance.m_s)) - cast(*void)(*instance)) == 0, "ON_String.m_s has unexpected offset % instead of 0", ((cast(*void)(*instance.m_s)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_String.m_s)) == 8, "ON_String.m_s has unexpected size % instead of 8", size_of(type_of(ON_String.m_s)));
        assert(size_of(ON_String) == 8, "ON_String has size % instead of 8", size_of(ON_String));
    }

    {
        instance: ON_wString;
        assert(((cast(*void)(*instance.m_s)) - cast(*void)(*instance)) == 0, "ON_wString.m_s has unexpected offset % instead of 0", ((cast(*void)(*instance.m_s)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_wString.m_s)) == 8, "ON_wString.m_s has unexpected size % instead of 8", size_of(type_of(ON_wString.m_s)));
        assert(size_of(ON_wString) == 8, "ON_wString has size % instead of 8", size_of(ON_wString));
    }

    {
        instance: ON_NameHash;
        assert(((cast(*void)(*instance.m_flags)) - cast(*void)(*instance)) == 0, "ON_NameHash.m_flags has unexpected offset % instead of 0", ((cast(*void)(*instance.m_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NameHash.m_flags)) == 4, "ON_NameHash.m_flags has unexpected size % instead of 4", size_of(type_of(ON_NameHash.m_flags)));
        assert(((cast(*void)(*instance.m_sha1_hash)) - cast(*void)(*instance)) == 4, "ON_NameHash.m_sha1_hash has unexpected offset % instead of 4", ((cast(*void)(*instance.m_sha1_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NameHash.m_sha1_hash)) == 20, "ON_NameHash.m_sha1_hash has unexpected size % instead of 20", size_of(type_of(ON_NameHash.m_sha1_hash)));
        assert(((cast(*void)(*instance.m_parent_id)) - cast(*void)(*instance)) == 24, "ON_NameHash.m_parent_id has unexpected offset % instead of 24", ((cast(*void)(*instance.m_parent_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NameHash.m_parent_id)) == 16, "ON_NameHash.m_parent_id has unexpected size % instead of 16", size_of(type_of(ON_NameHash.m_parent_id)));
        assert(size_of(ON_NameHash) == 40, "ON_NameHash has size % instead of 40", size_of(ON_NameHash));
    }

    {
        instance: ON_UnitSystem;
        assert(((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)) == 0, "ON_UnitSystem.m_unit_system has unexpected offset % instead of 0", ((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnitSystem.m_unit_system)) == 1, "ON_UnitSystem.m_unit_system has unexpected size % instead of 1", size_of(type_of(ON_UnitSystem.m_unit_system)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 4, "ON_UnitSystem.m_reserved has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnitSystem.m_reserved)) == 4, "ON_UnitSystem.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_UnitSystem.m_reserved)));
        assert(((cast(*void)(*instance.m_meters_per_custom_unit)) - cast(*void)(*instance)) == 8, "ON_UnitSystem.m_meters_per_custom_unit has unexpected offset % instead of 8", ((cast(*void)(*instance.m_meters_per_custom_unit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnitSystem.m_meters_per_custom_unit)) == 8, "ON_UnitSystem.m_meters_per_custom_unit has unexpected size % instead of 8", size_of(type_of(ON_UnitSystem.m_meters_per_custom_unit)));
        assert(((cast(*void)(*instance.m_custom_unit_name)) - cast(*void)(*instance)) == 16, "ON_UnitSystem.m_custom_unit_name has unexpected offset % instead of 16", ((cast(*void)(*instance.m_custom_unit_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnitSystem.m_custom_unit_name)) == 8, "ON_UnitSystem.m_custom_unit_name has unexpected size % instead of 8", size_of(type_of(ON_UnitSystem.m_custom_unit_name)));
        assert(size_of(ON_UnitSystem) == 24, "ON_UnitSystem has size % instead of 24", size_of(ON_UnitSystem));
    }

    {
        instance: ON_Hash32TableItem;
        assert(((cast(*void)(*instance.m_internal_next)) - cast(*void)(*instance)) == 0, "ON_Hash32TableItem.m_internal_next has unexpected offset % instead of 0", ((cast(*void)(*instance.m_internal_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32TableItem.m_internal_next)) == 8, "ON_Hash32TableItem.m_internal_next has unexpected size % instead of 8", size_of(type_of(ON_Hash32TableItem.m_internal_next)));
        assert(((cast(*void)(*instance.m_internal_hash32)) - cast(*void)(*instance)) == 8, "ON_Hash32TableItem.m_internal_hash32 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_internal_hash32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32TableItem.m_internal_hash32)) == 4, "ON_Hash32TableItem.m_internal_hash32 has unexpected size % instead of 4", size_of(type_of(ON_Hash32TableItem.m_internal_hash32)));
        assert(((cast(*void)(*instance.m_internal_hash_table_sn)) - cast(*void)(*instance)) == 12, "ON_Hash32TableItem.m_internal_hash_table_sn has unexpected offset % instead of 12", ((cast(*void)(*instance.m_internal_hash_table_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32TableItem.m_internal_hash_table_sn)) == 4, "ON_Hash32TableItem.m_internal_hash_table_sn has unexpected size % instead of 4", size_of(type_of(ON_Hash32TableItem.m_internal_hash_table_sn)));
        assert(size_of(ON_Hash32TableItem) == 16, "ON_Hash32TableItem has size % instead of 16", size_of(ON_Hash32TableItem));
    }

    {
        instance: ON_Hash32Table;
        assert(((cast(*void)(*instance.m_hash_table_sn)) - cast(*void)(*instance)) == 0, "ON_Hash32Table.m_hash_table_sn has unexpected offset % instead of 0", ((cast(*void)(*instance.m_hash_table_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32Table.m_hash_table_sn)) == 4, "ON_Hash32Table.m_hash_table_sn has unexpected size % instead of 4", size_of(type_of(ON_Hash32Table.m_hash_table_sn)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 4, "ON_Hash32Table.m_reserved has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32Table.m_reserved)) == 4, "ON_Hash32Table.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_Hash32Table.m_reserved)));
        assert(((cast(*void)(*instance.m_hash_table_capacity)) - cast(*void)(*instance)) == 8, "ON_Hash32Table.m_hash_table_capacity has unexpected offset % instead of 8", ((cast(*void)(*instance.m_hash_table_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32Table.m_hash_table_capacity)) == 4, "ON_Hash32Table.m_hash_table_capacity has unexpected size % instead of 4", size_of(type_of(ON_Hash32Table.m_hash_table_capacity)));
        assert(((cast(*void)(*instance.m_item_count)) - cast(*void)(*instance)) == 12, "ON_Hash32Table.m_item_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_item_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32Table.m_item_count)) == 4, "ON_Hash32Table.m_item_count has unexpected size % instead of 4", size_of(type_of(ON_Hash32Table.m_item_count)));
        assert(((cast(*void)(*instance.m_hash_table)) - cast(*void)(*instance)) == 16, "ON_Hash32Table.m_hash_table has unexpected offset % instead of 16", ((cast(*void)(*instance.m_hash_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hash32Table.m_hash_table)) == 8, "ON_Hash32Table.m_hash_table has unexpected size % instead of 8", size_of(type_of(ON_Hash32Table.m_hash_table)));
        assert(size_of(ON_Hash32Table) == 24, "ON_Hash32Table has size % instead of 24", size_of(ON_Hash32Table));
    }

    assert(size_of(ON_FileSystem) == 1, "ON_FileSystem has size % instead of 1", size_of(ON_FileSystem));

    assert(size_of(ON_FileSystemPath) == 1, "ON_FileSystemPath has size % instead of 1", size_of(ON_FileSystemPath));

    assert(size_of(ON_FileStream) == 1, "ON_FileStream has size % instead of 1", size_of(ON_FileStream));

    {
        instance: ON_ContentHash;
        assert(((cast(*void)(*instance.m_byte_count)) - cast(*void)(*instance)) == 0, "ON_ContentHash.m_byte_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_byte_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ContentHash.m_byte_count)) == 8, "ON_ContentHash.m_byte_count has unexpected size % instead of 8", size_of(type_of(ON_ContentHash.m_byte_count)));
        assert(((cast(*void)(*instance.m_hash_time)) - cast(*void)(*instance)) == 8, "ON_ContentHash.m_hash_time has unexpected offset % instead of 8", ((cast(*void)(*instance.m_hash_time)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ContentHash.m_hash_time)) == 8, "ON_ContentHash.m_hash_time has unexpected size % instead of 8", size_of(type_of(ON_ContentHash.m_hash_time)));
        assert(((cast(*void)(*instance.m_content_time)) - cast(*void)(*instance)) == 16, "ON_ContentHash.m_content_time has unexpected offset % instead of 16", ((cast(*void)(*instance.m_content_time)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ContentHash.m_content_time)) == 8, "ON_ContentHash.m_content_time has unexpected size % instead of 8", size_of(type_of(ON_ContentHash.m_content_time)));
        assert(((cast(*void)(*instance.m_sha1_name_hash)) - cast(*void)(*instance)) == 24, "ON_ContentHash.m_sha1_name_hash has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sha1_name_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ContentHash.m_sha1_name_hash)) == 20, "ON_ContentHash.m_sha1_name_hash has unexpected size % instead of 20", size_of(type_of(ON_ContentHash.m_sha1_name_hash)));
        assert(((cast(*void)(*instance.m_sha1_content_hash)) - cast(*void)(*instance)) == 44, "ON_ContentHash.m_sha1_content_hash has unexpected offset % instead of 44", ((cast(*void)(*instance.m_sha1_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ContentHash.m_sha1_content_hash)) == 20, "ON_ContentHash.m_sha1_content_hash has unexpected size % instead of 20", size_of(type_of(ON_ContentHash.m_sha1_content_hash)));
        assert(size_of(ON_ContentHash) == 64, "ON_ContentHash has size % instead of 64", size_of(ON_ContentHash));
    }

    {
        instance: ON_FileReference;
        assert(((cast(*void)(*instance.m_full_path)) - cast(*void)(*instance)) == 0, "ON_FileReference.m_full_path has unexpected offset % instead of 0", ((cast(*void)(*instance.m_full_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileReference.m_full_path)) == 8, "ON_FileReference.m_full_path has unexpected size % instead of 8", size_of(type_of(ON_FileReference.m_full_path)));
        assert(((cast(*void)(*instance.m_relative_path)) - cast(*void)(*instance)) == 8, "ON_FileReference.m_relative_path has unexpected offset % instead of 8", ((cast(*void)(*instance.m_relative_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileReference.m_relative_path)) == 8, "ON_FileReference.m_relative_path has unexpected size % instead of 8", size_of(type_of(ON_FileReference.m_relative_path)));
        assert(((cast(*void)(*instance.m_embedded_file_id)) - cast(*void)(*instance)) == 16, "ON_FileReference.m_embedded_file_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_embedded_file_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileReference.m_embedded_file_id)) == 16, "ON_FileReference.m_embedded_file_id has unexpected size % instead of 16", size_of(type_of(ON_FileReference.m_embedded_file_id)));
        assert(((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)) == 32, "ON_FileReference.m_content_hash has unexpected offset % instead of 32", ((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileReference.m_content_hash)) == 64, "ON_FileReference.m_content_hash has unexpected size % instead of 64", size_of(type_of(ON_FileReference.m_content_hash)));
        assert(((cast(*void)(*instance.m_recent_content_hash)) - cast(*void)(*instance)) == 96, "ON_FileReference.m_recent_content_hash has unexpected offset % instead of 96", ((cast(*void)(*instance.m_recent_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileReference.m_recent_content_hash)) == 64, "ON_FileReference.m_recent_content_hash has unexpected size % instead of 64", size_of(type_of(ON_FileReference.m_recent_content_hash)));
        assert(((cast(*void)(*instance.m_full_path_hash)) - cast(*void)(*instance)) == 160, "ON_FileReference.m_full_path_hash has unexpected offset % instead of 160", ((cast(*void)(*instance.m_full_path_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileReference.m_full_path_hash)) == 20, "ON_FileReference.m_full_path_hash has unexpected size % instead of 20", size_of(type_of(ON_FileReference.m_full_path_hash)));
        assert(((cast(*void)(*instance.m_full_path_status)) - cast(*void)(*instance)) == 180, "ON_FileReference.m_full_path_status has unexpected offset % instead of 180", ((cast(*void)(*instance.m_full_path_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileReference.m_full_path_status)) == 4, "ON_FileReference.m_full_path_status has unexpected size % instead of 4", size_of(type_of(ON_FileReference.m_full_path_status)));
        assert(size_of(ON_FileReference) == 184, "ON_FileReference has size % instead of 184", size_of(ON_FileReference));
    }

    {
        instance: ON_FileIterator;
        assert(((cast(*void)(*instance.m_state)) - cast(*void)(*instance)) == 0, "ON_FileIterator.m_state has unexpected offset % instead of 0", ((cast(*void)(*instance.m_state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_state)) == 4, "ON_FileIterator.m_state has unexpected size % instead of 4", size_of(type_of(ON_FileIterator.m_state)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 4, "ON_FileIterator.m_reserved has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_reserved)) == 4, "ON_FileIterator.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_FileIterator.m_reserved)));
        assert(((cast(*void)(*instance.m_directory)) - cast(*void)(*instance)) == 8, "ON_FileIterator.m_directory has unexpected offset % instead of 8", ((cast(*void)(*instance.m_directory)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_directory)) == 8, "ON_FileIterator.m_directory has unexpected size % instead of 8", size_of(type_of(ON_FileIterator.m_directory)));
        assert(((cast(*void)(*instance.m_item_name_filter)) - cast(*void)(*instance)) == 16, "ON_FileIterator.m_item_name_filter has unexpected offset % instead of 16", ((cast(*void)(*instance.m_item_name_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_item_name_filter)) == 8, "ON_FileIterator.m_item_name_filter has unexpected size % instead of 8", size_of(type_of(ON_FileIterator.m_item_name_filter)));
        assert(((cast(*void)(*instance.m_item_name)) - cast(*void)(*instance)) == 24, "ON_FileIterator.m_item_name has unexpected offset % instead of 24", ((cast(*void)(*instance.m_item_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_item_name)) == 8, "ON_FileIterator.m_item_name has unexpected size % instead of 8", size_of(type_of(ON_FileIterator.m_item_name)));
        assert(((cast(*void)(*instance.m_full_path_name)) - cast(*void)(*instance)) == 32, "ON_FileIterator.m_full_path_name has unexpected offset % instead of 32", ((cast(*void)(*instance.m_full_path_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_full_path_name)) == 8, "ON_FileIterator.m_full_path_name has unexpected size % instead of 8", size_of(type_of(ON_FileIterator.m_full_path_name)));
        assert(((cast(*void)(*instance.m_count)) - cast(*void)(*instance)) == 40, "ON_FileIterator.m_count has unexpected offset % instead of 40", ((cast(*void)(*instance.m_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_count)) == 8, "ON_FileIterator.m_count has unexpected size % instead of 8", size_of(type_of(ON_FileIterator.m_count)));
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 48, "ON_FileIterator.m_impl has unexpected offset % instead of 48", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FileIterator.m_impl)) == 8, "ON_FileIterator.m_impl has unexpected size % instead of 8", size_of(type_of(ON_FileIterator.m_impl)));
        assert(size_of(ON_FileIterator) == 56, "ON_FileIterator has size % instead of 56", size_of(ON_FileIterator));
    }

    {
        instance: ON_UnicodeTextFile;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 0, "ON_UnicodeTextFile._private has unexpected offset % instead of 0", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnicodeTextFile._private)) == 8, "ON_UnicodeTextFile._private has unexpected size % instead of 8", size_of(type_of(ON_UnicodeTextFile._private)));
        assert(size_of(ON_UnicodeTextFile) == 8, "ON_UnicodeTextFile has size % instead of 8", size_of(ON_UnicodeTextFile));
    }

    {
        instance: ON_UuidPair;
        assert(((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)) == 0, "ON_UuidPair.m_uuid has unexpected offset % instead of 0", ((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidPair.m_uuid)) == 32, "ON_UuidPair.m_uuid has unexpected size % instead of 32", size_of(type_of(ON_UuidPair.m_uuid)));
        assert(size_of(ON_UuidPair) == 32, "ON_UuidPair has size % instead of 32", size_of(ON_UuidPair));
    }

    {
        instance: ON_UuidList;
        assert(((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)) == 24, "ON_UuidList.m_sorted_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidList.m_sorted_count)) == 4, "ON_UuidList.m_sorted_count has unexpected size % instead of 4", size_of(type_of(ON_UuidList.m_sorted_count)));
        assert(((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)) == 28, "ON_UuidList.m_removed_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidList.m_removed_count)) == 4, "ON_UuidList.m_removed_count has unexpected size % instead of 4", size_of(type_of(ON_UuidList.m_removed_count)));
        assert(size_of(ON_UuidList) == 32, "ON_UuidList has size % instead of 32", size_of(ON_UuidList));
    }

    {
        instance: ON_UuidIndexList;
        assert(((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)) == 24, "ON_UuidIndexList.m_sorted_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidIndexList.m_sorted_count)) == 4, "ON_UuidIndexList.m_sorted_count has unexpected size % instead of 4", size_of(type_of(ON_UuidIndexList.m_sorted_count)));
        assert(((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)) == 28, "ON_UuidIndexList.m_removed_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidIndexList.m_removed_count)) == 4, "ON_UuidIndexList.m_removed_count has unexpected size % instead of 4", size_of(type_of(ON_UuidIndexList.m_removed_count)));
        assert(size_of(ON_UuidIndexList) == 32, "ON_UuidIndexList has size % instead of 32", size_of(ON_UuidIndexList));
    }

    {
        instance: ON_UuidPtrList;
        assert(((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)) == 24, "ON_UuidPtrList.m_sorted_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidPtrList.m_sorted_count)) == 4, "ON_UuidPtrList.m_sorted_count has unexpected size % instead of 4", size_of(type_of(ON_UuidPtrList.m_sorted_count)));
        assert(((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)) == 28, "ON_UuidPtrList.m_removed_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidPtrList.m_removed_count)) == 4, "ON_UuidPtrList.m_removed_count has unexpected size % instead of 4", size_of(type_of(ON_UuidPtrList.m_removed_count)));
        assert(size_of(ON_UuidPtrList) == 32, "ON_UuidPtrList has size % instead of 32", size_of(ON_UuidPtrList));
    }

    {
        instance: ON_UuidPairList;
        assert(((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)) == 24, "ON_UuidPairList.m_sorted_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sorted_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidPairList.m_sorted_count)) == 4, "ON_UuidPairList.m_sorted_count has unexpected size % instead of 4", size_of(type_of(ON_UuidPairList.m_sorted_count)));
        assert(((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)) == 28, "ON_UuidPairList.m_removed_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_removed_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UuidPairList.m_removed_count)) == 4, "ON_UuidPairList.m_removed_count has unexpected size % instead of 4", size_of(type_of(ON_UuidPairList.m_removed_count)));
        assert(size_of(ON_UuidPairList) == 32, "ON_UuidPairList has size % instead of 32", size_of(ON_UuidPairList));
    }

    {
        instance: ON_2dexMap;
        assert(((cast(*void)(*instance.m_bSorted)) - cast(*void)(*instance)) == 24, "ON_2dexMap.m_bSorted has unexpected offset % instead of 24", ((cast(*void)(*instance.m_bSorted)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dexMap.m_bSorted)) == 1, "ON_2dexMap.m_bSorted has unexpected size % instead of 1", size_of(type_of(ON_2dexMap.m_bSorted)));
        assert(size_of(ON_2dexMap) == 32, "ON_2dexMap has size % instead of 32", size_of(ON_2dexMap));
    }

    {
        instance: ON_Big5UnicodePair;
        assert(((cast(*void)(*instance.m_big5)) - cast(*void)(*instance)) == 0, "ON_Big5UnicodePair.m_big5 has unexpected offset % instead of 0", ((cast(*void)(*instance.m_big5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Big5UnicodePair.m_big5)) == 2, "ON_Big5UnicodePair.m_big5 has unexpected size % instead of 2", size_of(type_of(ON_Big5UnicodePair.m_big5)));
        assert(((cast(*void)(*instance.m_unicode)) - cast(*void)(*instance)) == 2, "ON_Big5UnicodePair.m_unicode has unexpected offset % instead of 2", ((cast(*void)(*instance.m_unicode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Big5UnicodePair.m_unicode)) == 2, "ON_Big5UnicodePair.m_unicode has unexpected size % instead of 2", size_of(type_of(ON_Big5UnicodePair.m_unicode)));
        assert(size_of(ON_Big5UnicodePair) == 4, "ON_Big5UnicodePair has size % instead of 4", size_of(ON_Big5UnicodePair));
    }

    {
        instance: ON_CompressStream;
        assert(((cast(*void)(*instance.m_out_callback_function)) - cast(*void)(*instance)) == 8, "ON_CompressStream.m_out_callback_function has unexpected offset % instead of 8", ((cast(*void)(*instance.m_out_callback_function)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_out_callback_function)) == 8, "ON_CompressStream.m_out_callback_function has unexpected size % instead of 8", size_of(type_of(ON_CompressStream.m_out_callback_function)));
        assert(((cast(*void)(*instance.m_out_callback_context)) - cast(*void)(*instance)) == 16, "ON_CompressStream.m_out_callback_context has unexpected offset % instead of 16", ((cast(*void)(*instance.m_out_callback_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_out_callback_context)) == 8, "ON_CompressStream.m_out_callback_context has unexpected size % instead of 8", size_of(type_of(ON_CompressStream.m_out_callback_context)));
        assert(((cast(*void)(*instance.m_in_size)) - cast(*void)(*instance)) == 24, "ON_CompressStream.m_in_size has unexpected offset % instead of 24", ((cast(*void)(*instance.m_in_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_in_size)) == 8, "ON_CompressStream.m_in_size has unexpected size % instead of 8", size_of(type_of(ON_CompressStream.m_in_size)));
        assert(((cast(*void)(*instance.m_out_size)) - cast(*void)(*instance)) == 32, "ON_CompressStream.m_out_size has unexpected offset % instead of 32", ((cast(*void)(*instance.m_out_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_out_size)) == 8, "ON_CompressStream.m_out_size has unexpected size % instead of 8", size_of(type_of(ON_CompressStream.m_out_size)));
        assert(((cast(*void)(*instance.m_in_crc)) - cast(*void)(*instance)) == 40, "ON_CompressStream.m_in_crc has unexpected offset % instead of 40", ((cast(*void)(*instance.m_in_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_in_crc)) == 4, "ON_CompressStream.m_in_crc has unexpected size % instead of 4", size_of(type_of(ON_CompressStream.m_in_crc)));
        assert(((cast(*void)(*instance.m_out_crc)) - cast(*void)(*instance)) == 44, "ON_CompressStream.m_out_crc has unexpected offset % instead of 44", ((cast(*void)(*instance.m_out_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_out_crc)) == 4, "ON_CompressStream.m_out_crc has unexpected size % instead of 4", size_of(type_of(ON_CompressStream.m_out_crc)));
        assert(((cast(*void)(*instance.m_implementation)) - cast(*void)(*instance)) == 48, "ON_CompressStream.m_implementation has unexpected offset % instead of 48", ((cast(*void)(*instance.m_implementation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_implementation)) == 8, "ON_CompressStream.m_implementation has unexpected size % instead of 8", size_of(type_of(ON_CompressStream.m_implementation)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 56, "ON_CompressStream.m_reserved has unexpected offset % instead of 56", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressStream.m_reserved)) == 8, "ON_CompressStream.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_CompressStream.m_reserved)));
        assert(size_of(ON_CompressStream) == 64, "ON_CompressStream has size % instead of 64", size_of(ON_CompressStream));
    }

    {
        instance: ON_UncompressStream;
        assert(((cast(*void)(*instance.m_out_callback_function)) - cast(*void)(*instance)) == 8, "ON_UncompressStream.m_out_callback_function has unexpected offset % instead of 8", ((cast(*void)(*instance.m_out_callback_function)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_out_callback_function)) == 8, "ON_UncompressStream.m_out_callback_function has unexpected size % instead of 8", size_of(type_of(ON_UncompressStream.m_out_callback_function)));
        assert(((cast(*void)(*instance.m_out_callback_context)) - cast(*void)(*instance)) == 16, "ON_UncompressStream.m_out_callback_context has unexpected offset % instead of 16", ((cast(*void)(*instance.m_out_callback_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_out_callback_context)) == 8, "ON_UncompressStream.m_out_callback_context has unexpected size % instead of 8", size_of(type_of(ON_UncompressStream.m_out_callback_context)));
        assert(((cast(*void)(*instance.m_in_size)) - cast(*void)(*instance)) == 24, "ON_UncompressStream.m_in_size has unexpected offset % instead of 24", ((cast(*void)(*instance.m_in_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_in_size)) == 8, "ON_UncompressStream.m_in_size has unexpected size % instead of 8", size_of(type_of(ON_UncompressStream.m_in_size)));
        assert(((cast(*void)(*instance.m_out_size)) - cast(*void)(*instance)) == 32, "ON_UncompressStream.m_out_size has unexpected offset % instead of 32", ((cast(*void)(*instance.m_out_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_out_size)) == 8, "ON_UncompressStream.m_out_size has unexpected size % instead of 8", size_of(type_of(ON_UncompressStream.m_out_size)));
        assert(((cast(*void)(*instance.m_in_crc)) - cast(*void)(*instance)) == 40, "ON_UncompressStream.m_in_crc has unexpected offset % instead of 40", ((cast(*void)(*instance.m_in_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_in_crc)) == 4, "ON_UncompressStream.m_in_crc has unexpected size % instead of 4", size_of(type_of(ON_UncompressStream.m_in_crc)));
        assert(((cast(*void)(*instance.m_out_crc)) - cast(*void)(*instance)) == 44, "ON_UncompressStream.m_out_crc has unexpected offset % instead of 44", ((cast(*void)(*instance.m_out_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_out_crc)) == 4, "ON_UncompressStream.m_out_crc has unexpected size % instead of 4", size_of(type_of(ON_UncompressStream.m_out_crc)));
        assert(((cast(*void)(*instance.m_implementation)) - cast(*void)(*instance)) == 48, "ON_UncompressStream.m_implementation has unexpected offset % instead of 48", ((cast(*void)(*instance.m_implementation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_implementation)) == 8, "ON_UncompressStream.m_implementation has unexpected size % instead of 8", size_of(type_of(ON_UncompressStream.m_implementation)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 56, "ON_UncompressStream.m_reserved has unexpected offset % instead of 56", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UncompressStream.m_reserved)) == 8, "ON_UncompressStream.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_UncompressStream.m_reserved)));
        assert(size_of(ON_UncompressStream) == 64, "ON_UncompressStream has size % instead of 64", size_of(ON_UncompressStream));
    }

    {
        instance: ON_CompressedBuffer;
        assert(((cast(*void)(*instance.m_sizeof_uncompressed)) - cast(*void)(*instance)) == 0, "ON_CompressedBuffer.m_sizeof_uncompressed has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sizeof_uncompressed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_sizeof_uncompressed)) == 8, "ON_CompressedBuffer.m_sizeof_uncompressed has unexpected size % instead of 8", size_of(type_of(ON_CompressedBuffer.m_sizeof_uncompressed)));
        assert(((cast(*void)(*instance.m_sizeof_compressed)) - cast(*void)(*instance)) == 8, "ON_CompressedBuffer.m_sizeof_compressed has unexpected offset % instead of 8", ((cast(*void)(*instance.m_sizeof_compressed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_sizeof_compressed)) == 8, "ON_CompressedBuffer.m_sizeof_compressed has unexpected size % instead of 8", size_of(type_of(ON_CompressedBuffer.m_sizeof_compressed)));
        assert(((cast(*void)(*instance.m_crc_uncompressed)) - cast(*void)(*instance)) == 16, "ON_CompressedBuffer.m_crc_uncompressed has unexpected offset % instead of 16", ((cast(*void)(*instance.m_crc_uncompressed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_crc_uncompressed)) == 4, "ON_CompressedBuffer.m_crc_uncompressed has unexpected size % instead of 4", size_of(type_of(ON_CompressedBuffer.m_crc_uncompressed)));
        assert(((cast(*void)(*instance.m_crc_compressed)) - cast(*void)(*instance)) == 20, "ON_CompressedBuffer.m_crc_compressed has unexpected offset % instead of 20", ((cast(*void)(*instance.m_crc_compressed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_crc_compressed)) == 4, "ON_CompressedBuffer.m_crc_compressed has unexpected size % instead of 4", size_of(type_of(ON_CompressedBuffer.m_crc_compressed)));
        assert(((cast(*void)(*instance.m_method)) - cast(*void)(*instance)) == 24, "ON_CompressedBuffer.m_method has unexpected offset % instead of 24", ((cast(*void)(*instance.m_method)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_method)) == 4, "ON_CompressedBuffer.m_method has unexpected size % instead of 4", size_of(type_of(ON_CompressedBuffer.m_method)));
        assert(((cast(*void)(*instance.m_sizeof_element)) - cast(*void)(*instance)) == 28, "ON_CompressedBuffer.m_sizeof_element has unexpected offset % instead of 28", ((cast(*void)(*instance.m_sizeof_element)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_sizeof_element)) == 4, "ON_CompressedBuffer.m_sizeof_element has unexpected size % instead of 4", size_of(type_of(ON_CompressedBuffer.m_sizeof_element)));
        assert(((cast(*void)(*instance.m_buffer_compressed_capacity)) - cast(*void)(*instance)) == 32, "ON_CompressedBuffer.m_buffer_compressed_capacity has unexpected offset % instead of 32", ((cast(*void)(*instance.m_buffer_compressed_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_buffer_compressed_capacity)) == 8, "ON_CompressedBuffer.m_buffer_compressed_capacity has unexpected size % instead of 8", size_of(type_of(ON_CompressedBuffer.m_buffer_compressed_capacity)));
        assert(((cast(*void)(*instance.m_buffer_compressed)) - cast(*void)(*instance)) == 40, "ON_CompressedBuffer.m_buffer_compressed has unexpected offset % instead of 40", ((cast(*void)(*instance.m_buffer_compressed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CompressedBuffer.m_buffer_compressed)) == 8, "ON_CompressedBuffer.m_buffer_compressed has unexpected size % instead of 8", size_of(type_of(ON_CompressedBuffer.m_buffer_compressed)));
        assert(size_of(ON_CompressedBuffer) == 48, "ON_CompressedBuffer has size % instead of 48", size_of(ON_CompressedBuffer));
    }

    {
        instance: ON_Base64EncodeStream;
        assert(((cast(*void)(*instance.m_out_callback_function)) - cast(*void)(*instance)) == 8, "ON_Base64EncodeStream.m_out_callback_function has unexpected offset % instead of 8", ((cast(*void)(*instance.m_out_callback_function)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_out_callback_function)) == 8, "ON_Base64EncodeStream.m_out_callback_function has unexpected size % instead of 8", size_of(type_of(ON_Base64EncodeStream.m_out_callback_function)));
        assert(((cast(*void)(*instance.m_out_callback_context)) - cast(*void)(*instance)) == 16, "ON_Base64EncodeStream.m_out_callback_context has unexpected offset % instead of 16", ((cast(*void)(*instance.m_out_callback_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_out_callback_context)) == 8, "ON_Base64EncodeStream.m_out_callback_context has unexpected size % instead of 8", size_of(type_of(ON_Base64EncodeStream.m_out_callback_context)));
        assert(((cast(*void)(*instance.m_in_size)) - cast(*void)(*instance)) == 24, "ON_Base64EncodeStream.m_in_size has unexpected offset % instead of 24", ((cast(*void)(*instance.m_in_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_in_size)) == 8, "ON_Base64EncodeStream.m_in_size has unexpected size % instead of 8", size_of(type_of(ON_Base64EncodeStream.m_in_size)));
        assert(((cast(*void)(*instance.m_out_size)) - cast(*void)(*instance)) == 32, "ON_Base64EncodeStream.m_out_size has unexpected offset % instead of 32", ((cast(*void)(*instance.m_out_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_out_size)) == 8, "ON_Base64EncodeStream.m_out_size has unexpected size % instead of 8", size_of(type_of(ON_Base64EncodeStream.m_out_size)));
        assert(((cast(*void)(*instance.m_in_crc)) - cast(*void)(*instance)) == 40, "ON_Base64EncodeStream.m_in_crc has unexpected offset % instead of 40", ((cast(*void)(*instance.m_in_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_in_crc)) == 4, "ON_Base64EncodeStream.m_in_crc has unexpected size % instead of 4", size_of(type_of(ON_Base64EncodeStream.m_in_crc)));
        assert(((cast(*void)(*instance.m_out_crc)) - cast(*void)(*instance)) == 44, "ON_Base64EncodeStream.m_out_crc has unexpected offset % instead of 44", ((cast(*void)(*instance.m_out_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_out_crc)) == 4, "ON_Base64EncodeStream.m_out_crc has unexpected size % instead of 4", size_of(type_of(ON_Base64EncodeStream.m_out_crc)));
        assert(((cast(*void)(*instance.m_implementation)) - cast(*void)(*instance)) == 48, "ON_Base64EncodeStream.m_implementation has unexpected offset % instead of 48", ((cast(*void)(*instance.m_implementation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_implementation)) == 8, "ON_Base64EncodeStream.m_implementation has unexpected size % instead of 8", size_of(type_of(ON_Base64EncodeStream.m_implementation)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 56, "ON_Base64EncodeStream.m_reserved has unexpected offset % instead of 56", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Base64EncodeStream.m_reserved)) == 8, "ON_Base64EncodeStream.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_Base64EncodeStream.m_reserved)));
        assert(size_of(ON_Base64EncodeStream) == 64, "ON_Base64EncodeStream has size % instead of 64", size_of(ON_Base64EncodeStream));
    }

    {
        instance: ON_DecodeBase64;
        assert(((cast(*void)(*instance.m_decode_count)) - cast(*void)(*instance)) == 8, "ON_DecodeBase64.m_decode_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_decode_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DecodeBase64.m_decode_count)) == 4, "ON_DecodeBase64.m_decode_count has unexpected size % instead of 4", size_of(type_of(ON_DecodeBase64.m_decode_count)));
        assert(((cast(*void)(*instance.m_output_count)) - cast(*void)(*instance)) == 12, "ON_DecodeBase64.m_output_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_output_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DecodeBase64.m_output_count)) == 4, "ON_DecodeBase64.m_output_count has unexpected size % instead of 4", size_of(type_of(ON_DecodeBase64.m_output_count)));
        assert(((cast(*void)(*instance.m_output)) - cast(*void)(*instance)) == 16, "ON_DecodeBase64.m_output has unexpected offset % instead of 16", ((cast(*void)(*instance.m_output)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DecodeBase64.m_output)) == 512, "ON_DecodeBase64.m_output has unexpected size % instead of 512", size_of(type_of(ON_DecodeBase64.m_output)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 528, "ON_DecodeBase64.m_status has unexpected offset % instead of 528", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DecodeBase64.m_status)) == 4, "ON_DecodeBase64.m_status has unexpected size % instead of 4", size_of(type_of(ON_DecodeBase64.m_status)));
        assert(((cast(*void)(*instance.m_cache_count)) - cast(*void)(*instance)) == 532, "ON_DecodeBase64.m_cache_count has unexpected offset % instead of 532", ((cast(*void)(*instance.m_cache_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DecodeBase64.m_cache_count)) == 4, "ON_DecodeBase64.m_cache_count has unexpected size % instead of 4", size_of(type_of(ON_DecodeBase64.m_cache_count)));
        assert(((cast(*void)(*instance.m_cache)) - cast(*void)(*instance)) == 536, "ON_DecodeBase64.m_cache has unexpected offset % instead of 536", ((cast(*void)(*instance.m_cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DecodeBase64.m_cache)) == 16, "ON_DecodeBase64.m_cache has unexpected size % instead of 16", size_of(type_of(ON_DecodeBase64.m_cache)));
        assert(size_of(ON_DecodeBase64) == 552, "ON_DecodeBase64 has size % instead of 552", size_of(ON_DecodeBase64));
    }

    assert(size_of(ON_Base64) == 1, "ON_Base64 has size % instead of 1", size_of(ON_Base64));

    {
        instance: ON_Color;
        assert(size_of(ON_Color) == 4, "ON_Color has size % instead of 4", size_of(ON_Color));
    }

    {
        instance: ON_ColorStop;
        assert(((cast(*void)(*instance.m_color)) - cast(*void)(*instance)) == 0, "ON_ColorStop.m_color has unexpected offset % instead of 0", ((cast(*void)(*instance.m_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ColorStop.m_color)) == 4, "ON_ColorStop.m_color has unexpected size % instead of 4", size_of(type_of(ON_ColorStop.m_color)));
        assert(((cast(*void)(*instance.m_position)) - cast(*void)(*instance)) == 8, "ON_ColorStop.m_position has unexpected offset % instead of 8", ((cast(*void)(*instance.m_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ColorStop.m_position)) == 8, "ON_ColorStop.m_position has unexpected size % instead of 8", size_of(type_of(ON_ColorStop.m_position)));
        assert(size_of(ON_ColorStop) == 16, "ON_ColorStop has size % instead of 16", size_of(ON_ColorStop));
    }

    {
        instance: ON_4fColor;
        assert(((cast(*void)(*instance.m_color)) - cast(*void)(*instance)) == 0, "ON_4fColor.m_color has unexpected offset % instead of 0", ((cast(*void)(*instance.m_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4fColor.m_color)) == 16, "ON_4fColor.m_color has unexpected size % instead of 16", size_of(type_of(ON_4fColor.m_color)));
        assert(size_of(ON_4fColor) == 16, "ON_4fColor has size % instead of 16", size_of(ON_4fColor));
    }

    {
        instance: ON_DisplayMaterialRef;
        assert(((cast(*void)(*instance.m_viewport_id)) - cast(*void)(*instance)) == 0, "ON_DisplayMaterialRef.m_viewport_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_viewport_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DisplayMaterialRef.m_viewport_id)) == 16, "ON_DisplayMaterialRef.m_viewport_id has unexpected size % instead of 16", size_of(type_of(ON_DisplayMaterialRef.m_viewport_id)));
        assert(((cast(*void)(*instance.m_display_material_id)) - cast(*void)(*instance)) == 16, "ON_DisplayMaterialRef.m_display_material_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_display_material_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DisplayMaterialRef.m_display_material_id)) == 16, "ON_DisplayMaterialRef.m_display_material_id has unexpected size % instead of 16", size_of(type_of(ON_DisplayMaterialRef.m_display_material_id)));
        assert(size_of(ON_DisplayMaterialRef) == 32, "ON_DisplayMaterialRef has size % instead of 32", size_of(ON_DisplayMaterialRef));
    }

    {
        instance: ON_LinetypeSegment;
        assert(((cast(*void)(*instance.m_length)) - cast(*void)(*instance)) == 0, "ON_LinetypeSegment.m_length has unexpected offset % instead of 0", ((cast(*void)(*instance.m_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LinetypeSegment.m_length)) == 8, "ON_LinetypeSegment.m_length has unexpected size % instead of 8", size_of(type_of(ON_LinetypeSegment.m_length)));
        assert(((cast(*void)(*instance.m_seg_type)) - cast(*void)(*instance)) == 8, "ON_LinetypeSegment.m_seg_type has unexpected offset % instead of 8", ((cast(*void)(*instance.m_seg_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LinetypeSegment.m_seg_type)) == 4, "ON_LinetypeSegment.m_seg_type has unexpected size % instead of 4", size_of(type_of(ON_LinetypeSegment.m_seg_type)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 12, "ON_LinetypeSegment.m_reserved2 has unexpected offset % instead of 12", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LinetypeSegment.m_reserved2)) == 4, "ON_LinetypeSegment.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_LinetypeSegment.m_reserved2)));
        assert(size_of(ON_LinetypeSegment) == 16, "ON_LinetypeSegment has size % instead of 16", size_of(ON_LinetypeSegment));
    }

    {
        instance: ON_Interval;
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 0, "ON_Interval.m_t has unexpected offset % instead of 0", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Interval.m_t)) == 16, "ON_Interval.m_t has unexpected size % instead of 16", size_of(type_of(ON_Interval.m_t)));
        assert(size_of(ON_Interval) == 16, "ON_Interval has size % instead of 16", size_of(ON_Interval));
    }

    {
        instance: ON_2dPoint;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_2dPoint.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dPoint.x)) == 8, "ON_2dPoint.x has unexpected size % instead of 8", size_of(type_of(ON_2dPoint.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "ON_2dPoint.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dPoint.y)) == 8, "ON_2dPoint.y has unexpected size % instead of 8", size_of(type_of(ON_2dPoint.y)));
        assert(size_of(ON_2dPoint) == 16, "ON_2dPoint has size % instead of 16", size_of(ON_2dPoint));
    }

    {
        instance: ON_3dPoint;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_3dPoint.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dPoint.x)) == 8, "ON_3dPoint.x has unexpected size % instead of 8", size_of(type_of(ON_3dPoint.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "ON_3dPoint.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dPoint.y)) == 8, "ON_3dPoint.y has unexpected size % instead of 8", size_of(type_of(ON_3dPoint.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 16, "ON_3dPoint.z has unexpected offset % instead of 16", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dPoint.z)) == 8, "ON_3dPoint.z has unexpected size % instead of 8", size_of(type_of(ON_3dPoint.z)));
        assert(size_of(ON_3dPoint) == 24, "ON_3dPoint has size % instead of 24", size_of(ON_3dPoint));
    }

    {
        instance: ON_4dPoint;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_4dPoint.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dPoint.x)) == 8, "ON_4dPoint.x has unexpected size % instead of 8", size_of(type_of(ON_4dPoint.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "ON_4dPoint.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dPoint.y)) == 8, "ON_4dPoint.y has unexpected size % instead of 8", size_of(type_of(ON_4dPoint.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 16, "ON_4dPoint.z has unexpected offset % instead of 16", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dPoint.z)) == 8, "ON_4dPoint.z has unexpected size % instead of 8", size_of(type_of(ON_4dPoint.z)));
        assert(((cast(*void)(*instance.w)) - cast(*void)(*instance)) == 24, "ON_4dPoint.w has unexpected offset % instead of 24", ((cast(*void)(*instance.w)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dPoint.w)) == 8, "ON_4dPoint.w has unexpected size % instead of 8", size_of(type_of(ON_4dPoint.w)));
        assert(size_of(ON_4dPoint) == 32, "ON_4dPoint has size % instead of 32", size_of(ON_4dPoint));
    }

    {
        instance: ON_2dVector;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_2dVector.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dVector.x)) == 8, "ON_2dVector.x has unexpected size % instead of 8", size_of(type_of(ON_2dVector.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "ON_2dVector.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dVector.y)) == 8, "ON_2dVector.y has unexpected size % instead of 8", size_of(type_of(ON_2dVector.y)));
        assert(size_of(ON_2dVector) == 16, "ON_2dVector has size % instead of 16", size_of(ON_2dVector));
    }

    {
        instance: ON_3dVector;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_3dVector.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dVector.x)) == 8, "ON_3dVector.x has unexpected size % instead of 8", size_of(type_of(ON_3dVector.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "ON_3dVector.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dVector.y)) == 8, "ON_3dVector.y has unexpected size % instead of 8", size_of(type_of(ON_3dVector.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 16, "ON_3dVector.z has unexpected offset % instead of 16", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dVector.z)) == 8, "ON_3dVector.z has unexpected size % instead of 8", size_of(type_of(ON_3dVector.z)));
        assert(size_of(ON_3dVector) == 24, "ON_3dVector has size % instead of 24", size_of(ON_3dVector));
    }

    {
        instance: ON_3dRay;
        assert(((cast(*void)(*instance.m_P)) - cast(*void)(*instance)) == 0, "ON_3dRay.m_P has unexpected offset % instead of 0", ((cast(*void)(*instance.m_P)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dRay.m_P)) == 24, "ON_3dRay.m_P has unexpected size % instead of 24", size_of(type_of(ON_3dRay.m_P)));
        assert(((cast(*void)(*instance.m_V)) - cast(*void)(*instance)) == 24, "ON_3dRay.m_V has unexpected offset % instead of 24", ((cast(*void)(*instance.m_V)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dRay.m_V)) == 24, "ON_3dRay.m_V has unexpected size % instead of 24", size_of(type_of(ON_3dRay.m_V)));
        assert(size_of(ON_3dRay) == 48, "ON_3dRay has size % instead of 48", size_of(ON_3dRay));
    }

    {
        instance: ON_PlaneEquation;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_PlaneEquation.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlaneEquation.x)) == 8, "ON_PlaneEquation.x has unexpected size % instead of 8", size_of(type_of(ON_PlaneEquation.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 8, "ON_PlaneEquation.y has unexpected offset % instead of 8", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlaneEquation.y)) == 8, "ON_PlaneEquation.y has unexpected size % instead of 8", size_of(type_of(ON_PlaneEquation.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 16, "ON_PlaneEquation.z has unexpected offset % instead of 16", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlaneEquation.z)) == 8, "ON_PlaneEquation.z has unexpected size % instead of 8", size_of(type_of(ON_PlaneEquation.z)));
        assert(((cast(*void)(*instance.d)) - cast(*void)(*instance)) == 24, "ON_PlaneEquation.d has unexpected offset % instead of 24", ((cast(*void)(*instance.d)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlaneEquation.d)) == 8, "ON_PlaneEquation.d has unexpected size % instead of 8", size_of(type_of(ON_PlaneEquation.d)));
        assert(size_of(ON_PlaneEquation) == 32, "ON_PlaneEquation has size % instead of 32", size_of(ON_PlaneEquation));
    }

    {
        instance: ON_2fPoint;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_2fPoint.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2fPoint.x)) == 4, "ON_2fPoint.x has unexpected size % instead of 4", size_of(type_of(ON_2fPoint.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ON_2fPoint.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2fPoint.y)) == 4, "ON_2fPoint.y has unexpected size % instead of 4", size_of(type_of(ON_2fPoint.y)));
        assert(size_of(ON_2fPoint) == 8, "ON_2fPoint has size % instead of 8", size_of(ON_2fPoint));
    }

    {
        instance: ON_3fPoint;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_3fPoint.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3fPoint.x)) == 4, "ON_3fPoint.x has unexpected size % instead of 4", size_of(type_of(ON_3fPoint.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ON_3fPoint.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3fPoint.y)) == 4, "ON_3fPoint.y has unexpected size % instead of 4", size_of(type_of(ON_3fPoint.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 8, "ON_3fPoint.z has unexpected offset % instead of 8", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3fPoint.z)) == 4, "ON_3fPoint.z has unexpected size % instead of 4", size_of(type_of(ON_3fPoint.z)));
        assert(size_of(ON_3fPoint) == 12, "ON_3fPoint has size % instead of 12", size_of(ON_3fPoint));
    }

    {
        instance: ON_4fPoint;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_4fPoint.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4fPoint.x)) == 4, "ON_4fPoint.x has unexpected size % instead of 4", size_of(type_of(ON_4fPoint.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ON_4fPoint.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4fPoint.y)) == 4, "ON_4fPoint.y has unexpected size % instead of 4", size_of(type_of(ON_4fPoint.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 8, "ON_4fPoint.z has unexpected offset % instead of 8", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4fPoint.z)) == 4, "ON_4fPoint.z has unexpected size % instead of 4", size_of(type_of(ON_4fPoint.z)));
        assert(((cast(*void)(*instance.w)) - cast(*void)(*instance)) == 12, "ON_4fPoint.w has unexpected offset % instead of 12", ((cast(*void)(*instance.w)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4fPoint.w)) == 4, "ON_4fPoint.w has unexpected size % instead of 4", size_of(type_of(ON_4fPoint.w)));
        assert(size_of(ON_4fPoint) == 16, "ON_4fPoint has size % instead of 16", size_of(ON_4fPoint));
    }

    {
        instance: ON_2fVector;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_2fVector.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2fVector.x)) == 4, "ON_2fVector.x has unexpected size % instead of 4", size_of(type_of(ON_2fVector.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ON_2fVector.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2fVector.y)) == 4, "ON_2fVector.y has unexpected size % instead of 4", size_of(type_of(ON_2fVector.y)));
        assert(size_of(ON_2fVector) == 8, "ON_2fVector has size % instead of 8", size_of(ON_2fVector));
    }

    {
        instance: ON_3fVector;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_3fVector.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3fVector.x)) == 4, "ON_3fVector.x has unexpected size % instead of 4", size_of(type_of(ON_3fVector.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ON_3fVector.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3fVector.y)) == 4, "ON_3fVector.y has unexpected size % instead of 4", size_of(type_of(ON_3fVector.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 8, "ON_3fVector.z has unexpected offset % instead of 8", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3fVector.z)) == 4, "ON_3fVector.z has unexpected size % instead of 4", size_of(type_of(ON_3fVector.z)));
        assert(size_of(ON_3fVector) == 12, "ON_3fVector has size % instead of 12", size_of(ON_3fVector));
    }

    {
        instance: ON_SurfaceCurvature;
        assert(((cast(*void)(*instance.k1)) - cast(*void)(*instance)) == 0, "ON_SurfaceCurvature.k1 has unexpected offset % instead of 0", ((cast(*void)(*instance.k1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvature.k1)) == 8, "ON_SurfaceCurvature.k1 has unexpected size % instead of 8", size_of(type_of(ON_SurfaceCurvature.k1)));
        assert(((cast(*void)(*instance.k2)) - cast(*void)(*instance)) == 8, "ON_SurfaceCurvature.k2 has unexpected offset % instead of 8", ((cast(*void)(*instance.k2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvature.k2)) == 8, "ON_SurfaceCurvature.k2 has unexpected size % instead of 8", size_of(type_of(ON_SurfaceCurvature.k2)));
        assert(size_of(ON_SurfaceCurvature) == 16, "ON_SurfaceCurvature has size % instead of 16", size_of(ON_SurfaceCurvature));
    }

    assert(size_of(ON_2dPointArray) == 24, "ON_2dPointArray has size % instead of 24", size_of(ON_2dPointArray));

    assert(size_of(ON_2fPointArray) == 24, "ON_2fPointArray has size % instead of 24", size_of(ON_2fPointArray));

    assert(size_of(ON_3dPointArray) == 24, "ON_3dPointArray has size % instead of 24", size_of(ON_3dPointArray));

    assert(size_of(ON_3fPointArray) == 24, "ON_3fPointArray has size % instead of 24", size_of(ON_3fPointArray));

    assert(size_of(ON_4dPointArray) == 24, "ON_4dPointArray has size % instead of 24", size_of(ON_4dPointArray));

    assert(size_of(ON_4fPointArray) == 24, "ON_4fPointArray has size % instead of 24", size_of(ON_4fPointArray));

    assert(size_of(ON_2dVectorArray) == 24, "ON_2dVectorArray has size % instead of 24", size_of(ON_2dVectorArray));

    assert(size_of(ON_2fVectorArray) == 24, "ON_2fVectorArray has size % instead of 24", size_of(ON_2fVectorArray));

    assert(size_of(ON_3dVectorArray) == 24, "ON_3dVectorArray has size % instead of 24", size_of(ON_3dVectorArray));

    assert(size_of(ON_3fVectorArray) == 24, "ON_3fVectorArray has size % instead of 24", size_of(ON_3fVectorArray));

    {
        instance: ON_3dPointListRef;
        assert(((cast(*void)(*instance.m_point_count)) - cast(*void)(*instance)) == 0, "ON_3dPointListRef.m_point_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_point_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dPointListRef.m_point_count)) == 4, "ON_3dPointListRef.m_point_count has unexpected size % instead of 4", size_of(type_of(ON_3dPointListRef.m_point_count)));
        assert(((cast(*void)(*instance.m_point_stride)) - cast(*void)(*instance)) == 4, "ON_3dPointListRef.m_point_stride has unexpected offset % instead of 4", ((cast(*void)(*instance.m_point_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dPointListRef.m_point_stride)) == 4, "ON_3dPointListRef.m_point_stride has unexpected size % instead of 4", size_of(type_of(ON_3dPointListRef.m_point_stride)));
        assert(((cast(*void)(*instance.m_dP)) - cast(*void)(*instance)) == 8, "ON_3dPointListRef.m_dP has unexpected offset % instead of 8", ((cast(*void)(*instance.m_dP)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dPointListRef.m_dP)) == 8, "ON_3dPointListRef.m_dP has unexpected size % instead of 8", size_of(type_of(ON_3dPointListRef.m_dP)));
        assert(((cast(*void)(*instance.m_fP)) - cast(*void)(*instance)) == 16, "ON_3dPointListRef.m_fP has unexpected offset % instead of 16", ((cast(*void)(*instance.m_fP)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dPointListRef.m_fP)) == 8, "ON_3dPointListRef.m_fP has unexpected size % instead of 8", size_of(type_of(ON_3dPointListRef.m_fP)));
        assert(size_of(ON_3dPointListRef) == 24, "ON_3dPointListRef has size % instead of 24", size_of(ON_3dPointListRef));
    }

    {
        instance: ON_2dSize;
        assert(((cast(*void)(*instance.cx)) - cast(*void)(*instance)) == 0, "ON_2dSize.cx has unexpected offset % instead of 0", ((cast(*void)(*instance.cx)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dSize.cx)) == 8, "ON_2dSize.cx has unexpected size % instead of 8", size_of(type_of(ON_2dSize.cx)));
        assert(((cast(*void)(*instance.cy)) - cast(*void)(*instance)) == 8, "ON_2dSize.cy has unexpected offset % instead of 8", ((cast(*void)(*instance.cy)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2dSize.cy)) == 8, "ON_2dSize.cy has unexpected size % instead of 8", size_of(type_of(ON_2dSize.cy)));
        assert(size_of(ON_2dSize) == 16, "ON_2dSize has size % instead of 16", size_of(ON_2dSize));
    }

    {
        instance: ON_4dRect;
        assert(((cast(*void)(*instance.left)) - cast(*void)(*instance)) == 0, "ON_4dRect.left has unexpected offset % instead of 0", ((cast(*void)(*instance.left)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dRect.left)) == 8, "ON_4dRect.left has unexpected size % instead of 8", size_of(type_of(ON_4dRect.left)));
        assert(((cast(*void)(*instance.top)) - cast(*void)(*instance)) == 8, "ON_4dRect.top has unexpected offset % instead of 8", ((cast(*void)(*instance.top)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dRect.top)) == 8, "ON_4dRect.top has unexpected size % instead of 8", size_of(type_of(ON_4dRect.top)));
        assert(((cast(*void)(*instance.right)) - cast(*void)(*instance)) == 16, "ON_4dRect.right has unexpected offset % instead of 16", ((cast(*void)(*instance.right)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dRect.right)) == 8, "ON_4dRect.right has unexpected size % instead of 8", size_of(type_of(ON_4dRect.right)));
        assert(((cast(*void)(*instance.bottom)) - cast(*void)(*instance)) == 24, "ON_4dRect.bottom has unexpected offset % instead of 24", ((cast(*void)(*instance.bottom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4dRect.bottom)) == 8, "ON_4dRect.bottom has unexpected size % instead of 8", size_of(type_of(ON_4dRect.bottom)));
        assert(size_of(ON_4dRect) == 32, "ON_4dRect has size % instead of 32", size_of(ON_4dRect));
    }

    {
        instance: ON_WindingNumber;
        assert(((cast(*void)(*instance.m_winding_point)) - cast(*void)(*instance)) == 0, "ON_WindingNumber.m_winding_point has unexpected offset % instead of 0", ((cast(*void)(*instance.m_winding_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_winding_point)) == 16, "ON_WindingNumber.m_winding_point has unexpected size % instead of 16", size_of(type_of(ON_WindingNumber.m_winding_point)));
        assert(((cast(*void)(*instance.m_prev_boundary_point)) - cast(*void)(*instance)) == 16, "ON_WindingNumber.m_prev_boundary_point has unexpected offset % instead of 16", ((cast(*void)(*instance.m_prev_boundary_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_prev_boundary_point)) == 16, "ON_WindingNumber.m_prev_boundary_point has unexpected size % instead of 16", size_of(type_of(ON_WindingNumber.m_prev_boundary_point)));
        assert(((cast(*void)(*instance.m_boundary_segment_count)) - cast(*void)(*instance)) == 32, "ON_WindingNumber.m_boundary_segment_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_boundary_segment_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_boundary_segment_count)) == 4, "ON_WindingNumber.m_boundary_segment_count has unexpected size % instead of 4", size_of(type_of(ON_WindingNumber.m_boundary_segment_count)));
        assert(((cast(*void)(*instance.m_left_crossing_number)) - cast(*void)(*instance)) == 36, "ON_WindingNumber.m_left_crossing_number has unexpected offset % instead of 36", ((cast(*void)(*instance.m_left_crossing_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_left_crossing_number)) == 4, "ON_WindingNumber.m_left_crossing_number has unexpected size % instead of 4", size_of(type_of(ON_WindingNumber.m_left_crossing_number)));
        assert(((cast(*void)(*instance.m_right_crossing_number)) - cast(*void)(*instance)) == 40, "ON_WindingNumber.m_right_crossing_number has unexpected offset % instead of 40", ((cast(*void)(*instance.m_right_crossing_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_right_crossing_number)) == 4, "ON_WindingNumber.m_right_crossing_number has unexpected size % instead of 4", size_of(type_of(ON_WindingNumber.m_right_crossing_number)));
        assert(((cast(*void)(*instance.m_below_crossing_number)) - cast(*void)(*instance)) == 44, "ON_WindingNumber.m_below_crossing_number has unexpected offset % instead of 44", ((cast(*void)(*instance.m_below_crossing_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_below_crossing_number)) == 4, "ON_WindingNumber.m_below_crossing_number has unexpected size % instead of 4", size_of(type_of(ON_WindingNumber.m_below_crossing_number)));
        assert(((cast(*void)(*instance.m_above_crossing_number)) - cast(*void)(*instance)) == 48, "ON_WindingNumber.m_above_crossing_number has unexpected offset % instead of 48", ((cast(*void)(*instance.m_above_crossing_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_above_crossing_number)) == 4, "ON_WindingNumber.m_above_crossing_number has unexpected size % instead of 4", size_of(type_of(ON_WindingNumber.m_above_crossing_number)));
        assert(((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)) == 52, "ON_WindingNumber.m_status_bits has unexpected offset % instead of 52", ((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindingNumber.m_status_bits)) == 4, "ON_WindingNumber.m_status_bits has unexpected size % instead of 4", size_of(type_of(ON_WindingNumber.m_status_bits)));
        assert(size_of(ON_WindingNumber) == 56, "ON_WindingNumber has size % instead of 56", size_of(ON_WindingNumber));
    }

    {
        instance: ON_PeriodicDomain;
        assert(((cast(*void)(*instance.m_dom)) - cast(*void)(*instance)) == 0, "ON_PeriodicDomain.m_dom has unexpected offset % instead of 0", ((cast(*void)(*instance.m_dom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PeriodicDomain.m_dom)) == 32, "ON_PeriodicDomain.m_dom has unexpected size % instead of 32", size_of(type_of(ON_PeriodicDomain.m_dom)));
        assert(((cast(*void)(*instance.m_closed)) - cast(*void)(*instance)) == 32, "ON_PeriodicDomain.m_closed has unexpected offset % instead of 32", ((cast(*void)(*instance.m_closed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PeriodicDomain.m_closed)) == 2, "ON_PeriodicDomain.m_closed has unexpected size % instead of 2", size_of(type_of(ON_PeriodicDomain.m_closed)));
        assert(((cast(*void)(*instance.m_normband)) - cast(*void)(*instance)) == 40, "ON_PeriodicDomain.m_normband has unexpected offset % instead of 40", ((cast(*void)(*instance.m_normband)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PeriodicDomain.m_normband)) == 8, "ON_PeriodicDomain.m_normband has unexpected size % instead of 8", size_of(type_of(ON_PeriodicDomain.m_normband)));
        assert(((cast(*void)(*instance.m_deck)) - cast(*void)(*instance)) == 48, "ON_PeriodicDomain.m_deck has unexpected offset % instead of 48", ((cast(*void)(*instance.m_deck)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PeriodicDomain.m_deck)) == 8, "ON_PeriodicDomain.m_deck has unexpected size % instead of 8", size_of(type_of(ON_PeriodicDomain.m_deck)));
        assert(((cast(*void)(*instance.m_nprev)) - cast(*void)(*instance)) == 56, "ON_PeriodicDomain.m_nprev has unexpected offset % instead of 56", ((cast(*void)(*instance.m_nprev)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PeriodicDomain.m_nprev)) == 16, "ON_PeriodicDomain.m_nprev has unexpected size % instead of 16", size_of(type_of(ON_PeriodicDomain.m_nprev)));
        assert(size_of(ON_PeriodicDomain) == 72, "ON_PeriodicDomain has size % instead of 72", size_of(ON_PeriodicDomain));
    }

    {
        instance: ON_2iPoint;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_2iPoint.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iPoint.x)) == 4, "ON_2iPoint.x has unexpected size % instead of 4", size_of(type_of(ON_2iPoint.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ON_2iPoint.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iPoint.y)) == 4, "ON_2iPoint.y has unexpected size % instead of 4", size_of(type_of(ON_2iPoint.y)));
        assert(size_of(ON_2iPoint) == 8, "ON_2iPoint has size % instead of 8", size_of(ON_2iPoint));
    }

    {
        instance: ON_2iVector;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ON_2iVector.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iVector.x)) == 4, "ON_2iVector.x has unexpected size % instead of 4", size_of(type_of(ON_2iVector.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ON_2iVector.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iVector.y)) == 4, "ON_2iVector.y has unexpected size % instead of 4", size_of(type_of(ON_2iVector.y)));
        assert(size_of(ON_2iVector) == 8, "ON_2iVector has size % instead of 8", size_of(ON_2iVector));
    }

    {
        instance: ON_2iBoundingBox;
        assert(((cast(*void)(*instance.m_min)) - cast(*void)(*instance)) == 0, "ON_2iBoundingBox.m_min has unexpected offset % instead of 0", ((cast(*void)(*instance.m_min)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iBoundingBox.m_min)) == 8, "ON_2iBoundingBox.m_min has unexpected size % instead of 8", size_of(type_of(ON_2iBoundingBox.m_min)));
        assert(((cast(*void)(*instance.m_max)) - cast(*void)(*instance)) == 8, "ON_2iBoundingBox.m_max has unexpected offset % instead of 8", ((cast(*void)(*instance.m_max)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iBoundingBox.m_max)) == 8, "ON_2iBoundingBox.m_max has unexpected size % instead of 8", size_of(type_of(ON_2iBoundingBox.m_max)));
        assert(size_of(ON_2iBoundingBox) == 16, "ON_2iBoundingBox has size % instead of 16", size_of(ON_2iBoundingBox));
    }

    {
        instance: ON_2iSize;
        assert(((cast(*void)(*instance.cx)) - cast(*void)(*instance)) == 0, "ON_2iSize.cx has unexpected offset % instead of 0", ((cast(*void)(*instance.cx)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iSize.cx)) == 4, "ON_2iSize.cx has unexpected size % instead of 4", size_of(type_of(ON_2iSize.cx)));
        assert(((cast(*void)(*instance.cy)) - cast(*void)(*instance)) == 4, "ON_2iSize.cy has unexpected offset % instead of 4", ((cast(*void)(*instance.cy)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_2iSize.cy)) == 4, "ON_2iSize.cy has unexpected size % instead of 4", size_of(type_of(ON_2iSize.cy)));
        assert(size_of(ON_2iSize) == 8, "ON_2iSize has size % instead of 8", size_of(ON_2iSize));
    }

    {
        instance: ON_4iRect;
        assert(((cast(*void)(*instance.left)) - cast(*void)(*instance)) == 0, "ON_4iRect.left has unexpected offset % instead of 0", ((cast(*void)(*instance.left)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4iRect.left)) == 4, "ON_4iRect.left has unexpected size % instead of 4", size_of(type_of(ON_4iRect.left)));
        assert(((cast(*void)(*instance.top)) - cast(*void)(*instance)) == 4, "ON_4iRect.top has unexpected offset % instead of 4", ((cast(*void)(*instance.top)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4iRect.top)) == 4, "ON_4iRect.top has unexpected size % instead of 4", size_of(type_of(ON_4iRect.top)));
        assert(((cast(*void)(*instance.right)) - cast(*void)(*instance)) == 8, "ON_4iRect.right has unexpected offset % instead of 8", ((cast(*void)(*instance.right)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4iRect.right)) == 4, "ON_4iRect.right has unexpected size % instead of 4", size_of(type_of(ON_4iRect.right)));
        assert(((cast(*void)(*instance.bottom)) - cast(*void)(*instance)) == 12, "ON_4iRect.bottom has unexpected offset % instead of 12", ((cast(*void)(*instance.bottom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_4iRect.bottom)) == 4, "ON_4iRect.bottom has unexpected size % instead of 4", size_of(type_of(ON_4iRect.bottom)));
        assert(size_of(ON_4iRect) == 16, "ON_4iRect has size % instead of 16", size_of(ON_4iRect));
    }

    {
        instance: ON_PlugInRef;
        assert(((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)) == 0, "ON_PlugInRef.m_plugin_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_id)) == 16, "ON_PlugInRef.m_plugin_id has unexpected size % instead of 16", size_of(type_of(ON_PlugInRef.m_plugin_id)));
        assert(((cast(*void)(*instance.m_plugin_type)) - cast(*void)(*instance)) == 16, "ON_PlugInRef.m_plugin_type has unexpected offset % instead of 16", ((cast(*void)(*instance.m_plugin_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_type)) == 4, "ON_PlugInRef.m_plugin_type has unexpected size % instead of 4", size_of(type_of(ON_PlugInRef.m_plugin_type)));
        assert(((cast(*void)(*instance.m_plugin_platform)) - cast(*void)(*instance)) == 20, "ON_PlugInRef.m_plugin_platform has unexpected offset % instead of 20", ((cast(*void)(*instance.m_plugin_platform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_platform)) == 4, "ON_PlugInRef.m_plugin_platform has unexpected size % instead of 4", size_of(type_of(ON_PlugInRef.m_plugin_platform)));
        assert(((cast(*void)(*instance.m_plugin_sdk_version)) - cast(*void)(*instance)) == 24, "ON_PlugInRef.m_plugin_sdk_version has unexpected offset % instead of 24", ((cast(*void)(*instance.m_plugin_sdk_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_sdk_version)) == 4, "ON_PlugInRef.m_plugin_sdk_version has unexpected size % instead of 4", size_of(type_of(ON_PlugInRef.m_plugin_sdk_version)));
        assert(((cast(*void)(*instance.m_plugin_sdk_service_release)) - cast(*void)(*instance)) == 28, "ON_PlugInRef.m_plugin_sdk_service_release has unexpected offset % instead of 28", ((cast(*void)(*instance.m_plugin_sdk_service_release)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_sdk_service_release)) == 4, "ON_PlugInRef.m_plugin_sdk_service_release has unexpected size % instead of 4", size_of(type_of(ON_PlugInRef.m_plugin_sdk_service_release)));
        assert(((cast(*void)(*instance.m_plugin_name)) - cast(*void)(*instance)) == 32, "ON_PlugInRef.m_plugin_name has unexpected offset % instead of 32", ((cast(*void)(*instance.m_plugin_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_name)) == 8, "ON_PlugInRef.m_plugin_name has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_plugin_name)));
        assert(((cast(*void)(*instance.m_plugin_version)) - cast(*void)(*instance)) == 40, "ON_PlugInRef.m_plugin_version has unexpected offset % instead of 40", ((cast(*void)(*instance.m_plugin_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_version)) == 8, "ON_PlugInRef.m_plugin_version has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_plugin_version)));
        assert(((cast(*void)(*instance.m_plugin_filename)) - cast(*void)(*instance)) == 48, "ON_PlugInRef.m_plugin_filename has unexpected offset % instead of 48", ((cast(*void)(*instance.m_plugin_filename)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_plugin_filename)) == 8, "ON_PlugInRef.m_plugin_filename has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_plugin_filename)));
        assert(((cast(*void)(*instance.m_developer_organization)) - cast(*void)(*instance)) == 56, "ON_PlugInRef.m_developer_organization has unexpected offset % instead of 56", ((cast(*void)(*instance.m_developer_organization)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_organization)) == 8, "ON_PlugInRef.m_developer_organization has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_organization)));
        assert(((cast(*void)(*instance.m_developer_address)) - cast(*void)(*instance)) == 64, "ON_PlugInRef.m_developer_address has unexpected offset % instead of 64", ((cast(*void)(*instance.m_developer_address)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_address)) == 8, "ON_PlugInRef.m_developer_address has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_address)));
        assert(((cast(*void)(*instance.m_developer_country)) - cast(*void)(*instance)) == 72, "ON_PlugInRef.m_developer_country has unexpected offset % instead of 72", ((cast(*void)(*instance.m_developer_country)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_country)) == 8, "ON_PlugInRef.m_developer_country has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_country)));
        assert(((cast(*void)(*instance.m_developer_phone)) - cast(*void)(*instance)) == 80, "ON_PlugInRef.m_developer_phone has unexpected offset % instead of 80", ((cast(*void)(*instance.m_developer_phone)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_phone)) == 8, "ON_PlugInRef.m_developer_phone has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_phone)));
        assert(((cast(*void)(*instance.m_developer_email)) - cast(*void)(*instance)) == 88, "ON_PlugInRef.m_developer_email has unexpected offset % instead of 88", ((cast(*void)(*instance.m_developer_email)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_email)) == 8, "ON_PlugInRef.m_developer_email has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_email)));
        assert(((cast(*void)(*instance.m_developer_website)) - cast(*void)(*instance)) == 96, "ON_PlugInRef.m_developer_website has unexpected offset % instead of 96", ((cast(*void)(*instance.m_developer_website)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_website)) == 8, "ON_PlugInRef.m_developer_website has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_website)));
        assert(((cast(*void)(*instance.m_developer_updateurl)) - cast(*void)(*instance)) == 104, "ON_PlugInRef.m_developer_updateurl has unexpected offset % instead of 104", ((cast(*void)(*instance.m_developer_updateurl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_updateurl)) == 8, "ON_PlugInRef.m_developer_updateurl has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_updateurl)));
        assert(((cast(*void)(*instance.m_developer_fax)) - cast(*void)(*instance)) == 112, "ON_PlugInRef.m_developer_fax has unexpected offset % instead of 112", ((cast(*void)(*instance.m_developer_fax)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlugInRef.m_developer_fax)) == 8, "ON_PlugInRef.m_developer_fax has unexpected size % instead of 8", size_of(type_of(ON_PlugInRef.m_developer_fax)));
        assert(size_of(ON_PlugInRef) == 120, "ON_PlugInRef has size % instead of 120", size_of(ON_PlugInRef));
    }

    {
        instance: ON_BoundingBox;
        assert(((cast(*void)(*instance.m_min)) - cast(*void)(*instance)) == 0, "ON_BoundingBox.m_min has unexpected offset % instead of 0", ((cast(*void)(*instance.m_min)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BoundingBox.m_min)) == 24, "ON_BoundingBox.m_min has unexpected size % instead of 24", size_of(type_of(ON_BoundingBox.m_min)));
        assert(((cast(*void)(*instance.m_max)) - cast(*void)(*instance)) == 24, "ON_BoundingBox.m_max has unexpected offset % instead of 24", ((cast(*void)(*instance.m_max)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BoundingBox.m_max)) == 24, "ON_BoundingBox.m_max has unexpected size % instead of 24", size_of(type_of(ON_BoundingBox.m_max)));
        assert(size_of(ON_BoundingBox) == 48, "ON_BoundingBox has size % instead of 48", size_of(ON_BoundingBox));
    }

    {
        instance: ON_BoundingBoxAndHash;
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 0, "ON_BoundingBoxAndHash.m_bbox has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BoundingBoxAndHash.m_bbox)) == 48, "ON_BoundingBoxAndHash.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_BoundingBoxAndHash.m_bbox)));
        assert(((cast(*void)(*instance.m_hash)) - cast(*void)(*instance)) == 48, "ON_BoundingBoxAndHash.m_hash has unexpected offset % instead of 48", ((cast(*void)(*instance.m_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BoundingBoxAndHash.m_hash)) == 20, "ON_BoundingBoxAndHash.m_hash has unexpected size % instead of 20", size_of(type_of(ON_BoundingBoxAndHash.m_hash)));
        assert(size_of(ON_BoundingBoxAndHash) == 72, "ON_BoundingBoxAndHash has size % instead of 72", size_of(ON_BoundingBoxAndHash));
    }

    {
        instance: ON_BoundingBoxCache;
        assert(((cast(*void)(*instance.m_count)) - cast(*void)(*instance)) == 0, "ON_BoundingBoxCache.m_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BoundingBoxCache.m_count)) == 4, "ON_BoundingBoxCache.m_count has unexpected size % instead of 4", size_of(type_of(ON_BoundingBoxCache.m_count)));
        assert(((cast(*void)(*instance.m_capacity)) - cast(*void)(*instance)) == 4, "ON_BoundingBoxCache.m_capacity has unexpected offset % instead of 4", ((cast(*void)(*instance.m_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BoundingBoxCache.m_capacity)) == 4, "ON_BoundingBoxCache.m_capacity has unexpected size % instead of 4", size_of(type_of(ON_BoundingBoxCache.m_capacity)));
        assert(((cast(*void)(*instance.m_cache)) - cast(*void)(*instance)) == 8, "ON_BoundingBoxCache.m_cache has unexpected offset % instead of 8", ((cast(*void)(*instance.m_cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BoundingBoxCache.m_cache)) == 576, "ON_BoundingBoxCache.m_cache has unexpected size % instead of 576", size_of(type_of(ON_BoundingBoxCache.m_cache)));
        assert(size_of(ON_BoundingBoxCache) == 584, "ON_BoundingBoxCache has size % instead of 584", size_of(ON_BoundingBoxCache));
    }

    {
        instance: ON_Matrix;
        assert(((cast(*void)(*instance.m)) - cast(*void)(*instance)) == 8, "ON_Matrix.m has unexpected offset % instead of 8", ((cast(*void)(*instance.m)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m)) == 8, "ON_Matrix.m has unexpected size % instead of 8", size_of(type_of(ON_Matrix.m)));
        assert(((cast(*void)(*instance.m_row_count)) - cast(*void)(*instance)) == 16, "ON_Matrix.m_row_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_row_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m_row_count)) == 4, "ON_Matrix.m_row_count has unexpected size % instead of 4", size_of(type_of(ON_Matrix.m_row_count)));
        assert(((cast(*void)(*instance.m_col_count)) - cast(*void)(*instance)) == 20, "ON_Matrix.m_col_count has unexpected offset % instead of 20", ((cast(*void)(*instance.m_col_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m_col_count)) == 4, "ON_Matrix.m_col_count has unexpected size % instead of 4", size_of(type_of(ON_Matrix.m_col_count)));
        assert(((cast(*void)(*instance.m_rowmem)) - cast(*void)(*instance)) == 24, "ON_Matrix.m_rowmem has unexpected offset % instead of 24", ((cast(*void)(*instance.m_rowmem)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m_rowmem)) == 24, "ON_Matrix.m_rowmem has unexpected size % instead of 24", size_of(type_of(ON_Matrix.m_rowmem)));
        assert(((cast(*void)(*instance.m_Mmem)) - cast(*void)(*instance)) == 48, "ON_Matrix.m_Mmem has unexpected offset % instead of 48", ((cast(*void)(*instance.m_Mmem)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m_Mmem)) == 8, "ON_Matrix.m_Mmem has unexpected size % instead of 8", size_of(type_of(ON_Matrix.m_Mmem)));
        assert(((cast(*void)(*instance.m_row_offset)) - cast(*void)(*instance)) == 56, "ON_Matrix.m_row_offset has unexpected offset % instead of 56", ((cast(*void)(*instance.m_row_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m_row_offset)) == 4, "ON_Matrix.m_row_offset has unexpected size % instead of 4", size_of(type_of(ON_Matrix.m_row_offset)));
        assert(((cast(*void)(*instance.m_col_offset)) - cast(*void)(*instance)) == 60, "ON_Matrix.m_col_offset has unexpected offset % instead of 60", ((cast(*void)(*instance.m_col_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m_col_offset)) == 4, "ON_Matrix.m_col_offset has unexpected size % instead of 4", size_of(type_of(ON_Matrix.m_col_offset)));
        assert(((cast(*void)(*instance.m_cmem)) - cast(*void)(*instance)) == 64, "ON_Matrix.m_cmem has unexpected offset % instead of 64", ((cast(*void)(*instance.m_cmem)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Matrix.m_cmem)) == 8, "ON_Matrix.m_cmem has unexpected size % instead of 8", size_of(type_of(ON_Matrix.m_cmem)));
        assert(size_of(ON_Matrix) == 72, "ON_Matrix has size % instead of 72", size_of(ON_Matrix));
    }

    {
        instance: ON_Xform;
        assert(((cast(*void)(*instance.m_xform)) - cast(*void)(*instance)) == 0, "ON_Xform.m_xform has unexpected offset % instead of 0", ((cast(*void)(*instance.m_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Xform.m_xform)) == 128, "ON_Xform.m_xform has unexpected size % instead of 128", size_of(type_of(ON_Xform.m_xform)));
        assert(size_of(ON_Xform) == 128, "ON_Xform has size % instead of 128", size_of(ON_Xform));
    }

    {
        instance: ON_ClippingRegion;
        assert(((cast(*void)(*instance.m_xform)) - cast(*void)(*instance)) == 0, "ON_ClippingRegion.m_xform has unexpected offset % instead of 0", ((cast(*void)(*instance.m_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegion.m_xform)) == 128, "ON_ClippingRegion.m_xform has unexpected size % instead of 128", size_of(type_of(ON_ClippingRegion.m_xform)));
        assert(((cast(*void)(*instance.m_inverse_xform)) - cast(*void)(*instance)) == 128, "ON_ClippingRegion.m_inverse_xform has unexpected offset % instead of 128", ((cast(*void)(*instance.m_inverse_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegion.m_inverse_xform)) == 128, "ON_ClippingRegion.m_inverse_xform has unexpected size % instead of 128", size_of(type_of(ON_ClippingRegion.m_inverse_xform)));
        assert(((cast(*void)(*instance.m_clip_plane_count)) - cast(*void)(*instance)) == 256, "ON_ClippingRegion.m_clip_plane_count has unexpected offset % instead of 256", ((cast(*void)(*instance.m_clip_plane_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegion.m_clip_plane_count)) == 4, "ON_ClippingRegion.m_clip_plane_count has unexpected size % instead of 4", size_of(type_of(ON_ClippingRegion.m_clip_plane_count)));
        assert(((cast(*void)(*instance.m_clip_plane_tolerance)) - cast(*void)(*instance)) == 264, "ON_ClippingRegion.m_clip_plane_tolerance has unexpected offset % instead of 264", ((cast(*void)(*instance.m_clip_plane_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegion.m_clip_plane_tolerance)) == 8, "ON_ClippingRegion.m_clip_plane_tolerance has unexpected size % instead of 8", size_of(type_of(ON_ClippingRegion.m_clip_plane_tolerance)));
        assert(((cast(*void)(*instance.m_clip_plane)) - cast(*void)(*instance)) == 272, "ON_ClippingRegion.m_clip_plane has unexpected offset % instead of 272", ((cast(*void)(*instance.m_clip_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegion.m_clip_plane)) == 512, "ON_ClippingRegion.m_clip_plane has unexpected size % instead of 512", size_of(type_of(ON_ClippingRegion.m_clip_plane)));
        assert(size_of(ON_ClippingRegion) == 784, "ON_ClippingRegion has size % instead of 784", size_of(ON_ClippingRegion));
    }

    {
        instance: ON_ClippingRegionPoints;
        assert(((cast(*void)(*instance.m_point_count)) - cast(*void)(*instance)) == 0, "ON_ClippingRegionPoints.m_point_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_point_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_point_count)) == 4, "ON_ClippingRegionPoints.m_point_count has unexpected size % instead of 4", size_of(type_of(ON_ClippingRegionPoints.m_point_count)));
        assert(((cast(*void)(*instance.m_point_capacity)) - cast(*void)(*instance)) == 4, "ON_ClippingRegionPoints.m_point_capacity has unexpected offset % instead of 4", ((cast(*void)(*instance.m_point_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_point_capacity)) == 4, "ON_ClippingRegionPoints.m_point_capacity has unexpected size % instead of 4", size_of(type_of(ON_ClippingRegionPoints.m_point_capacity)));
        assert(((cast(*void)(*instance.m_clip_points)) - cast(*void)(*instance)) == 8, "ON_ClippingRegionPoints.m_clip_points has unexpected offset % instead of 8", ((cast(*void)(*instance.m_clip_points)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_clip_points)) == 8, "ON_ClippingRegionPoints.m_clip_points has unexpected size % instead of 8", size_of(type_of(ON_ClippingRegionPoints.m_clip_points)));
        assert(((cast(*void)(*instance.m_clip_flags)) - cast(*void)(*instance)) == 16, "ON_ClippingRegionPoints.m_clip_flags has unexpected offset % instead of 16", ((cast(*void)(*instance.m_clip_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_clip_flags)) == 8, "ON_ClippingRegionPoints.m_clip_flags has unexpected size % instead of 8", size_of(type_of(ON_ClippingRegionPoints.m_clip_flags)));
        assert(((cast(*void)(*instance.m_and_clip_flags)) - cast(*void)(*instance)) == 24, "ON_ClippingRegionPoints.m_and_clip_flags has unexpected offset % instead of 24", ((cast(*void)(*instance.m_and_clip_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_and_clip_flags)) == 4, "ON_ClippingRegionPoints.m_and_clip_flags has unexpected size % instead of 4", size_of(type_of(ON_ClippingRegionPoints.m_and_clip_flags)));
        assert(((cast(*void)(*instance.m_or_clip_flags)) - cast(*void)(*instance)) == 28, "ON_ClippingRegionPoints.m_or_clip_flags has unexpected offset % instead of 28", ((cast(*void)(*instance.m_or_clip_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_or_clip_flags)) == 4, "ON_ClippingRegionPoints.m_or_clip_flags has unexpected size % instead of 4", size_of(type_of(ON_ClippingRegionPoints.m_or_clip_flags)));
        assert(((cast(*void)(*instance.m_buffer_point_capacity)) - cast(*void)(*instance)) == 32, "ON_ClippingRegionPoints.m_buffer_point_capacity has unexpected offset % instead of 32", ((cast(*void)(*instance.m_buffer_point_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_buffer_point_capacity)) == 8, "ON_ClippingRegionPoints.m_buffer_point_capacity has unexpected size % instead of 8", size_of(type_of(ON_ClippingRegionPoints.m_buffer_point_capacity)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 40, "ON_ClippingRegionPoints.m_buffer has unexpected offset % instead of 40", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingRegionPoints.m_buffer)) == 8, "ON_ClippingRegionPoints.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_ClippingRegionPoints.m_buffer)));
        assert(size_of(ON_ClippingRegionPoints) == 48, "ON_ClippingRegionPoints has size % instead of 48", size_of(ON_ClippingRegionPoints));
    }

    {
        instance: ON_PickPoint;
        assert(((cast(*void)(*instance.m_point)) - cast(*void)(*instance)) == 0, "ON_PickPoint.m_point has unexpected offset % instead of 0", ((cast(*void)(*instance.m_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PickPoint.m_point)) == 24, "ON_PickPoint.m_point has unexpected size % instead of 24", size_of(type_of(ON_PickPoint.m_point)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 24, "ON_PickPoint.m_t has unexpected offset % instead of 24", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PickPoint.m_t)) == 32, "ON_PickPoint.m_t has unexpected size % instead of 32", size_of(type_of(ON_PickPoint.m_t)));
        assert(((cast(*void)(*instance.m_depth)) - cast(*void)(*instance)) == 56, "ON_PickPoint.m_depth has unexpected offset % instead of 56", ((cast(*void)(*instance.m_depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PickPoint.m_depth)) == 8, "ON_PickPoint.m_depth has unexpected size % instead of 8", size_of(type_of(ON_PickPoint.m_depth)));
        assert(((cast(*void)(*instance.m_distance)) - cast(*void)(*instance)) == 64, "ON_PickPoint.m_distance has unexpected offset % instead of 64", ((cast(*void)(*instance.m_distance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PickPoint.m_distance)) == 8, "ON_PickPoint.m_distance has unexpected size % instead of 8", size_of(type_of(ON_PickPoint.m_distance)));
        assert(size_of(ON_PickPoint) == 72, "ON_PickPoint has size % instead of 72", size_of(ON_PickPoint));
    }

    {
        instance: ON_Localizer;
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 0, "ON_Localizer.m_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Localizer.m_type)) == 4, "ON_Localizer.m_type has unexpected size % instead of 4", size_of(type_of(ON_Localizer.m_type)));
        assert(((cast(*void)(*instance.m_d)) - cast(*void)(*instance)) == 8, "ON_Localizer.m_d has unexpected offset % instead of 8", ((cast(*void)(*instance.m_d)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Localizer.m_d)) == 16, "ON_Localizer.m_d has unexpected size % instead of 16", size_of(type_of(ON_Localizer.m_d)));
        assert(((cast(*void)(*instance.m_P)) - cast(*void)(*instance)) == 24, "ON_Localizer.m_P has unexpected offset % instead of 24", ((cast(*void)(*instance.m_P)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Localizer.m_P)) == 24, "ON_Localizer.m_P has unexpected size % instead of 24", size_of(type_of(ON_Localizer.m_P)));
        assert(((cast(*void)(*instance.m_V)) - cast(*void)(*instance)) == 48, "ON_Localizer.m_V has unexpected offset % instead of 48", ((cast(*void)(*instance.m_V)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Localizer.m_V)) == 24, "ON_Localizer.m_V has unexpected size % instead of 24", size_of(type_of(ON_Localizer.m_V)));
        assert(((cast(*void)(*instance.m_nurbs_curve)) - cast(*void)(*instance)) == 72, "ON_Localizer.m_nurbs_curve has unexpected offset % instead of 72", ((cast(*void)(*instance.m_nurbs_curve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Localizer.m_nurbs_curve)) == 8, "ON_Localizer.m_nurbs_curve has unexpected size % instead of 8", size_of(type_of(ON_Localizer.m_nurbs_curve)));
        assert(((cast(*void)(*instance.m_nurbs_surface)) - cast(*void)(*instance)) == 80, "ON_Localizer.m_nurbs_surface has unexpected offset % instead of 80", ((cast(*void)(*instance.m_nurbs_surface)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Localizer.m_nurbs_surface)) == 8, "ON_Localizer.m_nurbs_surface has unexpected size % instead of 8", size_of(type_of(ON_Localizer.m_nurbs_surface)));
        assert(size_of(ON_Localizer) == 88, "ON_Localizer has size % instead of 88", size_of(ON_Localizer));
    }

    {
        instance: ON_SpaceMorph;
        assert(((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)) == 8, "ON_SpaceMorph.m_tolerance has unexpected offset % instead of 8", ((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SpaceMorph.m_tolerance)) == 8, "ON_SpaceMorph.m_tolerance has unexpected size % instead of 8", size_of(type_of(ON_SpaceMorph.m_tolerance)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 16, "ON_SpaceMorph.m_reserved1 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SpaceMorph.m_reserved1)) == 8, "ON_SpaceMorph.m_reserved1 has unexpected size % instead of 8", size_of(type_of(ON_SpaceMorph.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 24, "ON_SpaceMorph.m_reserved2 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SpaceMorph.m_reserved2)) == 4, "ON_SpaceMorph.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_SpaceMorph.m_reserved2)));
        assert(((cast(*void)(*instance.m_bQuickPreview)) - cast(*void)(*instance)) == 28, "ON_SpaceMorph.m_bQuickPreview has unexpected offset % instead of 28", ((cast(*void)(*instance.m_bQuickPreview)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SpaceMorph.m_bQuickPreview)) == 1, "ON_SpaceMorph.m_bQuickPreview has unexpected size % instead of 1", size_of(type_of(ON_SpaceMorph.m_bQuickPreview)));
        assert(((cast(*void)(*instance.m_bPreserveStructure)) - cast(*void)(*instance)) == 29, "ON_SpaceMorph.m_bPreserveStructure has unexpected offset % instead of 29", ((cast(*void)(*instance.m_bPreserveStructure)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SpaceMorph.m_bPreserveStructure)) == 1, "ON_SpaceMorph.m_bPreserveStructure has unexpected size % instead of 1", size_of(type_of(ON_SpaceMorph.m_bPreserveStructure)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 30, "ON_SpaceMorph.m_reserved3 has unexpected offset % instead of 30", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SpaceMorph.m_reserved3)) == 1, "ON_SpaceMorph.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_SpaceMorph.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 31, "ON_SpaceMorph.m_reserved4 has unexpected offset % instead of 31", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SpaceMorph.m_reserved4)) == 1, "ON_SpaceMorph.m_reserved4 has unexpected size % instead of 1", size_of(type_of(ON_SpaceMorph.m_reserved4)));
        assert(size_of(ON_SpaceMorph) == 32, "ON_SpaceMorph has size % instead of 32", size_of(ON_SpaceMorph));
    }

    {
        instance: ON_Quaternion;
        assert(((cast(*void)(*instance.a)) - cast(*void)(*instance)) == 0, "ON_Quaternion.a has unexpected offset % instead of 0", ((cast(*void)(*instance.a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Quaternion.a)) == 8, "ON_Quaternion.a has unexpected size % instead of 8", size_of(type_of(ON_Quaternion.a)));
        assert(((cast(*void)(*instance.b)) - cast(*void)(*instance)) == 8, "ON_Quaternion.b has unexpected offset % instead of 8", ((cast(*void)(*instance.b)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Quaternion.b)) == 8, "ON_Quaternion.b has unexpected size % instead of 8", size_of(type_of(ON_Quaternion.b)));
        assert(((cast(*void)(*instance.c)) - cast(*void)(*instance)) == 16, "ON_Quaternion.c has unexpected offset % instead of 16", ((cast(*void)(*instance.c)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Quaternion.c)) == 8, "ON_Quaternion.c has unexpected size % instead of 8", size_of(type_of(ON_Quaternion.c)));
        assert(((cast(*void)(*instance.d)) - cast(*void)(*instance)) == 24, "ON_Quaternion.d has unexpected offset % instead of 24", ((cast(*void)(*instance.d)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Quaternion.d)) == 8, "ON_Quaternion.d has unexpected size % instead of 8", size_of(type_of(ON_Quaternion.d)));
        assert(size_of(ON_Quaternion) == 32, "ON_Quaternion has size % instead of 32", size_of(ON_Quaternion));
    }

    {
        instance: ON_Workspace;
        assert(((cast(*void)(*instance.m_pFileBlk)) - cast(*void)(*instance)) == 0, "ON_Workspace.m_pFileBlk has unexpected offset % instead of 0", ((cast(*void)(*instance.m_pFileBlk)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Workspace.m_pFileBlk)) == 8, "ON_Workspace.m_pFileBlk has unexpected size % instead of 8", size_of(type_of(ON_Workspace.m_pFileBlk)));
        assert(((cast(*void)(*instance.m_pMemBlk)) - cast(*void)(*instance)) == 8, "ON_Workspace.m_pMemBlk has unexpected offset % instead of 8", ((cast(*void)(*instance.m_pMemBlk)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Workspace.m_pMemBlk)) == 8, "ON_Workspace.m_pMemBlk has unexpected size % instead of 8", size_of(type_of(ON_Workspace.m_pMemBlk)));
        assert(size_of(ON_Workspace) == 16, "ON_Workspace has size % instead of 16", size_of(ON_Workspace));
    }

    {
        instance: ON_Plane;
        assert(((cast(*void)(*instance.origin)) - cast(*void)(*instance)) == 0, "ON_Plane.origin has unexpected offset % instead of 0", ((cast(*void)(*instance.origin)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Plane.origin)) == 24, "ON_Plane.origin has unexpected size % instead of 24", size_of(type_of(ON_Plane.origin)));
        assert(((cast(*void)(*instance.xaxis)) - cast(*void)(*instance)) == 24, "ON_Plane.xaxis has unexpected offset % instead of 24", ((cast(*void)(*instance.xaxis)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Plane.xaxis)) == 24, "ON_Plane.xaxis has unexpected size % instead of 24", size_of(type_of(ON_Plane.xaxis)));
        assert(((cast(*void)(*instance.yaxis)) - cast(*void)(*instance)) == 48, "ON_Plane.yaxis has unexpected offset % instead of 48", ((cast(*void)(*instance.yaxis)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Plane.yaxis)) == 24, "ON_Plane.yaxis has unexpected size % instead of 24", size_of(type_of(ON_Plane.yaxis)));
        assert(((cast(*void)(*instance.zaxis)) - cast(*void)(*instance)) == 72, "ON_Plane.zaxis has unexpected offset % instead of 72", ((cast(*void)(*instance.zaxis)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Plane.zaxis)) == 24, "ON_Plane.zaxis has unexpected size % instead of 24", size_of(type_of(ON_Plane.zaxis)));
        assert(((cast(*void)(*instance.plane_equation)) - cast(*void)(*instance)) == 96, "ON_Plane.plane_equation has unexpected offset % instead of 96", ((cast(*void)(*instance.plane_equation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Plane.plane_equation)) == 32, "ON_Plane.plane_equation has unexpected size % instead of 32", size_of(type_of(ON_Plane.plane_equation)));
        assert(size_of(ON_Plane) == 128, "ON_Plane has size % instead of 128", size_of(ON_Plane));
    }

    {
        instance: ON_ClippingPlaneInfo;
        assert(((cast(*void)(*instance.m_plane_equation)) - cast(*void)(*instance)) == 0, "ON_ClippingPlaneInfo.m_plane_equation has unexpected offset % instead of 0", ((cast(*void)(*instance.m_plane_equation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneInfo.m_plane_equation)) == 32, "ON_ClippingPlaneInfo.m_plane_equation has unexpected size % instead of 32", size_of(type_of(ON_ClippingPlaneInfo.m_plane_equation)));
        assert(((cast(*void)(*instance.m_plane_id)) - cast(*void)(*instance)) == 32, "ON_ClippingPlaneInfo.m_plane_id has unexpected offset % instead of 32", ((cast(*void)(*instance.m_plane_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneInfo.m_plane_id)) == 16, "ON_ClippingPlaneInfo.m_plane_id has unexpected size % instead of 16", size_of(type_of(ON_ClippingPlaneInfo.m_plane_id)));
        assert(((cast(*void)(*instance.m_bEnabled)) - cast(*void)(*instance)) == 48, "ON_ClippingPlaneInfo.m_bEnabled has unexpected offset % instead of 48", ((cast(*void)(*instance.m_bEnabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneInfo.m_bEnabled)) == 1, "ON_ClippingPlaneInfo.m_bEnabled has unexpected size % instead of 1", size_of(type_of(ON_ClippingPlaneInfo.m_bEnabled)));
        assert(((cast(*void)(*instance.m_depth_enabled)) - cast(*void)(*instance)) == 49, "ON_ClippingPlaneInfo.m_depth_enabled has unexpected offset % instead of 49", ((cast(*void)(*instance.m_depth_enabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneInfo.m_depth_enabled)) == 1, "ON_ClippingPlaneInfo.m_depth_enabled has unexpected size % instead of 1", size_of(type_of(ON_ClippingPlaneInfo.m_depth_enabled)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 50, "ON_ClippingPlaneInfo.m_reserved has unexpected offset % instead of 50", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneInfo.m_reserved)) == 2, "ON_ClippingPlaneInfo.m_reserved has unexpected size % instead of 2", size_of(type_of(ON_ClippingPlaneInfo.m_reserved)));
        assert(((cast(*void)(*instance.m_depth)) - cast(*void)(*instance)) == 52, "ON_ClippingPlaneInfo.m_depth has unexpected offset % instead of 52", ((cast(*void)(*instance.m_depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneInfo.m_depth)) == 4, "ON_ClippingPlaneInfo.m_depth has unexpected size % instead of 4", size_of(type_of(ON_ClippingPlaneInfo.m_depth)));
        assert(size_of(ON_ClippingPlaneInfo) == 56, "ON_ClippingPlaneInfo has size % instead of 56", size_of(ON_ClippingPlaneInfo));
    }

    {
        instance: ON_ClippingPlaneDataStore;
        assert(((cast(*void)(*instance.m_sn)) - cast(*void)(*instance)) == 0, "ON_ClippingPlaneDataStore.m_sn has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneDataStore.m_sn)) == 4, "ON_ClippingPlaneDataStore.m_sn has unexpected size % instead of 4", size_of(type_of(ON_ClippingPlaneDataStore.m_sn)));
        assert(size_of(ON_ClippingPlaneDataStore) == 4, "ON_ClippingPlaneDataStore has size % instead of 4", size_of(ON_ClippingPlaneDataStore));
    }

    {
        instance: ON_ClippingPlane;
        assert(((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)) == 0, "ON_ClippingPlane.m_plane has unexpected offset % instead of 0", ((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_plane)) == 128, "ON_ClippingPlane.m_plane has unexpected size % instead of 128", size_of(type_of(ON_ClippingPlane.m_plane)));
        assert(((cast(*void)(*instance.m_viewport_ids)) - cast(*void)(*instance)) == 128, "ON_ClippingPlane.m_viewport_ids has unexpected offset % instead of 128", ((cast(*void)(*instance.m_viewport_ids)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_viewport_ids)) == 32, "ON_ClippingPlane.m_viewport_ids has unexpected size % instead of 32", size_of(type_of(ON_ClippingPlane.m_viewport_ids)));
        assert(((cast(*void)(*instance.m_plane_id)) - cast(*void)(*instance)) == 160, "ON_ClippingPlane.m_plane_id has unexpected offset % instead of 160", ((cast(*void)(*instance.m_plane_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_plane_id)) == 16, "ON_ClippingPlane.m_plane_id has unexpected size % instead of 16", size_of(type_of(ON_ClippingPlane.m_plane_id)));
        assert(((cast(*void)(*instance.m_bEnabled)) - cast(*void)(*instance)) == 176, "ON_ClippingPlane.m_bEnabled has unexpected offset % instead of 176", ((cast(*void)(*instance.m_bEnabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_bEnabled)) == 1, "ON_ClippingPlane.m_bEnabled has unexpected size % instead of 1", size_of(type_of(ON_ClippingPlane.m_bEnabled)));
        assert(((cast(*void)(*instance.m_depth_enabled)) - cast(*void)(*instance)) == 177, "ON_ClippingPlane.m_depth_enabled has unexpected offset % instead of 177", ((cast(*void)(*instance.m_depth_enabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_depth_enabled)) == 1, "ON_ClippingPlane.m_depth_enabled has unexpected size % instead of 1", size_of(type_of(ON_ClippingPlane.m_depth_enabled)));
        assert(((cast(*void)(*instance.m_participation_lists_enabled)) - cast(*void)(*instance)) == 178, "ON_ClippingPlane.m_participation_lists_enabled has unexpected offset % instead of 178", ((cast(*void)(*instance.m_participation_lists_enabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_participation_lists_enabled)) == 1, "ON_ClippingPlane.m_participation_lists_enabled has unexpected size % instead of 1", size_of(type_of(ON_ClippingPlane.m_participation_lists_enabled)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 179, "ON_ClippingPlane.m_reserved has unexpected offset % instead of 179", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_reserved)) == 1, "ON_ClippingPlane.m_reserved has unexpected size % instead of 1", size_of(type_of(ON_ClippingPlane.m_reserved)));
        assert(((cast(*void)(*instance.m_data_store)) - cast(*void)(*instance)) == 180, "ON_ClippingPlane.m_data_store has unexpected offset % instead of 180", ((cast(*void)(*instance.m_data_store)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlane.m_data_store)) == 4, "ON_ClippingPlane.m_data_store has unexpected size % instead of 4", size_of(type_of(ON_ClippingPlane.m_data_store)));
        assert(size_of(ON_ClippingPlane) == 184, "ON_ClippingPlane has size % instead of 184", size_of(ON_ClippingPlane));
    }

    {
        instance: ON_Circle;
        assert(((cast(*void)(*instance.plane)) - cast(*void)(*instance)) == 0, "ON_Circle.plane has unexpected offset % instead of 0", ((cast(*void)(*instance.plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Circle.plane)) == 128, "ON_Circle.plane has unexpected size % instead of 128", size_of(type_of(ON_Circle.plane)));
        assert(((cast(*void)(*instance.radius)) - cast(*void)(*instance)) == 128, "ON_Circle.radius has unexpected offset % instead of 128", ((cast(*void)(*instance.radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Circle.radius)) == 8, "ON_Circle.radius has unexpected size % instead of 8", size_of(type_of(ON_Circle.radius)));
        assert(size_of(ON_Circle) == 136, "ON_Circle has size % instead of 136", size_of(ON_Circle));
    }

    {
        instance: ON_Ellipse;
        assert(((cast(*void)(*instance.plane)) - cast(*void)(*instance)) == 0, "ON_Ellipse.plane has unexpected offset % instead of 0", ((cast(*void)(*instance.plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Ellipse.plane)) == 128, "ON_Ellipse.plane has unexpected size % instead of 128", size_of(type_of(ON_Ellipse.plane)));
        assert(((cast(*void)(*instance.radius)) - cast(*void)(*instance)) == 128, "ON_Ellipse.radius has unexpected offset % instead of 128", ((cast(*void)(*instance.radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Ellipse.radius)) == 16, "ON_Ellipse.radius has unexpected size % instead of 16", size_of(type_of(ON_Ellipse.radius)));
        assert(size_of(ON_Ellipse) == 144, "ON_Ellipse has size % instead of 144", size_of(ON_Ellipse));
    }

    {
        instance: ON_ArithmeticCalculator;
        assert(((cast(*void)(*instance.m_pCalc)) - cast(*void)(*instance)) == 0, "ON_ArithmeticCalculator.m_pCalc has unexpected offset % instead of 0", ((cast(*void)(*instance.m_pCalc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ArithmeticCalculator.m_pCalc)) == 8, "ON_ArithmeticCalculator.m_pCalc has unexpected size % instead of 8", size_of(type_of(ON_ArithmeticCalculator.m_pCalc)));
        assert(((cast(*void)(*instance.m_inplace_buffer)) - cast(*void)(*instance)) == 8, "ON_ArithmeticCalculator.m_inplace_buffer has unexpected offset % instead of 8", ((cast(*void)(*instance.m_inplace_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ArithmeticCalculator.m_inplace_buffer)) == 1016, "ON_ArithmeticCalculator.m_inplace_buffer has unexpected size % instead of 1016", size_of(type_of(ON_ArithmeticCalculator.m_inplace_buffer)));
        assert(size_of(ON_ArithmeticCalculator) == 1024, "ON_ArithmeticCalculator has size % instead of 1024", size_of(ON_ArithmeticCalculator));
    }

    {
        instance: ON_LengthUnitName;
        assert(((cast(*void)(*instance.m_locale_id)) - cast(*void)(*instance)) == 0, "ON_LengthUnitName.m_locale_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_locale_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthUnitName.m_locale_id)) == 4, "ON_LengthUnitName.m_locale_id has unexpected size % instead of 4", size_of(type_of(ON_LengthUnitName.m_locale_id)));
        assert(((cast(*void)(*instance.m_length_unit_system)) - cast(*void)(*instance)) == 4, "ON_LengthUnitName.m_length_unit_system has unexpected offset % instead of 4", ((cast(*void)(*instance.m_length_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthUnitName.m_length_unit_system)) == 1, "ON_LengthUnitName.m_length_unit_system has unexpected size % instead of 1", size_of(type_of(ON_LengthUnitName.m_length_unit_system)));
        assert(((cast(*void)(*instance.m_bNameIsSingular)) - cast(*void)(*instance)) == 5, "ON_LengthUnitName.m_bNameIsSingular has unexpected offset % instead of 5", ((cast(*void)(*instance.m_bNameIsSingular)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthUnitName.m_bNameIsSingular)) == 1, "ON_LengthUnitName.m_bNameIsSingular has unexpected size % instead of 1", size_of(type_of(ON_LengthUnitName.m_bNameIsSingular)));
        assert(((cast(*void)(*instance.m_bNameIsPlural)) - cast(*void)(*instance)) == 6, "ON_LengthUnitName.m_bNameIsPlural has unexpected offset % instead of 6", ((cast(*void)(*instance.m_bNameIsPlural)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthUnitName.m_bNameIsPlural)) == 1, "ON_LengthUnitName.m_bNameIsPlural has unexpected size % instead of 1", size_of(type_of(ON_LengthUnitName.m_bNameIsPlural)));
        assert(((cast(*void)(*instance.m_name)) - cast(*void)(*instance)) == 8, "ON_LengthUnitName.m_name has unexpected offset % instead of 8", ((cast(*void)(*instance.m_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthUnitName.m_name)) == 8, "ON_LengthUnitName.m_name has unexpected size % instead of 8", size_of(type_of(ON_LengthUnitName.m_name)));
        assert(size_of(ON_LengthUnitName) == 16, "ON_LengthUnitName has size % instead of 16", size_of(ON_LengthUnitName));
    }

    {
        instance: ON_AngleUnitName;
        assert(((cast(*void)(*instance.m_locale_id)) - cast(*void)(*instance)) == 0, "ON_AngleUnitName.m_locale_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_locale_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleUnitName.m_locale_id)) == 4, "ON_AngleUnitName.m_locale_id has unexpected size % instead of 4", size_of(type_of(ON_AngleUnitName.m_locale_id)));
        assert(((cast(*void)(*instance.m_angle_unit_system)) - cast(*void)(*instance)) == 4, "ON_AngleUnitName.m_angle_unit_system has unexpected offset % instead of 4", ((cast(*void)(*instance.m_angle_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleUnitName.m_angle_unit_system)) == 1, "ON_AngleUnitName.m_angle_unit_system has unexpected size % instead of 1", size_of(type_of(ON_AngleUnitName.m_angle_unit_system)));
        assert(((cast(*void)(*instance.m_bNameIsSingular)) - cast(*void)(*instance)) == 5, "ON_AngleUnitName.m_bNameIsSingular has unexpected offset % instead of 5", ((cast(*void)(*instance.m_bNameIsSingular)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleUnitName.m_bNameIsSingular)) == 1, "ON_AngleUnitName.m_bNameIsSingular has unexpected size % instead of 1", size_of(type_of(ON_AngleUnitName.m_bNameIsSingular)));
        assert(((cast(*void)(*instance.m_bNameIsPlural)) - cast(*void)(*instance)) == 6, "ON_AngleUnitName.m_bNameIsPlural has unexpected offset % instead of 6", ((cast(*void)(*instance.m_bNameIsPlural)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleUnitName.m_bNameIsPlural)) == 1, "ON_AngleUnitName.m_bNameIsPlural has unexpected size % instead of 1", size_of(type_of(ON_AngleUnitName.m_bNameIsPlural)));
        assert(((cast(*void)(*instance.m_name)) - cast(*void)(*instance)) == 8, "ON_AngleUnitName.m_name has unexpected offset % instead of 8", ((cast(*void)(*instance.m_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleUnitName.m_name)) == 8, "ON_AngleUnitName.m_name has unexpected size % instead of 8", size_of(type_of(ON_AngleUnitName.m_name)));
        assert(size_of(ON_AngleUnitName) == 16, "ON_AngleUnitName has size % instead of 16", size_of(ON_AngleUnitName));
    }

    {
        instance: ON_ParseSettings;
        assert(((cast(*void)(*instance.m_true_default_bits)) - cast(*void)(*instance)) == 0, "ON_ParseSettings.m_true_default_bits has unexpected offset % instead of 0", ((cast(*void)(*instance.m_true_default_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ParseSettings.m_true_default_bits)) == 8, "ON_ParseSettings.m_true_default_bits has unexpected size % instead of 8", size_of(type_of(ON_ParseSettings.m_true_default_bits)));
        assert(((cast(*void)(*instance.m_false_default_bits)) - cast(*void)(*instance)) == 8, "ON_ParseSettings.m_false_default_bits has unexpected offset % instead of 8", ((cast(*void)(*instance.m_false_default_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ParseSettings.m_false_default_bits)) == 8, "ON_ParseSettings.m_false_default_bits has unexpected size % instead of 8", size_of(type_of(ON_ParseSettings.m_false_default_bits)));
        assert(((cast(*void)(*instance.m_reserved_bits)) - cast(*void)(*instance)) == 16, "ON_ParseSettings.m_reserved_bits has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ParseSettings.m_reserved_bits)) == 4, "ON_ParseSettings.m_reserved_bits has unexpected size % instead of 4", size_of(type_of(ON_ParseSettings.m_reserved_bits)));
        assert(((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)) == 20, "ON_ParseSettings.m_context_locale_id has unexpected offset % instead of 20", ((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ParseSettings.m_context_locale_id)) == 2, "ON_ParseSettings.m_context_locale_id has unexpected size % instead of 2", size_of(type_of(ON_ParseSettings.m_context_locale_id)));
        assert(((cast(*void)(*instance.m_context_angle_unit_system)) - cast(*void)(*instance)) == 22, "ON_ParseSettings.m_context_angle_unit_system has unexpected offset % instead of 22", ((cast(*void)(*instance.m_context_angle_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ParseSettings.m_context_angle_unit_system)) == 1, "ON_ParseSettings.m_context_angle_unit_system has unexpected size % instead of 1", size_of(type_of(ON_ParseSettings.m_context_angle_unit_system)));
        assert(((cast(*void)(*instance.m_context_length_unit_system)) - cast(*void)(*instance)) == 23, "ON_ParseSettings.m_context_length_unit_system has unexpected offset % instead of 23", ((cast(*void)(*instance.m_context_length_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ParseSettings.m_context_length_unit_system)) == 1, "ON_ParseSettings.m_context_length_unit_system has unexpected size % instead of 1", size_of(type_of(ON_ParseSettings.m_context_length_unit_system)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 24, "ON_ParseSettings.m_reserved has unexpected offset % instead of 24", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ParseSettings.m_reserved)) == 8, "ON_ParseSettings.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_ParseSettings.m_reserved)));
        assert(size_of(ON_ParseSettings) == 32, "ON_ParseSettings has size % instead of 32", size_of(ON_ParseSettings));
    }

    {
        instance: ON_LengthValue;
        assert(((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)) == 0, "ON_LengthValue.m_context_locale_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthValue.m_context_locale_id)) == 4, "ON_LengthValue.m_context_locale_id has unexpected size % instead of 4", size_of(type_of(ON_LengthValue.m_context_locale_id)));
        assert(((cast(*void)(*instance.m_context_angle_unit_system)) - cast(*void)(*instance)) == 4, "ON_LengthValue.m_context_angle_unit_system has unexpected offset % instead of 4", ((cast(*void)(*instance.m_context_angle_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthValue.m_context_angle_unit_system)) == 1, "ON_LengthValue.m_context_angle_unit_system has unexpected size % instead of 1", size_of(type_of(ON_LengthValue.m_context_angle_unit_system)));
        assert(((cast(*void)(*instance.m_string_format)) - cast(*void)(*instance)) == 5, "ON_LengthValue.m_string_format has unexpected offset % instead of 5", ((cast(*void)(*instance.m_string_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthValue.m_string_format)) == 1, "ON_LengthValue.m_string_format has unexpected size % instead of 1", size_of(type_of(ON_LengthValue.m_string_format)));
        assert(((cast(*void)(*instance.m_length_unit_system)) - cast(*void)(*instance)) == 8, "ON_LengthValue.m_length_unit_system has unexpected offset % instead of 8", ((cast(*void)(*instance.m_length_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthValue.m_length_unit_system)) == 24, "ON_LengthValue.m_length_unit_system has unexpected size % instead of 24", size_of(type_of(ON_LengthValue.m_length_unit_system)));
        assert(((cast(*void)(*instance.m_length)) - cast(*void)(*instance)) == 32, "ON_LengthValue.m_length has unexpected offset % instead of 32", ((cast(*void)(*instance.m_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthValue.m_length)) == 8, "ON_LengthValue.m_length has unexpected size % instead of 8", size_of(type_of(ON_LengthValue.m_length)));
        assert(((cast(*void)(*instance.m_length_as_string)) - cast(*void)(*instance)) == 40, "ON_LengthValue.m_length_as_string has unexpected offset % instead of 40", ((cast(*void)(*instance.m_length_as_string)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LengthValue.m_length_as_string)) == 8, "ON_LengthValue.m_length_as_string has unexpected size % instead of 8", size_of(type_of(ON_LengthValue.m_length_as_string)));
        assert(size_of(ON_LengthValue) == 48, "ON_LengthValue has size % instead of 48", size_of(ON_LengthValue));
    }

    {
        instance: ON_AngleValue;
        assert(((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)) == 0, "ON_AngleValue.m_context_locale_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleValue.m_context_locale_id)) == 4, "ON_AngleValue.m_context_locale_id has unexpected size % instead of 4", size_of(type_of(ON_AngleValue.m_context_locale_id)));
        assert(((cast(*void)(*instance.m_context_length_unit_system)) - cast(*void)(*instance)) == 4, "ON_AngleValue.m_context_length_unit_system has unexpected offset % instead of 4", ((cast(*void)(*instance.m_context_length_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleValue.m_context_length_unit_system)) == 1, "ON_AngleValue.m_context_length_unit_system has unexpected size % instead of 1", size_of(type_of(ON_AngleValue.m_context_length_unit_system)));
        assert(((cast(*void)(*instance.m_string_format)) - cast(*void)(*instance)) == 5, "ON_AngleValue.m_string_format has unexpected offset % instead of 5", ((cast(*void)(*instance.m_string_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleValue.m_string_format)) == 1, "ON_AngleValue.m_string_format has unexpected size % instead of 1", size_of(type_of(ON_AngleValue.m_string_format)));
        assert(((cast(*void)(*instance.m_angle_unit_system)) - cast(*void)(*instance)) == 6, "ON_AngleValue.m_angle_unit_system has unexpected offset % instead of 6", ((cast(*void)(*instance.m_angle_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleValue.m_angle_unit_system)) == 1, "ON_AngleValue.m_angle_unit_system has unexpected size % instead of 1", size_of(type_of(ON_AngleValue.m_angle_unit_system)));
        assert(((cast(*void)(*instance.m_angle)) - cast(*void)(*instance)) == 8, "ON_AngleValue.m_angle has unexpected offset % instead of 8", ((cast(*void)(*instance.m_angle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleValue.m_angle)) == 8, "ON_AngleValue.m_angle has unexpected size % instead of 8", size_of(type_of(ON_AngleValue.m_angle)));
        assert(((cast(*void)(*instance.m_angle_as_string)) - cast(*void)(*instance)) == 16, "ON_AngleValue.m_angle_as_string has unexpected offset % instead of 16", ((cast(*void)(*instance.m_angle_as_string)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AngleValue.m_angle_as_string)) == 8, "ON_AngleValue.m_angle_as_string has unexpected size % instead of 8", size_of(type_of(ON_AngleValue.m_angle_as_string)));
        assert(size_of(ON_AngleValue) == 24, "ON_AngleValue has size % instead of 24", size_of(ON_AngleValue));
    }

    {
        instance: ON_ScaleValue;
        assert(((cast(*void)(*instance.m_left_to_right_scale)) - cast(*void)(*instance)) == 0, "ON_ScaleValue.m_left_to_right_scale has unexpected offset % instead of 0", ((cast(*void)(*instance.m_left_to_right_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_left_to_right_scale)) == 8, "ON_ScaleValue.m_left_to_right_scale has unexpected size % instead of 8", size_of(type_of(ON_ScaleValue.m_left_to_right_scale)));
        assert(((cast(*void)(*instance.m_right_to_left_scale)) - cast(*void)(*instance)) == 8, "ON_ScaleValue.m_right_to_left_scale has unexpected offset % instead of 8", ((cast(*void)(*instance.m_right_to_left_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_right_to_left_scale)) == 8, "ON_ScaleValue.m_right_to_left_scale has unexpected size % instead of 8", size_of(type_of(ON_ScaleValue.m_right_to_left_scale)));
        assert(((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)) == 16, "ON_ScaleValue.m_context_locale_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_context_locale_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_context_locale_id)) == 4, "ON_ScaleValue.m_context_locale_id has unexpected size % instead of 4", size_of(type_of(ON_ScaleValue.m_context_locale_id)));
        assert(((cast(*void)(*instance.m_context_length_unit_system)) - cast(*void)(*instance)) == 20, "ON_ScaleValue.m_context_length_unit_system has unexpected offset % instead of 20", ((cast(*void)(*instance.m_context_length_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_context_length_unit_system)) == 1, "ON_ScaleValue.m_context_length_unit_system has unexpected size % instead of 1", size_of(type_of(ON_ScaleValue.m_context_length_unit_system)));
        assert(((cast(*void)(*instance.m_context_angle_unit_system)) - cast(*void)(*instance)) == 21, "ON_ScaleValue.m_context_angle_unit_system has unexpected offset % instead of 21", ((cast(*void)(*instance.m_context_angle_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_context_angle_unit_system)) == 1, "ON_ScaleValue.m_context_angle_unit_system has unexpected size % instead of 1", size_of(type_of(ON_ScaleValue.m_context_angle_unit_system)));
        assert(((cast(*void)(*instance.m_string_format_preference)) - cast(*void)(*instance)) == 22, "ON_ScaleValue.m_string_format_preference has unexpected offset % instead of 22", ((cast(*void)(*instance.m_string_format_preference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_string_format_preference)) == 1, "ON_ScaleValue.m_string_format_preference has unexpected size % instead of 1", size_of(type_of(ON_ScaleValue.m_string_format_preference)));
        assert(((cast(*void)(*instance.m_scale_as_string)) - cast(*void)(*instance)) == 24, "ON_ScaleValue.m_scale_as_string has unexpected offset % instead of 24", ((cast(*void)(*instance.m_scale_as_string)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_scale_as_string)) == 8, "ON_ScaleValue.m_scale_as_string has unexpected size % instead of 8", size_of(type_of(ON_ScaleValue.m_scale_as_string)));
        assert(((cast(*void)(*instance.m_left_length)) - cast(*void)(*instance)) == 32, "ON_ScaleValue.m_left_length has unexpected offset % instead of 32", ((cast(*void)(*instance.m_left_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_left_length)) == 48, "ON_ScaleValue.m_left_length has unexpected size % instead of 48", size_of(type_of(ON_ScaleValue.m_left_length)));
        assert(((cast(*void)(*instance.m_right_length)) - cast(*void)(*instance)) == 80, "ON_ScaleValue.m_right_length has unexpected offset % instead of 80", ((cast(*void)(*instance.m_right_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ScaleValue.m_right_length)) == 48, "ON_ScaleValue.m_right_length has unexpected size % instead of 48", size_of(type_of(ON_ScaleValue.m_right_length)));
        assert(size_of(ON_ScaleValue) == 128, "ON_ScaleValue has size % instead of 128", size_of(ON_ScaleValue));
    }

    {
        instance: ON_Line;
        assert(((cast(*void)(*instance.from)) - cast(*void)(*instance)) == 0, "ON_Line.from has unexpected offset % instead of 0", ((cast(*void)(*instance.from)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Line.from)) == 24, "ON_Line.from has unexpected size % instead of 24", size_of(type_of(ON_Line.from)));
        assert(((cast(*void)(*instance.to)) - cast(*void)(*instance)) == 24, "ON_Line.to has unexpected offset % instead of 24", ((cast(*void)(*instance.to)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Line.to)) == 24, "ON_Line.to has unexpected size % instead of 24", size_of(type_of(ON_Line.to)));
        assert(size_of(ON_Line) == 48, "ON_Line has size % instead of 48", size_of(ON_Line));
    }

    {
        instance: ON_Triangle;
        assert(((cast(*void)(*instance.m_V)) - cast(*void)(*instance)) == 0, "ON_Triangle.m_V has unexpected offset % instead of 0", ((cast(*void)(*instance.m_V)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Triangle.m_V)) == 72, "ON_Triangle.m_V has unexpected size % instead of 72", size_of(type_of(ON_Triangle.m_V)));
        assert(size_of(ON_Triangle) == 72, "ON_Triangle has size % instead of 72", size_of(ON_Triangle));
    }

    {
        instance: ON_Symmetry;
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 0, "ON_Symmetry.m_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_type)) == 1, "ON_Symmetry.m_type has unexpected size % instead of 1", size_of(type_of(ON_Symmetry.m_type)));
        assert(((cast(*void)(*instance.m_coordinates)) - cast(*void)(*instance)) == 1, "ON_Symmetry.m_coordinates has unexpected offset % instead of 1", ((cast(*void)(*instance.m_coordinates)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_coordinates)) == 1, "ON_Symmetry.m_coordinates has unexpected size % instead of 1", size_of(type_of(ON_Symmetry.m_coordinates)));
        assert(((cast(*void)(*instance.m_inversion_order)) - cast(*void)(*instance)) == 2, "ON_Symmetry.m_inversion_order has unexpected offset % instead of 2", ((cast(*void)(*instance.m_inversion_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_inversion_order)) == 1, "ON_Symmetry.m_inversion_order has unexpected size % instead of 1", size_of(type_of(ON_Symmetry.m_inversion_order)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 3, "ON_Symmetry.m_reserved1 has unexpected offset % instead of 3", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_reserved1)) == 1, "ON_Symmetry.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_Symmetry.m_reserved1)));
        assert(((cast(*void)(*instance.m_cyclic_order)) - cast(*void)(*instance)) == 4, "ON_Symmetry.m_cyclic_order has unexpected offset % instead of 4", ((cast(*void)(*instance.m_cyclic_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_cyclic_order)) == 4, "ON_Symmetry.m_cyclic_order has unexpected size % instead of 4", size_of(type_of(ON_Symmetry.m_cyclic_order)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 8, "ON_Symmetry.m_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_id)) == 16, "ON_Symmetry.m_id has unexpected size % instead of 16", size_of(type_of(ON_Symmetry.m_id)));
        assert(((cast(*void)(*instance.m_inversion_transform)) - cast(*void)(*instance)) == 24, "ON_Symmetry.m_inversion_transform has unexpected offset % instead of 24", ((cast(*void)(*instance.m_inversion_transform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_inversion_transform)) == 128, "ON_Symmetry.m_inversion_transform has unexpected size % instead of 128", size_of(type_of(ON_Symmetry.m_inversion_transform)));
        assert(((cast(*void)(*instance.m_cyclic_transform)) - cast(*void)(*instance)) == 152, "ON_Symmetry.m_cyclic_transform has unexpected offset % instead of 152", ((cast(*void)(*instance.m_cyclic_transform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_cyclic_transform)) == 128, "ON_Symmetry.m_cyclic_transform has unexpected size % instead of 128", size_of(type_of(ON_Symmetry.m_cyclic_transform)));
        assert(((cast(*void)(*instance.m_fixed_plane)) - cast(*void)(*instance)) == 280, "ON_Symmetry.m_fixed_plane has unexpected offset % instead of 280", ((cast(*void)(*instance.m_fixed_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_fixed_plane)) == 32, "ON_Symmetry.m_fixed_plane has unexpected size % instead of 32", size_of(type_of(ON_Symmetry.m_fixed_plane)));
        assert(((cast(*void)(*instance.m_rotation_axis)) - cast(*void)(*instance)) == 312, "ON_Symmetry.m_rotation_axis has unexpected offset % instead of 312", ((cast(*void)(*instance.m_rotation_axis)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_rotation_axis)) == 48, "ON_Symmetry.m_rotation_axis has unexpected size % instead of 48", size_of(type_of(ON_Symmetry.m_rotation_axis)));
        assert(((cast(*void)(*instance.m_cleanup_tolerance)) - cast(*void)(*instance)) == 360, "ON_Symmetry.m_cleanup_tolerance has unexpected offset % instead of 360", ((cast(*void)(*instance.m_cleanup_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_cleanup_tolerance)) == 8, "ON_Symmetry.m_cleanup_tolerance has unexpected size % instead of 8", size_of(type_of(ON_Symmetry.m_cleanup_tolerance)));
        assert(((cast(*void)(*instance.m_symmetric_object_content_serial_number)) - cast(*void)(*instance)) == 368, "ON_Symmetry.m_symmetric_object_content_serial_number has unexpected offset % instead of 368", ((cast(*void)(*instance.m_symmetric_object_content_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_symmetric_object_content_serial_number)) == 8, "ON_Symmetry.m_symmetric_object_content_serial_number has unexpected size % instead of 8", size_of(type_of(ON_Symmetry.m_symmetric_object_content_serial_number)));
        assert(((cast(*void)(*instance.m_symmetric_object_topology_hash)) - cast(*void)(*instance)) == 376, "ON_Symmetry.m_symmetric_object_topology_hash has unexpected offset % instead of 376", ((cast(*void)(*instance.m_symmetric_object_topology_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_symmetric_object_topology_hash)) == 20, "ON_Symmetry.m_symmetric_object_topology_hash has unexpected size % instead of 20", size_of(type_of(ON_Symmetry.m_symmetric_object_topology_hash)));
        assert(((cast(*void)(*instance.m_symmetric_object_geometry_hash)) - cast(*void)(*instance)) == 396, "ON_Symmetry.m_symmetric_object_geometry_hash has unexpected offset % instead of 396", ((cast(*void)(*instance.m_symmetric_object_geometry_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Symmetry.m_symmetric_object_geometry_hash)) == 20, "ON_Symmetry.m_symmetric_object_geometry_hash has unexpected size % instead of 20", size_of(type_of(ON_Symmetry.m_symmetric_object_geometry_hash)));
        assert(size_of(ON_Symmetry) == 416, "ON_Symmetry has size % instead of 416", size_of(ON_Symmetry));
    }

    assert(size_of(ON_Polyline) == 24, "ON_Polyline has size % instead of 24", size_of(ON_Polyline));

    {
        instance: ON_Cylinder;
        assert(((cast(*void)(*instance.circle)) - cast(*void)(*instance)) == 0, "ON_Cylinder.circle has unexpected offset % instead of 0", ((cast(*void)(*instance.circle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Cylinder.circle)) == 136, "ON_Cylinder.circle has unexpected size % instead of 136", size_of(type_of(ON_Cylinder.circle)));
        assert(((cast(*void)(*instance.height)) - cast(*void)(*instance)) == 136, "ON_Cylinder.height has unexpected offset % instead of 136", ((cast(*void)(*instance.height)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Cylinder.height)) == 16, "ON_Cylinder.height has unexpected size % instead of 16", size_of(type_of(ON_Cylinder.height)));
        assert(size_of(ON_Cylinder) == 152, "ON_Cylinder has size % instead of 152", size_of(ON_Cylinder));
    }

    {
        instance: ON_Cone;
        assert(((cast(*void)(*instance.plane)) - cast(*void)(*instance)) == 0, "ON_Cone.plane has unexpected offset % instead of 0", ((cast(*void)(*instance.plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Cone.plane)) == 128, "ON_Cone.plane has unexpected size % instead of 128", size_of(type_of(ON_Cone.plane)));
        assert(((cast(*void)(*instance.height)) - cast(*void)(*instance)) == 128, "ON_Cone.height has unexpected offset % instead of 128", ((cast(*void)(*instance.height)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Cone.height)) == 8, "ON_Cone.height has unexpected size % instead of 8", size_of(type_of(ON_Cone.height)));
        assert(((cast(*void)(*instance.radius)) - cast(*void)(*instance)) == 136, "ON_Cone.radius has unexpected offset % instead of 136", ((cast(*void)(*instance.radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Cone.radius)) == 8, "ON_Cone.radius has unexpected size % instead of 8", size_of(type_of(ON_Cone.radius)));
        assert(size_of(ON_Cone) == 144, "ON_Cone has size % instead of 144", size_of(ON_Cone));
    }

    {
        instance: ON_Sphere;
        assert(((cast(*void)(*instance.plane)) - cast(*void)(*instance)) == 0, "ON_Sphere.plane has unexpected offset % instead of 0", ((cast(*void)(*instance.plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sphere.plane)) == 128, "ON_Sphere.plane has unexpected size % instead of 128", size_of(type_of(ON_Sphere.plane)));
        assert(((cast(*void)(*instance.radius)) - cast(*void)(*instance)) == 128, "ON_Sphere.radius has unexpected offset % instead of 128", ((cast(*void)(*instance.radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sphere.radius)) == 8, "ON_Sphere.radius has unexpected size % instead of 8", size_of(type_of(ON_Sphere.radius)));
        assert(size_of(ON_Sphere) == 136, "ON_Sphere has size % instead of 136", size_of(ON_Sphere));
    }

    {
        instance: ON_Box;
        assert(((cast(*void)(*instance.plane)) - cast(*void)(*instance)) == 0, "ON_Box.plane has unexpected offset % instead of 0", ((cast(*void)(*instance.plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Box.plane)) == 128, "ON_Box.plane has unexpected size % instead of 128", size_of(type_of(ON_Box.plane)));
        assert(((cast(*void)(*instance.dx)) - cast(*void)(*instance)) == 128, "ON_Box.dx has unexpected offset % instead of 128", ((cast(*void)(*instance.dx)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Box.dx)) == 16, "ON_Box.dx has unexpected size % instead of 16", size_of(type_of(ON_Box.dx)));
        assert(((cast(*void)(*instance.dy)) - cast(*void)(*instance)) == 144, "ON_Box.dy has unexpected offset % instead of 144", ((cast(*void)(*instance.dy)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Box.dy)) == 16, "ON_Box.dy has unexpected size % instead of 16", size_of(type_of(ON_Box.dy)));
        assert(((cast(*void)(*instance.dz)) - cast(*void)(*instance)) == 160, "ON_Box.dz has unexpected offset % instead of 160", ((cast(*void)(*instance.dz)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Box.dz)) == 16, "ON_Box.dz has unexpected size % instead of 16", size_of(type_of(ON_Box.dz)));
        assert(size_of(ON_Box) == 176, "ON_Box has size % instead of 176", size_of(ON_Box));
    }

    {
        instance: ON_Torus;
        assert(((cast(*void)(*instance.plane)) - cast(*void)(*instance)) == 0, "ON_Torus.plane has unexpected offset % instead of 0", ((cast(*void)(*instance.plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Torus.plane)) == 128, "ON_Torus.plane has unexpected size % instead of 128", size_of(type_of(ON_Torus.plane)));
        assert(((cast(*void)(*instance.major_radius)) - cast(*void)(*instance)) == 128, "ON_Torus.major_radius has unexpected offset % instead of 128", ((cast(*void)(*instance.major_radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Torus.major_radius)) == 8, "ON_Torus.major_radius has unexpected size % instead of 8", size_of(type_of(ON_Torus.major_radius)));
        assert(((cast(*void)(*instance.minor_radius)) - cast(*void)(*instance)) == 136, "ON_Torus.minor_radius has unexpected offset % instead of 136", ((cast(*void)(*instance.minor_radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Torus.minor_radius)) == 8, "ON_Torus.minor_radius has unexpected size % instead of 8", size_of(type_of(ON_Torus.minor_radius)));
        assert(size_of(ON_Torus) == 144, "ON_Torus has size % instead of 144", size_of(ON_Torus));
    }

    {
        instance: ON_3dSimplex;
        assert(((cast(*void)(*instance.m_n)) - cast(*void)(*instance)) == 0, "ON_3dSimplex.m_n has unexpected offset % instead of 0", ((cast(*void)(*instance.m_n)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dSimplex.m_n)) == 4, "ON_3dSimplex.m_n has unexpected size % instead of 4", size_of(type_of(ON_3dSimplex.m_n)));
        assert(((cast(*void)(*instance.m_V)) - cast(*void)(*instance)) == 8, "ON_3dSimplex.m_V has unexpected offset % instead of 8", ((cast(*void)(*instance.m_V)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dSimplex.m_V)) == 96, "ON_3dSimplex.m_V has unexpected size % instead of 96", size_of(type_of(ON_3dSimplex.m_V)));
        assert(size_of(ON_3dSimplex) == 104, "ON_3dSimplex has size % instead of 104", size_of(ON_3dSimplex));
    }

    assert(size_of(ON_ConvexPoly) == 8, "ON_ConvexPoly has size % instead of 8", size_of(ON_ConvexPoly));

    {
        instance: ON_ConvexHullRefEx;
        assert(((cast(*void)(*instance.m_n)) - cast(*void)(*instance)) == 8, "ON_ConvexHullRefEx.m_n has unexpected offset % instead of 8", ((cast(*void)(*instance.m_n)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRefEx.m_n)) == 4, "ON_ConvexHullRefEx.m_n has unexpected size % instead of 4", size_of(type_of(ON_ConvexHullRefEx.m_n)));
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 12, "ON_ConvexHullRefEx.m_dim has unexpected offset % instead of 12", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRefEx.m_dim)) == 4, "ON_ConvexHullRefEx.m_dim has unexpected size % instead of 4", size_of(type_of(ON_ConvexHullRefEx.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 16, "ON_ConvexHullRefEx.m_is_rat has unexpected offset % instead of 16", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRefEx.m_is_rat)) == 1, "ON_ConvexHullRefEx.m_is_rat has unexpected size % instead of 1", size_of(type_of(ON_ConvexHullRefEx.m_is_rat)));
        assert(((cast(*void)(*instance.m_v)) - cast(*void)(*instance)) == 24, "ON_ConvexHullRefEx.m_v has unexpected offset % instead of 24", ((cast(*void)(*instance.m_v)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRefEx.m_v)) == 8, "ON_ConvexHullRefEx.m_v has unexpected size % instead of 8", size_of(type_of(ON_ConvexHullRefEx.m_v)));
        assert(((cast(*void)(*instance.m_stride)) - cast(*void)(*instance)) == 32, "ON_ConvexHullRefEx.m_stride has unexpected offset % instead of 32", ((cast(*void)(*instance.m_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRefEx.m_stride)) == 4, "ON_ConvexHullRefEx.m_stride has unexpected size % instead of 4", size_of(type_of(ON_ConvexHullRefEx.m_stride)));
        assert(size_of(ON_ConvexHullRefEx) == 40, "ON_ConvexHullRefEx has size % instead of 40", size_of(ON_ConvexHullRefEx));
    }

    {
        instance: ON_ConvexHullRef;
        assert(((cast(*void)(*instance.m_n)) - cast(*void)(*instance)) == 8, "ON_ConvexHullRef.m_n has unexpected offset % instead of 8", ((cast(*void)(*instance.m_n)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRef.m_n)) == 4, "ON_ConvexHullRef.m_n has unexpected size % instead of 4", size_of(type_of(ON_ConvexHullRef.m_n)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 12, "ON_ConvexHullRef.m_is_rat has unexpected offset % instead of 12", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRef.m_is_rat)) == 1, "ON_ConvexHullRef.m_is_rat has unexpected size % instead of 1", size_of(type_of(ON_ConvexHullRef.m_is_rat)));
        assert(((cast(*void)(*instance.m_v)) - cast(*void)(*instance)) == 16, "ON_ConvexHullRef.m_v has unexpected offset % instead of 16", ((cast(*void)(*instance.m_v)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRef.m_v)) == 8, "ON_ConvexHullRef.m_v has unexpected size % instead of 8", size_of(type_of(ON_ConvexHullRef.m_v)));
        assert(((cast(*void)(*instance.m_stride)) - cast(*void)(*instance)) == 24, "ON_ConvexHullRef.m_stride has unexpected offset % instead of 24", ((cast(*void)(*instance.m_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullRef.m_stride)) == 4, "ON_ConvexHullRef.m_stride has unexpected size % instead of 4", size_of(type_of(ON_ConvexHullRef.m_stride)));
        assert(size_of(ON_ConvexHullRef) == 32, "ON_ConvexHullRef has size % instead of 32", size_of(ON_ConvexHullRef));
    }

    {
        instance: ON_ConvexHullPoint2;
        assert(((cast(*void)(*instance.Ref)) - cast(*void)(*instance)) == 8, "ON_ConvexHullPoint2.Ref has unexpected offset % instead of 8", ((cast(*void)(*instance.Ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullPoint2.Ref)) == 40, "ON_ConvexHullPoint2.Ref has unexpected size % instead of 40", size_of(type_of(ON_ConvexHullPoint2.Ref)));
        assert(((cast(*void)(*instance.m_Vert)) - cast(*void)(*instance)) == 48, "ON_ConvexHullPoint2.m_Vert has unexpected offset % instead of 48", ((cast(*void)(*instance.m_Vert)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ConvexHullPoint2.m_Vert)) == 24, "ON_ConvexHullPoint2.m_Vert has unexpected size % instead of 24", size_of(type_of(ON_ConvexHullPoint2.m_Vert)));
        assert(size_of(ON_ConvexHullPoint2) == 72, "ON_ConvexHullPoint2 has size % instead of 72", size_of(ON_ConvexHullPoint2));
    }

    {
        instance: ON_PolynomialCurve;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 0, "ON_PolynomialCurve.m_dim has unexpected offset % instead of 0", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialCurve.m_dim)) == 4, "ON_PolynomialCurve.m_dim has unexpected size % instead of 4", size_of(type_of(ON_PolynomialCurve.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 4, "ON_PolynomialCurve.m_is_rat has unexpected offset % instead of 4", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialCurve.m_is_rat)) == 4, "ON_PolynomialCurve.m_is_rat has unexpected size % instead of 4", size_of(type_of(ON_PolynomialCurve.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 8, "ON_PolynomialCurve.m_order has unexpected offset % instead of 8", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialCurve.m_order)) == 4, "ON_PolynomialCurve.m_order has unexpected size % instead of 4", size_of(type_of(ON_PolynomialCurve.m_order)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 16, "ON_PolynomialCurve.m_cv has unexpected offset % instead of 16", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialCurve.m_cv)) == 24, "ON_PolynomialCurve.m_cv has unexpected size % instead of 24", size_of(type_of(ON_PolynomialCurve.m_cv)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 40, "ON_PolynomialCurve.m_domain has unexpected offset % instead of 40", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialCurve.m_domain)) == 16, "ON_PolynomialCurve.m_domain has unexpected size % instead of 16", size_of(type_of(ON_PolynomialCurve.m_domain)));
        assert(size_of(ON_PolynomialCurve) == 56, "ON_PolynomialCurve has size % instead of 56", size_of(ON_PolynomialCurve));
    }

    {
        instance: ON_PolynomialSurface;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 0, "ON_PolynomialSurface.m_dim has unexpected offset % instead of 0", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialSurface.m_dim)) == 4, "ON_PolynomialSurface.m_dim has unexpected size % instead of 4", size_of(type_of(ON_PolynomialSurface.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 4, "ON_PolynomialSurface.m_is_rat has unexpected offset % instead of 4", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialSurface.m_is_rat)) == 4, "ON_PolynomialSurface.m_is_rat has unexpected size % instead of 4", size_of(type_of(ON_PolynomialSurface.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 8, "ON_PolynomialSurface.m_order has unexpected offset % instead of 8", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialSurface.m_order)) == 8, "ON_PolynomialSurface.m_order has unexpected size % instead of 8", size_of(type_of(ON_PolynomialSurface.m_order)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 16, "ON_PolynomialSurface.m_cv has unexpected offset % instead of 16", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialSurface.m_cv)) == 24, "ON_PolynomialSurface.m_cv has unexpected size % instead of 24", size_of(type_of(ON_PolynomialSurface.m_cv)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 40, "ON_PolynomialSurface.m_domain has unexpected offset % instead of 40", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolynomialSurface.m_domain)) == 32, "ON_PolynomialSurface.m_domain has unexpected size % instead of 32", size_of(type_of(ON_PolynomialSurface.m_domain)));
        assert(size_of(ON_PolynomialSurface) == 72, "ON_PolynomialSurface has size % instead of 72", size_of(ON_PolynomialSurface));
    }

    {
        instance: ON_BezierCurve;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 0, "ON_BezierCurve.m_dim has unexpected offset % instead of 0", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCurve.m_dim)) == 4, "ON_BezierCurve.m_dim has unexpected size % instead of 4", size_of(type_of(ON_BezierCurve.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 4, "ON_BezierCurve.m_is_rat has unexpected offset % instead of 4", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCurve.m_is_rat)) == 4, "ON_BezierCurve.m_is_rat has unexpected size % instead of 4", size_of(type_of(ON_BezierCurve.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 8, "ON_BezierCurve.m_order has unexpected offset % instead of 8", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCurve.m_order)) == 4, "ON_BezierCurve.m_order has unexpected size % instead of 4", size_of(type_of(ON_BezierCurve.m_order)));
        assert(((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)) == 12, "ON_BezierCurve.m_cv_stride has unexpected offset % instead of 12", ((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCurve.m_cv_stride)) == 4, "ON_BezierCurve.m_cv_stride has unexpected size % instead of 4", size_of(type_of(ON_BezierCurve.m_cv_stride)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 16, "ON_BezierCurve.m_cv has unexpected offset % instead of 16", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCurve.m_cv)) == 8, "ON_BezierCurve.m_cv has unexpected size % instead of 8", size_of(type_of(ON_BezierCurve.m_cv)));
        assert(((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)) == 24, "ON_BezierCurve.m_cv_capacity has unexpected offset % instead of 24", ((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCurve.m_cv_capacity)) == 4, "ON_BezierCurve.m_cv_capacity has unexpected size % instead of 4", size_of(type_of(ON_BezierCurve.m_cv_capacity)));
        assert(((cast(*void)(*instance.m_reserved_ON_BezierCurve)) - cast(*void)(*instance)) == 28, "ON_BezierCurve.m_reserved_ON_BezierCurve has unexpected offset % instead of 28", ((cast(*void)(*instance.m_reserved_ON_BezierCurve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCurve.m_reserved_ON_BezierCurve)) == 4, "ON_BezierCurve.m_reserved_ON_BezierCurve has unexpected size % instead of 4", size_of(type_of(ON_BezierCurve.m_reserved_ON_BezierCurve)));
        assert(size_of(ON_BezierCurve) == 32, "ON_BezierCurve has size % instead of 32", size_of(ON_BezierCurve));
    }

    {
        instance: ON_BezierSurface;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 0, "ON_BezierSurface.m_dim has unexpected offset % instead of 0", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierSurface.m_dim)) == 4, "ON_BezierSurface.m_dim has unexpected size % instead of 4", size_of(type_of(ON_BezierSurface.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 4, "ON_BezierSurface.m_is_rat has unexpected offset % instead of 4", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierSurface.m_is_rat)) == 4, "ON_BezierSurface.m_is_rat has unexpected size % instead of 4", size_of(type_of(ON_BezierSurface.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 8, "ON_BezierSurface.m_order has unexpected offset % instead of 8", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierSurface.m_order)) == 8, "ON_BezierSurface.m_order has unexpected size % instead of 8", size_of(type_of(ON_BezierSurface.m_order)));
        assert(((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)) == 16, "ON_BezierSurface.m_cv_stride has unexpected offset % instead of 16", ((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierSurface.m_cv_stride)) == 8, "ON_BezierSurface.m_cv_stride has unexpected size % instead of 8", size_of(type_of(ON_BezierSurface.m_cv_stride)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 24, "ON_BezierSurface.m_cv has unexpected offset % instead of 24", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierSurface.m_cv)) == 8, "ON_BezierSurface.m_cv has unexpected size % instead of 8", size_of(type_of(ON_BezierSurface.m_cv)));
        assert(((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)) == 32, "ON_BezierSurface.m_cv_capacity has unexpected offset % instead of 32", ((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierSurface.m_cv_capacity)) == 4, "ON_BezierSurface.m_cv_capacity has unexpected size % instead of 4", size_of(type_of(ON_BezierSurface.m_cv_capacity)));
        assert(((cast(*void)(*instance.m_reserved_ON_BezierSurface)) - cast(*void)(*instance)) == 36, "ON_BezierSurface.m_reserved_ON_BezierSurface has unexpected offset % instead of 36", ((cast(*void)(*instance.m_reserved_ON_BezierSurface)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierSurface.m_reserved_ON_BezierSurface)) == 4, "ON_BezierSurface.m_reserved_ON_BezierSurface has unexpected size % instead of 4", size_of(type_of(ON_BezierSurface.m_reserved_ON_BezierSurface)));
        assert(size_of(ON_BezierSurface) == 40, "ON_BezierSurface has size % instead of 40", size_of(ON_BezierSurface));
    }

    {
        instance: ON_BezierCage;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 0, "ON_BezierCage.m_dim has unexpected offset % instead of 0", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCage.m_dim)) == 4, "ON_BezierCage.m_dim has unexpected size % instead of 4", size_of(type_of(ON_BezierCage.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 4, "ON_BezierCage.m_is_rat has unexpected offset % instead of 4", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCage.m_is_rat)) == 1, "ON_BezierCage.m_is_rat has unexpected size % instead of 1", size_of(type_of(ON_BezierCage.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 8, "ON_BezierCage.m_order has unexpected offset % instead of 8", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCage.m_order)) == 12, "ON_BezierCage.m_order has unexpected size % instead of 12", size_of(type_of(ON_BezierCage.m_order)));
        assert(((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)) == 20, "ON_BezierCage.m_cv_stride has unexpected offset % instead of 20", ((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCage.m_cv_stride)) == 12, "ON_BezierCage.m_cv_stride has unexpected size % instead of 12", size_of(type_of(ON_BezierCage.m_cv_stride)));
        assert(((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)) == 32, "ON_BezierCage.m_cv_capacity has unexpected offset % instead of 32", ((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCage.m_cv_capacity)) == 4, "ON_BezierCage.m_cv_capacity has unexpected size % instead of 4", size_of(type_of(ON_BezierCage.m_cv_capacity)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 40, "ON_BezierCage.m_cv has unexpected offset % instead of 40", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCage.m_cv)) == 8, "ON_BezierCage.m_cv has unexpected size % instead of 8", size_of(type_of(ON_BezierCage.m_cv)));
        assert(size_of(ON_BezierCage) == 48, "ON_BezierCage has size % instead of 48", size_of(ON_BezierCage));
    }

    {
        instance: ON_BezierCageMorph;
        assert(((cast(*void)(*instance.m_bValid)) - cast(*void)(*instance)) == 32, "ON_BezierCageMorph.m_bValid has unexpected offset % instead of 32", ((cast(*void)(*instance.m_bValid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCageMorph.m_bValid)) == 1, "ON_BezierCageMorph.m_bValid has unexpected size % instead of 1", size_of(type_of(ON_BezierCageMorph.m_bValid)));
        assert(((cast(*void)(*instance.m_xyz2rst)) - cast(*void)(*instance)) == 40, "ON_BezierCageMorph.m_xyz2rst has unexpected offset % instead of 40", ((cast(*void)(*instance.m_xyz2rst)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCageMorph.m_xyz2rst)) == 128, "ON_BezierCageMorph.m_xyz2rst has unexpected size % instead of 128", size_of(type_of(ON_BezierCageMorph.m_xyz2rst)));
        assert(((cast(*void)(*instance.m_rst2xyz)) - cast(*void)(*instance)) == 168, "ON_BezierCageMorph.m_rst2xyz has unexpected offset % instead of 168", ((cast(*void)(*instance.m_rst2xyz)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BezierCageMorph.m_rst2xyz)) == 48, "ON_BezierCageMorph.m_rst2xyz has unexpected size % instead of 48", size_of(type_of(ON_BezierCageMorph.m_rst2xyz)));
        assert(size_of(ON_BezierCageMorph) == 216, "ON_BezierCageMorph has size % instead of 216", size_of(ON_BezierCageMorph));
    }

    {
        instance: ON_Sum;
        assert(((cast(*void)(*instance.m_sum_err)) - cast(*void)(*instance)) == 0, "ON_Sum.m_sum_err has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sum_err)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_sum_err)) == 8, "ON_Sum.m_sum_err has unexpected size % instead of 8", size_of(type_of(ON_Sum.m_sum_err)));
        assert(((cast(*void)(*instance.m_pos_sum)) - cast(*void)(*instance)) == 8, "ON_Sum.m_pos_sum has unexpected offset % instead of 8", ((cast(*void)(*instance.m_pos_sum)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_sum)) == 8, "ON_Sum.m_pos_sum has unexpected size % instead of 8", size_of(type_of(ON_Sum.m_pos_sum)));
        assert(((cast(*void)(*instance.m_neg_sum)) - cast(*void)(*instance)) == 16, "ON_Sum.m_neg_sum has unexpected offset % instead of 16", ((cast(*void)(*instance.m_neg_sum)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_sum)) == 8, "ON_Sum.m_neg_sum has unexpected size % instead of 8", size_of(type_of(ON_Sum.m_neg_sum)));
        assert(((cast(*void)(*instance.m_zero_count)) - cast(*void)(*instance)) == 24, "ON_Sum.m_zero_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_zero_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_zero_count)) == 4, "ON_Sum.m_zero_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_zero_count)));
        assert(((cast(*void)(*instance.m_pos_count)) - cast(*void)(*instance)) == 28, "ON_Sum.m_pos_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_pos_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_count)) == 4, "ON_Sum.m_pos_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_pos_count)));
        assert(((cast(*void)(*instance.m_neg_count)) - cast(*void)(*instance)) == 32, "ON_Sum.m_neg_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_neg_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_count)) == 4, "ON_Sum.m_neg_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_neg_count)));
        assert(((cast(*void)(*instance.m_pos_sum1_count)) - cast(*void)(*instance)) == 36, "ON_Sum.m_pos_sum1_count has unexpected offset % instead of 36", ((cast(*void)(*instance.m_pos_sum1_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_sum1_count)) == 4, "ON_Sum.m_pos_sum1_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_pos_sum1_count)));
        assert(((cast(*void)(*instance.m_pos_sum2_count)) - cast(*void)(*instance)) == 40, "ON_Sum.m_pos_sum2_count has unexpected offset % instead of 40", ((cast(*void)(*instance.m_pos_sum2_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_sum2_count)) == 4, "ON_Sum.m_pos_sum2_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_pos_sum2_count)));
        assert(((cast(*void)(*instance.m_pos_sum3_count)) - cast(*void)(*instance)) == 44, "ON_Sum.m_pos_sum3_count has unexpected offset % instead of 44", ((cast(*void)(*instance.m_pos_sum3_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_sum3_count)) == 4, "ON_Sum.m_pos_sum3_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_pos_sum3_count)));
        assert(((cast(*void)(*instance.m_pos_sum1)) - cast(*void)(*instance)) == 48, "ON_Sum.m_pos_sum1 has unexpected offset % instead of 48", ((cast(*void)(*instance.m_pos_sum1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_sum1)) == 2048, "ON_Sum.m_pos_sum1 has unexpected size % instead of 2048", size_of(type_of(ON_Sum.m_pos_sum1)));
        assert(((cast(*void)(*instance.m_pos_sum2)) - cast(*void)(*instance)) == 2096, "ON_Sum.m_pos_sum2 has unexpected offset % instead of 2096", ((cast(*void)(*instance.m_pos_sum2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_sum2)) == 4096, "ON_Sum.m_pos_sum2 has unexpected size % instead of 4096", size_of(type_of(ON_Sum.m_pos_sum2)));
        assert(((cast(*void)(*instance.m_pos_sum3)) - cast(*void)(*instance)) == 6192, "ON_Sum.m_pos_sum3 has unexpected offset % instead of 6192", ((cast(*void)(*instance.m_pos_sum3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_pos_sum3)) == 8192, "ON_Sum.m_pos_sum3 has unexpected size % instead of 8192", size_of(type_of(ON_Sum.m_pos_sum3)));
        assert(((cast(*void)(*instance.m_neg_sum1_count)) - cast(*void)(*instance)) == 14384, "ON_Sum.m_neg_sum1_count has unexpected offset % instead of 14384", ((cast(*void)(*instance.m_neg_sum1_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_sum1_count)) == 4, "ON_Sum.m_neg_sum1_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_neg_sum1_count)));
        assert(((cast(*void)(*instance.m_neg_sum2_count)) - cast(*void)(*instance)) == 14388, "ON_Sum.m_neg_sum2_count has unexpected offset % instead of 14388", ((cast(*void)(*instance.m_neg_sum2_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_sum2_count)) == 4, "ON_Sum.m_neg_sum2_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_neg_sum2_count)));
        assert(((cast(*void)(*instance.m_neg_sum3_count)) - cast(*void)(*instance)) == 14392, "ON_Sum.m_neg_sum3_count has unexpected offset % instead of 14392", ((cast(*void)(*instance.m_neg_sum3_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_sum3_count)) == 4, "ON_Sum.m_neg_sum3_count has unexpected size % instead of 4", size_of(type_of(ON_Sum.m_neg_sum3_count)));
        assert(((cast(*void)(*instance.m_neg_sum1)) - cast(*void)(*instance)) == 14400, "ON_Sum.m_neg_sum1 has unexpected offset % instead of 14400", ((cast(*void)(*instance.m_neg_sum1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_sum1)) == 2048, "ON_Sum.m_neg_sum1 has unexpected size % instead of 2048", size_of(type_of(ON_Sum.m_neg_sum1)));
        assert(((cast(*void)(*instance.m_neg_sum2)) - cast(*void)(*instance)) == 16448, "ON_Sum.m_neg_sum2 has unexpected offset % instead of 16448", ((cast(*void)(*instance.m_neg_sum2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_sum2)) == 4096, "ON_Sum.m_neg_sum2 has unexpected size % instead of 4096", size_of(type_of(ON_Sum.m_neg_sum2)));
        assert(((cast(*void)(*instance.m_neg_sum3)) - cast(*void)(*instance)) == 20544, "ON_Sum.m_neg_sum3 has unexpected offset % instead of 20544", ((cast(*void)(*instance.m_neg_sum3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sum.m_neg_sum3)) == 8192, "ON_Sum.m_neg_sum3 has unexpected size % instead of 8192", size_of(type_of(ON_Sum.m_neg_sum3)));
        assert(size_of(ON_Sum) == 28736, "ON_Sum has size % instead of 28736", size_of(ON_Sum));
    }

    {
        instance: ON_Evaluator;
        assert(((cast(*void)(*instance.m_parameter_count)) - cast(*void)(*instance)) == 8, "ON_Evaluator.m_parameter_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_parameter_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Evaluator.m_parameter_count)) == 4, "ON_Evaluator.m_parameter_count has unexpected size % instead of 4", size_of(type_of(ON_Evaluator.m_parameter_count)));
        assert(((cast(*void)(*instance.m_value_count)) - cast(*void)(*instance)) == 12, "ON_Evaluator.m_value_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_value_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Evaluator.m_value_count)) == 4, "ON_Evaluator.m_value_count has unexpected size % instead of 4", size_of(type_of(ON_Evaluator.m_value_count)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 16, "ON_Evaluator.m_domain has unexpected offset % instead of 16", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Evaluator.m_domain)) == 24, "ON_Evaluator.m_domain has unexpected size % instead of 24", size_of(type_of(ON_Evaluator.m_domain)));
        assert(((cast(*void)(*instance.m_bPeriodicParameter)) - cast(*void)(*instance)) == 40, "ON_Evaluator.m_bPeriodicParameter has unexpected offset % instead of 40", ((cast(*void)(*instance.m_bPeriodicParameter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Evaluator.m_bPeriodicParameter)) == 24, "ON_Evaluator.m_bPeriodicParameter has unexpected size % instead of 24", size_of(type_of(ON_Evaluator.m_bPeriodicParameter)));
        assert(size_of(ON_Evaluator) == 64, "ON_Evaluator has size % instead of 64", size_of(ON_Evaluator));
    }

    {
        instance: ON_LocalZero1;
        assert(((cast(*void)(*instance.m_t0)) - cast(*void)(*instance)) == 8, "ON_LocalZero1.m_t0 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_t0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_t0)) == 8, "ON_LocalZero1.m_t0 has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_t0)));
        assert(((cast(*void)(*instance.m_t1)) - cast(*void)(*instance)) == 16, "ON_LocalZero1.m_t1 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_t1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_t1)) == 8, "ON_LocalZero1.m_t1 has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_t1)));
        assert(((cast(*void)(*instance.m_f_tolerance)) - cast(*void)(*instance)) == 24, "ON_LocalZero1.m_f_tolerance has unexpected offset % instead of 24", ((cast(*void)(*instance.m_f_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_f_tolerance)) == 8, "ON_LocalZero1.m_f_tolerance has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_f_tolerance)));
        assert(((cast(*void)(*instance.m_t_tolerance)) - cast(*void)(*instance)) == 32, "ON_LocalZero1.m_t_tolerance has unexpected offset % instead of 32", ((cast(*void)(*instance.m_t_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_t_tolerance)) == 8, "ON_LocalZero1.m_t_tolerance has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_t_tolerance)));
        assert(((cast(*void)(*instance.m_k)) - cast(*void)(*instance)) == 40, "ON_LocalZero1.m_k has unexpected offset % instead of 40", ((cast(*void)(*instance.m_k)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_k)) == 8, "ON_LocalZero1.m_k has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_k)));
        assert(((cast(*void)(*instance.m_k_count)) - cast(*void)(*instance)) == 48, "ON_LocalZero1.m_k_count has unexpected offset % instead of 48", ((cast(*void)(*instance.m_k_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_k_count)) == 4, "ON_LocalZero1.m_k_count has unexpected size % instead of 4", size_of(type_of(ON_LocalZero1.m_k_count)));
        assert(((cast(*void)(*instance.m_s0)) - cast(*void)(*instance)) == 56, "ON_LocalZero1.m_s0 has unexpected offset % instead of 56", ((cast(*void)(*instance.m_s0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_s0)) == 8, "ON_LocalZero1.m_s0 has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_s0)));
        assert(((cast(*void)(*instance.m_f0)) - cast(*void)(*instance)) == 64, "ON_LocalZero1.m_f0 has unexpected offset % instead of 64", ((cast(*void)(*instance.m_f0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_f0)) == 8, "ON_LocalZero1.m_f0 has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_f0)));
        assert(((cast(*void)(*instance.m_s1)) - cast(*void)(*instance)) == 72, "ON_LocalZero1.m_s1 has unexpected offset % instead of 72", ((cast(*void)(*instance.m_s1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_s1)) == 8, "ON_LocalZero1.m_s1 has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_s1)));
        assert(((cast(*void)(*instance.m_f1)) - cast(*void)(*instance)) == 80, "ON_LocalZero1.m_f1 has unexpected offset % instead of 80", ((cast(*void)(*instance.m_f1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LocalZero1.m_f1)) == 8, "ON_LocalZero1.m_f1 has unexpected size % instead of 8", size_of(type_of(ON_LocalZero1.m_f1)));
        assert(size_of(ON_LocalZero1) == 88, "ON_LocalZero1 has size % instead of 88", size_of(ON_LocalZero1));
    }

    {
        instance: ON_TextLog;
        assert(((cast(*void)(*instance.m_pFile)) - cast(*void)(*instance)) == 8, "ON_TextLog.m_pFile has unexpected offset % instead of 8", ((cast(*void)(*instance.m_pFile)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_pFile)) == 8, "ON_TextLog.m_pFile has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_pFile)));
        assert(((cast(*void)(*instance.m_pString)) - cast(*void)(*instance)) == 16, "ON_TextLog.m_pString has unexpected offset % instead of 16", ((cast(*void)(*instance.m_pString)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_pString)) == 8, "ON_TextLog.m_pString has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_pString)));
        assert(((cast(*void)(*instance.m_indent)) - cast(*void)(*instance)) == 24, "ON_TextLog.m_indent has unexpected offset % instead of 24", ((cast(*void)(*instance.m_indent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_indent)) == 8, "ON_TextLog.m_indent has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_indent)));
        assert(((cast(*void)(*instance.m_double_format)) - cast(*void)(*instance)) == 32, "ON_TextLog.m_double_format has unexpected offset % instead of 32", ((cast(*void)(*instance.m_double_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_double_format)) == 8, "ON_TextLog.m_double_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_double_format)));
        assert(((cast(*void)(*instance.m_double2_format)) - cast(*void)(*instance)) == 40, "ON_TextLog.m_double2_format has unexpected offset % instead of 40", ((cast(*void)(*instance.m_double2_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_double2_format)) == 8, "ON_TextLog.m_double2_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_double2_format)));
        assert(((cast(*void)(*instance.m_double3_format)) - cast(*void)(*instance)) == 48, "ON_TextLog.m_double3_format has unexpected offset % instead of 48", ((cast(*void)(*instance.m_double3_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_double3_format)) == 8, "ON_TextLog.m_double3_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_double3_format)));
        assert(((cast(*void)(*instance.m_double4_format)) - cast(*void)(*instance)) == 56, "ON_TextLog.m_double4_format has unexpected offset % instead of 56", ((cast(*void)(*instance.m_double4_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_double4_format)) == 8, "ON_TextLog.m_double4_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_double4_format)));
        assert(((cast(*void)(*instance.m_float_format)) - cast(*void)(*instance)) == 64, "ON_TextLog.m_float_format has unexpected offset % instead of 64", ((cast(*void)(*instance.m_float_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_float_format)) == 8, "ON_TextLog.m_float_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_float_format)));
        assert(((cast(*void)(*instance.m_float2_format)) - cast(*void)(*instance)) == 72, "ON_TextLog.m_float2_format has unexpected offset % instead of 72", ((cast(*void)(*instance.m_float2_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_float2_format)) == 8, "ON_TextLog.m_float2_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_float2_format)));
        assert(((cast(*void)(*instance.m_float3_format)) - cast(*void)(*instance)) == 80, "ON_TextLog.m_float3_format has unexpected offset % instead of 80", ((cast(*void)(*instance.m_float3_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_float3_format)) == 8, "ON_TextLog.m_float3_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_float3_format)));
        assert(((cast(*void)(*instance.m_float4_format)) - cast(*void)(*instance)) == 88, "ON_TextLog.m_float4_format has unexpected offset % instead of 88", ((cast(*void)(*instance.m_float4_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_float4_format)) == 8, "ON_TextLog.m_float4_format has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_float4_format)));
        assert(((cast(*void)(*instance.m_line)) - cast(*void)(*instance)) == 96, "ON_TextLog.m_line has unexpected offset % instead of 96", ((cast(*void)(*instance.m_line)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_line)) == 8, "ON_TextLog.m_line has unexpected size % instead of 8", size_of(type_of(ON_TextLog.m_line)));
        assert(((cast(*void)(*instance.m_beginning_of_line)) - cast(*void)(*instance)) == 104, "ON_TextLog.m_beginning_of_line has unexpected offset % instead of 104", ((cast(*void)(*instance.m_beginning_of_line)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_beginning_of_line)) == 4, "ON_TextLog.m_beginning_of_line has unexpected size % instead of 4", size_of(type_of(ON_TextLog.m_beginning_of_line)));
        assert(((cast(*void)(*instance.m_indent_size)) - cast(*void)(*instance)) == 108, "ON_TextLog.m_indent_size has unexpected offset % instead of 108", ((cast(*void)(*instance.m_indent_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_indent_size)) == 4, "ON_TextLog.m_indent_size has unexpected size % instead of 4", size_of(type_of(ON_TextLog.m_indent_size)));
        assert(((cast(*void)(*instance.m_indent_count)) - cast(*void)(*instance)) == 112, "ON_TextLog.m_indent_count has unexpected offset % instead of 112", ((cast(*void)(*instance.m_indent_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_indent_count)) == 4, "ON_TextLog.m_indent_count has unexpected size % instead of 4", size_of(type_of(ON_TextLog.m_indent_count)));
        assert(((cast(*void)(*instance.m_bNullTextLog)) - cast(*void)(*instance)) == 116, "ON_TextLog.m_bNullTextLog has unexpected offset % instead of 116", ((cast(*void)(*instance.m_bNullTextLog)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_bNullTextLog)) == 1, "ON_TextLog.m_bNullTextLog has unexpected size % instead of 1", size_of(type_of(ON_TextLog.m_bNullTextLog)));
        assert(((cast(*void)(*instance.m_level_of_detail)) - cast(*void)(*instance)) == 117, "ON_TextLog.m_level_of_detail has unexpected offset % instead of 117", ((cast(*void)(*instance.m_level_of_detail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_level_of_detail)) == 1, "ON_TextLog.m_level_of_detail has unexpected size % instead of 1", size_of(type_of(ON_TextLog.m_level_of_detail)));
        assert(((cast(*void)(*instance.m_color_format)) - cast(*void)(*instance)) == 118, "ON_TextLog.m_color_format has unexpected offset % instead of 118", ((cast(*void)(*instance.m_color_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_color_format)) == 1, "ON_TextLog.m_color_format has unexpected size % instead of 1", size_of(type_of(ON_TextLog.m_color_format)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 119, "ON_TextLog.m_reserved1 has unexpected offset % instead of 119", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLog.m_reserved1)) == 1, "ON_TextLog.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_TextLog.m_reserved1)));
        assert(size_of(ON_TextLog) == 120, "ON_TextLog has size % instead of 120", size_of(ON_TextLog));
    }

    {
        instance: ON_TextLogIndent;
        assert(((cast(*void)(*instance.m_text_log)) - cast(*void)(*instance)) == 0, "ON_TextLogIndent.m_text_log has unexpected offset % instead of 0", ((cast(*void)(*instance.m_text_log)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLogIndent.m_text_log)) == 8, "ON_TextLogIndent.m_text_log has unexpected size % instead of 8", size_of(type_of(ON_TextLogIndent.m_text_log)));
        assert(((cast(*void)(*instance.m_bEnabled)) - cast(*void)(*instance)) == 8, "ON_TextLogIndent.m_bEnabled has unexpected offset % instead of 8", ((cast(*void)(*instance.m_bEnabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLogIndent.m_bEnabled)) == 1, "ON_TextLogIndent.m_bEnabled has unexpected size % instead of 1", size_of(type_of(ON_TextLogIndent.m_bEnabled)));
        assert(size_of(ON_TextLogIndent) == 16, "ON_TextLogIndent has size % instead of 16", size_of(ON_TextLogIndent));
    }

    {
        instance: ON_TextLogLevelOfDetail;
        assert(((cast(*void)(*instance.m_text_log)) - cast(*void)(*instance)) == 0, "ON_TextLogLevelOfDetail.m_text_log has unexpected offset % instead of 0", ((cast(*void)(*instance.m_text_log)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLogLevelOfDetail.m_text_log)) == 8, "ON_TextLogLevelOfDetail.m_text_log has unexpected size % instead of 8", size_of(type_of(ON_TextLogLevelOfDetail.m_text_log)));
        assert(((cast(*void)(*instance.m_saved_level_of_detail)) - cast(*void)(*instance)) == 8, "ON_TextLogLevelOfDetail.m_saved_level_of_detail has unexpected offset % instead of 8", ((cast(*void)(*instance.m_saved_level_of_detail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextLogLevelOfDetail.m_saved_level_of_detail)) == 1, "ON_TextLogLevelOfDetail.m_saved_level_of_detail has unexpected size % instead of 1", size_of(type_of(ON_TextLogLevelOfDetail.m_saved_level_of_detail)));
        assert(size_of(ON_TextLogLevelOfDetail) == 16, "ON_TextLogLevelOfDetail has size % instead of 16", size_of(ON_TextLogLevelOfDetail));
    }

    {
        instance: ON_TextHash;
        assert(((cast(*void)(*instance.m_bApplyStringMap)) - cast(*void)(*instance)) == 120, "ON_TextHash.m_bApplyStringMap has unexpected offset % instead of 120", ((cast(*void)(*instance.m_bApplyStringMap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_bApplyStringMap)) == 1, "ON_TextHash.m_bApplyStringMap has unexpected size % instead of 1", size_of(type_of(ON_TextHash.m_bApplyStringMap)));
        assert(((cast(*void)(*instance.m_bApplyIdRemap)) - cast(*void)(*instance)) == 121, "ON_TextHash.m_bApplyIdRemap has unexpected offset % instead of 121", ((cast(*void)(*instance.m_bApplyIdRemap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_bApplyIdRemap)) == 1, "ON_TextHash.m_bApplyIdRemap has unexpected size % instead of 1", size_of(type_of(ON_TextHash.m_bApplyIdRemap)));
        assert(((cast(*void)(*instance.m_remap_id)) - cast(*void)(*instance)) == 124, "ON_TextHash.m_remap_id has unexpected offset % instead of 124", ((cast(*void)(*instance.m_remap_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_remap_id)) == 16, "ON_TextHash.m_remap_id has unexpected size % instead of 16", size_of(type_of(ON_TextHash.m_remap_id)));
        assert(((cast(*void)(*instance.m_remap_id_list)) - cast(*void)(*instance)) == 144, "ON_TextHash.m_remap_id_list has unexpected offset % instead of 144", ((cast(*void)(*instance.m_remap_id_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_remap_id_list)) == 32, "ON_TextHash.m_remap_id_list has unexpected size % instead of 32", size_of(type_of(ON_TextHash.m_remap_id_list)));
        assert(((cast(*void)(*instance.m_string_map_type)) - cast(*void)(*instance)) == 176, "ON_TextHash.m_string_map_type has unexpected offset % instead of 176", ((cast(*void)(*instance.m_string_map_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_string_map_type)) == 4, "ON_TextHash.m_string_map_type has unexpected size % instead of 4", size_of(type_of(ON_TextHash.m_string_map_type)));
        assert(((cast(*void)(*instance.m_string_map_ordinal_type)) - cast(*void)(*instance)) == 180, "ON_TextHash.m_string_map_ordinal_type has unexpected offset % instead of 180", ((cast(*void)(*instance.m_string_map_ordinal_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_string_map_ordinal_type)) == 4, "ON_TextHash.m_string_map_ordinal_type has unexpected size % instead of 4", size_of(type_of(ON_TextHash.m_string_map_ordinal_type)));
        assert(((cast(*void)(*instance.m_string_map_local)) - cast(*void)(*instance)) == 184, "ON_TextHash.m_string_map_local has unexpected offset % instead of 184", ((cast(*void)(*instance.m_string_map_local)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_string_map_local)) == 160, "ON_TextHash.m_string_map_local has unexpected size % instead of 160", size_of(type_of(ON_TextHash.m_string_map_local)));
        assert(((cast(*void)(*instance.m_output_text_log)) - cast(*void)(*instance)) == 344, "ON_TextHash.m_output_text_log has unexpected offset % instead of 344", ((cast(*void)(*instance.m_output_text_log)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_output_text_log)) == 8, "ON_TextHash.m_output_text_log has unexpected size % instead of 8", size_of(type_of(ON_TextHash.m_output_text_log)));
        assert(((cast(*void)(*instance.m_sha1)) - cast(*void)(*instance)) == 352, "ON_TextHash.m_sha1 has unexpected offset % instead of 352", ((cast(*void)(*instance.m_sha1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextHash.m_sha1)) == 128, "ON_TextHash.m_sha1 has unexpected size % instead of 128", size_of(type_of(ON_TextHash.m_sha1)));
        assert(size_of(ON_TextHash) == 480, "ON_TextHash has size % instead of 480", size_of(ON_TextHash));
    }

    {
        instance: ON_RTreeBBox;
        assert(((cast(*void)(*instance.m_min)) - cast(*void)(*instance)) == 0, "ON_RTreeBBox.m_min has unexpected offset % instead of 0", ((cast(*void)(*instance.m_min)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeBBox.m_min)) == 24, "ON_RTreeBBox.m_min has unexpected size % instead of 24", size_of(type_of(ON_RTreeBBox.m_min)));
        assert(((cast(*void)(*instance.m_max)) - cast(*void)(*instance)) == 24, "ON_RTreeBBox.m_max has unexpected offset % instead of 24", ((cast(*void)(*instance.m_max)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeBBox.m_max)) == 24, "ON_RTreeBBox.m_max has unexpected size % instead of 24", size_of(type_of(ON_RTreeBBox.m_max)));
        assert(size_of(ON_RTreeBBox) == 48, "ON_RTreeBBox has size % instead of 48", size_of(ON_RTreeBBox));
    }

    {
        instance: ON_RTreeSphere;
        assert(((cast(*void)(*instance.m_point)) - cast(*void)(*instance)) == 0, "ON_RTreeSphere.m_point has unexpected offset % instead of 0", ((cast(*void)(*instance.m_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeSphere.m_point)) == 24, "ON_RTreeSphere.m_point has unexpected size % instead of 24", size_of(type_of(ON_RTreeSphere.m_point)));
        assert(((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)) == 24, "ON_RTreeSphere.m_radius has unexpected offset % instead of 24", ((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeSphere.m_radius)) == 8, "ON_RTreeSphere.m_radius has unexpected size % instead of 8", size_of(type_of(ON_RTreeSphere.m_radius)));
        assert(size_of(ON_RTreeSphere) == 32, "ON_RTreeSphere has size % instead of 32", size_of(ON_RTreeSphere));
    }

    {
        instance: ON_RTreeCapsule;
        assert(((cast(*void)(*instance.m_point)) - cast(*void)(*instance)) == 0, "ON_RTreeCapsule.m_point has unexpected offset % instead of 0", ((cast(*void)(*instance.m_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeCapsule.m_point)) == 48, "ON_RTreeCapsule.m_point has unexpected size % instead of 48", size_of(type_of(ON_RTreeCapsule.m_point)));
        assert(((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)) == 48, "ON_RTreeCapsule.m_radius has unexpected offset % instead of 48", ((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeCapsule.m_radius)) == 8, "ON_RTreeCapsule.m_radius has unexpected size % instead of 8", size_of(type_of(ON_RTreeCapsule.m_radius)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 56, "ON_RTreeCapsule.m_domain has unexpected offset % instead of 56", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeCapsule.m_domain)) == 16, "ON_RTreeCapsule.m_domain has unexpected size % instead of 16", size_of(type_of(ON_RTreeCapsule.m_domain)));
        assert(size_of(ON_RTreeCapsule) == 72, "ON_RTreeCapsule has size % instead of 72", size_of(ON_RTreeCapsule));
    }

    {
        instance: ON_RTreeBranch;
        assert(((cast(*void)(*instance.m_rect)) - cast(*void)(*instance)) == 0, "ON_RTreeBranch.m_rect has unexpected offset % instead of 0", ((cast(*void)(*instance.m_rect)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeBranch.m_rect)) == 48, "ON_RTreeBranch.m_rect has unexpected size % instead of 48", size_of(type_of(ON_RTreeBranch.m_rect)));
        assert(size_of(ON_RTreeBranch) == 56, "ON_RTreeBranch has size % instead of 56", size_of(ON_RTreeBranch));
    }

    {
        instance: ON_RTreeLeaf;
        assert(((cast(*void)(*instance.m_rect)) - cast(*void)(*instance)) == 0, "ON_RTreeLeaf.m_rect has unexpected offset % instead of 0", ((cast(*void)(*instance.m_rect)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeLeaf.m_rect)) == 48, "ON_RTreeLeaf.m_rect has unexpected size % instead of 48", size_of(type_of(ON_RTreeLeaf.m_rect)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 48, "ON_RTreeLeaf.m_id has unexpected offset % instead of 48", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeLeaf.m_id)) == 8, "ON_RTreeLeaf.m_id has unexpected size % instead of 8", size_of(type_of(ON_RTreeLeaf.m_id)));
        assert(size_of(ON_RTreeLeaf) == 56, "ON_RTreeLeaf has size % instead of 56", size_of(ON_RTreeLeaf));
    }

    {
        instance: ON_RTreeNode;
        assert(((cast(*void)(*instance.m_level)) - cast(*void)(*instance)) == 0, "ON_RTreeNode.m_level has unexpected offset % instead of 0", ((cast(*void)(*instance.m_level)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeNode.m_level)) == 4, "ON_RTreeNode.m_level has unexpected size % instead of 4", size_of(type_of(ON_RTreeNode.m_level)));
        assert(((cast(*void)(*instance.m_count)) - cast(*void)(*instance)) == 4, "ON_RTreeNode.m_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeNode.m_count)) == 4, "ON_RTreeNode.m_count has unexpected size % instead of 4", size_of(type_of(ON_RTreeNode.m_count)));
        assert(((cast(*void)(*instance.m_branch)) - cast(*void)(*instance)) == 8, "ON_RTreeNode.m_branch has unexpected offset % instead of 8", ((cast(*void)(*instance.m_branch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeNode.m_branch)) == 336, "ON_RTreeNode.m_branch has unexpected size % instead of 336", size_of(type_of(ON_RTreeNode.m_branch)));
        assert(size_of(ON_RTreeNode) == 344, "ON_RTreeNode has size % instead of 344", size_of(ON_RTreeNode));
    }

    {
        instance: ON_RTreePolylineContext;
        assert(((cast(*void)(*instance.m_polyline_pointindex)) - cast(*void)(*instance)) == 0, "ON_RTreePolylineContext.m_polyline_pointindex has unexpected offset % instead of 0", ((cast(*void)(*instance.m_polyline_pointindex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreePolylineContext.m_polyline_pointindex)) == 4, "ON_RTreePolylineContext.m_polyline_pointindex has unexpected size % instead of 4", size_of(type_of(ON_RTreePolylineContext.m_polyline_pointindex)));
        assert(size_of(ON_RTreePolylineContext) == 4, "ON_RTreePolylineContext has size % instead of 4", size_of(ON_RTreePolylineContext));
    }

    {
        instance: ON_RTreeSearchResult;
        assert(((cast(*void)(*instance.m_capacity)) - cast(*void)(*instance)) == 0, "ON_RTreeSearchResult.m_capacity has unexpected offset % instead of 0", ((cast(*void)(*instance.m_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeSearchResult.m_capacity)) == 4, "ON_RTreeSearchResult.m_capacity has unexpected size % instead of 4", size_of(type_of(ON_RTreeSearchResult.m_capacity)));
        assert(((cast(*void)(*instance.m_count)) - cast(*void)(*instance)) == 4, "ON_RTreeSearchResult.m_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeSearchResult.m_count)) == 4, "ON_RTreeSearchResult.m_count has unexpected size % instead of 4", size_of(type_of(ON_RTreeSearchResult.m_count)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 8, "ON_RTreeSearchResult.m_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeSearchResult.m_id)) == 8, "ON_RTreeSearchResult.m_id has unexpected size % instead of 8", size_of(type_of(ON_RTreeSearchResult.m_id)));
        assert(size_of(ON_RTreeSearchResult) == 16, "ON_RTreeSearchResult has size % instead of 16", size_of(ON_RTreeSearchResult));
    }

    {
        instance: ON_RTreeMemPool.Blk;
        assert(((cast(*void)(*instance.m_next)) - cast(*void)(*instance)) == 0, "ON_RTreeMemPool.Blk.m_next has unexpected offset % instead of 0", ((cast(*void)(*instance.m_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.Blk.m_next)) == 8, "ON_RTreeMemPool.Blk.m_next has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.Blk.m_next)));
        assert(size_of(ON_RTreeMemPool.Blk) == 8, "ON_RTreeMemPool.Blk has size % instead of 8", size_of(ON_RTreeMemPool.Blk));
    }

    {
        instance: ON_RTreeMemPool;
        assert(((cast(*void)(*instance.m_nodes)) - cast(*void)(*instance)) == 0, "ON_RTreeMemPool.m_nodes has unexpected offset % instead of 0", ((cast(*void)(*instance.m_nodes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.m_nodes)) == 8, "ON_RTreeMemPool.m_nodes has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.m_nodes)));
        assert(((cast(*void)(*instance.m_list_nodes)) - cast(*void)(*instance)) == 8, "ON_RTreeMemPool.m_list_nodes has unexpected offset % instead of 8", ((cast(*void)(*instance.m_list_nodes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.m_list_nodes)) == 8, "ON_RTreeMemPool.m_list_nodes has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.m_list_nodes)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 16, "ON_RTreeMemPool.m_buffer has unexpected offset % instead of 16", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.m_buffer)) == 8, "ON_RTreeMemPool.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.m_buffer)));
        assert(((cast(*void)(*instance.m_buffer_capacity)) - cast(*void)(*instance)) == 24, "ON_RTreeMemPool.m_buffer_capacity has unexpected offset % instead of 24", ((cast(*void)(*instance.m_buffer_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.m_buffer_capacity)) == 8, "ON_RTreeMemPool.m_buffer_capacity has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.m_buffer_capacity)));
        assert(((cast(*void)(*instance.m_blk_list)) - cast(*void)(*instance)) == 32, "ON_RTreeMemPool.m_blk_list has unexpected offset % instead of 32", ((cast(*void)(*instance.m_blk_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.m_blk_list)) == 8, "ON_RTreeMemPool.m_blk_list has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.m_blk_list)));
        assert(((cast(*void)(*instance.m_sizeof_blk)) - cast(*void)(*instance)) == 40, "ON_RTreeMemPool.m_sizeof_blk has unexpected offset % instead of 40", ((cast(*void)(*instance.m_sizeof_blk)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.m_sizeof_blk)) == 8, "ON_RTreeMemPool.m_sizeof_blk has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.m_sizeof_blk)));
        assert(((cast(*void)(*instance.m_sizeof_heap)) - cast(*void)(*instance)) == 48, "ON_RTreeMemPool.m_sizeof_heap has unexpected offset % instead of 48", ((cast(*void)(*instance.m_sizeof_heap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeMemPool.m_sizeof_heap)) == 8, "ON_RTreeMemPool.m_sizeof_heap has unexpected size % instead of 8", size_of(type_of(ON_RTreeMemPool.m_sizeof_heap)));
        assert(size_of(ON_RTreeMemPool) == 56, "ON_RTreeMemPool has size % instead of 56", size_of(ON_RTreeMemPool));
    }

    {
        instance: ON_RTreeIterator.StackElement;
        assert(((cast(*void)(*instance.m_node)) - cast(*void)(*instance)) == 0, "ON_RTreeIterator.StackElement.m_node has unexpected offset % instead of 0", ((cast(*void)(*instance.m_node)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeIterator.StackElement.m_node)) == 8, "ON_RTreeIterator.StackElement.m_node has unexpected size % instead of 8", size_of(type_of(ON_RTreeIterator.StackElement.m_node)));
        assert(((cast(*void)(*instance.m_branchIndex)) - cast(*void)(*instance)) == 8, "ON_RTreeIterator.StackElement.m_branchIndex has unexpected offset % instead of 8", ((cast(*void)(*instance.m_branchIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeIterator.StackElement.m_branchIndex)) == 4, "ON_RTreeIterator.StackElement.m_branchIndex has unexpected size % instead of 4", size_of(type_of(ON_RTreeIterator.StackElement.m_branchIndex)));
        assert(size_of(ON_RTreeIterator.StackElement) == 16, "ON_RTreeIterator.StackElement has size % instead of 16", size_of(ON_RTreeIterator.StackElement));
    }

    {
        instance: ON_RTreeIterator;
        assert(((cast(*void)(*instance.m_stack)) - cast(*void)(*instance)) == 0, "ON_RTreeIterator.m_stack has unexpected offset % instead of 0", ((cast(*void)(*instance.m_stack)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeIterator.m_stack)) == 512, "ON_RTreeIterator.m_stack has unexpected size % instead of 512", size_of(type_of(ON_RTreeIterator.m_stack)));
        assert(((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)) == 512, "ON_RTreeIterator.m_sp has unexpected offset % instead of 512", ((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeIterator.m_sp)) == 8, "ON_RTreeIterator.m_sp has unexpected size % instead of 8", size_of(type_of(ON_RTreeIterator.m_sp)));
        assert(((cast(*void)(*instance.m_root)) - cast(*void)(*instance)) == 520, "ON_RTreeIterator.m_root has unexpected offset % instead of 520", ((cast(*void)(*instance.m_root)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTreeIterator.m_root)) == 8, "ON_RTreeIterator.m_root has unexpected size % instead of 8", size_of(type_of(ON_RTreeIterator.m_root)));
        assert(size_of(ON_RTreeIterator) == 528, "ON_RTreeIterator has size % instead of 528", size_of(ON_RTreeIterator));
    }

    {
        instance: ON_RTree;
        assert(((cast(*void)(*instance.m_root)) - cast(*void)(*instance)) == 0, "ON_RTree.m_root has unexpected offset % instead of 0", ((cast(*void)(*instance.m_root)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTree.m_root)) == 8, "ON_RTree.m_root has unexpected size % instead of 8", size_of(type_of(ON_RTree.m_root)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 8, "ON_RTree.m_reserved has unexpected offset % instead of 8", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTree.m_reserved)) == 8, "ON_RTree.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_RTree.m_reserved)));
        assert(((cast(*void)(*instance.m_mem_pool)) - cast(*void)(*instance)) == 16, "ON_RTree.m_mem_pool has unexpected offset % instead of 16", ((cast(*void)(*instance.m_mem_pool)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RTree.m_mem_pool)) == 56, "ON_RTree.m_mem_pool has unexpected size % instead of 56", size_of(type_of(ON_RTree.m_mem_pool)));
        assert(size_of(ON_RTree) == 72, "ON_RTree has size % instead of 72", size_of(ON_RTree));
    }

    {
        instance: ON_MappingChannel;
        assert(((cast(*void)(*instance.m_mapping_id)) - cast(*void)(*instance)) == 0, "ON_MappingChannel.m_mapping_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_mapping_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingChannel.m_mapping_id)) == 16, "ON_MappingChannel.m_mapping_id has unexpected size % instead of 16", size_of(type_of(ON_MappingChannel.m_mapping_id)));
        assert(((cast(*void)(*instance.m_mapping_index)) - cast(*void)(*instance)) == 16, "ON_MappingChannel.m_mapping_index has unexpected offset % instead of 16", ((cast(*void)(*instance.m_mapping_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingChannel.m_mapping_index)) == 4, "ON_MappingChannel.m_mapping_index has unexpected size % instead of 4", size_of(type_of(ON_MappingChannel.m_mapping_index)));
        assert(((cast(*void)(*instance.m_mapping_channel_id)) - cast(*void)(*instance)) == 20, "ON_MappingChannel.m_mapping_channel_id has unexpected offset % instead of 20", ((cast(*void)(*instance.m_mapping_channel_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingChannel.m_mapping_channel_id)) == 4, "ON_MappingChannel.m_mapping_channel_id has unexpected size % instead of 4", size_of(type_of(ON_MappingChannel.m_mapping_channel_id)));
        assert(((cast(*void)(*instance.m_object_xform)) - cast(*void)(*instance)) == 24, "ON_MappingChannel.m_object_xform has unexpected offset % instead of 24", ((cast(*void)(*instance.m_object_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingChannel.m_object_xform)) == 128, "ON_MappingChannel.m_object_xform has unexpected size % instead of 128", size_of(type_of(ON_MappingChannel.m_object_xform)));
        assert(size_of(ON_MappingChannel) == 152, "ON_MappingChannel has size % instead of 152", size_of(ON_MappingChannel));
    }

    {
        instance: ON_MappingRef;
        assert(((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)) == 0, "ON_MappingRef.m_plugin_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingRef.m_plugin_id)) == 16, "ON_MappingRef.m_plugin_id has unexpected size % instead of 16", size_of(type_of(ON_MappingRef.m_plugin_id)));
        assert(((cast(*void)(*instance.m_mapping_channels)) - cast(*void)(*instance)) == 16, "ON_MappingRef.m_mapping_channels has unexpected offset % instead of 16", ((cast(*void)(*instance.m_mapping_channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingRef.m_mapping_channels)) == 24, "ON_MappingRef.m_mapping_channels has unexpected size % instead of 24", size_of(type_of(ON_MappingRef.m_mapping_channels)));
        assert(size_of(ON_MappingRef) == 40, "ON_MappingRef has size % instead of 40", size_of(ON_MappingRef));
    }

    {
        instance: ON_MaterialRef;
        assert(((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)) == 0, "ON_MaterialRef.m_plugin_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_plugin_id)) == 16, "ON_MaterialRef.m_plugin_id has unexpected size % instead of 16", size_of(type_of(ON_MaterialRef.m_plugin_id)));
        assert(((cast(*void)(*instance.m_material_id)) - cast(*void)(*instance)) == 16, "ON_MaterialRef.m_material_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_material_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_material_id)) == 16, "ON_MaterialRef.m_material_id has unexpected size % instead of 16", size_of(type_of(ON_MaterialRef.m_material_id)));
        assert(((cast(*void)(*instance.m_material_backface_id)) - cast(*void)(*instance)) == 32, "ON_MaterialRef.m_material_backface_id has unexpected offset % instead of 32", ((cast(*void)(*instance.m_material_backface_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_material_backface_id)) == 16, "ON_MaterialRef.m_material_backface_id has unexpected size % instead of 16", size_of(type_of(ON_MaterialRef.m_material_backface_id)));
        assert(((cast(*void)(*instance.m_material_source)) - cast(*void)(*instance)) == 48, "ON_MaterialRef.m_material_source has unexpected offset % instead of 48", ((cast(*void)(*instance.m_material_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_material_source)) == 1, "ON_MaterialRef.m_material_source has unexpected size % instead of 1", size_of(type_of(ON_MaterialRef.m_material_source)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 49, "ON_MaterialRef.m_reserved1 has unexpected offset % instead of 49", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_reserved1)) == 1, "ON_MaterialRef.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_MaterialRef.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 50, "ON_MaterialRef.m_reserved2 has unexpected offset % instead of 50", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_reserved2)) == 1, "ON_MaterialRef.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_MaterialRef.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 51, "ON_MaterialRef.m_reserved3 has unexpected offset % instead of 51", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_reserved3)) == 1, "ON_MaterialRef.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_MaterialRef.m_reserved3)));
        assert(((cast(*void)(*instance.m_material_index)) - cast(*void)(*instance)) == 52, "ON_MaterialRef.m_material_index has unexpected offset % instead of 52", ((cast(*void)(*instance.m_material_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_material_index)) == 4, "ON_MaterialRef.m_material_index has unexpected size % instead of 4", size_of(type_of(ON_MaterialRef.m_material_index)));
        assert(((cast(*void)(*instance.m_material_backface_index)) - cast(*void)(*instance)) == 56, "ON_MaterialRef.m_material_backface_index has unexpected offset % instead of 56", ((cast(*void)(*instance.m_material_backface_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MaterialRef.m_material_backface_index)) == 4, "ON_MaterialRef.m_material_backface_index has unexpected size % instead of 4", size_of(type_of(ON_MaterialRef.m_material_backface_index)));
        assert(size_of(ON_MaterialRef) == 60, "ON_MaterialRef has size % instead of 60", size_of(ON_MaterialRef));
    }

    {
        instance: ON_RenderingAttributes;
        assert(((cast(*void)(*instance.m_materials)) - cast(*void)(*instance)) == 0, "ON_RenderingAttributes.m_materials has unexpected offset % instead of 0", ((cast(*void)(*instance.m_materials)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RenderingAttributes.m_materials)) == 24, "ON_RenderingAttributes.m_materials has unexpected size % instead of 24", size_of(type_of(ON_RenderingAttributes.m_materials)));
        assert(size_of(ON_RenderingAttributes) == 24, "ON_RenderingAttributes has size % instead of 24", size_of(ON_RenderingAttributes));
    }

    {
        instance: ON_ObjectRenderingAttributes;
        assert(((cast(*void)(*instance.m_mappings)) - cast(*void)(*instance)) == 24, "ON_ObjectRenderingAttributes.m_mappings has unexpected offset % instead of 24", ((cast(*void)(*instance.m_mappings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjectRenderingAttributes.m_mappings)) == 24, "ON_ObjectRenderingAttributes.m_mappings has unexpected size % instead of 24", size_of(type_of(ON_ObjectRenderingAttributes.m_mappings)));
        assert(((cast(*void)(*instance.m_bCastsShadows)) - cast(*void)(*instance)) == 48, "ON_ObjectRenderingAttributes.m_bCastsShadows has unexpected offset % instead of 48", ((cast(*void)(*instance.m_bCastsShadows)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjectRenderingAttributes.m_bCastsShadows)) == 1, "ON_ObjectRenderingAttributes.m_bCastsShadows has unexpected size % instead of 1", size_of(type_of(ON_ObjectRenderingAttributes.m_bCastsShadows)));
        assert(((cast(*void)(*instance.m_bReceivesShadows)) - cast(*void)(*instance)) == 49, "ON_ObjectRenderingAttributes.m_bReceivesShadows has unexpected offset % instead of 49", ((cast(*void)(*instance.m_bReceivesShadows)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjectRenderingAttributes.m_bReceivesShadows)) == 1, "ON_ObjectRenderingAttributes.m_bReceivesShadows has unexpected size % instead of 1", size_of(type_of(ON_ObjectRenderingAttributes.m_bReceivesShadows)));
        assert(((cast(*void)(*instance.m_bits)) - cast(*void)(*instance)) == 50, "ON_ObjectRenderingAttributes.m_bits has unexpected offset % instead of 50", ((cast(*void)(*instance.m_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjectRenderingAttributes.m_bits)) == 1, "ON_ObjectRenderingAttributes.m_bits has unexpected size % instead of 1", size_of(type_of(ON_ObjectRenderingAttributes.m_bits)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 51, "ON_ObjectRenderingAttributes.m_reserved1 has unexpected offset % instead of 51", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjectRenderingAttributes.m_reserved1)) == 1, "ON_ObjectRenderingAttributes.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_ObjectRenderingAttributes.m_reserved1)));
        assert(size_of(ON_ObjectRenderingAttributes) == 56, "ON_ObjectRenderingAttributes has size % instead of 56", size_of(ON_ObjectRenderingAttributes));
    }

    {
        instance: ON_ClassId;
        assert(((cast(*void)(*instance.m_pNext)) - cast(*void)(*instance)) == 0, "ON_ClassId.m_pNext has unexpected offset % instead of 0", ((cast(*void)(*instance.m_pNext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_pNext)) == 8, "ON_ClassId.m_pNext has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_pNext)));
        assert(((cast(*void)(*instance.m_pBaseClassId)) - cast(*void)(*instance)) == 8, "ON_ClassId.m_pBaseClassId has unexpected offset % instead of 8", ((cast(*void)(*instance.m_pBaseClassId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_pBaseClassId)) == 8, "ON_ClassId.m_pBaseClassId has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_pBaseClassId)));
        assert(((cast(*void)(*instance.m_sClassName)) - cast(*void)(*instance)) == 16, "ON_ClassId.m_sClassName has unexpected offset % instead of 16", ((cast(*void)(*instance.m_sClassName)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_sClassName)) == 80, "ON_ClassId.m_sClassName has unexpected size % instead of 80", size_of(type_of(ON_ClassId.m_sClassName)));
        assert(((cast(*void)(*instance.m_sBaseClassName)) - cast(*void)(*instance)) == 96, "ON_ClassId.m_sBaseClassName has unexpected offset % instead of 96", ((cast(*void)(*instance.m_sBaseClassName)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_sBaseClassName)) == 80, "ON_ClassId.m_sBaseClassName has unexpected size % instead of 80", size_of(type_of(ON_ClassId.m_sBaseClassName)));
        assert(((cast(*void)(*instance.m_create)) - cast(*void)(*instance)) == 176, "ON_ClassId.m_create has unexpected offset % instead of 176", ((cast(*void)(*instance.m_create)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_create)) == 8, "ON_ClassId.m_create has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_create)));
        assert(((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)) == 184, "ON_ClassId.m_uuid has unexpected offset % instead of 184", ((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_uuid)) == 16, "ON_ClassId.m_uuid has unexpected size % instead of 16", size_of(type_of(ON_ClassId.m_uuid)));
        assert(((cast(*void)(*instance.m_mark)) - cast(*void)(*instance)) == 200, "ON_ClassId.m_mark has unexpected offset % instead of 200", ((cast(*void)(*instance.m_mark)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_mark)) == 4, "ON_ClassId.m_mark has unexpected size % instead of 4", size_of(type_of(ON_ClassId.m_mark)));
        assert(((cast(*void)(*instance.m_class_id_version)) - cast(*void)(*instance)) == 204, "ON_ClassId.m_class_id_version has unexpected offset % instead of 204", ((cast(*void)(*instance.m_class_id_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_class_id_version)) == 4, "ON_ClassId.m_class_id_version has unexpected size % instead of 4", size_of(type_of(ON_ClassId.m_class_id_version)));
        assert(((cast(*void)(*instance.m_f1)) - cast(*void)(*instance)) == 208, "ON_ClassId.m_f1 has unexpected offset % instead of 208", ((cast(*void)(*instance.m_f1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f1)) == 8, "ON_ClassId.m_f1 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f1)));
        assert(((cast(*void)(*instance.m_f2)) - cast(*void)(*instance)) == 216, "ON_ClassId.m_f2 has unexpected offset % instead of 216", ((cast(*void)(*instance.m_f2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f2)) == 8, "ON_ClassId.m_f2 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f2)));
        assert(((cast(*void)(*instance.m_f3)) - cast(*void)(*instance)) == 224, "ON_ClassId.m_f3 has unexpected offset % instead of 224", ((cast(*void)(*instance.m_f3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f3)) == 8, "ON_ClassId.m_f3 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f3)));
        assert(((cast(*void)(*instance.m_f4)) - cast(*void)(*instance)) == 232, "ON_ClassId.m_f4 has unexpected offset % instead of 232", ((cast(*void)(*instance.m_f4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f4)) == 8, "ON_ClassId.m_f4 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f4)));
        assert(((cast(*void)(*instance.m_f5)) - cast(*void)(*instance)) == 240, "ON_ClassId.m_f5 has unexpected offset % instead of 240", ((cast(*void)(*instance.m_f5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f5)) == 8, "ON_ClassId.m_f5 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f5)));
        assert(((cast(*void)(*instance.m_f6)) - cast(*void)(*instance)) == 248, "ON_ClassId.m_f6 has unexpected offset % instead of 248", ((cast(*void)(*instance.m_f6)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f6)) == 8, "ON_ClassId.m_f6 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f6)));
        assert(((cast(*void)(*instance.m_f7)) - cast(*void)(*instance)) == 256, "ON_ClassId.m_f7 has unexpected offset % instead of 256", ((cast(*void)(*instance.m_f7)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f7)) == 8, "ON_ClassId.m_f7 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f7)));
        assert(((cast(*void)(*instance.m_f8)) - cast(*void)(*instance)) == 264, "ON_ClassId.m_f8 has unexpected offset % instead of 264", ((cast(*void)(*instance.m_f8)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClassId.m_f8)) == 8, "ON_ClassId.m_f8 has unexpected size % instead of 8", size_of(type_of(ON_ClassId.m_f8)));
        assert(size_of(ON_ClassId) == 272, "ON_ClassId has size % instead of 272", size_of(ON_ClassId));
    }

    {
        instance: ON_UserString;
        assert(((cast(*void)(*instance.m_key)) - cast(*void)(*instance)) == 0, "ON_UserString.m_key has unexpected offset % instead of 0", ((cast(*void)(*instance.m_key)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserString.m_key)) == 8, "ON_UserString.m_key has unexpected size % instead of 8", size_of(type_of(ON_UserString.m_key)));
        assert(((cast(*void)(*instance.m_string_value)) - cast(*void)(*instance)) == 8, "ON_UserString.m_string_value has unexpected offset % instead of 8", ((cast(*void)(*instance.m_string_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserString.m_string_value)) == 8, "ON_UserString.m_string_value has unexpected size % instead of 8", size_of(type_of(ON_UserString.m_string_value)));
        assert(size_of(ON_UserString) == 16, "ON_UserString has size % instead of 16", size_of(ON_UserString));
    }

    {
        instance: ON_Object;
        assert(((cast(*void)(*instance.m_userdata_list)) - cast(*void)(*instance)) == 8, "ON_Object.m_userdata_list has unexpected offset % instead of 8", ((cast(*void)(*instance.m_userdata_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Object.m_userdata_list)) == 8, "ON_Object.m_userdata_list has unexpected size % instead of 8", size_of(type_of(ON_Object.m_userdata_list)));
        assert(size_of(ON_Object) == 16, "ON_Object has size % instead of 16", size_of(ON_Object));
    }

    {
        instance: ON_ModelComponent;
        assert(((cast(*void)(*instance.m_runtime_serial_number)) - cast(*void)(*instance)) == 16, "ON_ModelComponent.m_runtime_serial_number has unexpected offset % instead of 16", ((cast(*void)(*instance.m_runtime_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_runtime_serial_number)) == 8, "ON_ModelComponent.m_runtime_serial_number has unexpected size % instead of 8", size_of(type_of(ON_ModelComponent.m_runtime_serial_number)));
        assert(((cast(*void)(*instance.m_content_version_number)) - cast(*void)(*instance)) == 24, "ON_ModelComponent.m_content_version_number has unexpected offset % instead of 24", ((cast(*void)(*instance.m_content_version_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_content_version_number)) == 8, "ON_ModelComponent.m_content_version_number has unexpected size % instead of 8", size_of(type_of(ON_ModelComponent.m_content_version_number)));
        assert(((cast(*void)(*instance.m_model_serial_number)) - cast(*void)(*instance)) == 32, "ON_ModelComponent.m_model_serial_number has unexpected offset % instead of 32", ((cast(*void)(*instance.m_model_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_model_serial_number)) == 4, "ON_ModelComponent.m_model_serial_number has unexpected size % instead of 4", size_of(type_of(ON_ModelComponent.m_model_serial_number)));
        assert(((cast(*void)(*instance.m_reference_model_serial_number)) - cast(*void)(*instance)) == 36, "ON_ModelComponent.m_reference_model_serial_number has unexpected offset % instead of 36", ((cast(*void)(*instance.m_reference_model_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_reference_model_serial_number)) == 4, "ON_ModelComponent.m_reference_model_serial_number has unexpected size % instead of 4", size_of(type_of(ON_ModelComponent.m_reference_model_serial_number)));
        assert(((cast(*void)(*instance.m_linked_idef_serial_number)) - cast(*void)(*instance)) == 40, "ON_ModelComponent.m_linked_idef_serial_number has unexpected offset % instead of 40", ((cast(*void)(*instance.m_linked_idef_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_linked_idef_serial_number)) == 4, "ON_ModelComponent.m_linked_idef_serial_number has unexpected size % instead of 4", size_of(type_of(ON_ModelComponent.m_linked_idef_serial_number)));
        assert(((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)) == 44, "ON_ModelComponent.m_component_type has unexpected offset % instead of 44", ((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_component_type)) == 1, "ON_ModelComponent.m_component_type has unexpected size % instead of 1", size_of(type_of(ON_ModelComponent.m_component_type)));
        assert(((cast(*void)(*instance.m_locked_status)) - cast(*void)(*instance)) == 46, "ON_ModelComponent.m_locked_status has unexpected offset % instead of 46", ((cast(*void)(*instance.m_locked_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_locked_status)) == 2, "ON_ModelComponent.m_locked_status has unexpected size % instead of 2", size_of(type_of(ON_ModelComponent.m_locked_status)));
        assert(((cast(*void)(*instance.m_set_status)) - cast(*void)(*instance)) == 48, "ON_ModelComponent.m_set_status has unexpected offset % instead of 48", ((cast(*void)(*instance.m_set_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_set_status)) == 2, "ON_ModelComponent.m_set_status has unexpected size % instead of 2", size_of(type_of(ON_ModelComponent.m_set_status)));
        assert(((cast(*void)(*instance.m_component_status)) - cast(*void)(*instance)) == 50, "ON_ModelComponent.m_component_status has unexpected offset % instead of 50", ((cast(*void)(*instance.m_component_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_component_status)) == 2, "ON_ModelComponent.m_component_status has unexpected size % instead of 2", size_of(type_of(ON_ModelComponent.m_component_status)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 52, "ON_ModelComponent.m_reserved2 has unexpected offset % instead of 52", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_reserved2)) == 2, "ON_ModelComponent.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_ModelComponent.m_reserved2)));
        assert(((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)) == 56, "ON_ModelComponent.m_component_index has unexpected offset % instead of 56", ((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_component_index)) == 4, "ON_ModelComponent.m_component_index has unexpected size % instead of 4", size_of(type_of(ON_ModelComponent.m_component_index)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 60, "ON_ModelComponent.m_reserved3 has unexpected offset % instead of 60", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_reserved3)) == 4, "ON_ModelComponent.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_ModelComponent.m_reserved3)));
        assert(((cast(*void)(*instance.m_component_id)) - cast(*void)(*instance)) == 64, "ON_ModelComponent.m_component_id has unexpected offset % instead of 64", ((cast(*void)(*instance.m_component_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_component_id)) == 16, "ON_ModelComponent.m_component_id has unexpected size % instead of 16", size_of(type_of(ON_ModelComponent.m_component_id)));
        assert(((cast(*void)(*instance.m_component_parent_id)) - cast(*void)(*instance)) == 80, "ON_ModelComponent.m_component_parent_id has unexpected offset % instead of 80", ((cast(*void)(*instance.m_component_parent_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_component_parent_id)) == 16, "ON_ModelComponent.m_component_parent_id has unexpected size % instead of 16", size_of(type_of(ON_ModelComponent.m_component_parent_id)));
        assert(((cast(*void)(*instance.m_component_name_hash)) - cast(*void)(*instance)) == 96, "ON_ModelComponent.m_component_name_hash has unexpected offset % instead of 96", ((cast(*void)(*instance.m_component_name_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_component_name_hash)) == 40, "ON_ModelComponent.m_component_name_hash has unexpected size % instead of 40", size_of(type_of(ON_ModelComponent.m_component_name_hash)));
        assert(((cast(*void)(*instance.m_component_name)) - cast(*void)(*instance)) == 136, "ON_ModelComponent.m_component_name has unexpected offset % instead of 136", ((cast(*void)(*instance.m_component_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponent.m_component_name)) == 8, "ON_ModelComponent.m_component_name has unexpected size % instead of 8", size_of(type_of(ON_ModelComponent.m_component_name)));
        assert(size_of(ON_ModelComponent) == 144, "ON_ModelComponent has size % instead of 144", size_of(ON_ModelComponent));
    }

    {
        instance: ON_ModelComponentContentMark;
        assert(((cast(*void)(*instance.m_component_id)) - cast(*void)(*instance)) == 0, "ON_ModelComponentContentMark.m_component_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_component_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_component_id)) == 16, "ON_ModelComponentContentMark.m_component_id has unexpected size % instead of 16", size_of(type_of(ON_ModelComponentContentMark.m_component_id)));
        assert(((cast(*void)(*instance.m_component_serial_number)) - cast(*void)(*instance)) == 16, "ON_ModelComponentContentMark.m_component_serial_number has unexpected offset % instead of 16", ((cast(*void)(*instance.m_component_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_component_serial_number)) == 8, "ON_ModelComponentContentMark.m_component_serial_number has unexpected size % instead of 8", size_of(type_of(ON_ModelComponentContentMark.m_component_serial_number)));
        assert(((cast(*void)(*instance.m_component_content_version_number)) - cast(*void)(*instance)) == 24, "ON_ModelComponentContentMark.m_component_content_version_number has unexpected offset % instead of 24", ((cast(*void)(*instance.m_component_content_version_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_component_content_version_number)) == 8, "ON_ModelComponentContentMark.m_component_content_version_number has unexpected size % instead of 8", size_of(type_of(ON_ModelComponentContentMark.m_component_content_version_number)));
        assert(((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)) == 32, "ON_ModelComponentContentMark.m_component_type has unexpected offset % instead of 32", ((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_component_type)) == 1, "ON_ModelComponentContentMark.m_component_type has unexpected size % instead of 1", size_of(type_of(ON_ModelComponentContentMark.m_component_type)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 33, "ON_ModelComponentContentMark.m_reserved1 has unexpected offset % instead of 33", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_reserved1)) == 1, "ON_ModelComponentContentMark.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_ModelComponentContentMark.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 34, "ON_ModelComponentContentMark.m_reserved2 has unexpected offset % instead of 34", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_reserved2)) == 1, "ON_ModelComponentContentMark.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_ModelComponentContentMark.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 35, "ON_ModelComponentContentMark.m_reserved3 has unexpected offset % instead of 35", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_reserved3)) == 1, "ON_ModelComponentContentMark.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_ModelComponentContentMark.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 36, "ON_ModelComponentContentMark.m_reserved4 has unexpected offset % instead of 36", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentContentMark.m_reserved4)) == 4, "ON_ModelComponentContentMark.m_reserved4 has unexpected size % instead of 4", size_of(type_of(ON_ModelComponentContentMark.m_reserved4)));
        assert(size_of(ON_ModelComponentContentMark) == 40, "ON_ModelComponentContentMark has size % instead of 40", size_of(ON_ModelComponentContentMark));
    }

    {
        instance: ON_ModelComponentTypeIterator;
        assert(((cast(*void)(*instance.m_type_count)) - cast(*void)(*instance)) == 0, "ON_ModelComponentTypeIterator.m_type_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_type_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentTypeIterator.m_type_count)) == 4, "ON_ModelComponentTypeIterator.m_type_count has unexpected size % instead of 4", size_of(type_of(ON_ModelComponentTypeIterator.m_type_count)));
        assert(((cast(*void)(*instance.m_current_index)) - cast(*void)(*instance)) == 4, "ON_ModelComponentTypeIterator.m_current_index has unexpected offset % instead of 4", ((cast(*void)(*instance.m_current_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentTypeIterator.m_current_index)) == 4, "ON_ModelComponentTypeIterator.m_current_index has unexpected size % instead of 4", size_of(type_of(ON_ModelComponentTypeIterator.m_current_index)));
        assert(((cast(*void)(*instance.m_types)) - cast(*void)(*instance)) == 8, "ON_ModelComponentTypeIterator.m_types has unexpected offset % instead of 8", ((cast(*void)(*instance.m_types)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentTypeIterator.m_types)) == 32, "ON_ModelComponentTypeIterator.m_types has unexpected size % instead of 32", size_of(type_of(ON_ModelComponentTypeIterator.m_types)));
        assert(size_of(ON_ModelComponentTypeIterator) == 40, "ON_ModelComponentTypeIterator has size % instead of 40", size_of(ON_ModelComponentTypeIterator));
    }

    {
        instance: ON_ModelComponentReference;
        assert(((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)) == 0, "ON_ModelComponentReference.m_sp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentReference.m_sp)) == 16, "ON_ModelComponentReference.m_sp has unexpected size % instead of 16", size_of(type_of(ON_ModelComponentReference.m_sp)));
        assert(size_of(ON_ModelComponentReference) == 16, "ON_ModelComponentReference has size % instead of 16", size_of(ON_ModelComponentReference));
    }

    {
        instance: ON_ModelComponentWeakReference;
        assert(((cast(*void)(*instance.m_wp)) - cast(*void)(*instance)) == 0, "ON_ModelComponentWeakReference.m_wp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_wp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelComponentWeakReference.m_wp)) == 16, "ON_ModelComponentWeakReference.m_wp has unexpected size % instead of 16", size_of(type_of(ON_ModelComponentWeakReference.m_wp)));
        assert(size_of(ON_ModelComponentWeakReference) == 16, "ON_ModelComponentWeakReference has size % instead of 16", size_of(ON_ModelComponentWeakReference));
    }

    {
        instance: ON_Buffer;
        assert(((cast(*void)(*instance.m_buffer_size)) - cast(*void)(*instance)) == 0, "ON_Buffer.m_buffer_size has unexpected offset % instead of 0", ((cast(*void)(*instance.m_buffer_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_buffer_size)) == 8, "ON_Buffer.m_buffer_size has unexpected size % instead of 8", size_of(type_of(ON_Buffer.m_buffer_size)));
        assert(((cast(*void)(*instance.m_current_position)) - cast(*void)(*instance)) == 8, "ON_Buffer.m_current_position has unexpected offset % instead of 8", ((cast(*void)(*instance.m_current_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_current_position)) == 8, "ON_Buffer.m_current_position has unexpected size % instead of 8", size_of(type_of(ON_Buffer.m_current_position)));
        assert(((cast(*void)(*instance.m_first_segment)) - cast(*void)(*instance)) == 16, "ON_Buffer.m_first_segment has unexpected offset % instead of 16", ((cast(*void)(*instance.m_first_segment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_first_segment)) == 8, "ON_Buffer.m_first_segment has unexpected size % instead of 8", size_of(type_of(ON_Buffer.m_first_segment)));
        assert(((cast(*void)(*instance.m_last_segment)) - cast(*void)(*instance)) == 24, "ON_Buffer.m_last_segment has unexpected offset % instead of 24", ((cast(*void)(*instance.m_last_segment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_last_segment)) == 8, "ON_Buffer.m_last_segment has unexpected size % instead of 8", size_of(type_of(ON_Buffer.m_last_segment)));
        assert(((cast(*void)(*instance.m_current_segment)) - cast(*void)(*instance)) == 32, "ON_Buffer.m_current_segment has unexpected offset % instead of 32", ((cast(*void)(*instance.m_current_segment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_current_segment)) == 8, "ON_Buffer.m_current_segment has unexpected size % instead of 8", size_of(type_of(ON_Buffer.m_current_segment)));
        assert(((cast(*void)(*instance.m_error_handler)) - cast(*void)(*instance)) == 40, "ON_Buffer.m_error_handler has unexpected offset % instead of 40", ((cast(*void)(*instance.m_error_handler)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_error_handler)) == 8, "ON_Buffer.m_error_handler has unexpected size % instead of 8", size_of(type_of(ON_Buffer.m_error_handler)));
        assert(((cast(*void)(*instance.m_last_error)) - cast(*void)(*instance)) == 48, "ON_Buffer.m_last_error has unexpected offset % instead of 48", ((cast(*void)(*instance.m_last_error)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_last_error)) == 4, "ON_Buffer.m_last_error has unexpected size % instead of 4", size_of(type_of(ON_Buffer.m_last_error)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 52, "ON_Buffer.m_reserved has unexpected offset % instead of 52", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Buffer.m_reserved)) == 12, "ON_Buffer.m_reserved has unexpected size % instead of 12", size_of(type_of(ON_Buffer.m_reserved)));
        assert(size_of(ON_Buffer) == 64, "ON_Buffer has size % instead of 64", size_of(ON_Buffer));
    }

    {
        instance: ON_3DM_CHUNK;
        assert(((cast(*void)(*instance.m_offset)) - cast(*void)(*instance)) == 0, "ON_3DM_CHUNK.m_offset has unexpected offset % instead of 0", ((cast(*void)(*instance.m_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_offset)) == 8, "ON_3DM_CHUNK.m_offset has unexpected size % instead of 8", size_of(type_of(ON_3DM_CHUNK.m_offset)));
        assert(((cast(*void)(*instance.m_typecode)) - cast(*void)(*instance)) == 8, "ON_3DM_CHUNK.m_typecode has unexpected offset % instead of 8", ((cast(*void)(*instance.m_typecode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_typecode)) == 4, "ON_3DM_CHUNK.m_typecode has unexpected size % instead of 4", size_of(type_of(ON_3DM_CHUNK.m_typecode)));
        assert(((cast(*void)(*instance.m_value)) - cast(*void)(*instance)) == 12, "ON_3DM_CHUNK.m_value has unexpected offset % instead of 12", ((cast(*void)(*instance.m_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_value)) == 4, "ON_3DM_CHUNK.m_value has unexpected size % instead of 4", size_of(type_of(ON_3DM_CHUNK.m_value)));
        assert(((cast(*void)(*instance.m_do_length)) - cast(*void)(*instance)) == 16, "ON_3DM_CHUNK.m_do_length has unexpected offset % instead of 16", ((cast(*void)(*instance.m_do_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_do_length)) == 4, "ON_3DM_CHUNK.m_do_length has unexpected size % instead of 4", size_of(type_of(ON_3DM_CHUNK.m_do_length)));
        assert(((cast(*void)(*instance.m_do_crc16)) - cast(*void)(*instance)) == 20, "ON_3DM_CHUNK.m_do_crc16 has unexpected offset % instead of 20", ((cast(*void)(*instance.m_do_crc16)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_do_crc16)) == 2, "ON_3DM_CHUNK.m_do_crc16 has unexpected size % instead of 2", size_of(type_of(ON_3DM_CHUNK.m_do_crc16)));
        assert(((cast(*void)(*instance.m_crc16)) - cast(*void)(*instance)) == 22, "ON_3DM_CHUNK.m_crc16 has unexpected offset % instead of 22", ((cast(*void)(*instance.m_crc16)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_crc16)) == 2, "ON_3DM_CHUNK.m_crc16 has unexpected size % instead of 2", size_of(type_of(ON_3DM_CHUNK.m_crc16)));
        assert(((cast(*void)(*instance.m_do_crc32)) - cast(*void)(*instance)) == 24, "ON_3DM_CHUNK.m_do_crc32 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_do_crc32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_do_crc32)) == 4, "ON_3DM_CHUNK.m_do_crc32 has unexpected size % instead of 4", size_of(type_of(ON_3DM_CHUNK.m_do_crc32)));
        assert(((cast(*void)(*instance.m_crc32)) - cast(*void)(*instance)) == 28, "ON_3DM_CHUNK.m_crc32 has unexpected offset % instead of 28", ((cast(*void)(*instance.m_crc32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_CHUNK.m_crc32)) == 4, "ON_3DM_CHUNK.m_crc32 has unexpected size % instead of 4", size_of(type_of(ON_3DM_CHUNK.m_crc32)));
        assert(size_of(ON_3DM_CHUNK) == 32, "ON_3DM_CHUNK has size % instead of 32", size_of(ON_3DM_CHUNK));
    }

    {
        instance: ON_3DM_BIG_CHUNK;
        assert(((cast(*void)(*instance.m_start_offset)) - cast(*void)(*instance)) == 0, "ON_3DM_BIG_CHUNK.m_start_offset has unexpected offset % instead of 0", ((cast(*void)(*instance.m_start_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_start_offset)) == 8, "ON_3DM_BIG_CHUNK.m_start_offset has unexpected size % instead of 8", size_of(type_of(ON_3DM_BIG_CHUNK.m_start_offset)));
        assert(((cast(*void)(*instance.m_end_offset)) - cast(*void)(*instance)) == 8, "ON_3DM_BIG_CHUNK.m_end_offset has unexpected offset % instead of 8", ((cast(*void)(*instance.m_end_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_end_offset)) == 8, "ON_3DM_BIG_CHUNK.m_end_offset has unexpected size % instead of 8", size_of(type_of(ON_3DM_BIG_CHUNK.m_end_offset)));
        assert(((cast(*void)(*instance.m_big_value)) - cast(*void)(*instance)) == 16, "ON_3DM_BIG_CHUNK.m_big_value has unexpected offset % instead of 16", ((cast(*void)(*instance.m_big_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_big_value)) == 8, "ON_3DM_BIG_CHUNK.m_big_value has unexpected size % instead of 8", size_of(type_of(ON_3DM_BIG_CHUNK.m_big_value)));
        assert(((cast(*void)(*instance.m_typecode)) - cast(*void)(*instance)) == 24, "ON_3DM_BIG_CHUNK.m_typecode has unexpected offset % instead of 24", ((cast(*void)(*instance.m_typecode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_typecode)) == 4, "ON_3DM_BIG_CHUNK.m_typecode has unexpected size % instead of 4", size_of(type_of(ON_3DM_BIG_CHUNK.m_typecode)));
        assert(((cast(*void)(*instance.m_bLongChunk)) - cast(*void)(*instance)) == 28, "ON_3DM_BIG_CHUNK.m_bLongChunk has unexpected offset % instead of 28", ((cast(*void)(*instance.m_bLongChunk)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_bLongChunk)) == 1, "ON_3DM_BIG_CHUNK.m_bLongChunk has unexpected size % instead of 1", size_of(type_of(ON_3DM_BIG_CHUNK.m_bLongChunk)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 29, "ON_3DM_BIG_CHUNK.m_reserved1 has unexpected offset % instead of 29", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_reserved1)) == 1, "ON_3DM_BIG_CHUNK.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_3DM_BIG_CHUNK.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 30, "ON_3DM_BIG_CHUNK.m_reserved2 has unexpected offset % instead of 30", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_reserved2)) == 1, "ON_3DM_BIG_CHUNK.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_3DM_BIG_CHUNK.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 31, "ON_3DM_BIG_CHUNK.m_reserved3 has unexpected offset % instead of 31", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_reserved3)) == 1, "ON_3DM_BIG_CHUNK.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_3DM_BIG_CHUNK.m_reserved3)));
        assert(((cast(*void)(*instance.m_do_crc16)) - cast(*void)(*instance)) == 32, "ON_3DM_BIG_CHUNK.m_do_crc16 has unexpected offset % instead of 32", ((cast(*void)(*instance.m_do_crc16)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_do_crc16)) == 1, "ON_3DM_BIG_CHUNK.m_do_crc16 has unexpected size % instead of 1", size_of(type_of(ON_3DM_BIG_CHUNK.m_do_crc16)));
        assert(((cast(*void)(*instance.m_do_crc32)) - cast(*void)(*instance)) == 33, "ON_3DM_BIG_CHUNK.m_do_crc32 has unexpected offset % instead of 33", ((cast(*void)(*instance.m_do_crc32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_do_crc32)) == 1, "ON_3DM_BIG_CHUNK.m_do_crc32 has unexpected size % instead of 1", size_of(type_of(ON_3DM_BIG_CHUNK.m_do_crc32)));
        assert(((cast(*void)(*instance.m_crc16)) - cast(*void)(*instance)) == 34, "ON_3DM_BIG_CHUNK.m_crc16 has unexpected offset % instead of 34", ((cast(*void)(*instance.m_crc16)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_crc16)) == 2, "ON_3DM_BIG_CHUNK.m_crc16 has unexpected size % instead of 2", size_of(type_of(ON_3DM_BIG_CHUNK.m_crc16)));
        assert(((cast(*void)(*instance.m_crc32)) - cast(*void)(*instance)) == 36, "ON_3DM_BIG_CHUNK.m_crc32 has unexpected offset % instead of 36", ((cast(*void)(*instance.m_crc32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3DM_BIG_CHUNK.m_crc32)) == 4, "ON_3DM_BIG_CHUNK.m_crc32 has unexpected size % instead of 4", size_of(type_of(ON_3DM_BIG_CHUNK.m_crc32)));
        assert(size_of(ON_3DM_BIG_CHUNK) == 40, "ON_3DM_BIG_CHUNK has size % instead of 40", size_of(ON_3DM_BIG_CHUNK));
    }

    {
        instance: ON_UserDataItemFilter;
        assert(((cast(*void)(*instance.m_application_id)) - cast(*void)(*instance)) == 0, "ON_UserDataItemFilter.m_application_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_application_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserDataItemFilter.m_application_id)) == 16, "ON_UserDataItemFilter.m_application_id has unexpected size % instead of 16", size_of(type_of(ON_UserDataItemFilter.m_application_id)));
        assert(((cast(*void)(*instance.m_item_id)) - cast(*void)(*instance)) == 16, "ON_UserDataItemFilter.m_item_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_item_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserDataItemFilter.m_item_id)) == 16, "ON_UserDataItemFilter.m_item_id has unexpected size % instead of 16", size_of(type_of(ON_UserDataItemFilter.m_item_id)));
        assert(((cast(*void)(*instance.m_precedence)) - cast(*void)(*instance)) == 32, "ON_UserDataItemFilter.m_precedence has unexpected offset % instead of 32", ((cast(*void)(*instance.m_precedence)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserDataItemFilter.m_precedence)) == 4, "ON_UserDataItemFilter.m_precedence has unexpected size % instead of 4", size_of(type_of(ON_UserDataItemFilter.m_precedence)));
        assert(((cast(*void)(*instance.m_bSerialize)) - cast(*void)(*instance)) == 36, "ON_UserDataItemFilter.m_bSerialize has unexpected offset % instead of 36", ((cast(*void)(*instance.m_bSerialize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserDataItemFilter.m_bSerialize)) == 1, "ON_UserDataItemFilter.m_bSerialize has unexpected size % instead of 1", size_of(type_of(ON_UserDataItemFilter.m_bSerialize)));
        assert(size_of(ON_UserDataItemFilter) == 40, "ON_UserDataItemFilter has size % instead of 40", size_of(ON_UserDataItemFilter));
    }

    {
        instance: ON_ComponentManifest;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_ComponentManifest.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifest.m_impl)) == 8, "ON_ComponentManifest.m_impl has unexpected size % instead of 8", size_of(type_of(ON_ComponentManifest.m_impl)));
        assert(size_of(ON_ComponentManifest) == 8, "ON_ComponentManifest has size % instead of 8", size_of(ON_ComponentManifest));
    }

    {
        instance: ON_ComponentManifestItem;
        assert(((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)) == 0, "ON_ComponentManifestItem.m_status_bits has unexpected offset % instead of 0", ((cast(*void)(*instance.m_status_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_status_bits)) == 4, "ON_ComponentManifestItem.m_status_bits has unexpected size % instead of 4", size_of(type_of(ON_ComponentManifestItem.m_status_bits)));
        assert(((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)) == 4, "ON_ComponentManifestItem.m_component_type has unexpected offset % instead of 4", ((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_component_type)) == 1, "ON_ComponentManifestItem.m_component_type has unexpected size % instead of 1", size_of(type_of(ON_ComponentManifestItem.m_component_type)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 5, "ON_ComponentManifestItem.m_reserved1 has unexpected offset % instead of 5", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_reserved1)) == 1, "ON_ComponentManifestItem.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_ComponentManifestItem.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 6, "ON_ComponentManifestItem.m_reserved2 has unexpected offset % instead of 6", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_reserved2)) == 2, "ON_ComponentManifestItem.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_ComponentManifestItem.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 8, "ON_ComponentManifestItem.m_reserved3 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_reserved3)) == 4, "ON_ComponentManifestItem.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_ComponentManifestItem.m_reserved3)));
        assert(((cast(*void)(*instance.m_index)) - cast(*void)(*instance)) == 12, "ON_ComponentManifestItem.m_index has unexpected offset % instead of 12", ((cast(*void)(*instance.m_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_index)) == 4, "ON_ComponentManifestItem.m_index has unexpected size % instead of 4", size_of(type_of(ON_ComponentManifestItem.m_index)));
        assert(((cast(*void)(*instance.m_component_runtime_serial_number)) - cast(*void)(*instance)) == 16, "ON_ComponentManifestItem.m_component_runtime_serial_number has unexpected offset % instead of 16", ((cast(*void)(*instance.m_component_runtime_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_component_runtime_serial_number)) == 8, "ON_ComponentManifestItem.m_component_runtime_serial_number has unexpected size % instead of 8", size_of(type_of(ON_ComponentManifestItem.m_component_runtime_serial_number)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 24, "ON_ComponentManifestItem.m_id has unexpected offset % instead of 24", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_id)) == 16, "ON_ComponentManifestItem.m_id has unexpected size % instead of 16", size_of(type_of(ON_ComponentManifestItem.m_id)));
        assert(((cast(*void)(*instance.m_name_hash)) - cast(*void)(*instance)) == 40, "ON_ComponentManifestItem.m_name_hash has unexpected offset % instead of 40", ((cast(*void)(*instance.m_name_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ComponentManifestItem.m_name_hash)) == 40, "ON_ComponentManifestItem.m_name_hash has unexpected size % instead of 40", size_of(type_of(ON_ComponentManifestItem.m_name_hash)));
        assert(size_of(ON_ComponentManifestItem) == 80, "ON_ComponentManifestItem has size % instead of 80", size_of(ON_ComponentManifestItem));
    }

    {
        instance: ON_ManifestMapItem;
        assert(((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)) == 0, "ON_ManifestMapItem.m_component_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ManifestMapItem.m_component_type)) == 1, "ON_ManifestMapItem.m_component_type has unexpected size % instead of 1", size_of(type_of(ON_ManifestMapItem.m_component_type)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 4, "ON_ManifestMapItem.m_reserved has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ManifestMapItem.m_reserved)) == 4, "ON_ManifestMapItem.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_ManifestMapItem.m_reserved)));
        assert(((cast(*void)(*instance.m_source_index)) - cast(*void)(*instance)) == 8, "ON_ManifestMapItem.m_source_index has unexpected offset % instead of 8", ((cast(*void)(*instance.m_source_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ManifestMapItem.m_source_index)) == 4, "ON_ManifestMapItem.m_source_index has unexpected size % instead of 4", size_of(type_of(ON_ManifestMapItem.m_source_index)));
        assert(((cast(*void)(*instance.m_destination_index)) - cast(*void)(*instance)) == 12, "ON_ManifestMapItem.m_destination_index has unexpected offset % instead of 12", ((cast(*void)(*instance.m_destination_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ManifestMapItem.m_destination_index)) == 4, "ON_ManifestMapItem.m_destination_index has unexpected size % instead of 4", size_of(type_of(ON_ManifestMapItem.m_destination_index)));
        assert(((cast(*void)(*instance.m_source_id)) - cast(*void)(*instance)) == 16, "ON_ManifestMapItem.m_source_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_source_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ManifestMapItem.m_source_id)) == 16, "ON_ManifestMapItem.m_source_id has unexpected size % instead of 16", size_of(type_of(ON_ManifestMapItem.m_source_id)));
        assert(((cast(*void)(*instance.m_destination_id)) - cast(*void)(*instance)) == 32, "ON_ManifestMapItem.m_destination_id has unexpected offset % instead of 32", ((cast(*void)(*instance.m_destination_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ManifestMapItem.m_destination_id)) == 16, "ON_ManifestMapItem.m_destination_id has unexpected size % instead of 16", size_of(type_of(ON_ManifestMapItem.m_destination_id)));
        assert(size_of(ON_ManifestMapItem) == 48, "ON_ManifestMapItem has size % instead of 48", size_of(ON_ManifestMapItem));
    }

    {
        instance: ON_ManifestMap;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_ManifestMap.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ManifestMap.m_impl)) == 8, "ON_ManifestMap.m_impl has unexpected size % instead of 8", size_of(type_of(ON_ManifestMap.m_impl)));
        assert(size_of(ON_ManifestMap) == 8, "ON_ManifestMap has size % instead of 8", size_of(ON_ManifestMap));
    }

    {
        instance: ON_3dmAnnotationContext;
        assert(((cast(*void)(*instance.m_binary_archive)) - cast(*void)(*instance)) == 0, "ON_3dmAnnotationContext.m_binary_archive has unexpected offset % instead of 0", ((cast(*void)(*instance.m_binary_archive)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_binary_archive)) == 8, "ON_3dmAnnotationContext.m_binary_archive has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationContext.m_binary_archive)));
        assert(((cast(*void)(*instance.m_parent_dim_style)) - cast(*void)(*instance)) == 8, "ON_3dmAnnotationContext.m_parent_dim_style has unexpected offset % instead of 8", ((cast(*void)(*instance.m_parent_dim_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_parent_dim_style)) == 8, "ON_3dmAnnotationContext.m_parent_dim_style has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationContext.m_parent_dim_style)));
        assert(((cast(*void)(*instance.m_managed_parent_dim_style)) - cast(*void)(*instance)) == 16, "ON_3dmAnnotationContext.m_managed_parent_dim_style has unexpected offset % instead of 16", ((cast(*void)(*instance.m_managed_parent_dim_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_managed_parent_dim_style)) == 8, "ON_3dmAnnotationContext.m_managed_parent_dim_style has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationContext.m_managed_parent_dim_style)));
        assert(((cast(*void)(*instance.m_override_dim_style)) - cast(*void)(*instance)) == 24, "ON_3dmAnnotationContext.m_override_dim_style has unexpected offset % instead of 24", ((cast(*void)(*instance.m_override_dim_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_override_dim_style)) == 8, "ON_3dmAnnotationContext.m_override_dim_style has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationContext.m_override_dim_style)));
        assert(((cast(*void)(*instance.m_managed_override_dim_style)) - cast(*void)(*instance)) == 32, "ON_3dmAnnotationContext.m_managed_override_dim_style has unexpected offset % instead of 32", ((cast(*void)(*instance.m_managed_override_dim_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_managed_override_dim_style)) == 8, "ON_3dmAnnotationContext.m_managed_override_dim_style has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationContext.m_managed_override_dim_style)));
        assert(((cast(*void)(*instance.m_annotation_settings)) - cast(*void)(*instance)) == 40, "ON_3dmAnnotationContext.m_annotation_settings has unexpected offset % instead of 40", ((cast(*void)(*instance.m_annotation_settings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_annotation_settings)) == 8, "ON_3dmAnnotationContext.m_annotation_settings has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationContext.m_annotation_settings)));
        assert(((cast(*void)(*instance.m_managed_annotation_settings)) - cast(*void)(*instance)) == 48, "ON_3dmAnnotationContext.m_managed_annotation_settings has unexpected offset % instead of 48", ((cast(*void)(*instance.m_managed_annotation_settings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_managed_annotation_settings)) == 8, "ON_3dmAnnotationContext.m_managed_annotation_settings has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationContext.m_managed_annotation_settings)));
        assert(((cast(*void)(*instance.m_view_context)) - cast(*void)(*instance)) == 56, "ON_3dmAnnotationContext.m_view_context has unexpected offset % instead of 56", ((cast(*void)(*instance.m_view_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_view_context)) == 1, "ON_3dmAnnotationContext.m_view_context has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationContext.m_view_context)));
        assert(((cast(*void)(*instance.m_model_length_unit_system)) - cast(*void)(*instance)) == 57, "ON_3dmAnnotationContext.m_model_length_unit_system has unexpected offset % instead of 57", ((cast(*void)(*instance.m_model_length_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_model_length_unit_system)) == 1, "ON_3dmAnnotationContext.m_model_length_unit_system has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationContext.m_model_length_unit_system)));
        assert(((cast(*void)(*instance.m_page_length_unit_system)) - cast(*void)(*instance)) == 58, "ON_3dmAnnotationContext.m_page_length_unit_system has unexpected offset % instead of 58", ((cast(*void)(*instance.m_page_length_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_page_length_unit_system)) == 1, "ON_3dmAnnotationContext.m_page_length_unit_system has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationContext.m_page_length_unit_system)));
        assert(((cast(*void)(*instance.m_V5_3dm_archive_dim_style_index)) - cast(*void)(*instance)) == 60, "ON_3dmAnnotationContext.m_V5_3dm_archive_dim_style_index has unexpected offset % instead of 60", ((cast(*void)(*instance.m_V5_3dm_archive_dim_style_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationContext.m_V5_3dm_archive_dim_style_index)) == 4, "ON_3dmAnnotationContext.m_V5_3dm_archive_dim_style_index has unexpected size % instead of 4", size_of(type_of(ON_3dmAnnotationContext.m_V5_3dm_archive_dim_style_index)));
        assert(size_of(ON_3dmAnnotationContext) == 64, "ON_3dmAnnotationContext has size % instead of 64", size_of(ON_3dmAnnotationContext));
    }

    {
        instance: ON_3dmArchiveTableStatus;
        assert(((cast(*void)(*instance.m_table_type)) - cast(*void)(*instance)) == 0, "ON_3dmArchiveTableStatus.m_table_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_table_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmArchiveTableStatus.m_table_type)) == 4, "ON_3dmArchiveTableStatus.m_table_type has unexpected size % instead of 4", size_of(type_of(ON_3dmArchiveTableStatus.m_table_type)));
        assert(((cast(*void)(*instance.m_item_count)) - cast(*void)(*instance)) == 4, "ON_3dmArchiveTableStatus.m_item_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_item_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmArchiveTableStatus.m_item_count)) == 4, "ON_3dmArchiveTableStatus.m_item_count has unexpected size % instead of 4", size_of(type_of(ON_3dmArchiveTableStatus.m_item_count)));
        assert(((cast(*void)(*instance.m_crc_error_count)) - cast(*void)(*instance)) == 8, "ON_3dmArchiveTableStatus.m_crc_error_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_crc_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmArchiveTableStatus.m_crc_error_count)) == 4, "ON_3dmArchiveTableStatus.m_crc_error_count has unexpected size % instead of 4", size_of(type_of(ON_3dmArchiveTableStatus.m_crc_error_count)));
        assert(((cast(*void)(*instance.m_critical_error_count)) - cast(*void)(*instance)) == 12, "ON_3dmArchiveTableStatus.m_critical_error_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_critical_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmArchiveTableStatus.m_critical_error_count)) == 4, "ON_3dmArchiveTableStatus.m_critical_error_count has unexpected size % instead of 4", size_of(type_of(ON_3dmArchiveTableStatus.m_critical_error_count)));
        assert(((cast(*void)(*instance.m_recoverable_error_count)) - cast(*void)(*instance)) == 16, "ON_3dmArchiveTableStatus.m_recoverable_error_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_recoverable_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmArchiveTableStatus.m_recoverable_error_count)) == 4, "ON_3dmArchiveTableStatus.m_recoverable_error_count has unexpected size % instead of 4", size_of(type_of(ON_3dmArchiveTableStatus.m_recoverable_error_count)));
        assert(((cast(*void)(*instance.m_state)) - cast(*void)(*instance)) == 20, "ON_3dmArchiveTableStatus.m_state has unexpected offset % instead of 20", ((cast(*void)(*instance.m_state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmArchiveTableStatus.m_state)) == 4, "ON_3dmArchiveTableStatus.m_state has unexpected size % instead of 4", size_of(type_of(ON_3dmArchiveTableStatus.m_state)));
        assert(size_of(ON_3dmArchiveTableStatus) == 24, "ON_3dmArchiveTableStatus has size % instead of 24", size_of(ON_3dmArchiveTableStatus));
    }

    {
        instance: ON_BinaryArchive;
        assert(((cast(*void)(*instance.m_3dm_version)) - cast(*void)(*instance)) == 8, "ON_BinaryArchive.m_3dm_version has unexpected offset % instead of 8", ((cast(*void)(*instance.m_3dm_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_version)) == 4, "ON_BinaryArchive.m_3dm_version has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_3dm_version)));
        assert(((cast(*void)(*instance.m_3dm_v1_layer_index)) - cast(*void)(*instance)) == 12, "ON_BinaryArchive.m_3dm_v1_layer_index has unexpected offset % instead of 12", ((cast(*void)(*instance.m_3dm_v1_layer_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_v1_layer_index)) == 4, "ON_BinaryArchive.m_3dm_v1_layer_index has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_3dm_v1_layer_index)));
        assert(((cast(*void)(*instance.m_3dm_v1_material_index)) - cast(*void)(*instance)) == 16, "ON_BinaryArchive.m_3dm_v1_material_index has unexpected offset % instead of 16", ((cast(*void)(*instance.m_3dm_v1_material_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_v1_material_index)) == 4, "ON_BinaryArchive.m_3dm_v1_material_index has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_3dm_v1_material_index)));
        assert(((cast(*void)(*instance.m_3dm_opennurbs_version)) - cast(*void)(*instance)) == 20, "ON_BinaryArchive.m_3dm_opennurbs_version has unexpected offset % instead of 20", ((cast(*void)(*instance.m_3dm_opennurbs_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_opennurbs_version)) == 4, "ON_BinaryArchive.m_3dm_opennurbs_version has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_3dm_opennurbs_version)));
        assert(((cast(*void)(*instance.m_archive_runtime_environment)) - cast(*void)(*instance)) == 24, "ON_BinaryArchive.m_archive_runtime_environment has unexpected offset % instead of 24", ((cast(*void)(*instance.m_archive_runtime_environment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_runtime_environment)) == 1, "ON_BinaryArchive.m_archive_runtime_environment has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_archive_runtime_environment)));
        assert(((cast(*void)(*instance.m_3dm_start_section_offset)) - cast(*void)(*instance)) == 32, "ON_BinaryArchive.m_3dm_start_section_offset has unexpected offset % instead of 32", ((cast(*void)(*instance.m_3dm_start_section_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_start_section_offset)) == 8, "ON_BinaryArchive.m_3dm_start_section_offset has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_3dm_start_section_offset)));
        assert(((cast(*void)(*instance.m_3dm_previous_table)) - cast(*void)(*instance)) == 40, "ON_BinaryArchive.m_3dm_previous_table has unexpected offset % instead of 40", ((cast(*void)(*instance.m_3dm_previous_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_previous_table)) == 4, "ON_BinaryArchive.m_3dm_previous_table has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_3dm_previous_table)));
        assert(((cast(*void)(*instance.m_3dm_active_table)) - cast(*void)(*instance)) == 44, "ON_BinaryArchive.m_3dm_active_table has unexpected offset % instead of 44", ((cast(*void)(*instance.m_3dm_active_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_active_table)) == 4, "ON_BinaryArchive.m_3dm_active_table has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_3dm_active_table)));
        assert(((cast(*void)(*instance.m_3dm_first_failed_table)) - cast(*void)(*instance)) == 48, "ON_BinaryArchive.m_3dm_first_failed_table has unexpected offset % instead of 48", ((cast(*void)(*instance.m_3dm_first_failed_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_first_failed_table)) == 4, "ON_BinaryArchive.m_3dm_first_failed_table has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_3dm_first_failed_table)));
        assert(((cast(*void)(*instance.m_user_data_depth)) - cast(*void)(*instance)) == 52, "ON_BinaryArchive.m_user_data_depth has unexpected offset % instead of 52", ((cast(*void)(*instance.m_user_data_depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_user_data_depth)) == 4, "ON_BinaryArchive.m_user_data_depth has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_user_data_depth)));
        assert(((cast(*void)(*instance.m_3dm_table_status_list)) - cast(*void)(*instance)) == 56, "ON_BinaryArchive.m_3dm_table_status_list has unexpected offset % instead of 56", ((cast(*void)(*instance.m_3dm_table_status_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_table_status_list)) == 8, "ON_BinaryArchive.m_3dm_table_status_list has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_3dm_table_status_list)));
        assert(((cast(*void)(*instance.m_current_positionX)) - cast(*void)(*instance)) == 64, "ON_BinaryArchive.m_current_positionX has unexpected offset % instead of 64", ((cast(*void)(*instance.m_current_positionX)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_current_positionX)) == 8, "ON_BinaryArchive.m_current_positionX has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_current_positionX)));
        assert(((cast(*void)(*instance.m_crc_error_count)) - cast(*void)(*instance)) == 72, "ON_BinaryArchive.m_crc_error_count has unexpected offset % instead of 72", ((cast(*void)(*instance.m_crc_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_crc_error_count)) == 4, "ON_BinaryArchive.m_crc_error_count has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_crc_error_count)));
        assert(((cast(*void)(*instance.m_critical_error_count)) - cast(*void)(*instance)) == 76, "ON_BinaryArchive.m_critical_error_count has unexpected offset % instead of 76", ((cast(*void)(*instance.m_critical_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_critical_error_count)) == 4, "ON_BinaryArchive.m_critical_error_count has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_critical_error_count)));
        assert(((cast(*void)(*instance.m_storage_device_error)) - cast(*void)(*instance)) == 80, "ON_BinaryArchive.m_storage_device_error has unexpected offset % instead of 80", ((cast(*void)(*instance.m_storage_device_error)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_storage_device_error)) == 4, "ON_BinaryArchive.m_storage_device_error has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_storage_device_error)));
        assert(((cast(*void)(*instance.m_error_message_mask)) - cast(*void)(*instance)) == 84, "ON_BinaryArchive.m_error_message_mask has unexpected offset % instead of 84", ((cast(*void)(*instance.m_error_message_mask)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_error_message_mask)) == 4, "ON_BinaryArchive.m_error_message_mask has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_error_message_mask)));
        assert(((cast(*void)(*instance.m_3dm_end_mark_length)) - cast(*void)(*instance)) == 88, "ON_BinaryArchive.m_3dm_end_mark_length has unexpected offset % instead of 88", ((cast(*void)(*instance.m_3dm_end_mark_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_3dm_end_mark_length)) == 8, "ON_BinaryArchive.m_3dm_end_mark_length has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_3dm_end_mark_length)));
        assert(((cast(*void)(*instance.m_chunk)) - cast(*void)(*instance)) == 96, "ON_BinaryArchive.m_chunk has unexpected offset % instead of 96", ((cast(*void)(*instance.m_chunk)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_chunk)) == 24, "ON_BinaryArchive.m_chunk has unexpected size % instead of 24", size_of(type_of(ON_BinaryArchive.m_chunk)));
        assert(((cast(*void)(*instance.m_bDoChunkCRC)) - cast(*void)(*instance)) == 120, "ON_BinaryArchive.m_bDoChunkCRC has unexpected offset % instead of 120", ((cast(*void)(*instance.m_bDoChunkCRC)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bDoChunkCRC)) == 1, "ON_BinaryArchive.m_bDoChunkCRC has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bDoChunkCRC)));
        assert(((cast(*void)(*instance.m_bChunkBoundaryCheck)) - cast(*void)(*instance)) == 121, "ON_BinaryArchive.m_bChunkBoundaryCheck has unexpected offset % instead of 121", ((cast(*void)(*instance.m_bChunkBoundaryCheck)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bChunkBoundaryCheck)) == 1, "ON_BinaryArchive.m_bChunkBoundaryCheck has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bChunkBoundaryCheck)));
        assert(((cast(*void)(*instance.m_compressor)) - cast(*void)(*instance)) == 128, "ON_BinaryArchive.m_compressor has unexpected offset % instead of 128", ((cast(*void)(*instance.m_compressor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_compressor)) == 8, "ON_BinaryArchive.m_compressor has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_compressor)));
        assert(((cast(*void)(*instance.m_endian)) - cast(*void)(*instance)) == 136, "ON_BinaryArchive.m_endian has unexpected offset % instead of 136", ((cast(*void)(*instance.m_endian)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_endian)) == 4, "ON_BinaryArchive.m_endian has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_endian)));
        assert(((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)) == 140, "ON_BinaryArchive.m_mode has unexpected offset % instead of 140", ((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_mode)) == 4, "ON_BinaryArchive.m_mode has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_mode)));
        assert(((cast(*void)(*instance.m_user_data_filter)) - cast(*void)(*instance)) == 144, "ON_BinaryArchive.m_user_data_filter has unexpected offset % instead of 144", ((cast(*void)(*instance.m_user_data_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_user_data_filter)) == 24, "ON_BinaryArchive.m_user_data_filter has unexpected size % instead of 24", size_of(type_of(ON_BinaryArchive.m_user_data_filter)));
        assert(((cast(*void)(*instance.m_save_3dm_render_mesh_flags)) - cast(*void)(*instance)) == 168, "ON_BinaryArchive.m_save_3dm_render_mesh_flags has unexpected offset % instead of 168", ((cast(*void)(*instance.m_save_3dm_render_mesh_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_save_3dm_render_mesh_flags)) == 4, "ON_BinaryArchive.m_save_3dm_render_mesh_flags has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_save_3dm_render_mesh_flags)));
        assert(((cast(*void)(*instance.m_save_3dm_analysis_mesh_flags)) - cast(*void)(*instance)) == 172, "ON_BinaryArchive.m_save_3dm_analysis_mesh_flags has unexpected offset % instead of 172", ((cast(*void)(*instance.m_save_3dm_analysis_mesh_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_save_3dm_analysis_mesh_flags)) == 4, "ON_BinaryArchive.m_save_3dm_analysis_mesh_flags has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_save_3dm_analysis_mesh_flags)));
        assert(((cast(*void)(*instance.m_bSave3dmPreviewImage)) - cast(*void)(*instance)) == 176, "ON_BinaryArchive.m_bSave3dmPreviewImage has unexpected offset % instead of 176", ((cast(*void)(*instance.m_bSave3dmPreviewImage)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bSave3dmPreviewImage)) == 1, "ON_BinaryArchive.m_bSave3dmPreviewImage has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bSave3dmPreviewImage)));
        assert(((cast(*void)(*instance.m_bUseBufferCompression)) - cast(*void)(*instance)) == 177, "ON_BinaryArchive.m_bUseBufferCompression has unexpected offset % instead of 177", ((cast(*void)(*instance.m_bUseBufferCompression)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bUseBufferCompression)) == 1, "ON_BinaryArchive.m_bUseBufferCompression has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bUseBufferCompression)));
        assert(((cast(*void)(*instance.m_bReservedA)) - cast(*void)(*instance)) == 178, "ON_BinaryArchive.m_bReservedA has unexpected offset % instead of 178", ((cast(*void)(*instance.m_bReservedA)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReservedA)) == 1, "ON_BinaryArchive.m_bReservedA has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReservedA)));
        assert(((cast(*void)(*instance.m_bReservedB)) - cast(*void)(*instance)) == 179, "ON_BinaryArchive.m_bReservedB has unexpected offset % instead of 179", ((cast(*void)(*instance.m_bReservedB)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReservedB)) == 1, "ON_BinaryArchive.m_bReservedB has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReservedB)));
        assert(((cast(*void)(*instance.m_bReservedC)) - cast(*void)(*instance)) == 180, "ON_BinaryArchive.m_bReservedC has unexpected offset % instead of 180", ((cast(*void)(*instance.m_bReservedC)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReservedC)) == 1, "ON_BinaryArchive.m_bReservedC has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReservedC)));
        assert(((cast(*void)(*instance.m_bReservedD)) - cast(*void)(*instance)) == 181, "ON_BinaryArchive.m_bReservedD has unexpected offset % instead of 181", ((cast(*void)(*instance.m_bReservedD)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReservedD)) == 1, "ON_BinaryArchive.m_bReservedD has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReservedD)));
        assert(((cast(*void)(*instance.m_bReservedE)) - cast(*void)(*instance)) == 182, "ON_BinaryArchive.m_bReservedE has unexpected offset % instead of 182", ((cast(*void)(*instance.m_bReservedE)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReservedE)) == 1, "ON_BinaryArchive.m_bReservedE has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReservedE)));
        assert(((cast(*void)(*instance.m_bReservedF)) - cast(*void)(*instance)) == 183, "ON_BinaryArchive.m_bReservedF has unexpected offset % instead of 183", ((cast(*void)(*instance.m_bReservedF)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReservedF)) == 1, "ON_BinaryArchive.m_bReservedF has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReservedF)));
        assert(((cast(*void)(*instance.m_manifest)) - cast(*void)(*instance)) == 184, "ON_BinaryArchive.m_manifest has unexpected offset % instead of 184", ((cast(*void)(*instance.m_manifest)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_manifest)) == 8, "ON_BinaryArchive.m_manifest has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_manifest)));
        assert(((cast(*void)(*instance.m_manifest_map)) - cast(*void)(*instance)) == 192, "ON_BinaryArchive.m_manifest_map has unexpected offset % instead of 192", ((cast(*void)(*instance.m_manifest_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_manifest_map)) == 8, "ON_BinaryArchive.m_manifest_map has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_manifest_map)));
        assert(((cast(*void)(*instance.m_bReferencedComponentIndexMapping)) - cast(*void)(*instance)) == 200, "ON_BinaryArchive.m_bReferencedComponentIndexMapping has unexpected offset % instead of 200", ((cast(*void)(*instance.m_bReferencedComponentIndexMapping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReferencedComponentIndexMapping)) == 1, "ON_BinaryArchive.m_bReferencedComponentIndexMapping has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReferencedComponentIndexMapping)));
        assert(((cast(*void)(*instance.m_bReferencedComponentIdMapping)) - cast(*void)(*instance)) == 201, "ON_BinaryArchive.m_bReferencedComponentIdMapping has unexpected offset % instead of 201", ((cast(*void)(*instance.m_bReferencedComponentIdMapping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bReferencedComponentIdMapping)) == 1, "ON_BinaryArchive.m_bReferencedComponentIdMapping has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bReferencedComponentIdMapping)));
        assert(((cast(*void)(*instance.m_archive_file_name)) - cast(*void)(*instance)) == 208, "ON_BinaryArchive.m_archive_file_name has unexpected offset % instead of 208", ((cast(*void)(*instance.m_archive_file_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_file_name)) == 8, "ON_BinaryArchive.m_archive_file_name has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_file_name)));
        assert(((cast(*void)(*instance.m_archive_directory_name)) - cast(*void)(*instance)) == 216, "ON_BinaryArchive.m_archive_directory_name has unexpected offset % instead of 216", ((cast(*void)(*instance.m_archive_directory_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_directory_name)) == 8, "ON_BinaryArchive.m_archive_directory_name has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_directory_name)));
        assert(((cast(*void)(*instance.m_archive_full_path)) - cast(*void)(*instance)) == 224, "ON_BinaryArchive.m_archive_full_path has unexpected offset % instead of 224", ((cast(*void)(*instance.m_archive_full_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_full_path)) == 8, "ON_BinaryArchive.m_archive_full_path has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_full_path)));
        assert(((cast(*void)(*instance.m_archive_saved_as_full_path)) - cast(*void)(*instance)) == 232, "ON_BinaryArchive.m_archive_saved_as_full_path has unexpected offset % instead of 232", ((cast(*void)(*instance.m_archive_saved_as_full_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_saved_as_full_path)) == 8, "ON_BinaryArchive.m_archive_saved_as_full_path has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_saved_as_full_path)));
        assert(((cast(*void)(*instance.m_b3dmArchiveMoved)) - cast(*void)(*instance)) == 240, "ON_BinaryArchive.m_b3dmArchiveMoved has unexpected offset % instead of 240", ((cast(*void)(*instance.m_b3dmArchiveMoved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_b3dmArchiveMoved)) == 1, "ON_BinaryArchive.m_b3dmArchiveMoved has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_b3dmArchiveMoved)));
        assert(((cast(*void)(*instance.m_SetModelComponentSerialNumbers)) - cast(*void)(*instance)) == 241, "ON_BinaryArchive.m_SetModelComponentSerialNumbers has unexpected offset % instead of 241", ((cast(*void)(*instance.m_SetModelComponentSerialNumbers)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_SetModelComponentSerialNumbers)) == 1, "ON_BinaryArchive.m_SetModelComponentSerialNumbers has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_SetModelComponentSerialNumbers)));
        assert(((cast(*void)(*instance.m_bCheckForRemappedIds)) - cast(*void)(*instance)) == 242, "ON_BinaryArchive.m_bCheckForRemappedIds has unexpected offset % instead of 242", ((cast(*void)(*instance.m_bCheckForRemappedIds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bCheckForRemappedIds)) == 1, "ON_BinaryArchive.m_bCheckForRemappedIds has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bCheckForRemappedIds)));
        assert(((cast(*void)(*instance.m_IntentionallyWriteCorrupt3dmStartSection)) - cast(*void)(*instance)) == 243, "ON_BinaryArchive.m_IntentionallyWriteCorrupt3dmStartSection has unexpected offset % instead of 243", ((cast(*void)(*instance.m_IntentionallyWriteCorrupt3dmStartSection)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_IntentionallyWriteCorrupt3dmStartSection)) == 1, "ON_BinaryArchive.m_IntentionallyWriteCorrupt3dmStartSection has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_IntentionallyWriteCorrupt3dmStartSection)));
        assert(((cast(*void)(*instance.m_reservedB)) - cast(*void)(*instance)) == 244, "ON_BinaryArchive.m_reservedB has unexpected offset % instead of 244", ((cast(*void)(*instance.m_reservedB)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_reservedB)) == 1, "ON_BinaryArchive.m_reservedB has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_reservedB)));
        assert(((cast(*void)(*instance.m_model_serial_number)) - cast(*void)(*instance)) == 248, "ON_BinaryArchive.m_model_serial_number has unexpected offset % instead of 248", ((cast(*void)(*instance.m_model_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_model_serial_number)) == 4, "ON_BinaryArchive.m_model_serial_number has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_model_serial_number)));
        assert(((cast(*void)(*instance.m_reference_model_serial_number)) - cast(*void)(*instance)) == 252, "ON_BinaryArchive.m_reference_model_serial_number has unexpected offset % instead of 252", ((cast(*void)(*instance.m_reference_model_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_reference_model_serial_number)) == 4, "ON_BinaryArchive.m_reference_model_serial_number has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_reference_model_serial_number)));
        assert(((cast(*void)(*instance.m_instance_definition_model_serial_number)) - cast(*void)(*instance)) == 256, "ON_BinaryArchive.m_instance_definition_model_serial_number has unexpected offset % instead of 256", ((cast(*void)(*instance.m_instance_definition_model_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_instance_definition_model_serial_number)) == 4, "ON_BinaryArchive.m_instance_definition_model_serial_number has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_instance_definition_model_serial_number)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 260, "ON_BinaryArchive.m_reserved1 has unexpected offset % instead of 260", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_reserved1)) == 4, "ON_BinaryArchive.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 264, "ON_BinaryArchive.m_reserved2 has unexpected offset % instead of 264", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_reserved2)) == 8, "ON_BinaryArchive.m_reserved2 has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_reserved2)));
        assert(((cast(*void)(*instance.m_V3_plugin_id_list)) - cast(*void)(*instance)) == 272, "ON_BinaryArchive.m_V3_plugin_id_list has unexpected offset % instead of 272", ((cast(*void)(*instance.m_V3_plugin_id_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_V3_plugin_id_list)) == 24, "ON_BinaryArchive.m_V3_plugin_id_list has unexpected size % instead of 24", size_of(type_of(ON_BinaryArchive.m_V3_plugin_id_list)));
        assert(((cast(*void)(*instance.m_V1_layer_list)) - cast(*void)(*instance)) == 296, "ON_BinaryArchive.m_V1_layer_list has unexpected offset % instead of 296", ((cast(*void)(*instance.m_V1_layer_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_V1_layer_list)) == 8, "ON_BinaryArchive.m_V1_layer_list has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_V1_layer_list)));
        assert(((cast(*void)(*instance.m_annotation_context)) - cast(*void)(*instance)) == 304, "ON_BinaryArchive.m_annotation_context has unexpected offset % instead of 304", ((cast(*void)(*instance.m_annotation_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_annotation_context)) == 64, "ON_BinaryArchive.m_annotation_context has unexpected size % instead of 64", size_of(type_of(ON_BinaryArchive.m_annotation_context)));
        assert(((cast(*void)(*instance.m_archive_text_style_table)) - cast(*void)(*instance)) == 368, "ON_BinaryArchive.m_archive_text_style_table has unexpected offset % instead of 368", ((cast(*void)(*instance.m_archive_text_style_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_text_style_table)) == 24, "ON_BinaryArchive.m_archive_text_style_table has unexpected size % instead of 24", size_of(type_of(ON_BinaryArchive.m_archive_text_style_table)));
        assert(((cast(*void)(*instance.m_text_style_to_dim_style_archive_index_map)) - cast(*void)(*instance)) == 392, "ON_BinaryArchive.m_text_style_to_dim_style_archive_index_map has unexpected offset % instead of 392", ((cast(*void)(*instance.m_text_style_to_dim_style_archive_index_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_text_style_to_dim_style_archive_index_map)) == 24, "ON_BinaryArchive.m_text_style_to_dim_style_archive_index_map has unexpected size % instead of 24", size_of(type_of(ON_BinaryArchive.m_text_style_to_dim_style_archive_index_map)));
        assert(((cast(*void)(*instance.m_archive_dim_style_table)) - cast(*void)(*instance)) == 416, "ON_BinaryArchive.m_archive_dim_style_table has unexpected offset % instead of 416", ((cast(*void)(*instance.m_archive_dim_style_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_dim_style_table)) == 24, "ON_BinaryArchive.m_archive_dim_style_table has unexpected size % instead of 24", size_of(type_of(ON_BinaryArchive.m_archive_dim_style_table)));
        assert(((cast(*void)(*instance.m_DELETE_ME_archive_dim_style_overrides)) - cast(*void)(*instance)) == 440, "ON_BinaryArchive.m_DELETE_ME_archive_dim_style_overrides has unexpected offset % instead of 440", ((cast(*void)(*instance.m_DELETE_ME_archive_dim_style_overrides)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_DELETE_ME_archive_dim_style_overrides)) == 24, "ON_BinaryArchive.m_DELETE_ME_archive_dim_style_overrides has unexpected size % instead of 24", size_of(type_of(ON_BinaryArchive.m_DELETE_ME_archive_dim_style_overrides)));
        assert(((cast(*void)(*instance.m_bLegacyOverrideDimStylesInArchive)) - cast(*void)(*instance)) == 464, "ON_BinaryArchive.m_bLegacyOverrideDimStylesInArchive has unexpected offset % instead of 464", ((cast(*void)(*instance.m_bLegacyOverrideDimStylesInArchive)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_bLegacyOverrideDimStylesInArchive)) == 1, "ON_BinaryArchive.m_bLegacyOverrideDimStylesInArchive has unexpected size % instead of 1", size_of(type_of(ON_BinaryArchive.m_bLegacyOverrideDimStylesInArchive)));
        assert(((cast(*void)(*instance.m_archive_current_dim_style)) - cast(*void)(*instance)) == 472, "ON_BinaryArchive.m_archive_current_dim_style has unexpected offset % instead of 472", ((cast(*void)(*instance.m_archive_current_dim_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_current_dim_style)) == 8, "ON_BinaryArchive.m_archive_current_dim_style has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_current_dim_style)));
        assert(((cast(*void)(*instance.m_archive_dim_style_table_status)) - cast(*void)(*instance)) == 480, "ON_BinaryArchive.m_archive_dim_style_table_status has unexpected offset % instead of 480", ((cast(*void)(*instance.m_archive_dim_style_table_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_dim_style_table_status)) == 4, "ON_BinaryArchive.m_archive_dim_style_table_status has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_archive_dim_style_table_status)));
        assert(((cast(*void)(*instance.m_archive_dim_style_table_read_index)) - cast(*void)(*instance)) == 484, "ON_BinaryArchive.m_archive_dim_style_table_read_index has unexpected offset % instead of 484", ((cast(*void)(*instance.m_archive_dim_style_table_read_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_dim_style_table_read_index)) == 4, "ON_BinaryArchive.m_archive_dim_style_table_read_index has unexpected size % instead of 4", size_of(type_of(ON_BinaryArchive.m_archive_dim_style_table_read_index)));
        assert(((cast(*void)(*instance.m_archive_3dm_start_section_comment)) - cast(*void)(*instance)) == 488, "ON_BinaryArchive.m_archive_3dm_start_section_comment has unexpected offset % instead of 488", ((cast(*void)(*instance.m_archive_3dm_start_section_comment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_3dm_start_section_comment)) == 8, "ON_BinaryArchive.m_archive_3dm_start_section_comment has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_3dm_start_section_comment)));
        assert(((cast(*void)(*instance.m_archive_3dm_properties)) - cast(*void)(*instance)) == 496, "ON_BinaryArchive.m_archive_3dm_properties has unexpected offset % instead of 496", ((cast(*void)(*instance.m_archive_3dm_properties)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_3dm_properties)) == 8, "ON_BinaryArchive.m_archive_3dm_properties has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_3dm_properties)));
        assert(((cast(*void)(*instance.m_archive_3dm_settings)) - cast(*void)(*instance)) == 504, "ON_BinaryArchive.m_archive_3dm_settings has unexpected offset % instead of 504", ((cast(*void)(*instance.m_archive_3dm_settings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchive.m_archive_3dm_settings)) == 8, "ON_BinaryArchive.m_archive_3dm_settings has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchive.m_archive_3dm_settings)));
        assert(size_of(ON_BinaryArchive) == 512, "ON_BinaryArchive has size % instead of 512", size_of(ON_BinaryArchive));
    }

    {
        instance: ON_3dmGoo;
        assert(((cast(*void)(*instance.m_typecode)) - cast(*void)(*instance)) == 0, "ON_3dmGoo.m_typecode has unexpected offset % instead of 0", ((cast(*void)(*instance.m_typecode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmGoo.m_typecode)) == 4, "ON_3dmGoo.m_typecode has unexpected size % instead of 4", size_of(type_of(ON_3dmGoo.m_typecode)));
        assert(((cast(*void)(*instance.m_value)) - cast(*void)(*instance)) == 4, "ON_3dmGoo.m_value has unexpected offset % instead of 4", ((cast(*void)(*instance.m_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmGoo.m_value)) == 4, "ON_3dmGoo.m_value has unexpected size % instead of 4", size_of(type_of(ON_3dmGoo.m_value)));
        assert(((cast(*void)(*instance.m_goo)) - cast(*void)(*instance)) == 8, "ON_3dmGoo.m_goo has unexpected offset % instead of 8", ((cast(*void)(*instance.m_goo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmGoo.m_goo)) == 8, "ON_3dmGoo.m_goo has unexpected size % instead of 8", size_of(type_of(ON_3dmGoo.m_goo)));
        assert(((cast(*void)(*instance.m_next_goo)) - cast(*void)(*instance)) == 16, "ON_3dmGoo.m_next_goo has unexpected offset % instead of 16", ((cast(*void)(*instance.m_next_goo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmGoo.m_next_goo)) == 8, "ON_3dmGoo.m_next_goo has unexpected size % instead of 8", size_of(type_of(ON_3dmGoo.m_next_goo)));
        assert(((cast(*void)(*instance.m_prev_goo)) - cast(*void)(*instance)) == 24, "ON_3dmGoo.m_prev_goo has unexpected offset % instead of 24", ((cast(*void)(*instance.m_prev_goo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmGoo.m_prev_goo)) == 8, "ON_3dmGoo.m_prev_goo has unexpected size % instead of 8", size_of(type_of(ON_3dmGoo.m_prev_goo)));
        assert(size_of(ON_3dmGoo) == 32, "ON_3dmGoo has size % instead of 32", size_of(ON_3dmGoo));
    }

    {
        instance: ON_BinaryFile;
        assert(((cast(*void)(*instance.m_fp)) - cast(*void)(*instance)) == 512, "ON_BinaryFile.m_fp has unexpected offset % instead of 512", ((cast(*void)(*instance.m_fp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryFile.m_fp)) == 8, "ON_BinaryFile.m_fp has unexpected size % instead of 8", size_of(type_of(ON_BinaryFile.m_fp)));
        assert(((cast(*void)(*instance.m_bCloseFileInDestructor)) - cast(*void)(*instance)) == 520, "ON_BinaryFile.m_bCloseFileInDestructor has unexpected offset % instead of 520", ((cast(*void)(*instance.m_bCloseFileInDestructor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryFile.m_bCloseFileInDestructor)) == 1, "ON_BinaryFile.m_bCloseFileInDestructor has unexpected size % instead of 1", size_of(type_of(ON_BinaryFile.m_bCloseFileInDestructor)));
        assert(((cast(*void)(*instance.m_memory_buffer_capacity)) - cast(*void)(*instance)) == 528, "ON_BinaryFile.m_memory_buffer_capacity has unexpected offset % instead of 528", ((cast(*void)(*instance.m_memory_buffer_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryFile.m_memory_buffer_capacity)) == 8, "ON_BinaryFile.m_memory_buffer_capacity has unexpected size % instead of 8", size_of(type_of(ON_BinaryFile.m_memory_buffer_capacity)));
        assert(((cast(*void)(*instance.m_memory_buffer_size)) - cast(*void)(*instance)) == 536, "ON_BinaryFile.m_memory_buffer_size has unexpected offset % instead of 536", ((cast(*void)(*instance.m_memory_buffer_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryFile.m_memory_buffer_size)) == 8, "ON_BinaryFile.m_memory_buffer_size has unexpected size % instead of 8", size_of(type_of(ON_BinaryFile.m_memory_buffer_size)));
        assert(((cast(*void)(*instance.m_memory_buffer_ptr)) - cast(*void)(*instance)) == 544, "ON_BinaryFile.m_memory_buffer_ptr has unexpected offset % instead of 544", ((cast(*void)(*instance.m_memory_buffer_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryFile.m_memory_buffer_ptr)) == 8, "ON_BinaryFile.m_memory_buffer_ptr has unexpected size % instead of 8", size_of(type_of(ON_BinaryFile.m_memory_buffer_ptr)));
        assert(((cast(*void)(*instance.m_memory_buffer)) - cast(*void)(*instance)) == 552, "ON_BinaryFile.m_memory_buffer has unexpected offset % instead of 552", ((cast(*void)(*instance.m_memory_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryFile.m_memory_buffer)) == 8, "ON_BinaryFile.m_memory_buffer has unexpected size % instead of 8", size_of(type_of(ON_BinaryFile.m_memory_buffer)));
        assert(size_of(ON_BinaryFile) == 560, "ON_BinaryFile has size % instead of 560", size_of(ON_BinaryFile));
    }

    {
        instance: ON_BinaryArchiveBuffer;
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 512, "ON_BinaryArchiveBuffer.m_buffer has unexpected offset % instead of 512", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BinaryArchiveBuffer.m_buffer)) == 8, "ON_BinaryArchiveBuffer.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_BinaryArchiveBuffer.m_buffer)));
        assert(size_of(ON_BinaryArchiveBuffer) == 520, "ON_BinaryArchiveBuffer has size % instead of 520", size_of(ON_BinaryArchiveBuffer));
    }

    {
        instance: ON_Read3dmBufferArchive;
        assert(((cast(*void)(*instance.m_p)) - cast(*void)(*instance)) == 512, "ON_Read3dmBufferArchive.m_p has unexpected offset % instead of 512", ((cast(*void)(*instance.m_p)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_p)) == 8, "ON_Read3dmBufferArchive.m_p has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_p)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 520, "ON_Read3dmBufferArchive.m_buffer has unexpected offset % instead of 520", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_buffer)) == 8, "ON_Read3dmBufferArchive.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_buffer)));
        assert(((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)) == 528, "ON_Read3dmBufferArchive.m_sizeof_buffer has unexpected offset % instead of 528", ((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_sizeof_buffer)) == 8, "ON_Read3dmBufferArchive.m_sizeof_buffer has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_sizeof_buffer)));
        assert(((cast(*void)(*instance.m_buffer_position)) - cast(*void)(*instance)) == 536, "ON_Read3dmBufferArchive.m_buffer_position has unexpected offset % instead of 536", ((cast(*void)(*instance.m_buffer_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_buffer_position)) == 8, "ON_Read3dmBufferArchive.m_buffer_position has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_buffer_position)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 544, "ON_Read3dmBufferArchive.m_reserved1 has unexpected offset % instead of 544", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_reserved1)) == 8, "ON_Read3dmBufferArchive.m_reserved1 has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 552, "ON_Read3dmBufferArchive.m_reserved2 has unexpected offset % instead of 552", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_reserved2)) == 8, "ON_Read3dmBufferArchive.m_reserved2 has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 560, "ON_Read3dmBufferArchive.m_reserved3 has unexpected offset % instead of 560", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_reserved3)) == 8, "ON_Read3dmBufferArchive.m_reserved3 has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 568, "ON_Read3dmBufferArchive.m_reserved4 has unexpected offset % instead of 568", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Read3dmBufferArchive.m_reserved4)) == 8, "ON_Read3dmBufferArchive.m_reserved4 has unexpected size % instead of 8", size_of(type_of(ON_Read3dmBufferArchive.m_reserved4)));
        assert(size_of(ON_Read3dmBufferArchive) == 576, "ON_Read3dmBufferArchive has size % instead of 576", size_of(ON_Read3dmBufferArchive));
    }

    {
        instance: ON_Write3dmBufferArchive;
        assert(((cast(*void)(*instance.m_p)) - cast(*void)(*instance)) == 512, "ON_Write3dmBufferArchive.m_p has unexpected offset % instead of 512", ((cast(*void)(*instance.m_p)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_p)) == 8, "ON_Write3dmBufferArchive.m_p has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_p)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 520, "ON_Write3dmBufferArchive.m_buffer has unexpected offset % instead of 520", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_buffer)) == 8, "ON_Write3dmBufferArchive.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_buffer)));
        assert(((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)) == 528, "ON_Write3dmBufferArchive.m_sizeof_buffer has unexpected offset % instead of 528", ((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_sizeof_buffer)) == 8, "ON_Write3dmBufferArchive.m_sizeof_buffer has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_sizeof_buffer)));
        assert(((cast(*void)(*instance.m_max_sizeof_buffer)) - cast(*void)(*instance)) == 536, "ON_Write3dmBufferArchive.m_max_sizeof_buffer has unexpected offset % instead of 536", ((cast(*void)(*instance.m_max_sizeof_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_max_sizeof_buffer)) == 8, "ON_Write3dmBufferArchive.m_max_sizeof_buffer has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_max_sizeof_buffer)));
        assert(((cast(*void)(*instance.m_sizeof_archive)) - cast(*void)(*instance)) == 544, "ON_Write3dmBufferArchive.m_sizeof_archive has unexpected offset % instead of 544", ((cast(*void)(*instance.m_sizeof_archive)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_sizeof_archive)) == 8, "ON_Write3dmBufferArchive.m_sizeof_archive has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_sizeof_archive)));
        assert(((cast(*void)(*instance.m_buffer_position)) - cast(*void)(*instance)) == 552, "ON_Write3dmBufferArchive.m_buffer_position has unexpected offset % instead of 552", ((cast(*void)(*instance.m_buffer_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_buffer_position)) == 8, "ON_Write3dmBufferArchive.m_buffer_position has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_buffer_position)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 560, "ON_Write3dmBufferArchive.m_reserved1 has unexpected offset % instead of 560", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_reserved1)) == 8, "ON_Write3dmBufferArchive.m_reserved1 has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 568, "ON_Write3dmBufferArchive.m_reserved2 has unexpected offset % instead of 568", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_reserved2)) == 8, "ON_Write3dmBufferArchive.m_reserved2 has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 576, "ON_Write3dmBufferArchive.m_reserved3 has unexpected offset % instead of 576", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_reserved3)) == 8, "ON_Write3dmBufferArchive.m_reserved3 has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 584, "ON_Write3dmBufferArchive.m_reserved4 has unexpected offset % instead of 584", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Write3dmBufferArchive.m_reserved4)) == 8, "ON_Write3dmBufferArchive.m_reserved4 has unexpected size % instead of 8", size_of(type_of(ON_Write3dmBufferArchive.m_reserved4)));
        assert(size_of(ON_Write3dmBufferArchive) == 592, "ON_Write3dmBufferArchive has size % instead of 592", size_of(ON_Write3dmBufferArchive));
    }

    {
        instance: ON_DebugWriteArchive;
        assert(((cast(*void)(*instance.m_archive)) - cast(*void)(*instance)) == 0, "ON_DebugWriteArchive.m_archive has unexpected offset % instead of 0", ((cast(*void)(*instance.m_archive)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DebugWriteArchive.m_archive)) == 8, "ON_DebugWriteArchive.m_archive has unexpected size % instead of 8", size_of(type_of(ON_DebugWriteArchive.m_archive)));
        assert(((cast(*void)(*instance.m_fp)) - cast(*void)(*instance)) == 8, "ON_DebugWriteArchive.m_fp has unexpected offset % instead of 8", ((cast(*void)(*instance.m_fp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DebugWriteArchive.m_fp)) == 8, "ON_DebugWriteArchive.m_fp has unexpected size % instead of 8", size_of(type_of(ON_DebugWriteArchive.m_fp)));
        assert(((cast(*void)(*instance.m_N)) - cast(*void)(*instance)) == 16, "ON_DebugWriteArchive.m_N has unexpected offset % instead of 16", ((cast(*void)(*instance.m_N)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DebugWriteArchive.m_N)) == 4, "ON_DebugWriteArchive.m_N has unexpected size % instead of 4", size_of(type_of(ON_DebugWriteArchive.m_N)));
        assert(((cast(*void)(*instance.m_file_path)) - cast(*void)(*instance)) == 24, "ON_DebugWriteArchive.m_file_path has unexpected offset % instead of 24", ((cast(*void)(*instance.m_file_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DebugWriteArchive.m_file_path)) == 8, "ON_DebugWriteArchive.m_file_path has unexpected size % instead of 8", size_of(type_of(ON_DebugWriteArchive.m_file_path)));
        assert(size_of(ON_DebugWriteArchive) == 32, "ON_DebugWriteArchive has size % instead of 32", size_of(ON_DebugWriteArchive));
    }

    {
        instance: ON_ModelGeometryComponent;
        assert(((cast(*void)(*instance.m_geometry_sp)) - cast(*void)(*instance)) == 144, "ON_ModelGeometryComponent.m_geometry_sp has unexpected offset % instead of 144", ((cast(*void)(*instance.m_geometry_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelGeometryComponent.m_geometry_sp)) == 16, "ON_ModelGeometryComponent.m_geometry_sp has unexpected size % instead of 16", size_of(type_of(ON_ModelGeometryComponent.m_geometry_sp)));
        assert(((cast(*void)(*instance.m_attributes_sp)) - cast(*void)(*instance)) == 160, "ON_ModelGeometryComponent.m_attributes_sp has unexpected offset % instead of 160", ((cast(*void)(*instance.m_attributes_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ModelGeometryComponent.m_attributes_sp)) == 16, "ON_ModelGeometryComponent.m_attributes_sp has unexpected size % instead of 16", size_of(type_of(ON_ModelGeometryComponent.m_attributes_sp)));
        assert(size_of(ON_ModelGeometryComponent) == 176, "ON_ModelGeometryComponent has size % instead of 176", size_of(ON_ModelGeometryComponent));
    }

    {
        instance: ON_Arc;
        assert(((cast(*void)(*instance.m_angle)) - cast(*void)(*instance)) == 136, "ON_Arc.m_angle has unexpected offset % instead of 136", ((cast(*void)(*instance.m_angle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Arc.m_angle)) == 16, "ON_Arc.m_angle has unexpected size % instead of 16", size_of(type_of(ON_Arc.m_angle)));
        assert(size_of(ON_Arc) == 152, "ON_Arc has size % instead of 152", size_of(ON_Arc));
    }

    {
        instance: ON_UserData;
        assert(((cast(*void)(*instance.m_userdata_uuid)) - cast(*void)(*instance)) == 16, "ON_UserData.m_userdata_uuid has unexpected offset % instead of 16", ((cast(*void)(*instance.m_userdata_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserData.m_userdata_uuid)) == 16, "ON_UserData.m_userdata_uuid has unexpected size % instead of 16", size_of(type_of(ON_UserData.m_userdata_uuid)));
        assert(((cast(*void)(*instance.m_application_uuid)) - cast(*void)(*instance)) == 32, "ON_UserData.m_application_uuid has unexpected offset % instead of 32", ((cast(*void)(*instance.m_application_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserData.m_application_uuid)) == 16, "ON_UserData.m_application_uuid has unexpected size % instead of 16", size_of(type_of(ON_UserData.m_application_uuid)));
        assert(((cast(*void)(*instance.m_userdata_copycount)) - cast(*void)(*instance)) == 48, "ON_UserData.m_userdata_copycount has unexpected offset % instead of 48", ((cast(*void)(*instance.m_userdata_copycount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserData.m_userdata_copycount)) == 4, "ON_UserData.m_userdata_copycount has unexpected size % instead of 4", size_of(type_of(ON_UserData.m_userdata_copycount)));
        assert(((cast(*void)(*instance.m_userdata_xform)) - cast(*void)(*instance)) == 56, "ON_UserData.m_userdata_xform has unexpected offset % instead of 56", ((cast(*void)(*instance.m_userdata_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserData.m_userdata_xform)) == 128, "ON_UserData.m_userdata_xform has unexpected size % instead of 128", size_of(type_of(ON_UserData.m_userdata_xform)));
        assert(((cast(*void)(*instance.m_userdata_owner)) - cast(*void)(*instance)) == 184, "ON_UserData.m_userdata_owner has unexpected offset % instead of 184", ((cast(*void)(*instance.m_userdata_owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserData.m_userdata_owner)) == 8, "ON_UserData.m_userdata_owner has unexpected size % instead of 8", size_of(type_of(ON_UserData.m_userdata_owner)));
        assert(((cast(*void)(*instance.m_userdata_next)) - cast(*void)(*instance)) == 192, "ON_UserData.m_userdata_next has unexpected offset % instead of 192", ((cast(*void)(*instance.m_userdata_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserData.m_userdata_next)) == 8, "ON_UserData.m_userdata_next has unexpected size % instead of 8", size_of(type_of(ON_UserData.m_userdata_next)));
        assert(size_of(ON_UserData) == 200, "ON_UserData has size % instead of 200", size_of(ON_UserData));
    }

    {
        instance: ON_UnknownUserData;
        assert(((cast(*void)(*instance.m_unknownclass_uuid)) - cast(*void)(*instance)) == 200, "ON_UnknownUserData.m_unknownclass_uuid has unexpected offset % instead of 200", ((cast(*void)(*instance.m_unknownclass_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnknownUserData.m_unknownclass_uuid)) == 16, "ON_UnknownUserData.m_unknownclass_uuid has unexpected size % instead of 16", size_of(type_of(ON_UnknownUserData.m_unknownclass_uuid)));
        assert(((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)) == 216, "ON_UnknownUserData.m_sizeof_buffer has unexpected offset % instead of 216", ((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnknownUserData.m_sizeof_buffer)) == 4, "ON_UnknownUserData.m_sizeof_buffer has unexpected size % instead of 4", size_of(type_of(ON_UnknownUserData.m_sizeof_buffer)));
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 224, "ON_UnknownUserData.m_buffer has unexpected offset % instead of 224", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnknownUserData.m_buffer)) == 8, "ON_UnknownUserData.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_UnknownUserData.m_buffer)));
        assert(((cast(*void)(*instance.m_3dm_version)) - cast(*void)(*instance)) == 232, "ON_UnknownUserData.m_3dm_version has unexpected offset % instead of 232", ((cast(*void)(*instance.m_3dm_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnknownUserData.m_3dm_version)) == 4, "ON_UnknownUserData.m_3dm_version has unexpected size % instead of 4", size_of(type_of(ON_UnknownUserData.m_3dm_version)));
        assert(((cast(*void)(*instance.m_3dm_opennurbs_version_number)) - cast(*void)(*instance)) == 236, "ON_UnknownUserData.m_3dm_opennurbs_version_number has unexpected offset % instead of 236", ((cast(*void)(*instance.m_3dm_opennurbs_version_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UnknownUserData.m_3dm_opennurbs_version_number)) == 4, "ON_UnknownUserData.m_3dm_opennurbs_version_number has unexpected size % instead of 4", size_of(type_of(ON_UnknownUserData.m_3dm_opennurbs_version_number)));
        assert(size_of(ON_UnknownUserData) == 240, "ON_UnknownUserData has size % instead of 240", size_of(ON_UnknownUserData));
    }

    {
        instance: ON_ObsoleteUserData;
        assert(((cast(*void)(*instance.m_archive_class_uuid)) - cast(*void)(*instance)) == 200, "ON_ObsoleteUserData.m_archive_class_uuid has unexpected offset % instead of 200", ((cast(*void)(*instance.m_archive_class_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObsoleteUserData.m_archive_class_uuid)) == 16, "ON_ObsoleteUserData.m_archive_class_uuid has unexpected size % instead of 16", size_of(type_of(ON_ObsoleteUserData.m_archive_class_uuid)));
        assert(size_of(ON_ObsoleteUserData) == 216, "ON_ObsoleteUserData has size % instead of 216", size_of(ON_ObsoleteUserData));
    }

    {
        instance: ON_RdkMaterialInstanceIdObsoleteUserData;
        assert(((cast(*void)(*instance.m_rdk_material_instance_id)) - cast(*void)(*instance)) == 216, "ON_RdkMaterialInstanceIdObsoleteUserData.m_rdk_material_instance_id has unexpected offset % instead of 216", ((cast(*void)(*instance.m_rdk_material_instance_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RdkMaterialInstanceIdObsoleteUserData.m_rdk_material_instance_id)) == 16, "ON_RdkMaterialInstanceIdObsoleteUserData.m_rdk_material_instance_id has unexpected size % instead of 16", size_of(type_of(ON_RdkMaterialInstanceIdObsoleteUserData.m_rdk_material_instance_id)));
        assert(size_of(ON_RdkMaterialInstanceIdObsoleteUserData) == 232, "ON_RdkMaterialInstanceIdObsoleteUserData has size % instead of 232", size_of(ON_RdkMaterialInstanceIdObsoleteUserData));
    }

    {
        instance: ON_UserStringList;
        assert(((cast(*void)(*instance.m_e)) - cast(*void)(*instance)) == 200, "ON_UserStringList.m_e has unexpected offset % instead of 200", ((cast(*void)(*instance.m_e)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_UserStringList.m_e)) == 24, "ON_UserStringList.m_e has unexpected size % instead of 24", size_of(type_of(ON_UserStringList.m_e)));
        assert(size_of(ON_UserStringList) == 224, "ON_UserStringList has size % instead of 224", size_of(ON_UserStringList));
    }

    assert(size_of(ON_UserDataHolder) == 16, "ON_UserDataHolder has size % instead of 16", size_of(ON_UserDataHolder));

    assert(size_of(ON_DocumentUserStringList) == 16, "ON_DocumentUserStringList has size % instead of 16", size_of(ON_DocumentUserStringList));

    assert(size_of(ON_Geometry) == 16, "ON_Geometry has size % instead of 16", size_of(ON_Geometry));

    {
        instance: ON_MeshCurveParameters;
        assert(((cast(*void)(*instance.m_main_seg_count)) - cast(*void)(*instance)) == 0, "ON_MeshCurveParameters.m_main_seg_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_main_seg_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_main_seg_count)) == 4, "ON_MeshCurveParameters.m_main_seg_count has unexpected size % instead of 4", size_of(type_of(ON_MeshCurveParameters.m_main_seg_count)));
        assert(((cast(*void)(*instance.m_sub_seg_count)) - cast(*void)(*instance)) == 4, "ON_MeshCurveParameters.m_sub_seg_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_sub_seg_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_sub_seg_count)) == 4, "ON_MeshCurveParameters.m_sub_seg_count has unexpected size % instead of 4", size_of(type_of(ON_MeshCurveParameters.m_sub_seg_count)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 8, "ON_MeshCurveParameters.m_reserved1 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_reserved1)) == 4, "ON_MeshCurveParameters.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_MeshCurveParameters.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 12, "ON_MeshCurveParameters.m_reserved2 has unexpected offset % instead of 12", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_reserved2)) == 4, "ON_MeshCurveParameters.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_MeshCurveParameters.m_reserved2)));
        assert(((cast(*void)(*instance.m_max_ang_radians)) - cast(*void)(*instance)) == 16, "ON_MeshCurveParameters.m_max_ang_radians has unexpected offset % instead of 16", ((cast(*void)(*instance.m_max_ang_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_max_ang_radians)) == 8, "ON_MeshCurveParameters.m_max_ang_radians has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_max_ang_radians)));
        assert(((cast(*void)(*instance.m_max_chr)) - cast(*void)(*instance)) == 24, "ON_MeshCurveParameters.m_max_chr has unexpected offset % instead of 24", ((cast(*void)(*instance.m_max_chr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_max_chr)) == 8, "ON_MeshCurveParameters.m_max_chr has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_max_chr)));
        assert(((cast(*void)(*instance.m_max_aspect)) - cast(*void)(*instance)) == 32, "ON_MeshCurveParameters.m_max_aspect has unexpected offset % instead of 32", ((cast(*void)(*instance.m_max_aspect)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_max_aspect)) == 8, "ON_MeshCurveParameters.m_max_aspect has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_max_aspect)));
        assert(((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)) == 40, "ON_MeshCurveParameters.m_tolerance has unexpected offset % instead of 40", ((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_tolerance)) == 8, "ON_MeshCurveParameters.m_tolerance has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_tolerance)));
        assert(((cast(*void)(*instance.m_min_edge_length)) - cast(*void)(*instance)) == 48, "ON_MeshCurveParameters.m_min_edge_length has unexpected offset % instead of 48", ((cast(*void)(*instance.m_min_edge_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_min_edge_length)) == 8, "ON_MeshCurveParameters.m_min_edge_length has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_min_edge_length)));
        assert(((cast(*void)(*instance.m_max_edge_length)) - cast(*void)(*instance)) == 56, "ON_MeshCurveParameters.m_max_edge_length has unexpected offset % instead of 56", ((cast(*void)(*instance.m_max_edge_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_max_edge_length)) == 8, "ON_MeshCurveParameters.m_max_edge_length has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_max_edge_length)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 64, "ON_MeshCurveParameters.m_reserved3 has unexpected offset % instead of 64", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_reserved3)) == 8, "ON_MeshCurveParameters.m_reserved3 has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 72, "ON_MeshCurveParameters.m_reserved4 has unexpected offset % instead of 72", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurveParameters.m_reserved4)) == 8, "ON_MeshCurveParameters.m_reserved4 has unexpected size % instead of 8", size_of(type_of(ON_MeshCurveParameters.m_reserved4)));
        assert(size_of(ON_MeshCurveParameters) == 80, "ON_MeshCurveParameters has size % instead of 80", size_of(ON_MeshCurveParameters));
    }

    assert(size_of(ON_Curve) == 16, "ON_Curve has size % instead of 16", size_of(ON_Curve));

    assert(size_of(ON_CurveArray) == 24, "ON_CurveArray has size % instead of 24", size_of(ON_CurveArray));

    assert(size_of(ON_Surface) == 16, "ON_Surface has size % instead of 16", size_of(ON_Surface));

    {
        instance: ON_SurfaceProperties;
        assert(((cast(*void)(*instance.m_bIsSet)) - cast(*void)(*instance)) == 0, "ON_SurfaceProperties.m_bIsSet has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bIsSet)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_bIsSet)) == 1, "ON_SurfaceProperties.m_bIsSet has unexpected size % instead of 1", size_of(type_of(ON_SurfaceProperties.m_bIsSet)));
        assert(((cast(*void)(*instance.m_bHasSingularity)) - cast(*void)(*instance)) == 1, "ON_SurfaceProperties.m_bHasSingularity has unexpected offset % instead of 1", ((cast(*void)(*instance.m_bHasSingularity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_bHasSingularity)) == 1, "ON_SurfaceProperties.m_bHasSingularity has unexpected size % instead of 1", size_of(type_of(ON_SurfaceProperties.m_bHasSingularity)));
        assert(((cast(*void)(*instance.m_bIsSingular)) - cast(*void)(*instance)) == 2, "ON_SurfaceProperties.m_bIsSingular has unexpected offset % instead of 2", ((cast(*void)(*instance.m_bIsSingular)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_bIsSingular)) == 4, "ON_SurfaceProperties.m_bIsSingular has unexpected size % instead of 4", size_of(type_of(ON_SurfaceProperties.m_bIsSingular)));
        assert(((cast(*void)(*instance.m_bHasSeam)) - cast(*void)(*instance)) == 6, "ON_SurfaceProperties.m_bHasSeam has unexpected offset % instead of 6", ((cast(*void)(*instance.m_bHasSeam)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_bHasSeam)) == 1, "ON_SurfaceProperties.m_bHasSeam has unexpected size % instead of 1", size_of(type_of(ON_SurfaceProperties.m_bHasSeam)));
        assert(((cast(*void)(*instance.m_bIsClosed)) - cast(*void)(*instance)) == 7, "ON_SurfaceProperties.m_bIsClosed has unexpected offset % instead of 7", ((cast(*void)(*instance.m_bIsClosed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_bIsClosed)) == 2, "ON_SurfaceProperties.m_bIsClosed has unexpected size % instead of 2", size_of(type_of(ON_SurfaceProperties.m_bIsClosed)));
        assert(((cast(*void)(*instance.m_bReserved)) - cast(*void)(*instance)) == 9, "ON_SurfaceProperties.m_bReserved has unexpected offset % instead of 9", ((cast(*void)(*instance.m_bReserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_bReserved)) == 7, "ON_SurfaceProperties.m_bReserved has unexpected size % instead of 7", size_of(type_of(ON_SurfaceProperties.m_bReserved)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 16, "ON_SurfaceProperties.m_domain has unexpected offset % instead of 16", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_domain)) == 32, "ON_SurfaceProperties.m_domain has unexpected size % instead of 32", size_of(type_of(ON_SurfaceProperties.m_domain)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 48, "ON_SurfaceProperties.m_reserved has unexpected offset % instead of 48", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_reserved)) == 16, "ON_SurfaceProperties.m_reserved has unexpected size % instead of 16", size_of(type_of(ON_SurfaceProperties.m_reserved)));
        assert(((cast(*void)(*instance.m_surface)) - cast(*void)(*instance)) == 64, "ON_SurfaceProperties.m_surface has unexpected offset % instead of 64", ((cast(*void)(*instance.m_surface)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_surface)) == 8, "ON_SurfaceProperties.m_surface has unexpected size % instead of 8", size_of(type_of(ON_SurfaceProperties.m_surface)));
        assert(((cast(*void)(*instance.m_tag)) - cast(*void)(*instance)) == 72, "ON_SurfaceProperties.m_tag has unexpected offset % instead of 72", ((cast(*void)(*instance.m_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProperties.m_tag)) == 8, "ON_SurfaceProperties.m_tag has unexpected size % instead of 8", size_of(type_of(ON_SurfaceProperties.m_tag)));
        assert(size_of(ON_SurfaceProperties) == 80, "ON_SurfaceProperties has size % instead of 80", size_of(ON_SurfaceProperties));
    }

    assert(size_of(ON_SurfaceArray) == 24, "ON_SurfaceArray has size % instead of 24", size_of(ON_SurfaceArray));

    {
        instance: ON_Viewport;
        assert(((cast(*void)(*instance.m_bValidCamera)) - cast(*void)(*instance)) == 16, "ON_Viewport.m_bValidCamera has unexpected offset % instead of 16", ((cast(*void)(*instance.m_bValidCamera)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_bValidCamera)) == 1, "ON_Viewport.m_bValidCamera has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_bValidCamera)));
        assert(((cast(*void)(*instance.m_bValidFrustum)) - cast(*void)(*instance)) == 17, "ON_Viewport.m_bValidFrustum has unexpected offset % instead of 17", ((cast(*void)(*instance.m_bValidFrustum)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_bValidFrustum)) == 1, "ON_Viewport.m_bValidFrustum has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_bValidFrustum)));
        assert(((cast(*void)(*instance.m_bValidPort)) - cast(*void)(*instance)) == 18, "ON_Viewport.m_bValidPort has unexpected offset % instead of 18", ((cast(*void)(*instance.m_bValidPort)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_bValidPort)) == 1, "ON_Viewport.m_bValidPort has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_bValidPort)));
        assert(((cast(*void)(*instance.m_bValidCameraFrame)) - cast(*void)(*instance)) == 19, "ON_Viewport.m_bValidCameraFrame has unexpected offset % instead of 19", ((cast(*void)(*instance.m_bValidCameraFrame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_bValidCameraFrame)) == 1, "ON_Viewport.m_bValidCameraFrame has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_bValidCameraFrame)));
        assert(((cast(*void)(*instance.m_projection)) - cast(*void)(*instance)) == 20, "ON_Viewport.m_projection has unexpected offset % instead of 20", ((cast(*void)(*instance.m_projection)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_projection)) == 4, "ON_Viewport.m_projection has unexpected size % instead of 4", size_of(type_of(ON_Viewport.m_projection)));
        assert(((cast(*void)(*instance.m_bLockCamUp)) - cast(*void)(*instance)) == 24, "ON_Viewport.m_bLockCamUp has unexpected offset % instead of 24", ((cast(*void)(*instance.m_bLockCamUp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_bLockCamUp)) == 1, "ON_Viewport.m_bLockCamUp has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_bLockCamUp)));
        assert(((cast(*void)(*instance.m_bLockCamDir)) - cast(*void)(*instance)) == 25, "ON_Viewport.m_bLockCamDir has unexpected offset % instead of 25", ((cast(*void)(*instance.m_bLockCamDir)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_bLockCamDir)) == 1, "ON_Viewport.m_bLockCamDir has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_bLockCamDir)));
        assert(((cast(*void)(*instance.m_bLockCamLoc)) - cast(*void)(*instance)) == 26, "ON_Viewport.m_bLockCamLoc has unexpected offset % instead of 26", ((cast(*void)(*instance.m_bLockCamLoc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_bLockCamLoc)) == 1, "ON_Viewport.m_bLockCamLoc has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_bLockCamLoc)));
        assert(((cast(*void)(*instance.m_frustum_symmetry_flags)) - cast(*void)(*instance)) == 27, "ON_Viewport.m_frustum_symmetry_flags has unexpected offset % instead of 27", ((cast(*void)(*instance.m_frustum_symmetry_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_frustum_symmetry_flags)) == 1, "ON_Viewport.m_frustum_symmetry_flags has unexpected size % instead of 1", size_of(type_of(ON_Viewport.m_frustum_symmetry_flags)));
        assert(((cast(*void)(*instance.m_CamLoc)) - cast(*void)(*instance)) == 32, "ON_Viewport.m_CamLoc has unexpected offset % instead of 32", ((cast(*void)(*instance.m_CamLoc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_CamLoc)) == 24, "ON_Viewport.m_CamLoc has unexpected size % instead of 24", size_of(type_of(ON_Viewport.m_CamLoc)));
        assert(((cast(*void)(*instance.m_CamDir)) - cast(*void)(*instance)) == 56, "ON_Viewport.m_CamDir has unexpected offset % instead of 56", ((cast(*void)(*instance.m_CamDir)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_CamDir)) == 24, "ON_Viewport.m_CamDir has unexpected size % instead of 24", size_of(type_of(ON_Viewport.m_CamDir)));
        assert(((cast(*void)(*instance.m_CamUp)) - cast(*void)(*instance)) == 80, "ON_Viewport.m_CamUp has unexpected offset % instead of 80", ((cast(*void)(*instance.m_CamUp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_CamUp)) == 24, "ON_Viewport.m_CamUp has unexpected size % instead of 24", size_of(type_of(ON_Viewport.m_CamUp)));
        assert(((cast(*void)(*instance.m_CamX)) - cast(*void)(*instance)) == 104, "ON_Viewport.m_CamX has unexpected offset % instead of 104", ((cast(*void)(*instance.m_CamX)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_CamX)) == 24, "ON_Viewport.m_CamX has unexpected size % instead of 24", size_of(type_of(ON_Viewport.m_CamX)));
        assert(((cast(*void)(*instance.m_CamY)) - cast(*void)(*instance)) == 128, "ON_Viewport.m_CamY has unexpected offset % instead of 128", ((cast(*void)(*instance.m_CamY)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_CamY)) == 24, "ON_Viewport.m_CamY has unexpected size % instead of 24", size_of(type_of(ON_Viewport.m_CamY)));
        assert(((cast(*void)(*instance.m_CamZ)) - cast(*void)(*instance)) == 152, "ON_Viewport.m_CamZ has unexpected offset % instead of 152", ((cast(*void)(*instance.m_CamZ)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_CamZ)) == 24, "ON_Viewport.m_CamZ has unexpected size % instead of 24", size_of(type_of(ON_Viewport.m_CamZ)));
        assert(((cast(*void)(*instance.m_frus_left)) - cast(*void)(*instance)) == 176, "ON_Viewport.m_frus_left has unexpected offset % instead of 176", ((cast(*void)(*instance.m_frus_left)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_frus_left)) == 8, "ON_Viewport.m_frus_left has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m_frus_left)));
        assert(((cast(*void)(*instance.m_frus_right)) - cast(*void)(*instance)) == 184, "ON_Viewport.m_frus_right has unexpected offset % instead of 184", ((cast(*void)(*instance.m_frus_right)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_frus_right)) == 8, "ON_Viewport.m_frus_right has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m_frus_right)));
        assert(((cast(*void)(*instance.m_frus_bottom)) - cast(*void)(*instance)) == 192, "ON_Viewport.m_frus_bottom has unexpected offset % instead of 192", ((cast(*void)(*instance.m_frus_bottom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_frus_bottom)) == 8, "ON_Viewport.m_frus_bottom has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m_frus_bottom)));
        assert(((cast(*void)(*instance.m_frus_top)) - cast(*void)(*instance)) == 200, "ON_Viewport.m_frus_top has unexpected offset % instead of 200", ((cast(*void)(*instance.m_frus_top)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_frus_top)) == 8, "ON_Viewport.m_frus_top has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m_frus_top)));
        assert(((cast(*void)(*instance.m_frus_near)) - cast(*void)(*instance)) == 208, "ON_Viewport.m_frus_near has unexpected offset % instead of 208", ((cast(*void)(*instance.m_frus_near)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_frus_near)) == 8, "ON_Viewport.m_frus_near has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m_frus_near)));
        assert(((cast(*void)(*instance.m_frus_far)) - cast(*void)(*instance)) == 216, "ON_Viewport.m_frus_far has unexpected offset % instead of 216", ((cast(*void)(*instance.m_frus_far)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_frus_far)) == 8, "ON_Viewport.m_frus_far has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m_frus_far)));
        assert(((cast(*void)(*instance.m_port_left)) - cast(*void)(*instance)) == 224, "ON_Viewport.m_port_left has unexpected offset % instead of 224", ((cast(*void)(*instance.m_port_left)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_port_left)) == 4, "ON_Viewport.m_port_left has unexpected size % instead of 4", size_of(type_of(ON_Viewport.m_port_left)));
        assert(((cast(*void)(*instance.m_port_right)) - cast(*void)(*instance)) == 228, "ON_Viewport.m_port_right has unexpected offset % instead of 228", ((cast(*void)(*instance.m_port_right)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_port_right)) == 4, "ON_Viewport.m_port_right has unexpected size % instead of 4", size_of(type_of(ON_Viewport.m_port_right)));
        assert(((cast(*void)(*instance.m_port_bottom)) - cast(*void)(*instance)) == 232, "ON_Viewport.m_port_bottom has unexpected offset % instead of 232", ((cast(*void)(*instance.m_port_bottom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_port_bottom)) == 4, "ON_Viewport.m_port_bottom has unexpected size % instead of 4", size_of(type_of(ON_Viewport.m_port_bottom)));
        assert(((cast(*void)(*instance.m_port_top)) - cast(*void)(*instance)) == 236, "ON_Viewport.m_port_top has unexpected offset % instead of 236", ((cast(*void)(*instance.m_port_top)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_port_top)) == 4, "ON_Viewport.m_port_top has unexpected size % instead of 4", size_of(type_of(ON_Viewport.m_port_top)));
        assert(((cast(*void)(*instance.m_port_near)) - cast(*void)(*instance)) == 240, "ON_Viewport.m_port_near has unexpected offset % instead of 240", ((cast(*void)(*instance.m_port_near)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_port_near)) == 4, "ON_Viewport.m_port_near has unexpected size % instead of 4", size_of(type_of(ON_Viewport.m_port_near)));
        assert(((cast(*void)(*instance.m_port_far)) - cast(*void)(*instance)) == 244, "ON_Viewport.m_port_far has unexpected offset % instead of 244", ((cast(*void)(*instance.m_port_far)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_port_far)) == 4, "ON_Viewport.m_port_far has unexpected size % instead of 4", size_of(type_of(ON_Viewport.m_port_far)));
        assert(((cast(*void)(*instance.m_target_point)) - cast(*void)(*instance)) == 248, "ON_Viewport.m_target_point has unexpected offset % instead of 248", ((cast(*void)(*instance.m_target_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_target_point)) == 24, "ON_Viewport.m_target_point has unexpected size % instead of 24", size_of(type_of(ON_Viewport.m_target_point)));
        assert(((cast(*void)(*instance.m_viewport_id)) - cast(*void)(*instance)) == 272, "ON_Viewport.m_viewport_id has unexpected offset % instead of 272", ((cast(*void)(*instance.m_viewport_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_viewport_id)) == 16, "ON_Viewport.m_viewport_id has unexpected size % instead of 16", size_of(type_of(ON_Viewport.m_viewport_id)));
        assert(((cast(*void)(*instance.m_clip_mods)) - cast(*void)(*instance)) == 288, "ON_Viewport.m_clip_mods has unexpected offset % instead of 288", ((cast(*void)(*instance.m_clip_mods)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_clip_mods)) == 128, "ON_Viewport.m_clip_mods has unexpected size % instead of 128", size_of(type_of(ON_Viewport.m_clip_mods)));
        assert(((cast(*void)(*instance.m_clip_mods_inverse)) - cast(*void)(*instance)) == 416, "ON_Viewport.m_clip_mods_inverse has unexpected offset % instead of 416", ((cast(*void)(*instance.m_clip_mods_inverse)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_clip_mods_inverse)) == 128, "ON_Viewport.m_clip_mods_inverse has unexpected size % instead of 128", size_of(type_of(ON_Viewport.m_clip_mods_inverse)));
        assert(((cast(*void)(*instance.m__MIN_NEAR_DIST)) - cast(*void)(*instance)) == 544, "ON_Viewport.m__MIN_NEAR_DIST has unexpected offset % instead of 544", ((cast(*void)(*instance.m__MIN_NEAR_DIST)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m__MIN_NEAR_DIST)) == 8, "ON_Viewport.m__MIN_NEAR_DIST has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m__MIN_NEAR_DIST)));
        assert(((cast(*void)(*instance.m__MIN_NEAR_OVER_FAR)) - cast(*void)(*instance)) == 552, "ON_Viewport.m__MIN_NEAR_OVER_FAR has unexpected offset % instead of 552", ((cast(*void)(*instance.m__MIN_NEAR_OVER_FAR)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m__MIN_NEAR_OVER_FAR)) == 8, "ON_Viewport.m__MIN_NEAR_OVER_FAR has unexpected size % instead of 8", size_of(type_of(ON_Viewport.m__MIN_NEAR_OVER_FAR)));
        assert(((cast(*void)(*instance.m_projection_content_sha1)) - cast(*void)(*instance)) == 560, "ON_Viewport.m_projection_content_sha1 has unexpected offset % instead of 560", ((cast(*void)(*instance.m_projection_content_sha1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Viewport.m_projection_content_sha1)) == 20, "ON_Viewport.m_projection_content_sha1 has unexpected size % instead of 20", size_of(type_of(ON_Viewport.m_projection_content_sha1)));
        assert(size_of(ON_Viewport) == 584, "ON_Viewport has size % instead of 584", size_of(ON_Viewport));
    }

    {
        instance: ON_TextureMapping;
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 144, "ON_TextureMapping.m_type has unexpected offset % instead of 144", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_type)) == 4, "ON_TextureMapping.m_type has unexpected size % instead of 4", size_of(type_of(ON_TextureMapping.m_type)));
        assert(((cast(*void)(*instance.m_projection)) - cast(*void)(*instance)) == 148, "ON_TextureMapping.m_projection has unexpected offset % instead of 148", ((cast(*void)(*instance.m_projection)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_projection)) == 4, "ON_TextureMapping.m_projection has unexpected size % instead of 4", size_of(type_of(ON_TextureMapping.m_projection)));
        assert(((cast(*void)(*instance.m_texture_space)) - cast(*void)(*instance)) == 152, "ON_TextureMapping.m_texture_space has unexpected offset % instead of 152", ((cast(*void)(*instance.m_texture_space)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_texture_space)) == 4, "ON_TextureMapping.m_texture_space has unexpected size % instead of 4", size_of(type_of(ON_TextureMapping.m_texture_space)));
        assert(((cast(*void)(*instance.m_bCapped)) - cast(*void)(*instance)) == 156, "ON_TextureMapping.m_bCapped has unexpected offset % instead of 156", ((cast(*void)(*instance.m_bCapped)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_bCapped)) == 1, "ON_TextureMapping.m_bCapped has unexpected size % instead of 1", size_of(type_of(ON_TextureMapping.m_bCapped)));
        assert(((cast(*void)(*instance.m_Pxyz)) - cast(*void)(*instance)) == 160, "ON_TextureMapping.m_Pxyz has unexpected offset % instead of 160", ((cast(*void)(*instance.m_Pxyz)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_Pxyz)) == 128, "ON_TextureMapping.m_Pxyz has unexpected size % instead of 128", size_of(type_of(ON_TextureMapping.m_Pxyz)));
        assert(((cast(*void)(*instance.m_Nxyz)) - cast(*void)(*instance)) == 288, "ON_TextureMapping.m_Nxyz has unexpected offset % instead of 288", ((cast(*void)(*instance.m_Nxyz)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_Nxyz)) == 128, "ON_TextureMapping.m_Nxyz has unexpected size % instead of 128", size_of(type_of(ON_TextureMapping.m_Nxyz)));
        assert(((cast(*void)(*instance.m_uvw)) - cast(*void)(*instance)) == 416, "ON_TextureMapping.m_uvw has unexpected offset % instead of 416", ((cast(*void)(*instance.m_uvw)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_uvw)) == 128, "ON_TextureMapping.m_uvw has unexpected size % instead of 128", size_of(type_of(ON_TextureMapping.m_uvw)));
        assert(((cast(*void)(*instance.m_mapping_primitive)) - cast(*void)(*instance)) == 544, "ON_TextureMapping.m_mapping_primitive has unexpected offset % instead of 544", ((cast(*void)(*instance.m_mapping_primitive)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureMapping.m_mapping_primitive)) == 16, "ON_TextureMapping.m_mapping_primitive has unexpected size % instead of 16", size_of(type_of(ON_TextureMapping.m_mapping_primitive)));
        assert(size_of(ON_TextureMapping) == 560, "ON_TextureMapping has size % instead of 560", size_of(ON_TextureMapping));
    }

    {
        instance: ON_Texture;
        assert(((cast(*void)(*instance.m_texture_id)) - cast(*void)(*instance)) == 16, "ON_Texture.m_texture_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_texture_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_texture_id)) == 16, "ON_Texture.m_texture_id has unexpected size % instead of 16", size_of(type_of(ON_Texture.m_texture_id)));
        assert(((cast(*void)(*instance.m_mapping_channel_id)) - cast(*void)(*instance)) == 32, "ON_Texture.m_mapping_channel_id has unexpected offset % instead of 32", ((cast(*void)(*instance.m_mapping_channel_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_mapping_channel_id)) == 4, "ON_Texture.m_mapping_channel_id has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_mapping_channel_id)));
        assert(((cast(*void)(*instance.m_image_file_reference)) - cast(*void)(*instance)) == 40, "ON_Texture.m_image_file_reference has unexpected offset % instead of 40", ((cast(*void)(*instance.m_image_file_reference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_image_file_reference)) == 184, "ON_Texture.m_image_file_reference has unexpected size % instead of 184", size_of(type_of(ON_Texture.m_image_file_reference)));
        assert(((cast(*void)(*instance.m_bOn)) - cast(*void)(*instance)) == 224, "ON_Texture.m_bOn has unexpected offset % instead of 224", ((cast(*void)(*instance.m_bOn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_bOn)) == 1, "ON_Texture.m_bOn has unexpected size % instead of 1", size_of(type_of(ON_Texture.m_bOn)));
        assert(((cast(*void)(*instance.m_bTreatAsLinear)) - cast(*void)(*instance)) == 225, "ON_Texture.m_bTreatAsLinear has unexpected offset % instead of 225", ((cast(*void)(*instance.m_bTreatAsLinear)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_bTreatAsLinear)) == 1, "ON_Texture.m_bTreatAsLinear has unexpected size % instead of 1", size_of(type_of(ON_Texture.m_bTreatAsLinear)));
        assert(((cast(*void)(*instance.reserved2)) - cast(*void)(*instance)) == 226, "ON_Texture.reserved2 has unexpected offset % instead of 226", ((cast(*void)(*instance.reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.reserved2)) == 1, "ON_Texture.reserved2 has unexpected size % instead of 1", size_of(type_of(ON_Texture.reserved2)));
        assert(((cast(*void)(*instance.reserved3)) - cast(*void)(*instance)) == 227, "ON_Texture.reserved3 has unexpected offset % instead of 227", ((cast(*void)(*instance.reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.reserved3)) == 1, "ON_Texture.reserved3 has unexpected size % instead of 1", size_of(type_of(ON_Texture.reserved3)));
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 228, "ON_Texture.m_type has unexpected offset % instead of 228", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_type)) == 4, "ON_Texture.m_type has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_type)));
        assert(((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)) == 232, "ON_Texture.m_mode has unexpected offset % instead of 232", ((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_mode)) == 4, "ON_Texture.m_mode has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_mode)));
        assert(((cast(*void)(*instance.m_minfilter)) - cast(*void)(*instance)) == 236, "ON_Texture.m_minfilter has unexpected offset % instead of 236", ((cast(*void)(*instance.m_minfilter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_minfilter)) == 4, "ON_Texture.m_minfilter has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_minfilter)));
        assert(((cast(*void)(*instance.m_magfilter)) - cast(*void)(*instance)) == 240, "ON_Texture.m_magfilter has unexpected offset % instead of 240", ((cast(*void)(*instance.m_magfilter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_magfilter)) == 4, "ON_Texture.m_magfilter has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_magfilter)));
        assert(((cast(*void)(*instance.m_wrapu)) - cast(*void)(*instance)) == 244, "ON_Texture.m_wrapu has unexpected offset % instead of 244", ((cast(*void)(*instance.m_wrapu)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_wrapu)) == 4, "ON_Texture.m_wrapu has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_wrapu)));
        assert(((cast(*void)(*instance.m_wrapv)) - cast(*void)(*instance)) == 248, "ON_Texture.m_wrapv has unexpected offset % instead of 248", ((cast(*void)(*instance.m_wrapv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_wrapv)) == 4, "ON_Texture.m_wrapv has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_wrapv)));
        assert(((cast(*void)(*instance.m_wrapw)) - cast(*void)(*instance)) == 252, "ON_Texture.m_wrapw has unexpected offset % instead of 252", ((cast(*void)(*instance.m_wrapw)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_wrapw)) == 4, "ON_Texture.m_wrapw has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_wrapw)));
        assert(((cast(*void)(*instance.m_uvw)) - cast(*void)(*instance)) == 256, "ON_Texture.m_uvw has unexpected offset % instead of 256", ((cast(*void)(*instance.m_uvw)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_uvw)) == 128, "ON_Texture.m_uvw has unexpected size % instead of 128", size_of(type_of(ON_Texture.m_uvw)));
        assert(((cast(*void)(*instance.m_border_color)) - cast(*void)(*instance)) == 384, "ON_Texture.m_border_color has unexpected offset % instead of 384", ((cast(*void)(*instance.m_border_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_border_color)) == 4, "ON_Texture.m_border_color has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_border_color)));
        assert(((cast(*void)(*instance.m_transparent_color)) - cast(*void)(*instance)) == 388, "ON_Texture.m_transparent_color has unexpected offset % instead of 388", ((cast(*void)(*instance.m_transparent_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_transparent_color)) == 4, "ON_Texture.m_transparent_color has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_transparent_color)));
        assert(((cast(*void)(*instance.m_transparency_texture_id)) - cast(*void)(*instance)) == 392, "ON_Texture.m_transparency_texture_id has unexpected offset % instead of 392", ((cast(*void)(*instance.m_transparency_texture_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_transparency_texture_id)) == 16, "ON_Texture.m_transparency_texture_id has unexpected size % instead of 16", size_of(type_of(ON_Texture.m_transparency_texture_id)));
        assert(((cast(*void)(*instance.m_bump_scale)) - cast(*void)(*instance)) == 408, "ON_Texture.m_bump_scale has unexpected offset % instead of 408", ((cast(*void)(*instance.m_bump_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_bump_scale)) == 16, "ON_Texture.m_bump_scale has unexpected size % instead of 16", size_of(type_of(ON_Texture.m_bump_scale)));
        assert(((cast(*void)(*instance.m_blend_constant_A)) - cast(*void)(*instance)) == 424, "ON_Texture.m_blend_constant_A has unexpected offset % instead of 424", ((cast(*void)(*instance.m_blend_constant_A)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_constant_A)) == 8, "ON_Texture.m_blend_constant_A has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_constant_A)));
        assert(((cast(*void)(*instance.m_blend_A0)) - cast(*void)(*instance)) == 432, "ON_Texture.m_blend_A0 has unexpected offset % instead of 432", ((cast(*void)(*instance.m_blend_A0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_A0)) == 8, "ON_Texture.m_blend_A0 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_A0)));
        assert(((cast(*void)(*instance.m_blend_A1)) - cast(*void)(*instance)) == 440, "ON_Texture.m_blend_A1 has unexpected offset % instead of 440", ((cast(*void)(*instance.m_blend_A1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_A1)) == 8, "ON_Texture.m_blend_A1 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_A1)));
        assert(((cast(*void)(*instance.m_blend_A2)) - cast(*void)(*instance)) == 448, "ON_Texture.m_blend_A2 has unexpected offset % instead of 448", ((cast(*void)(*instance.m_blend_A2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_A2)) == 8, "ON_Texture.m_blend_A2 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_A2)));
        assert(((cast(*void)(*instance.m_blend_A3)) - cast(*void)(*instance)) == 456, "ON_Texture.m_blend_A3 has unexpected offset % instead of 456", ((cast(*void)(*instance.m_blend_A3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_A3)) == 8, "ON_Texture.m_blend_A3 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_A3)));
        assert(((cast(*void)(*instance.m_blend_constant_RGB)) - cast(*void)(*instance)) == 464, "ON_Texture.m_blend_constant_RGB has unexpected offset % instead of 464", ((cast(*void)(*instance.m_blend_constant_RGB)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_constant_RGB)) == 4, "ON_Texture.m_blend_constant_RGB has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_blend_constant_RGB)));
        assert(((cast(*void)(*instance.m_blend_RGB0)) - cast(*void)(*instance)) == 472, "ON_Texture.m_blend_RGB0 has unexpected offset % instead of 472", ((cast(*void)(*instance.m_blend_RGB0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_RGB0)) == 8, "ON_Texture.m_blend_RGB0 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_RGB0)));
        assert(((cast(*void)(*instance.m_blend_RGB1)) - cast(*void)(*instance)) == 480, "ON_Texture.m_blend_RGB1 has unexpected offset % instead of 480", ((cast(*void)(*instance.m_blend_RGB1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_RGB1)) == 8, "ON_Texture.m_blend_RGB1 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_RGB1)));
        assert(((cast(*void)(*instance.m_blend_RGB2)) - cast(*void)(*instance)) == 488, "ON_Texture.m_blend_RGB2 has unexpected offset % instead of 488", ((cast(*void)(*instance.m_blend_RGB2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_RGB2)) == 8, "ON_Texture.m_blend_RGB2 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_RGB2)));
        assert(((cast(*void)(*instance.m_blend_RGB3)) - cast(*void)(*instance)) == 496, "ON_Texture.m_blend_RGB3 has unexpected offset % instead of 496", ((cast(*void)(*instance.m_blend_RGB3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_RGB3)) == 8, "ON_Texture.m_blend_RGB3 has unexpected size % instead of 8", size_of(type_of(ON_Texture.m_blend_RGB3)));
        assert(((cast(*void)(*instance.m_blend_order)) - cast(*void)(*instance)) == 504, "ON_Texture.m_blend_order has unexpected offset % instead of 504", ((cast(*void)(*instance.m_blend_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Texture.m_blend_order)) == 4, "ON_Texture.m_blend_order has unexpected size % instead of 4", size_of(type_of(ON_Texture.m_blend_order)));
        assert(size_of(ON_Texture) == 512, "ON_Texture has size % instead of 512", size_of(ON_Texture));
    }

    {
        instance: ON_Material;
        assert(((cast(*void)(*instance.m_rdk_material_instance_id)) - cast(*void)(*instance)) == 144, "ON_Material.m_rdk_material_instance_id has unexpected offset % instead of 144", ((cast(*void)(*instance.m_rdk_material_instance_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_rdk_material_instance_id)) == 16, "ON_Material.m_rdk_material_instance_id has unexpected size % instead of 16", size_of(type_of(ON_Material.m_rdk_material_instance_id)));
        assert(((cast(*void)(*instance.m_ambient)) - cast(*void)(*instance)) == 160, "ON_Material.m_ambient has unexpected offset % instead of 160", ((cast(*void)(*instance.m_ambient)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_ambient)) == 4, "ON_Material.m_ambient has unexpected size % instead of 4", size_of(type_of(ON_Material.m_ambient)));
        assert(((cast(*void)(*instance.m_diffuse)) - cast(*void)(*instance)) == 164, "ON_Material.m_diffuse has unexpected offset % instead of 164", ((cast(*void)(*instance.m_diffuse)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_diffuse)) == 4, "ON_Material.m_diffuse has unexpected size % instead of 4", size_of(type_of(ON_Material.m_diffuse)));
        assert(((cast(*void)(*instance.m_emission)) - cast(*void)(*instance)) == 168, "ON_Material.m_emission has unexpected offset % instead of 168", ((cast(*void)(*instance.m_emission)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_emission)) == 4, "ON_Material.m_emission has unexpected size % instead of 4", size_of(type_of(ON_Material.m_emission)));
        assert(((cast(*void)(*instance.m_specular)) - cast(*void)(*instance)) == 172, "ON_Material.m_specular has unexpected offset % instead of 172", ((cast(*void)(*instance.m_specular)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_specular)) == 4, "ON_Material.m_specular has unexpected size % instead of 4", size_of(type_of(ON_Material.m_specular)));
        assert(((cast(*void)(*instance.m_reflection)) - cast(*void)(*instance)) == 176, "ON_Material.m_reflection has unexpected offset % instead of 176", ((cast(*void)(*instance.m_reflection)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_reflection)) == 4, "ON_Material.m_reflection has unexpected size % instead of 4", size_of(type_of(ON_Material.m_reflection)));
        assert(((cast(*void)(*instance.m_transparent)) - cast(*void)(*instance)) == 180, "ON_Material.m_transparent has unexpected offset % instead of 180", ((cast(*void)(*instance.m_transparent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_transparent)) == 4, "ON_Material.m_transparent has unexpected size % instead of 4", size_of(type_of(ON_Material.m_transparent)));
        assert(((cast(*void)(*instance.m_bShareable)) - cast(*void)(*instance)) == 184, "ON_Material.m_bShareable has unexpected offset % instead of 184", ((cast(*void)(*instance.m_bShareable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_bShareable)) == 1, "ON_Material.m_bShareable has unexpected size % instead of 1", size_of(type_of(ON_Material.m_bShareable)));
        assert(((cast(*void)(*instance.m_bDisableLighting)) - cast(*void)(*instance)) == 185, "ON_Material.m_bDisableLighting has unexpected offset % instead of 185", ((cast(*void)(*instance.m_bDisableLighting)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_bDisableLighting)) == 1, "ON_Material.m_bDisableLighting has unexpected size % instead of 1", size_of(type_of(ON_Material.m_bDisableLighting)));
        assert(((cast(*void)(*instance.m_bUseDiffuseTextureAlphaForObjectTransparencyTexture)) - cast(*void)(*instance)) == 186, "ON_Material.m_bUseDiffuseTextureAlphaForObjectTransparencyTexture has unexpected offset % instead of 186", ((cast(*void)(*instance.m_bUseDiffuseTextureAlphaForObjectTransparencyTexture)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_bUseDiffuseTextureAlphaForObjectTransparencyTexture)) == 1, "ON_Material.m_bUseDiffuseTextureAlphaForObjectTransparencyTexture has unexpected size % instead of 1", size_of(type_of(ON_Material.m_bUseDiffuseTextureAlphaForObjectTransparencyTexture)));
        assert(((cast(*void)(*instance.m_bFresnelReflections)) - cast(*void)(*instance)) == 187, "ON_Material.m_bFresnelReflections has unexpected offset % instead of 187", ((cast(*void)(*instance.m_bFresnelReflections)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_bFresnelReflections)) == 1, "ON_Material.m_bFresnelReflections has unexpected size % instead of 1", size_of(type_of(ON_Material.m_bFresnelReflections)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 188, "ON_Material.m_reserved1 has unexpected offset % instead of 188", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_reserved1)) == 4, "ON_Material.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_Material.m_reserved1)));
        assert(((cast(*void)(*instance.m_reflectivity)) - cast(*void)(*instance)) == 192, "ON_Material.m_reflectivity has unexpected offset % instead of 192", ((cast(*void)(*instance.m_reflectivity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_reflectivity)) == 8, "ON_Material.m_reflectivity has unexpected size % instead of 8", size_of(type_of(ON_Material.m_reflectivity)));
        assert(((cast(*void)(*instance.m_shine)) - cast(*void)(*instance)) == 200, "ON_Material.m_shine has unexpected offset % instead of 200", ((cast(*void)(*instance.m_shine)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_shine)) == 8, "ON_Material.m_shine has unexpected size % instead of 8", size_of(type_of(ON_Material.m_shine)));
        assert(((cast(*void)(*instance.m_transparency)) - cast(*void)(*instance)) == 208, "ON_Material.m_transparency has unexpected offset % instead of 208", ((cast(*void)(*instance.m_transparency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_transparency)) == 8, "ON_Material.m_transparency has unexpected size % instead of 8", size_of(type_of(ON_Material.m_transparency)));
        assert(((cast(*void)(*instance.m_reflection_glossiness)) - cast(*void)(*instance)) == 216, "ON_Material.m_reflection_glossiness has unexpected offset % instead of 216", ((cast(*void)(*instance.m_reflection_glossiness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_reflection_glossiness)) == 8, "ON_Material.m_reflection_glossiness has unexpected size % instead of 8", size_of(type_of(ON_Material.m_reflection_glossiness)));
        assert(((cast(*void)(*instance.m_refraction_glossiness)) - cast(*void)(*instance)) == 224, "ON_Material.m_refraction_glossiness has unexpected offset % instead of 224", ((cast(*void)(*instance.m_refraction_glossiness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_refraction_glossiness)) == 8, "ON_Material.m_refraction_glossiness has unexpected size % instead of 8", size_of(type_of(ON_Material.m_refraction_glossiness)));
        assert(((cast(*void)(*instance.m_index_of_refraction)) - cast(*void)(*instance)) == 232, "ON_Material.m_index_of_refraction has unexpected offset % instead of 232", ((cast(*void)(*instance.m_index_of_refraction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_index_of_refraction)) == 8, "ON_Material.m_index_of_refraction has unexpected size % instead of 8", size_of(type_of(ON_Material.m_index_of_refraction)));
        assert(((cast(*void)(*instance.m_fresnel_index_of_refraction)) - cast(*void)(*instance)) == 240, "ON_Material.m_fresnel_index_of_refraction has unexpected offset % instead of 240", ((cast(*void)(*instance.m_fresnel_index_of_refraction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_fresnel_index_of_refraction)) == 8, "ON_Material.m_fresnel_index_of_refraction has unexpected size % instead of 8", size_of(type_of(ON_Material.m_fresnel_index_of_refraction)));
        assert(((cast(*void)(*instance.m_textures)) - cast(*void)(*instance)) == 248, "ON_Material.m_textures has unexpected offset % instead of 248", ((cast(*void)(*instance.m_textures)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_textures)) == 24, "ON_Material.m_textures has unexpected size % instead of 24", size_of(type_of(ON_Material.m_textures)));
        assert(((cast(*void)(*instance.m_material_channel)) - cast(*void)(*instance)) == 272, "ON_Material.m_material_channel has unexpected offset % instead of 272", ((cast(*void)(*instance.m_material_channel)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_material_channel)) == 24, "ON_Material.m_material_channel has unexpected size % instead of 24", size_of(type_of(ON_Material.m_material_channel)));
        assert(((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)) == 296, "ON_Material.m_plugin_id has unexpected offset % instead of 296", ((cast(*void)(*instance.m_plugin_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Material.m_plugin_id)) == 16, "ON_Material.m_plugin_id has unexpected size % instead of 16", size_of(type_of(ON_Material.m_plugin_id)));
        assert(size_of(ON_Material) == 312, "ON_Material has size % instead of 312", size_of(ON_Material));
    }

    assert(size_of(ON_PhysicallyBasedMaterial.ParametersNames) == 1, "ON_PhysicallyBasedMaterial.ParametersNames has size % instead of 1", size_of(ON_PhysicallyBasedMaterial.ParametersNames));

    {
        instance: ON_PhysicallyBasedMaterial;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_PhysicallyBasedMaterial._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PhysicallyBasedMaterial._impl)) == 64, "ON_PhysicallyBasedMaterial._impl has unexpected size % instead of 64", size_of(type_of(ON_PhysicallyBasedMaterial._impl)));
        assert(size_of(ON_PhysicallyBasedMaterial) == 72, "ON_PhysicallyBasedMaterial has size % instead of 72", size_of(ON_PhysicallyBasedMaterial));
    }

    {
        instance: ON_SectionStyle;
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 144, "ON_SectionStyle.m_private has unexpected offset % instead of 144", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SectionStyle.m_private)) == 8, "ON_SectionStyle.m_private has unexpected size % instead of 8", size_of(type_of(ON_SectionStyle.m_private)));
        assert(size_of(ON_SectionStyle) == 152, "ON_SectionStyle has size % instead of 152", size_of(ON_SectionStyle));
    }

    {
        instance: ON_Layer;
        assert(((cast(*void)(*instance.m_iges_level)) - cast(*void)(*instance)) == 144, "ON_Layer.m_iges_level has unexpected offset % instead of 144", ((cast(*void)(*instance.m_iges_level)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_iges_level)) == 4, "ON_Layer.m_iges_level has unexpected size % instead of 4", size_of(type_of(ON_Layer.m_iges_level)));
        assert(((cast(*void)(*instance.m_material_index)) - cast(*void)(*instance)) == 148, "ON_Layer.m_material_index has unexpected offset % instead of 148", ((cast(*void)(*instance.m_material_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_material_index)) == 4, "ON_Layer.m_material_index has unexpected size % instead of 4", size_of(type_of(ON_Layer.m_material_index)));
        assert(((cast(*void)(*instance.m_rendering_attributes)) - cast(*void)(*instance)) == 152, "ON_Layer.m_rendering_attributes has unexpected offset % instead of 152", ((cast(*void)(*instance.m_rendering_attributes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_rendering_attributes)) == 24, "ON_Layer.m_rendering_attributes has unexpected size % instead of 24", size_of(type_of(ON_Layer.m_rendering_attributes)));
        assert(((cast(*void)(*instance.m_linetype_index)) - cast(*void)(*instance)) == 176, "ON_Layer.m_linetype_index has unexpected offset % instead of 176", ((cast(*void)(*instance.m_linetype_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_linetype_index)) == 4, "ON_Layer.m_linetype_index has unexpected size % instead of 4", size_of(type_of(ON_Layer.m_linetype_index)));
        assert(((cast(*void)(*instance.m_color)) - cast(*void)(*instance)) == 180, "ON_Layer.m_color has unexpected offset % instead of 180", ((cast(*void)(*instance.m_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_color)) == 4, "ON_Layer.m_color has unexpected size % instead of 4", size_of(type_of(ON_Layer.m_color)));
        assert(((cast(*void)(*instance.m_display_material_id)) - cast(*void)(*instance)) == 184, "ON_Layer.m_display_material_id has unexpected offset % instead of 184", ((cast(*void)(*instance.m_display_material_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_display_material_id)) == 16, "ON_Layer.m_display_material_id has unexpected size % instead of 16", size_of(type_of(ON_Layer.m_display_material_id)));
        assert(((cast(*void)(*instance.m_plot_color)) - cast(*void)(*instance)) == 200, "ON_Layer.m_plot_color has unexpected offset % instead of 200", ((cast(*void)(*instance.m_plot_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_plot_color)) == 4, "ON_Layer.m_plot_color has unexpected size % instead of 4", size_of(type_of(ON_Layer.m_plot_color)));
        assert(((cast(*void)(*instance.m_plot_weight_mm)) - cast(*void)(*instance)) == 208, "ON_Layer.m_plot_weight_mm has unexpected offset % instead of 208", ((cast(*void)(*instance.m_plot_weight_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_plot_weight_mm)) == 8, "ON_Layer.m_plot_weight_mm has unexpected size % instead of 8", size_of(type_of(ON_Layer.m_plot_weight_mm)));
        assert(((cast(*void)(*instance.m_bExpanded)) - cast(*void)(*instance)) == 216, "ON_Layer.m_bExpanded has unexpected offset % instead of 216", ((cast(*void)(*instance.m_bExpanded)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_bExpanded)) == 1, "ON_Layer.m_bExpanded has unexpected size % instead of 1", size_of(type_of(ON_Layer.m_bExpanded)));
        assert(((cast(*void)(*instance.m_extension_bits)) - cast(*void)(*instance)) == 217, "ON_Layer.m_extension_bits has unexpected offset % instead of 217", ((cast(*void)(*instance.m_extension_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_extension_bits)) == 1, "ON_Layer.m_extension_bits has unexpected size % instead of 1", size_of(type_of(ON_Layer.m_extension_bits)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 218, "ON_Layer.m_reserved has unexpected offset % instead of 218", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_reserved)) == 2, "ON_Layer.m_reserved has unexpected size % instead of 2", size_of(type_of(ON_Layer.m_reserved)));
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 224, "ON_Layer.m_private has unexpected offset % instead of 224", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Layer.m_private)) == 8, "ON_Layer.m_private has unexpected size % instead of 8", size_of(type_of(ON_Layer.m_private)));
        assert(size_of(ON_Layer) == 232, "ON_Layer has size % instead of 232", size_of(ON_Layer));
    }

    {
        instance: ON_Linetype;
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 144, "ON_Linetype.m_private has unexpected offset % instead of 144", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_private)) == 8, "ON_Linetype.m_private has unexpected size % instead of 8", size_of(type_of(ON_Linetype.m_private)));
        assert(((cast(*void)(*instance.m_is_set_bits)) - cast(*void)(*instance)) == 152, "ON_Linetype.m_is_set_bits has unexpected offset % instead of 152", ((cast(*void)(*instance.m_is_set_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_is_set_bits)) == 1, "ON_Linetype.m_is_set_bits has unexpected size % instead of 1", size_of(type_of(ON_Linetype.m_is_set_bits)));
        assert(((cast(*void)(*instance.m_is_locked_bits)) - cast(*void)(*instance)) == 153, "ON_Linetype.m_is_locked_bits has unexpected offset % instead of 153", ((cast(*void)(*instance.m_is_locked_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_is_locked_bits)) == 1, "ON_Linetype.m_is_locked_bits has unexpected size % instead of 1", size_of(type_of(ON_Linetype.m_is_locked_bits)));
        assert(((cast(*void)(*instance.m_cap_style)) - cast(*void)(*instance)) == 154, "ON_Linetype.m_cap_style has unexpected offset % instead of 154", ((cast(*void)(*instance.m_cap_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_cap_style)) == 1, "ON_Linetype.m_cap_style has unexpected size % instead of 1", size_of(type_of(ON_Linetype.m_cap_style)));
        assert(((cast(*void)(*instance.m_join_style)) - cast(*void)(*instance)) == 155, "ON_Linetype.m_join_style has unexpected offset % instead of 155", ((cast(*void)(*instance.m_join_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_join_style)) == 1, "ON_Linetype.m_join_style has unexpected size % instead of 1", size_of(type_of(ON_Linetype.m_join_style)));
        assert(((cast(*void)(*instance.m_width)) - cast(*void)(*instance)) == 160, "ON_Linetype.m_width has unexpected offset % instead of 160", ((cast(*void)(*instance.m_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_width)) == 8, "ON_Linetype.m_width has unexpected size % instead of 8", size_of(type_of(ON_Linetype.m_width)));
        assert(((cast(*void)(*instance.m_width_units)) - cast(*void)(*instance)) == 168, "ON_Linetype.m_width_units has unexpected offset % instead of 168", ((cast(*void)(*instance.m_width_units)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_width_units)) == 1, "ON_Linetype.m_width_units has unexpected size % instead of 1", size_of(type_of(ON_Linetype.m_width_units)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 169, "ON_Linetype.m_reserved has unexpected offset % instead of 169", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Linetype.m_reserved)) == 7, "ON_Linetype.m_reserved has unexpected size % instead of 7", size_of(type_of(ON_Linetype.m_reserved)));
        assert(size_of(ON_Linetype) == 176, "ON_Linetype has size % instead of 176", size_of(ON_Linetype));
    }

    assert(size_of(ON_Group) == 144, "ON_Group has size % instead of 144", size_of(ON_Group));

    {
        instance: ON_Light;
        assert(((cast(*void)(*instance.m_light_index)) - cast(*void)(*instance)) == 16, "ON_Light.m_light_index has unexpected offset % instead of 16", ((cast(*void)(*instance.m_light_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_light_index)) == 4, "ON_Light.m_light_index has unexpected size % instead of 4", size_of(type_of(ON_Light.m_light_index)));
        assert(((cast(*void)(*instance.m_light_id)) - cast(*void)(*instance)) == 20, "ON_Light.m_light_id has unexpected offset % instead of 20", ((cast(*void)(*instance.m_light_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_light_id)) == 16, "ON_Light.m_light_id has unexpected size % instead of 16", size_of(type_of(ON_Light.m_light_id)));
        assert(((cast(*void)(*instance.m_light_name)) - cast(*void)(*instance)) == 40, "ON_Light.m_light_name has unexpected offset % instead of 40", ((cast(*void)(*instance.m_light_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_light_name)) == 8, "ON_Light.m_light_name has unexpected size % instead of 8", size_of(type_of(ON_Light.m_light_name)));
        assert(((cast(*void)(*instance.m_bOn)) - cast(*void)(*instance)) == 48, "ON_Light.m_bOn has unexpected offset % instead of 48", ((cast(*void)(*instance.m_bOn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_bOn)) == 1, "ON_Light.m_bOn has unexpected size % instead of 1", size_of(type_of(ON_Light.m_bOn)));
        assert(((cast(*void)(*instance.m_style)) - cast(*void)(*instance)) == 52, "ON_Light.m_style has unexpected offset % instead of 52", ((cast(*void)(*instance.m_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_style)) == 4, "ON_Light.m_style has unexpected size % instead of 4", size_of(type_of(ON_Light.m_style)));
        assert(((cast(*void)(*instance.m_ambient)) - cast(*void)(*instance)) == 56, "ON_Light.m_ambient has unexpected offset % instead of 56", ((cast(*void)(*instance.m_ambient)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_ambient)) == 4, "ON_Light.m_ambient has unexpected size % instead of 4", size_of(type_of(ON_Light.m_ambient)));
        assert(((cast(*void)(*instance.m_diffuse)) - cast(*void)(*instance)) == 60, "ON_Light.m_diffuse has unexpected offset % instead of 60", ((cast(*void)(*instance.m_diffuse)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_diffuse)) == 4, "ON_Light.m_diffuse has unexpected size % instead of 4", size_of(type_of(ON_Light.m_diffuse)));
        assert(((cast(*void)(*instance.m_specular)) - cast(*void)(*instance)) == 64, "ON_Light.m_specular has unexpected offset % instead of 64", ((cast(*void)(*instance.m_specular)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_specular)) == 4, "ON_Light.m_specular has unexpected size % instead of 4", size_of(type_of(ON_Light.m_specular)));
        assert(((cast(*void)(*instance.m_direction)) - cast(*void)(*instance)) == 72, "ON_Light.m_direction has unexpected offset % instead of 72", ((cast(*void)(*instance.m_direction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_direction)) == 24, "ON_Light.m_direction has unexpected size % instead of 24", size_of(type_of(ON_Light.m_direction)));
        assert(((cast(*void)(*instance.m_location)) - cast(*void)(*instance)) == 96, "ON_Light.m_location has unexpected offset % instead of 96", ((cast(*void)(*instance.m_location)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_location)) == 24, "ON_Light.m_location has unexpected size % instead of 24", size_of(type_of(ON_Light.m_location)));
        assert(((cast(*void)(*instance.m_length)) - cast(*void)(*instance)) == 120, "ON_Light.m_length has unexpected offset % instead of 120", ((cast(*void)(*instance.m_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_length)) == 24, "ON_Light.m_length has unexpected size % instead of 24", size_of(type_of(ON_Light.m_length)));
        assert(((cast(*void)(*instance.m_width)) - cast(*void)(*instance)) == 144, "ON_Light.m_width has unexpected offset % instead of 144", ((cast(*void)(*instance.m_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_width)) == 24, "ON_Light.m_width has unexpected size % instead of 24", size_of(type_of(ON_Light.m_width)));
        assert(((cast(*void)(*instance.m_intensity)) - cast(*void)(*instance)) == 168, "ON_Light.m_intensity has unexpected offset % instead of 168", ((cast(*void)(*instance.m_intensity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_intensity)) == 8, "ON_Light.m_intensity has unexpected size % instead of 8", size_of(type_of(ON_Light.m_intensity)));
        assert(((cast(*void)(*instance.m_watts)) - cast(*void)(*instance)) == 176, "ON_Light.m_watts has unexpected offset % instead of 176", ((cast(*void)(*instance.m_watts)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_watts)) == 8, "ON_Light.m_watts has unexpected size % instead of 8", size_of(type_of(ON_Light.m_watts)));
        assert(((cast(*void)(*instance.m_spot_angle)) - cast(*void)(*instance)) == 184, "ON_Light.m_spot_angle has unexpected offset % instead of 184", ((cast(*void)(*instance.m_spot_angle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_spot_angle)) == 8, "ON_Light.m_spot_angle has unexpected size % instead of 8", size_of(type_of(ON_Light.m_spot_angle)));
        assert(((cast(*void)(*instance.m_spot_exponent)) - cast(*void)(*instance)) == 192, "ON_Light.m_spot_exponent has unexpected offset % instead of 192", ((cast(*void)(*instance.m_spot_exponent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_spot_exponent)) == 8, "ON_Light.m_spot_exponent has unexpected size % instead of 8", size_of(type_of(ON_Light.m_spot_exponent)));
        assert(((cast(*void)(*instance.m_hotspot)) - cast(*void)(*instance)) == 200, "ON_Light.m_hotspot has unexpected offset % instead of 200", ((cast(*void)(*instance.m_hotspot)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_hotspot)) == 8, "ON_Light.m_hotspot has unexpected size % instead of 8", size_of(type_of(ON_Light.m_hotspot)));
        assert(((cast(*void)(*instance.m_attenuation)) - cast(*void)(*instance)) == 208, "ON_Light.m_attenuation has unexpected offset % instead of 208", ((cast(*void)(*instance.m_attenuation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_attenuation)) == 24, "ON_Light.m_attenuation has unexpected size % instead of 24", size_of(type_of(ON_Light.m_attenuation)));
        assert(((cast(*void)(*instance.m_shadow_intensity)) - cast(*void)(*instance)) == 232, "ON_Light.m_shadow_intensity has unexpected offset % instead of 232", ((cast(*void)(*instance.m_shadow_intensity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Light.m_shadow_intensity)) == 8, "ON_Light.m_shadow_intensity has unexpected size % instead of 8", size_of(type_of(ON_Light.m_shadow_intensity)));
        assert(size_of(ON_Light) == 240, "ON_Light has size % instead of 240", size_of(ON_Light));
    }

    {
        instance: ON_Point;
        assert(((cast(*void)(*instance.point)) - cast(*void)(*instance)) == 16, "ON_Point.point has unexpected offset % instead of 16", ((cast(*void)(*instance.point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Point.point)) == 24, "ON_Point.point has unexpected size % instead of 24", size_of(type_of(ON_Point.point)));
        assert(size_of(ON_Point) == 40, "ON_Point has size % instead of 40", size_of(ON_Point));
    }

    {
        instance: ON_PointCloud;
        assert(((cast(*void)(*instance.m_P)) - cast(*void)(*instance)) == 16, "ON_PointCloud.m_P has unexpected offset % instead of 16", ((cast(*void)(*instance.m_P)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_P)) == 24, "ON_PointCloud.m_P has unexpected size % instead of 24", size_of(type_of(ON_PointCloud.m_P)));
        assert(((cast(*void)(*instance.m_N)) - cast(*void)(*instance)) == 40, "ON_PointCloud.m_N has unexpected offset % instead of 40", ((cast(*void)(*instance.m_N)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_N)) == 24, "ON_PointCloud.m_N has unexpected size % instead of 24", size_of(type_of(ON_PointCloud.m_N)));
        assert(((cast(*void)(*instance.m_C)) - cast(*void)(*instance)) == 64, "ON_PointCloud.m_C has unexpected offset % instead of 64", ((cast(*void)(*instance.m_C)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_C)) == 24, "ON_PointCloud.m_C has unexpected size % instead of 24", size_of(type_of(ON_PointCloud.m_C)));
        assert(((cast(*void)(*instance.m_V)) - cast(*void)(*instance)) == 88, "ON_PointCloud.m_V has unexpected offset % instead of 88", ((cast(*void)(*instance.m_V)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_V)) == 24, "ON_PointCloud.m_V has unexpected size % instead of 24", size_of(type_of(ON_PointCloud.m_V)));
        assert(((cast(*void)(*instance.m_H)) - cast(*void)(*instance)) == 112, "ON_PointCloud.m_H has unexpected offset % instead of 112", ((cast(*void)(*instance.m_H)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_H)) == 24, "ON_PointCloud.m_H has unexpected size % instead of 24", size_of(type_of(ON_PointCloud.m_H)));
        assert(((cast(*void)(*instance.m_hidden_count)) - cast(*void)(*instance)) == 136, "ON_PointCloud.m_hidden_count has unexpected offset % instead of 136", ((cast(*void)(*instance.m_hidden_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_hidden_count)) == 4, "ON_PointCloud.m_hidden_count has unexpected size % instead of 4", size_of(type_of(ON_PointCloud.m_hidden_count)));
        assert(((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)) == 144, "ON_PointCloud.m_plane has unexpected offset % instead of 144", ((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_plane)) == 128, "ON_PointCloud.m_plane has unexpected size % instead of 128", size_of(type_of(ON_PointCloud.m_plane)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 272, "ON_PointCloud.m_bbox has unexpected offset % instead of 272", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_bbox)) == 48, "ON_PointCloud.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_PointCloud.m_bbox)));
        assert(((cast(*void)(*instance.m_flags)) - cast(*void)(*instance)) == 320, "ON_PointCloud.m_flags has unexpected offset % instead of 320", ((cast(*void)(*instance.m_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointCloud.m_flags)) == 4, "ON_PointCloud.m_flags has unexpected size % instead of 4", size_of(type_of(ON_PointCloud.m_flags)));
        assert(size_of(ON_PointCloud) == 328, "ON_PointCloud has size % instead of 328", size_of(ON_PointCloud));
    }

    {
        instance: ON_CurveProxy;
        assert(((cast(*void)(*instance.m_real_curve)) - cast(*void)(*instance)) == 16, "ON_CurveProxy.m_real_curve has unexpected offset % instead of 16", ((cast(*void)(*instance.m_real_curve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxy.m_real_curve)) == 8, "ON_CurveProxy.m_real_curve has unexpected size % instead of 8", size_of(type_of(ON_CurveProxy.m_real_curve)));
        assert(((cast(*void)(*instance.m_bReversed)) - cast(*void)(*instance)) == 24, "ON_CurveProxy.m_bReversed has unexpected offset % instead of 24", ((cast(*void)(*instance.m_bReversed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxy.m_bReversed)) == 1, "ON_CurveProxy.m_bReversed has unexpected size % instead of 1", size_of(type_of(ON_CurveProxy.m_bReversed)));
        assert(((cast(*void)(*instance.m_real_curve_domain)) - cast(*void)(*instance)) == 32, "ON_CurveProxy.m_real_curve_domain has unexpected offset % instead of 32", ((cast(*void)(*instance.m_real_curve_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxy.m_real_curve_domain)) == 16, "ON_CurveProxy.m_real_curve_domain has unexpected size % instead of 16", size_of(type_of(ON_CurveProxy.m_real_curve_domain)));
        assert(((cast(*void)(*instance.m_this_domain)) - cast(*void)(*instance)) == 48, "ON_CurveProxy.m_this_domain has unexpected offset % instead of 48", ((cast(*void)(*instance.m_this_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxy.m_this_domain)) == 16, "ON_CurveProxy.m_this_domain has unexpected size % instead of 16", size_of(type_of(ON_CurveProxy.m_this_domain)));
        assert(size_of(ON_CurveProxy) == 64, "ON_CurveProxy has size % instead of 64", size_of(ON_CurveProxy));
    }

    {
        instance: ON_SurfaceProxy;
        assert(((cast(*void)(*instance.m_surface)) - cast(*void)(*instance)) == 16, "ON_SurfaceProxy.m_surface has unexpected offset % instead of 16", ((cast(*void)(*instance.m_surface)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProxy.m_surface)) == 8, "ON_SurfaceProxy.m_surface has unexpected size % instead of 8", size_of(type_of(ON_SurfaceProxy.m_surface)));
        assert(((cast(*void)(*instance.m_bTransposed)) - cast(*void)(*instance)) == 24, "ON_SurfaceProxy.m_bTransposed has unexpected offset % instead of 24", ((cast(*void)(*instance.m_bTransposed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceProxy.m_bTransposed)) == 1, "ON_SurfaceProxy.m_bTransposed has unexpected size % instead of 1", size_of(type_of(ON_SurfaceProxy.m_bTransposed)));
        assert(size_of(ON_SurfaceProxy) == 32, "ON_SurfaceProxy has size % instead of 32", size_of(ON_SurfaceProxy));
    }

    {
        instance: ON_SubDDisplayParameters;
        assert(((cast(*void)(*instance.m_bDisplayDensityIsAbsolute)) - cast(*void)(*instance)) == 0, "ON_SubDDisplayParameters.m_bDisplayDensityIsAbsolute has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bDisplayDensityIsAbsolute)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_bDisplayDensityIsAbsolute)) == 1, "ON_SubDDisplayParameters.m_bDisplayDensityIsAbsolute has unexpected size % instead of 1", size_of(type_of(ON_SubDDisplayParameters.m_bDisplayDensityIsAbsolute)));
        assert(((cast(*void)(*instance.m_display_density)) - cast(*void)(*instance)) == 1, "ON_SubDDisplayParameters.m_display_density has unexpected offset % instead of 1", ((cast(*void)(*instance.m_display_density)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_display_density)) == 1, "ON_SubDDisplayParameters.m_display_density has unexpected size % instead of 1", size_of(type_of(ON_SubDDisplayParameters.m_display_density)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 2, "ON_SubDDisplayParameters.m_reserved has unexpected offset % instead of 2", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_reserved)) == 2, "ON_SubDDisplayParameters.m_reserved has unexpected size % instead of 2", size_of(type_of(ON_SubDDisplayParameters.m_reserved)));
        assert(((cast(*void)(*instance.m_bControlNetMesh)) - cast(*void)(*instance)) == 4, "ON_SubDDisplayParameters.m_bControlNetMesh has unexpected offset % instead of 4", ((cast(*void)(*instance.m_bControlNetMesh)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_bControlNetMesh)) == 1, "ON_SubDDisplayParameters.m_bControlNetMesh has unexpected size % instead of 1", size_of(type_of(ON_SubDDisplayParameters.m_bControlNetMesh)));
        assert(((cast(*void)(*instance.m_context)) - cast(*void)(*instance)) == 5, "ON_SubDDisplayParameters.m_context has unexpected offset % instead of 5", ((cast(*void)(*instance.m_context)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_context)) == 1, "ON_SubDDisplayParameters.m_context has unexpected size % instead of 1", size_of(type_of(ON_SubDDisplayParameters.m_context)));
        assert(((cast(*void)(*instance.m_bComputeCurvature)) - cast(*void)(*instance)) == 6, "ON_SubDDisplayParameters.m_bComputeCurvature has unexpected offset % instead of 6", ((cast(*void)(*instance.m_bComputeCurvature)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_bComputeCurvature)) == 1, "ON_SubDDisplayParameters.m_bComputeCurvature has unexpected size % instead of 1", size_of(type_of(ON_SubDDisplayParameters.m_bComputeCurvature)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 7, "ON_SubDDisplayParameters.m_reserved3 has unexpected offset % instead of 7", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_reserved3)) == 1, "ON_SubDDisplayParameters.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_SubDDisplayParameters.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 8, "ON_SubDDisplayParameters.m_reserved4 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_reserved4)) == 4, "ON_SubDDisplayParameters.m_reserved4 has unexpected size % instead of 4", size_of(type_of(ON_SubDDisplayParameters.m_reserved4)));
        assert(((cast(*void)(*instance.m_reserved5)) - cast(*void)(*instance)) == 12, "ON_SubDDisplayParameters.m_reserved5 has unexpected offset % instead of 12", ((cast(*void)(*instance.m_reserved5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_reserved5)) == 4, "ON_SubDDisplayParameters.m_reserved5 has unexpected size % instead of 4", size_of(type_of(ON_SubDDisplayParameters.m_reserved5)));
        assert(((cast(*void)(*instance.m_reserved6)) - cast(*void)(*instance)) == 16, "ON_SubDDisplayParameters.m_reserved6 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved6)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_reserved6)) == 8, "ON_SubDDisplayParameters.m_reserved6 has unexpected size % instead of 8", size_of(type_of(ON_SubDDisplayParameters.m_reserved6)));
        assert(((cast(*void)(*instance.m_reserved7)) - cast(*void)(*instance)) == 24, "ON_SubDDisplayParameters.m_reserved7 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_reserved7)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_reserved7)) == 8, "ON_SubDDisplayParameters.m_reserved7 has unexpected size % instead of 8", size_of(type_of(ON_SubDDisplayParameters.m_reserved7)));
        assert(((cast(*void)(*instance.m_terminator)) - cast(*void)(*instance)) == 32, "ON_SubDDisplayParameters.m_terminator has unexpected offset % instead of 32", ((cast(*void)(*instance.m_terminator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_terminator)) == 8, "ON_SubDDisplayParameters.m_terminator has unexpected size % instead of 8", size_of(type_of(ON_SubDDisplayParameters.m_terminator)));
        assert(((cast(*void)(*instance.m_progress_reporter)) - cast(*void)(*instance)) == 40, "ON_SubDDisplayParameters.m_progress_reporter has unexpected offset % instead of 40", ((cast(*void)(*instance.m_progress_reporter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_progress_reporter)) == 8, "ON_SubDDisplayParameters.m_progress_reporter has unexpected size % instead of 8", size_of(type_of(ON_SubDDisplayParameters.m_progress_reporter)));
        assert(((cast(*void)(*instance.m_progress_reporter_interval)) - cast(*void)(*instance)) == 48, "ON_SubDDisplayParameters.m_progress_reporter_interval has unexpected offset % instead of 48", ((cast(*void)(*instance.m_progress_reporter_interval)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDDisplayParameters.m_progress_reporter_interval)) == 16, "ON_SubDDisplayParameters.m_progress_reporter_interval has unexpected size % instead of 16", size_of(type_of(ON_SubDDisplayParameters.m_progress_reporter_interval)));
        assert(size_of(ON_SubDDisplayParameters) == 64, "ON_SubDDisplayParameters has size % instead of 64", size_of(ON_SubDDisplayParameters));
    }

    {
        instance: ON_MeshParameters;
        assert(((cast(*void)(*instance.m_bCustomSettings)) - cast(*void)(*instance)) == 0, "ON_MeshParameters.m_bCustomSettings has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bCustomSettings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bCustomSettings)) == 1, "ON_MeshParameters.m_bCustomSettings has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bCustomSettings)));
        assert(((cast(*void)(*instance.m_bCustomSettingsEnabled)) - cast(*void)(*instance)) == 1, "ON_MeshParameters.m_bCustomSettingsEnabled has unexpected offset % instead of 1", ((cast(*void)(*instance.m_bCustomSettingsEnabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bCustomSettingsEnabled)) == 1, "ON_MeshParameters.m_bCustomSettingsEnabled has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bCustomSettingsEnabled)));
        assert(((cast(*void)(*instance.m_bComputeCurvature)) - cast(*void)(*instance)) == 2, "ON_MeshParameters.m_bComputeCurvature has unexpected offset % instead of 2", ((cast(*void)(*instance.m_bComputeCurvature)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bComputeCurvature)) == 1, "ON_MeshParameters.m_bComputeCurvature has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bComputeCurvature)));
        assert(((cast(*void)(*instance.m_bSimplePlanes)) - cast(*void)(*instance)) == 3, "ON_MeshParameters.m_bSimplePlanes has unexpected offset % instead of 3", ((cast(*void)(*instance.m_bSimplePlanes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bSimplePlanes)) == 1, "ON_MeshParameters.m_bSimplePlanes has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bSimplePlanes)));
        assert(((cast(*void)(*instance.m_bRefine)) - cast(*void)(*instance)) == 4, "ON_MeshParameters.m_bRefine has unexpected offset % instead of 4", ((cast(*void)(*instance.m_bRefine)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bRefine)) == 1, "ON_MeshParameters.m_bRefine has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bRefine)));
        assert(((cast(*void)(*instance.m_bJaggedSeams)) - cast(*void)(*instance)) == 5, "ON_MeshParameters.m_bJaggedSeams has unexpected offset % instead of 5", ((cast(*void)(*instance.m_bJaggedSeams)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bJaggedSeams)) == 1, "ON_MeshParameters.m_bJaggedSeams has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bJaggedSeams)));
        assert(((cast(*void)(*instance.m_bDoublePrecision)) - cast(*void)(*instance)) == 6, "ON_MeshParameters.m_bDoublePrecision has unexpected offset % instead of 6", ((cast(*void)(*instance.m_bDoublePrecision)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bDoublePrecision)) == 1, "ON_MeshParameters.m_bDoublePrecision has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bDoublePrecision)));
        assert(((cast(*void)(*instance.m_bClosedObjectPostProcess)) - cast(*void)(*instance)) == 7, "ON_MeshParameters.m_bClosedObjectPostProcess has unexpected offset % instead of 7", ((cast(*void)(*instance.m_bClosedObjectPostProcess)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bClosedObjectPostProcess)) == 1, "ON_MeshParameters.m_bClosedObjectPostProcess has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bClosedObjectPostProcess)));
        assert(((cast(*void)(*instance.m_mesher_id)) - cast(*void)(*instance)) == 8, "ON_MeshParameters.m_mesher_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_mesher_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_mesher_id)) == 16, "ON_MeshParameters.m_mesher_id has unexpected size % instead of 16", size_of(type_of(ON_MeshParameters.m_mesher_id)));
        assert(((cast(*void)(*instance.m_mesher)) - cast(*void)(*instance)) == 24, "ON_MeshParameters.m_mesher has unexpected offset % instead of 24", ((cast(*void)(*instance.m_mesher)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_mesher)) == 1, "ON_MeshParameters.m_mesher has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_mesher)));
        assert(((cast(*void)(*instance.m_texture_range)) - cast(*void)(*instance)) == 25, "ON_MeshParameters.m_texture_range has unexpected offset % instead of 25", ((cast(*void)(*instance.m_texture_range)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_texture_range)) == 1, "ON_MeshParameters.m_texture_range has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_texture_range)));
        assert(((cast(*void)(*instance.m_face_type)) - cast(*void)(*instance)) == 26, "ON_MeshParameters.m_face_type has unexpected offset % instead of 26", ((cast(*void)(*instance.m_face_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_face_type)) == 1, "ON_MeshParameters.m_face_type has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_face_type)));
        assert(((cast(*void)(*instance.m_subd_mesh_parameters_as_char)) - cast(*void)(*instance)) == 27, "ON_MeshParameters.m_subd_mesh_parameters_as_char has unexpected offset % instead of 27", ((cast(*void)(*instance.m_subd_mesh_parameters_as_char)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_subd_mesh_parameters_as_char)) == 1, "ON_MeshParameters.m_subd_mesh_parameters_as_char has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_subd_mesh_parameters_as_char)));
        assert(((cast(*void)(*instance.m_grid_min_count)) - cast(*void)(*instance)) == 28, "ON_MeshParameters.m_grid_min_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_grid_min_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_grid_min_count)) == 4, "ON_MeshParameters.m_grid_min_count has unexpected size % instead of 4", size_of(type_of(ON_MeshParameters.m_grid_min_count)));
        assert(((cast(*void)(*instance.m_grid_max_count)) - cast(*void)(*instance)) == 32, "ON_MeshParameters.m_grid_max_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_grid_max_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_grid_max_count)) == 4, "ON_MeshParameters.m_grid_max_count has unexpected size % instead of 4", size_of(type_of(ON_MeshParameters.m_grid_max_count)));
        assert(((cast(*void)(*instance.m_geometry_settings_hash)) - cast(*void)(*instance)) == 36, "ON_MeshParameters.m_geometry_settings_hash has unexpected offset % instead of 36", ((cast(*void)(*instance.m_geometry_settings_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_geometry_settings_hash)) == 20, "ON_MeshParameters.m_geometry_settings_hash has unexpected size % instead of 20", size_of(type_of(ON_MeshParameters.m_geometry_settings_hash)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 56, "ON_MeshParameters.m_reserved2 has unexpected offset % instead of 56", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_reserved2)) == 4, "ON_MeshParameters.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_MeshParameters.m_reserved2)));
        assert(((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)) == 64, "ON_MeshParameters.m_tolerance has unexpected offset % instead of 64", ((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_tolerance)) == 8, "ON_MeshParameters.m_tolerance has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_tolerance)));
        assert(((cast(*void)(*instance.m_relative_tolerance)) - cast(*void)(*instance)) == 72, "ON_MeshParameters.m_relative_tolerance has unexpected offset % instead of 72", ((cast(*void)(*instance.m_relative_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_relative_tolerance)) == 8, "ON_MeshParameters.m_relative_tolerance has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_relative_tolerance)));
        assert(((cast(*void)(*instance.m_min_tolerance)) - cast(*void)(*instance)) == 80, "ON_MeshParameters.m_min_tolerance has unexpected offset % instead of 80", ((cast(*void)(*instance.m_min_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_min_tolerance)) == 8, "ON_MeshParameters.m_min_tolerance has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_min_tolerance)));
        assert(((cast(*void)(*instance.m_min_edge_length)) - cast(*void)(*instance)) == 88, "ON_MeshParameters.m_min_edge_length has unexpected offset % instead of 88", ((cast(*void)(*instance.m_min_edge_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_min_edge_length)) == 8, "ON_MeshParameters.m_min_edge_length has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_min_edge_length)));
        assert(((cast(*void)(*instance.m_max_edge_length)) - cast(*void)(*instance)) == 96, "ON_MeshParameters.m_max_edge_length has unexpected offset % instead of 96", ((cast(*void)(*instance.m_max_edge_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_max_edge_length)) == 8, "ON_MeshParameters.m_max_edge_length has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_max_edge_length)));
        assert(((cast(*void)(*instance.m_grid_aspect_ratio)) - cast(*void)(*instance)) == 104, "ON_MeshParameters.m_grid_aspect_ratio has unexpected offset % instead of 104", ((cast(*void)(*instance.m_grid_aspect_ratio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_grid_aspect_ratio)) == 8, "ON_MeshParameters.m_grid_aspect_ratio has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_grid_aspect_ratio)));
        assert(((cast(*void)(*instance.m_grid_angle_radians)) - cast(*void)(*instance)) == 112, "ON_MeshParameters.m_grid_angle_radians has unexpected offset % instead of 112", ((cast(*void)(*instance.m_grid_angle_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_grid_angle_radians)) == 8, "ON_MeshParameters.m_grid_angle_radians has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_grid_angle_radians)));
        assert(((cast(*void)(*instance.m_grid_amplification)) - cast(*void)(*instance)) == 120, "ON_MeshParameters.m_grid_amplification has unexpected offset % instead of 120", ((cast(*void)(*instance.m_grid_amplification)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_grid_amplification)) == 8, "ON_MeshParameters.m_grid_amplification has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_grid_amplification)));
        assert(((cast(*void)(*instance.m_refine_angle_radians)) - cast(*void)(*instance)) == 128, "ON_MeshParameters.m_refine_angle_radians has unexpected offset % instead of 128", ((cast(*void)(*instance.m_refine_angle_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_refine_angle_radians)) == 8, "ON_MeshParameters.m_refine_angle_radians has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_refine_angle_radians)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 136, "ON_MeshParameters.m_reserved3 has unexpected offset % instead of 136", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_reserved3)) == 1, "ON_MeshParameters.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 137, "ON_MeshParameters.m_reserved4 has unexpected offset % instead of 137", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_reserved4)) == 1, "ON_MeshParameters.m_reserved4 has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_reserved4)));
        assert(((cast(*void)(*instance.m_bEvaluatorBasedTessellation)) - cast(*void)(*instance)) == 138, "ON_MeshParameters.m_bEvaluatorBasedTessellation has unexpected offset % instead of 138", ((cast(*void)(*instance.m_bEvaluatorBasedTessellation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_bEvaluatorBasedTessellation)) == 1, "ON_MeshParameters.m_bEvaluatorBasedTessellation has unexpected size % instead of 1", size_of(type_of(ON_MeshParameters.m_bEvaluatorBasedTessellation)));
        assert(((cast(*void)(*instance.m_curve_tess_min_num_segments)) - cast(*void)(*instance)) == 140, "ON_MeshParameters.m_curve_tess_min_num_segments has unexpected offset % instead of 140", ((cast(*void)(*instance.m_curve_tess_min_num_segments)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_curve_tess_min_num_segments)) == 4, "ON_MeshParameters.m_curve_tess_min_num_segments has unexpected size % instead of 4", size_of(type_of(ON_MeshParameters.m_curve_tess_min_num_segments)));
        assert(((cast(*void)(*instance.m_curve_tess_angle_tol_in_degrees)) - cast(*void)(*instance)) == 144, "ON_MeshParameters.m_curve_tess_angle_tol_in_degrees has unexpected offset % instead of 144", ((cast(*void)(*instance.m_curve_tess_angle_tol_in_degrees)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_curve_tess_angle_tol_in_degrees)) == 8, "ON_MeshParameters.m_curve_tess_angle_tol_in_degrees has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_curve_tess_angle_tol_in_degrees)));
        assert(((cast(*void)(*instance.m_curve_tess_max_dist_between_points)) - cast(*void)(*instance)) == 152, "ON_MeshParameters.m_curve_tess_max_dist_between_points has unexpected offset % instead of 152", ((cast(*void)(*instance.m_curve_tess_max_dist_between_points)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_curve_tess_max_dist_between_points)) == 8, "ON_MeshParameters.m_curve_tess_max_dist_between_points has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_curve_tess_max_dist_between_points)));
        assert(((cast(*void)(*instance.m_curve_tess_min_parametric_ratio)) - cast(*void)(*instance)) == 160, "ON_MeshParameters.m_curve_tess_min_parametric_ratio has unexpected offset % instead of 160", ((cast(*void)(*instance.m_curve_tess_min_parametric_ratio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_curve_tess_min_parametric_ratio)) == 8, "ON_MeshParameters.m_curve_tess_min_parametric_ratio has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_curve_tess_min_parametric_ratio)));
        assert(((cast(*void)(*instance.m_surface_tess_angle_tol_in_degrees)) - cast(*void)(*instance)) == 168, "ON_MeshParameters.m_surface_tess_angle_tol_in_degrees has unexpected offset % instead of 168", ((cast(*void)(*instance.m_surface_tess_angle_tol_in_degrees)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_surface_tess_angle_tol_in_degrees)) == 8, "ON_MeshParameters.m_surface_tess_angle_tol_in_degrees has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_surface_tess_angle_tol_in_degrees)));
        assert(((cast(*void)(*instance.m_surface_tess_max_edge_length)) - cast(*void)(*instance)) == 176, "ON_MeshParameters.m_surface_tess_max_edge_length has unexpected offset % instead of 176", ((cast(*void)(*instance.m_surface_tess_max_edge_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_surface_tess_max_edge_length)) == 8, "ON_MeshParameters.m_surface_tess_max_edge_length has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_surface_tess_max_edge_length)));
        assert(((cast(*void)(*instance.m_surface_tess_min_edge_length)) - cast(*void)(*instance)) == 184, "ON_MeshParameters.m_surface_tess_min_edge_length has unexpected offset % instead of 184", ((cast(*void)(*instance.m_surface_tess_min_edge_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_surface_tess_min_edge_length)) == 8, "ON_MeshParameters.m_surface_tess_min_edge_length has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_surface_tess_min_edge_length)));
        assert(((cast(*void)(*instance.m_surface_tess_min_edge_length_ratio_uv)) - cast(*void)(*instance)) == 192, "ON_MeshParameters.m_surface_tess_min_edge_length_ratio_uv has unexpected offset % instead of 192", ((cast(*void)(*instance.m_surface_tess_min_edge_length_ratio_uv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_surface_tess_min_edge_length_ratio_uv)) == 8, "ON_MeshParameters.m_surface_tess_min_edge_length_ratio_uv has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_surface_tess_min_edge_length_ratio_uv)));
        assert(((cast(*void)(*instance.m_surface_tess_max_aspect_ratio)) - cast(*void)(*instance)) == 200, "ON_MeshParameters.m_surface_tess_max_aspect_ratio has unexpected offset % instead of 200", ((cast(*void)(*instance.m_surface_tess_max_aspect_ratio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_surface_tess_max_aspect_ratio)) == 8, "ON_MeshParameters.m_surface_tess_max_aspect_ratio has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_surface_tess_max_aspect_ratio)));
        assert(((cast(*void)(*instance.m_smoothing_passes)) - cast(*void)(*instance)) == 208, "ON_MeshParameters.m_smoothing_passes has unexpected offset % instead of 208", ((cast(*void)(*instance.m_smoothing_passes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_smoothing_passes)) == 4, "ON_MeshParameters.m_smoothing_passes has unexpected size % instead of 4", size_of(type_of(ON_MeshParameters.m_smoothing_passes)));
        assert(((cast(*void)(*instance.m_subd_stuff_reserved5)) - cast(*void)(*instance)) == 212, "ON_MeshParameters.m_subd_stuff_reserved5 has unexpected offset % instead of 212", ((cast(*void)(*instance.m_subd_stuff_reserved5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_subd_stuff_reserved5)) == 4, "ON_MeshParameters.m_subd_stuff_reserved5 has unexpected size % instead of 4", size_of(type_of(ON_MeshParameters.m_subd_stuff_reserved5)));
        assert(((cast(*void)(*instance.m_reserved6)) - cast(*void)(*instance)) == 216, "ON_MeshParameters.m_reserved6 has unexpected offset % instead of 216", ((cast(*void)(*instance.m_reserved6)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshParameters.m_reserved6)) == 8, "ON_MeshParameters.m_reserved6 has unexpected size % instead of 8", size_of(type_of(ON_MeshParameters.m_reserved6)));
        assert(size_of(ON_MeshParameters) == 224, "ON_MeshParameters has size % instead of 224", size_of(ON_MeshParameters));
    }

    {
        instance: ON_MeshCurvatureStats;
        assert(((cast(*void)(*instance.m_style)) - cast(*void)(*instance)) == 0, "ON_MeshCurvatureStats.m_style has unexpected offset % instead of 0", ((cast(*void)(*instance.m_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_style)) == 4, "ON_MeshCurvatureStats.m_style has unexpected size % instead of 4", size_of(type_of(ON_MeshCurvatureStats.m_style)));
        assert(((cast(*void)(*instance.m_infinity)) - cast(*void)(*instance)) == 8, "ON_MeshCurvatureStats.m_infinity has unexpected offset % instead of 8", ((cast(*void)(*instance.m_infinity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_infinity)) == 8, "ON_MeshCurvatureStats.m_infinity has unexpected size % instead of 8", size_of(type_of(ON_MeshCurvatureStats.m_infinity)));
        assert(((cast(*void)(*instance.m_count_infinite)) - cast(*void)(*instance)) == 16, "ON_MeshCurvatureStats.m_count_infinite has unexpected offset % instead of 16", ((cast(*void)(*instance.m_count_infinite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_count_infinite)) == 4, "ON_MeshCurvatureStats.m_count_infinite has unexpected size % instead of 4", size_of(type_of(ON_MeshCurvatureStats.m_count_infinite)));
        assert(((cast(*void)(*instance.m_count)) - cast(*void)(*instance)) == 20, "ON_MeshCurvatureStats.m_count has unexpected offset % instead of 20", ((cast(*void)(*instance.m_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_count)) == 4, "ON_MeshCurvatureStats.m_count has unexpected size % instead of 4", size_of(type_of(ON_MeshCurvatureStats.m_count)));
        assert(((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)) == 24, "ON_MeshCurvatureStats.m_mode has unexpected offset % instead of 24", ((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_mode)) == 8, "ON_MeshCurvatureStats.m_mode has unexpected size % instead of 8", size_of(type_of(ON_MeshCurvatureStats.m_mode)));
        assert(((cast(*void)(*instance.m_average)) - cast(*void)(*instance)) == 32, "ON_MeshCurvatureStats.m_average has unexpected offset % instead of 32", ((cast(*void)(*instance.m_average)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_average)) == 8, "ON_MeshCurvatureStats.m_average has unexpected size % instead of 8", size_of(type_of(ON_MeshCurvatureStats.m_average)));
        assert(((cast(*void)(*instance.m_adev)) - cast(*void)(*instance)) == 40, "ON_MeshCurvatureStats.m_adev has unexpected offset % instead of 40", ((cast(*void)(*instance.m_adev)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_adev)) == 8, "ON_MeshCurvatureStats.m_adev has unexpected size % instead of 8", size_of(type_of(ON_MeshCurvatureStats.m_adev)));
        assert(((cast(*void)(*instance.m_range)) - cast(*void)(*instance)) == 48, "ON_MeshCurvatureStats.m_range has unexpected offset % instead of 48", ((cast(*void)(*instance.m_range)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCurvatureStats.m_range)) == 16, "ON_MeshCurvatureStats.m_range has unexpected size % instead of 16", size_of(type_of(ON_MeshCurvatureStats.m_range)));
        assert(size_of(ON_MeshCurvatureStats) == 64, "ON_MeshCurvatureStats has size % instead of 64", size_of(ON_MeshCurvatureStats));
    }

    {
        instance: ON_MeshTopologyVertex;
        assert(((cast(*void)(*instance.m_tope_count)) - cast(*void)(*instance)) == 0, "ON_MeshTopologyVertex.m_tope_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_tope_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyVertex.m_tope_count)) == 4, "ON_MeshTopologyVertex.m_tope_count has unexpected size % instead of 4", size_of(type_of(ON_MeshTopologyVertex.m_tope_count)));
        assert(((cast(*void)(*instance.m_topei)) - cast(*void)(*instance)) == 8, "ON_MeshTopologyVertex.m_topei has unexpected offset % instead of 8", ((cast(*void)(*instance.m_topei)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyVertex.m_topei)) == 8, "ON_MeshTopologyVertex.m_topei has unexpected size % instead of 8", size_of(type_of(ON_MeshTopologyVertex.m_topei)));
        assert(((cast(*void)(*instance.m_v_count)) - cast(*void)(*instance)) == 16, "ON_MeshTopologyVertex.m_v_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_v_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyVertex.m_v_count)) == 4, "ON_MeshTopologyVertex.m_v_count has unexpected size % instead of 4", size_of(type_of(ON_MeshTopologyVertex.m_v_count)));
        assert(((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)) == 24, "ON_MeshTopologyVertex.m_vi has unexpected offset % instead of 24", ((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyVertex.m_vi)) == 8, "ON_MeshTopologyVertex.m_vi has unexpected size % instead of 8", size_of(type_of(ON_MeshTopologyVertex.m_vi)));
        assert(size_of(ON_MeshTopologyVertex) == 32, "ON_MeshTopologyVertex has size % instead of 32", size_of(ON_MeshTopologyVertex));
    }

    {
        instance: ON_MeshTopologyEdge;
        assert(((cast(*void)(*instance.m_topvi)) - cast(*void)(*instance)) == 0, "ON_MeshTopologyEdge.m_topvi has unexpected offset % instead of 0", ((cast(*void)(*instance.m_topvi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyEdge.m_topvi)) == 8, "ON_MeshTopologyEdge.m_topvi has unexpected size % instead of 8", size_of(type_of(ON_MeshTopologyEdge.m_topvi)));
        assert(((cast(*void)(*instance.m_topf_count)) - cast(*void)(*instance)) == 8, "ON_MeshTopologyEdge.m_topf_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_topf_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyEdge.m_topf_count)) == 4, "ON_MeshTopologyEdge.m_topf_count has unexpected size % instead of 4", size_of(type_of(ON_MeshTopologyEdge.m_topf_count)));
        assert(((cast(*void)(*instance.m_topfi)) - cast(*void)(*instance)) == 16, "ON_MeshTopologyEdge.m_topfi has unexpected offset % instead of 16", ((cast(*void)(*instance.m_topfi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyEdge.m_topfi)) == 8, "ON_MeshTopologyEdge.m_topfi has unexpected size % instead of 8", size_of(type_of(ON_MeshTopologyEdge.m_topfi)));
        assert(size_of(ON_MeshTopologyEdge) == 24, "ON_MeshTopologyEdge has size % instead of 24", size_of(ON_MeshTopologyEdge));
    }

    {
        instance: ON_MeshTopologyFace;
        assert(((cast(*void)(*instance.m_topei)) - cast(*void)(*instance)) == 0, "ON_MeshTopologyFace.m_topei has unexpected offset % instead of 0", ((cast(*void)(*instance.m_topei)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyFace.m_topei)) == 16, "ON_MeshTopologyFace.m_topei has unexpected size % instead of 16", size_of(type_of(ON_MeshTopologyFace.m_topei)));
        assert(((cast(*void)(*instance.m_reve)) - cast(*void)(*instance)) == 16, "ON_MeshTopologyFace.m_reve has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopologyFace.m_reve)) == 4, "ON_MeshTopologyFace.m_reve has unexpected size % instead of 4", size_of(type_of(ON_MeshTopologyFace.m_reve)));
        assert(size_of(ON_MeshTopologyFace) == 20, "ON_MeshTopologyFace has size % instead of 20", size_of(ON_MeshTopologyFace));
    }

    {
        instance: ON_MeshFace;
        assert(((cast(*void)(*instance.vi)) - cast(*void)(*instance)) == 0, "ON_MeshFace.vi has unexpected offset % instead of 0", ((cast(*void)(*instance.vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFace.vi)) == 16, "ON_MeshFace.vi has unexpected size % instead of 16", size_of(type_of(ON_MeshFace.vi)));
        assert(size_of(ON_MeshFace) == 16, "ON_MeshFace has size % instead of 16", size_of(ON_MeshFace));
    }

    {
        instance: ON_MeshTriangle;
        assert(((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)) == 0, "ON_MeshTriangle.m_vi has unexpected offset % instead of 0", ((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTriangle.m_vi)) == 12, "ON_MeshTriangle.m_vi has unexpected size % instead of 12", size_of(type_of(ON_MeshTriangle.m_vi)));
        assert(size_of(ON_MeshTriangle) == 12, "ON_MeshTriangle has size % instead of 12", size_of(ON_MeshTriangle));
    }

    {
        instance: ON_MeshFaceList;
        assert(((cast(*void)(*instance.m_bQuadFaces)) - cast(*void)(*instance)) == 0, "ON_MeshFaceList.m_bQuadFaces has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bQuadFaces)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceList.m_bQuadFaces)) == 1, "ON_MeshFaceList.m_bQuadFaces has unexpected size % instead of 1", size_of(type_of(ON_MeshFaceList.m_bQuadFaces)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 4, "ON_MeshFaceList.m_face_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceList.m_face_count)) == 4, "ON_MeshFaceList.m_face_count has unexpected size % instead of 4", size_of(type_of(ON_MeshFaceList.m_face_count)));
        assert(((cast(*void)(*instance.m_face_stride)) - cast(*void)(*instance)) == 8, "ON_MeshFaceList.m_face_stride has unexpected offset % instead of 8", ((cast(*void)(*instance.m_face_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceList.m_face_stride)) == 4, "ON_MeshFaceList.m_face_stride has unexpected size % instead of 4", size_of(type_of(ON_MeshFaceList.m_face_stride)));
        assert(((cast(*void)(*instance.m_faces)) - cast(*void)(*instance)) == 16, "ON_MeshFaceList.m_faces has unexpected offset % instead of 16", ((cast(*void)(*instance.m_faces)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceList.m_faces)) == 8, "ON_MeshFaceList.m_faces has unexpected size % instead of 8", size_of(type_of(ON_MeshFaceList.m_faces)));
        assert(size_of(ON_MeshFaceList) == 24, "ON_MeshFaceList has size % instead of 24", size_of(ON_MeshFaceList));
    }

    {
        instance: ON_MeshVertexFaceMap;
        assert(((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)) == 0, "ON_MeshVertexFaceMap.m_vertex_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshVertexFaceMap.m_vertex_count)) == 4, "ON_MeshVertexFaceMap.m_vertex_count has unexpected size % instead of 4", size_of(type_of(ON_MeshVertexFaceMap.m_vertex_count)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 4, "ON_MeshVertexFaceMap.m_face_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshVertexFaceMap.m_face_count)) == 4, "ON_MeshVertexFaceMap.m_face_count has unexpected size % instead of 4", size_of(type_of(ON_MeshVertexFaceMap.m_face_count)));
        assert(((cast(*void)(*instance.m_vertex_face_map)) - cast(*void)(*instance)) == 8, "ON_MeshVertexFaceMap.m_vertex_face_map has unexpected offset % instead of 8", ((cast(*void)(*instance.m_vertex_face_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshVertexFaceMap.m_vertex_face_map)) == 8, "ON_MeshVertexFaceMap.m_vertex_face_map has unexpected size % instead of 8", size_of(type_of(ON_MeshVertexFaceMap.m_vertex_face_map)));
        assert(((cast(*void)(*instance.m_p)) - cast(*void)(*instance)) == 16, "ON_MeshVertexFaceMap.m_p has unexpected offset % instead of 16", ((cast(*void)(*instance.m_p)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshVertexFaceMap.m_p)) == 8, "ON_MeshVertexFaceMap.m_p has unexpected size % instead of 8", size_of(type_of(ON_MeshVertexFaceMap.m_p)));
        assert(size_of(ON_MeshVertexFaceMap) == 24, "ON_MeshVertexFaceMap has size % instead of 24", size_of(ON_MeshVertexFaceMap));
    }

    {
        instance: ON_MeshNgonBuffer;
        assert(((cast(*void)(*instance.m_ngon_buffer)) - cast(*void)(*instance)) == 0, "ON_MeshNgonBuffer.m_ngon_buffer has unexpected offset % instead of 0", ((cast(*void)(*instance.m_ngon_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonBuffer.m_ngon_buffer)) == 80, "ON_MeshNgonBuffer.m_ngon_buffer has unexpected size % instead of 80", size_of(type_of(ON_MeshNgonBuffer.m_ngon_buffer)));
        assert(size_of(ON_MeshNgonBuffer) == 80, "ON_MeshNgonBuffer has size % instead of 80", size_of(ON_MeshNgonBuffer));
    }

    {
        instance: ON_MeshNgon;
        assert(((cast(*void)(*instance.m_Vcount)) - cast(*void)(*instance)) == 0, "ON_MeshNgon.m_Vcount has unexpected offset % instead of 0", ((cast(*void)(*instance.m_Vcount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgon.m_Vcount)) == 4, "ON_MeshNgon.m_Vcount has unexpected size % instead of 4", size_of(type_of(ON_MeshNgon.m_Vcount)));
        assert(((cast(*void)(*instance.m_Fcount)) - cast(*void)(*instance)) == 4, "ON_MeshNgon.m_Fcount has unexpected offset % instead of 4", ((cast(*void)(*instance.m_Fcount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgon.m_Fcount)) == 4, "ON_MeshNgon.m_Fcount has unexpected size % instead of 4", size_of(type_of(ON_MeshNgon.m_Fcount)));
        assert(((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)) == 8, "ON_MeshNgon.m_vi has unexpected offset % instead of 8", ((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgon.m_vi)) == 8, "ON_MeshNgon.m_vi has unexpected size % instead of 8", size_of(type_of(ON_MeshNgon.m_vi)));
        assert(((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)) == 16, "ON_MeshNgon.m_fi has unexpected offset % instead of 16", ((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgon.m_fi)) == 8, "ON_MeshNgon.m_fi has unexpected size % instead of 8", size_of(type_of(ON_MeshNgon.m_fi)));
        assert(size_of(ON_MeshNgon) == 24, "ON_MeshNgon has size % instead of 24", size_of(ON_MeshNgon));
    }

    {
        instance: ON_MeshNgonAllocator;
        assert(((cast(*void)(*instance.m_7)) - cast(*void)(*instance)) == 0, "ON_MeshNgonAllocator.m_7 has unexpected offset % instead of 0", ((cast(*void)(*instance.m_7)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonAllocator.m_7)) == 72, "ON_MeshNgonAllocator.m_7 has unexpected size % instead of 72", size_of(type_of(ON_MeshNgonAllocator.m_7)));
        assert(((cast(*void)(*instance.m_15)) - cast(*void)(*instance)) == 72, "ON_MeshNgonAllocator.m_15 has unexpected offset % instead of 72", ((cast(*void)(*instance.m_15)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonAllocator.m_15)) == 72, "ON_MeshNgonAllocator.m_15 has unexpected size % instead of 72", size_of(type_of(ON_MeshNgonAllocator.m_15)));
        assert(((cast(*void)(*instance.m_31)) - cast(*void)(*instance)) == 144, "ON_MeshNgonAllocator.m_31 has unexpected offset % instead of 144", ((cast(*void)(*instance.m_31)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonAllocator.m_31)) == 8, "ON_MeshNgonAllocator.m_31 has unexpected size % instead of 8", size_of(type_of(ON_MeshNgonAllocator.m_31)));
        assert(((cast(*void)(*instance.m_63)) - cast(*void)(*instance)) == 152, "ON_MeshNgonAllocator.m_63 has unexpected offset % instead of 152", ((cast(*void)(*instance.m_63)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonAllocator.m_63)) == 8, "ON_MeshNgonAllocator.m_63 has unexpected size % instead of 8", size_of(type_of(ON_MeshNgonAllocator.m_63)));
        assert(((cast(*void)(*instance.m_active)) - cast(*void)(*instance)) == 160, "ON_MeshNgonAllocator.m_active has unexpected offset % instead of 160", ((cast(*void)(*instance.m_active)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonAllocator.m_active)) == 8, "ON_MeshNgonAllocator.m_active has unexpected size % instead of 8", size_of(type_of(ON_MeshNgonAllocator.m_active)));
        assert(size_of(ON_MeshNgonAllocator) == 168, "ON_MeshNgonAllocator has size % instead of 168", size_of(ON_MeshNgonAllocator));
    }

    {
        instance: ON_MeshFaceSide;
        assert(((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)) == 0, "ON_MeshFaceSide.m_vi has unexpected offset % instead of 0", ((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceSide.m_vi)) == 8, "ON_MeshFaceSide.m_vi has unexpected size % instead of 8", size_of(type_of(ON_MeshFaceSide.m_vi)));
        assert(((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)) == 8, "ON_MeshFaceSide.m_fi has unexpected offset % instead of 8", ((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceSide.m_fi)) == 4, "ON_MeshFaceSide.m_fi has unexpected size % instead of 4", size_of(type_of(ON_MeshFaceSide.m_fi)));
        assert(((cast(*void)(*instance.m_side)) - cast(*void)(*instance)) == 12, "ON_MeshFaceSide.m_side has unexpected offset % instead of 12", ((cast(*void)(*instance.m_side)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceSide.m_side)) == 1, "ON_MeshFaceSide.m_side has unexpected size % instead of 1", size_of(type_of(ON_MeshFaceSide.m_side)));
        assert(((cast(*void)(*instance.m_dir)) - cast(*void)(*instance)) == 13, "ON_MeshFaceSide.m_dir has unexpected offset % instead of 13", ((cast(*void)(*instance.m_dir)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceSide.m_dir)) == 1, "ON_MeshFaceSide.m_dir has unexpected size % instead of 1", size_of(type_of(ON_MeshFaceSide.m_dir)));
        assert(((cast(*void)(*instance.m_value)) - cast(*void)(*instance)) == 14, "ON_MeshFaceSide.m_value has unexpected offset % instead of 14", ((cast(*void)(*instance.m_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceSide.m_value)) == 2, "ON_MeshFaceSide.m_value has unexpected size % instead of 2", size_of(type_of(ON_MeshFaceSide.m_value)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 16, "ON_MeshFaceSide.m_id has unexpected offset % instead of 16", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshFaceSide.m_id)) == 4, "ON_MeshFaceSide.m_id has unexpected size % instead of 4", size_of(type_of(ON_MeshFaceSide.m_id)));
        assert(size_of(ON_MeshFaceSide) == 20, "ON_MeshFaceSide has size % instead of 20", size_of(ON_MeshFaceSide));
    }

    {
        instance: ON_MeshPart;
        assert(((cast(*void)(*instance.vi)) - cast(*void)(*instance)) == 0, "ON_MeshPart.vi has unexpected offset % instead of 0", ((cast(*void)(*instance.vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshPart.vi)) == 8, "ON_MeshPart.vi has unexpected size % instead of 8", size_of(type_of(ON_MeshPart.vi)));
        assert(((cast(*void)(*instance.fi)) - cast(*void)(*instance)) == 8, "ON_MeshPart.fi has unexpected offset % instead of 8", ((cast(*void)(*instance.fi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshPart.fi)) == 8, "ON_MeshPart.fi has unexpected size % instead of 8", size_of(type_of(ON_MeshPart.fi)));
        assert(((cast(*void)(*instance.vertex_count)) - cast(*void)(*instance)) == 16, "ON_MeshPart.vertex_count has unexpected offset % instead of 16", ((cast(*void)(*instance.vertex_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshPart.vertex_count)) == 4, "ON_MeshPart.vertex_count has unexpected size % instead of 4", size_of(type_of(ON_MeshPart.vertex_count)));
        assert(((cast(*void)(*instance.triangle_count)) - cast(*void)(*instance)) == 20, "ON_MeshPart.triangle_count has unexpected offset % instead of 20", ((cast(*void)(*instance.triangle_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshPart.triangle_count)) == 4, "ON_MeshPart.triangle_count has unexpected size % instead of 4", size_of(type_of(ON_MeshPart.triangle_count)));
        assert(size_of(ON_MeshPart) == 24, "ON_MeshPart has size % instead of 24", size_of(ON_MeshPart));
    }

    {
        instance: ON_MeshTopology.memchunk;
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 0, "ON_MeshTopology.memchunk.next has unexpected offset % instead of 0", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.memchunk.next)) == 8, "ON_MeshTopology.memchunk.next has unexpected size % instead of 8", size_of(type_of(ON_MeshTopology.memchunk.next)));
        assert(size_of(ON_MeshTopology.memchunk) == 8, "ON_MeshTopology.memchunk has size % instead of 8", size_of(ON_MeshTopology.memchunk));
    }

    {
        instance: ON_MeshTopology;
        assert(((cast(*void)(*instance.m_mesh)) - cast(*void)(*instance)) == 0, "ON_MeshTopology.m_mesh has unexpected offset % instead of 0", ((cast(*void)(*instance.m_mesh)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.m_mesh)) == 8, "ON_MeshTopology.m_mesh has unexpected size % instead of 8", size_of(type_of(ON_MeshTopology.m_mesh)));
        assert(((cast(*void)(*instance.m_topv_map)) - cast(*void)(*instance)) == 8, "ON_MeshTopology.m_topv_map has unexpected offset % instead of 8", ((cast(*void)(*instance.m_topv_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.m_topv_map)) == 24, "ON_MeshTopology.m_topv_map has unexpected size % instead of 24", size_of(type_of(ON_MeshTopology.m_topv_map)));
        assert(((cast(*void)(*instance.m_topv)) - cast(*void)(*instance)) == 32, "ON_MeshTopology.m_topv has unexpected offset % instead of 32", ((cast(*void)(*instance.m_topv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.m_topv)) == 24, "ON_MeshTopology.m_topv has unexpected size % instead of 24", size_of(type_of(ON_MeshTopology.m_topv)));
        assert(((cast(*void)(*instance.m_tope)) - cast(*void)(*instance)) == 56, "ON_MeshTopology.m_tope has unexpected offset % instead of 56", ((cast(*void)(*instance.m_tope)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.m_tope)) == 24, "ON_MeshTopology.m_tope has unexpected size % instead of 24", size_of(type_of(ON_MeshTopology.m_tope)));
        assert(((cast(*void)(*instance.m_topf)) - cast(*void)(*instance)) == 80, "ON_MeshTopology.m_topf has unexpected offset % instead of 80", ((cast(*void)(*instance.m_topf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.m_topf)) == 24, "ON_MeshTopology.m_topf has unexpected size % instead of 24", size_of(type_of(ON_MeshTopology.m_topf)));
        assert(((cast(*void)(*instance.m_memchunk)) - cast(*void)(*instance)) == 104, "ON_MeshTopology.m_memchunk has unexpected offset % instead of 104", ((cast(*void)(*instance.m_memchunk)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.m_memchunk)) == 8, "ON_MeshTopology.m_memchunk has unexpected size % instead of 8", size_of(type_of(ON_MeshTopology.m_memchunk)));
        assert(((cast(*void)(*instance.m_b32IsValid)) - cast(*void)(*instance)) == 112, "ON_MeshTopology.m_b32IsValid has unexpected offset % instead of 112", ((cast(*void)(*instance.m_b32IsValid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshTopology.m_b32IsValid)) == 4, "ON_MeshTopology.m_b32IsValid has unexpected size % instead of 4", size_of(type_of(ON_MeshTopology.m_b32IsValid)));
        assert(size_of(ON_MeshTopology) == 120, "ON_MeshTopology has size % instead of 120", size_of(ON_MeshTopology));
    }

    {
        instance: ON_MeshPartition;
        assert(((cast(*void)(*instance.m_partition_max_vertex_count)) - cast(*void)(*instance)) == 0, "ON_MeshPartition.m_partition_max_vertex_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_partition_max_vertex_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshPartition.m_partition_max_vertex_count)) == 4, "ON_MeshPartition.m_partition_max_vertex_count has unexpected size % instead of 4", size_of(type_of(ON_MeshPartition.m_partition_max_vertex_count)));
        assert(((cast(*void)(*instance.m_partition_max_triangle_count)) - cast(*void)(*instance)) == 4, "ON_MeshPartition.m_partition_max_triangle_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_partition_max_triangle_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshPartition.m_partition_max_triangle_count)) == 4, "ON_MeshPartition.m_partition_max_triangle_count has unexpected size % instead of 4", size_of(type_of(ON_MeshPartition.m_partition_max_triangle_count)));
        assert(((cast(*void)(*instance.m_part)) - cast(*void)(*instance)) == 8, "ON_MeshPartition.m_part has unexpected offset % instead of 8", ((cast(*void)(*instance.m_part)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshPartition.m_part)) == 24, "ON_MeshPartition.m_part has unexpected size % instead of 24", size_of(type_of(ON_MeshPartition.m_part)));
        assert(size_of(ON_MeshPartition) == 32, "ON_MeshPartition has size % instead of 32", size_of(ON_MeshPartition));
    }

    {
        instance: ON_MappingTag;
        assert(((cast(*void)(*instance.m_mapping_id)) - cast(*void)(*instance)) == 0, "ON_MappingTag.m_mapping_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_mapping_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingTag.m_mapping_id)) == 16, "ON_MappingTag.m_mapping_id has unexpected size % instead of 16", size_of(type_of(ON_MappingTag.m_mapping_id)));
        assert(((cast(*void)(*instance.m_mapping_type)) - cast(*void)(*instance)) == 16, "ON_MappingTag.m_mapping_type has unexpected offset % instead of 16", ((cast(*void)(*instance.m_mapping_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingTag.m_mapping_type)) == 4, "ON_MappingTag.m_mapping_type has unexpected size % instead of 4", size_of(type_of(ON_MappingTag.m_mapping_type)));
        assert(((cast(*void)(*instance.m_mapping_crc)) - cast(*void)(*instance)) == 20, "ON_MappingTag.m_mapping_crc has unexpected offset % instead of 20", ((cast(*void)(*instance.m_mapping_crc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingTag.m_mapping_crc)) == 4, "ON_MappingTag.m_mapping_crc has unexpected size % instead of 4", size_of(type_of(ON_MappingTag.m_mapping_crc)));
        assert(((cast(*void)(*instance.m_mesh_xform)) - cast(*void)(*instance)) == 24, "ON_MappingTag.m_mesh_xform has unexpected offset % instead of 24", ((cast(*void)(*instance.m_mesh_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MappingTag.m_mesh_xform)) == 128, "ON_MappingTag.m_mesh_xform has unexpected size % instead of 128", size_of(type_of(ON_MappingTag.m_mesh_xform)));
        assert(size_of(ON_MappingTag) == 152, "ON_MappingTag has size % instead of 152", size_of(ON_MappingTag));
    }

    {
        instance: ON_TextureCoordinates;
        assert(((cast(*void)(*instance.m_tag)) - cast(*void)(*instance)) == 0, "ON_TextureCoordinates.m_tag has unexpected offset % instead of 0", ((cast(*void)(*instance.m_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureCoordinates.m_tag)) == 152, "ON_TextureCoordinates.m_tag has unexpected size % instead of 152", size_of(type_of(ON_TextureCoordinates.m_tag)));
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 152, "ON_TextureCoordinates.m_dim has unexpected offset % instead of 152", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureCoordinates.m_dim)) == 4, "ON_TextureCoordinates.m_dim has unexpected size % instead of 4", size_of(type_of(ON_TextureCoordinates.m_dim)));
        assert(((cast(*void)(*instance.m_T)) - cast(*void)(*instance)) == 160, "ON_TextureCoordinates.m_T has unexpected offset % instead of 160", ((cast(*void)(*instance.m_T)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextureCoordinates.m_T)) == 24, "ON_TextureCoordinates.m_T has unexpected size % instead of 24", size_of(type_of(ON_TextureCoordinates.m_T)));
        assert(size_of(ON_TextureCoordinates) == 184, "ON_TextureCoordinates has size % instead of 184", size_of(ON_TextureCoordinates));
    }

    {
        instance: ON_SurfaceCurvatureColorMapping;
        assert(((cast(*void)(*instance.m_is_set)) - cast(*void)(*instance)) == 0, "ON_SurfaceCurvatureColorMapping.m_is_set has unexpected offset % instead of 0", ((cast(*void)(*instance.m_is_set)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvatureColorMapping.m_is_set)) == 1, "ON_SurfaceCurvatureColorMapping.m_is_set has unexpected size % instead of 1", size_of(type_of(ON_SurfaceCurvatureColorMapping.m_is_set)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 1, "ON_SurfaceCurvatureColorMapping.m_reserved1 has unexpected offset % instead of 1", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvatureColorMapping.m_reserved1)) == 1, "ON_SurfaceCurvatureColorMapping.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SurfaceCurvatureColorMapping.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 2, "ON_SurfaceCurvatureColorMapping.m_reserved2 has unexpected offset % instead of 2", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvatureColorMapping.m_reserved2)) == 2, "ON_SurfaceCurvatureColorMapping.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SurfaceCurvatureColorMapping.m_reserved2)));
        assert(((cast(*void)(*instance.m_kappa_style)) - cast(*void)(*instance)) == 4, "ON_SurfaceCurvatureColorMapping.m_kappa_style has unexpected offset % instead of 4", ((cast(*void)(*instance.m_kappa_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvatureColorMapping.m_kappa_style)) == 4, "ON_SurfaceCurvatureColorMapping.m_kappa_style has unexpected size % instead of 4", size_of(type_of(ON_SurfaceCurvatureColorMapping.m_kappa_style)));
        assert(((cast(*void)(*instance.m_kappa_range)) - cast(*void)(*instance)) == 8, "ON_SurfaceCurvatureColorMapping.m_kappa_range has unexpected offset % instead of 8", ((cast(*void)(*instance.m_kappa_range)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvatureColorMapping.m_kappa_range)) == 16, "ON_SurfaceCurvatureColorMapping.m_kappa_range has unexpected size % instead of 16", size_of(type_of(ON_SurfaceCurvatureColorMapping.m_kappa_range)));
        assert(((cast(*void)(*instance.m_hue_range_in_radians)) - cast(*void)(*instance)) == 24, "ON_SurfaceCurvatureColorMapping.m_hue_range_in_radians has unexpected offset % instead of 24", ((cast(*void)(*instance.m_hue_range_in_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceCurvatureColorMapping.m_hue_range_in_radians)) == 16, "ON_SurfaceCurvatureColorMapping.m_hue_range_in_radians has unexpected size % instead of 16", size_of(type_of(ON_SurfaceCurvatureColorMapping.m_hue_range_in_radians)));
        assert(size_of(ON_SurfaceCurvatureColorMapping) == 40, "ON_SurfaceCurvatureColorMapping has size % instead of 40", size_of(ON_SurfaceCurvatureColorMapping));
    }

    {
        instance: ON_SurfaceDraftAngleColorMapping;
        assert(((cast(*void)(*instance.m_is_set)) - cast(*void)(*instance)) == 0, "ON_SurfaceDraftAngleColorMapping.m_is_set has unexpected offset % instead of 0", ((cast(*void)(*instance.m_is_set)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_is_set)) == 1, "ON_SurfaceDraftAngleColorMapping.m_is_set has unexpected size % instead of 1", size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_is_set)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 1, "ON_SurfaceDraftAngleColorMapping.m_reserved1 has unexpected offset % instead of 1", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_reserved1)) == 1, "ON_SurfaceDraftAngleColorMapping.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 2, "ON_SurfaceDraftAngleColorMapping.m_reserved2 has unexpected offset % instead of 2", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_reserved2)) == 2, "ON_SurfaceDraftAngleColorMapping.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 4, "ON_SurfaceDraftAngleColorMapping.m_reserved3 has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_reserved3)) == 4, "ON_SurfaceDraftAngleColorMapping.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_reserved3)));
        assert(((cast(*void)(*instance.m_up)) - cast(*void)(*instance)) == 8, "ON_SurfaceDraftAngleColorMapping.m_up has unexpected offset % instead of 8", ((cast(*void)(*instance.m_up)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_up)) == 24, "ON_SurfaceDraftAngleColorMapping.m_up has unexpected size % instead of 24", size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_up)));
        assert(((cast(*void)(*instance.m_angle_range_in_radians)) - cast(*void)(*instance)) == 32, "ON_SurfaceDraftAngleColorMapping.m_angle_range_in_radians has unexpected offset % instead of 32", ((cast(*void)(*instance.m_angle_range_in_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_angle_range_in_radians)) == 16, "ON_SurfaceDraftAngleColorMapping.m_angle_range_in_radians has unexpected size % instead of 16", size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_angle_range_in_radians)));
        assert(((cast(*void)(*instance.m_hue_range_in_radians)) - cast(*void)(*instance)) == 48, "ON_SurfaceDraftAngleColorMapping.m_hue_range_in_radians has unexpected offset % instead of 48", ((cast(*void)(*instance.m_hue_range_in_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_hue_range_in_radians)) == 16, "ON_SurfaceDraftAngleColorMapping.m_hue_range_in_radians has unexpected size % instead of 16", size_of(type_of(ON_SurfaceDraftAngleColorMapping.m_hue_range_in_radians)));
        assert(size_of(ON_SurfaceDraftAngleColorMapping) == 64, "ON_SurfaceDraftAngleColorMapping has size % instead of 64", size_of(ON_SurfaceDraftAngleColorMapping));
    }

    {
        instance: ON_Mesh;
        assert(((cast(*void)(*instance.m_dV)) - cast(*void)(*instance)) == 16, "ON_Mesh.m_dV has unexpected offset % instead of 16", ((cast(*void)(*instance.m_dV)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_dV)) == 24, "ON_Mesh.m_dV has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_dV)));
        assert(((cast(*void)(*instance.m_V)) - cast(*void)(*instance)) == 40, "ON_Mesh.m_V has unexpected offset % instead of 40", ((cast(*void)(*instance.m_V)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_V)) == 24, "ON_Mesh.m_V has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_V)));
        assert(((cast(*void)(*instance.m_F)) - cast(*void)(*instance)) == 64, "ON_Mesh.m_F has unexpected offset % instead of 64", ((cast(*void)(*instance.m_F)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_F)) == 24, "ON_Mesh.m_F has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_F)));
        assert(((cast(*void)(*instance.m_NgonMap)) - cast(*void)(*instance)) == 88, "ON_Mesh.m_NgonMap has unexpected offset % instead of 88", ((cast(*void)(*instance.m_NgonMap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_NgonMap)) == 24, "ON_Mesh.m_NgonMap has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_NgonMap)));
        assert(((cast(*void)(*instance.m_Ngon)) - cast(*void)(*instance)) == 112, "ON_Mesh.m_Ngon has unexpected offset % instead of 112", ((cast(*void)(*instance.m_Ngon)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_Ngon)) == 24, "ON_Mesh.m_Ngon has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_Ngon)));
        assert(((cast(*void)(*instance.m_NgonAllocator)) - cast(*void)(*instance)) == 136, "ON_Mesh.m_NgonAllocator has unexpected offset % instead of 136", ((cast(*void)(*instance.m_NgonAllocator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_NgonAllocator)) == 168, "ON_Mesh.m_NgonAllocator has unexpected size % instead of 168", size_of(type_of(ON_Mesh.m_NgonAllocator)));
        assert(((cast(*void)(*instance.m_N)) - cast(*void)(*instance)) == 304, "ON_Mesh.m_N has unexpected offset % instead of 304", ((cast(*void)(*instance.m_N)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_N)) == 24, "ON_Mesh.m_N has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_N)));
        assert(((cast(*void)(*instance.m_FN)) - cast(*void)(*instance)) == 328, "ON_Mesh.m_FN has unexpected offset % instead of 328", ((cast(*void)(*instance.m_FN)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_FN)) == 24, "ON_Mesh.m_FN has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_FN)));
        assert(((cast(*void)(*instance.m_Ttag)) - cast(*void)(*instance)) == 352, "ON_Mesh.m_Ttag has unexpected offset % instead of 352", ((cast(*void)(*instance.m_Ttag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_Ttag)) == 152, "ON_Mesh.m_Ttag has unexpected size % instead of 152", size_of(type_of(ON_Mesh.m_Ttag)));
        assert(((cast(*void)(*instance.m_T)) - cast(*void)(*instance)) == 504, "ON_Mesh.m_T has unexpected offset % instead of 504", ((cast(*void)(*instance.m_T)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_T)) == 24, "ON_Mesh.m_T has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_T)));
        assert(((cast(*void)(*instance.m_TC)) - cast(*void)(*instance)) == 528, "ON_Mesh.m_TC has unexpected offset % instead of 528", ((cast(*void)(*instance.m_TC)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_TC)) == 24, "ON_Mesh.m_TC has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_TC)));
        assert(((cast(*void)(*instance.m_S)) - cast(*void)(*instance)) == 552, "ON_Mesh.m_S has unexpected offset % instead of 552", ((cast(*void)(*instance.m_S)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_S)) == 24, "ON_Mesh.m_S has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_S)));
        assert(((cast(*void)(*instance.m_srf_domain)) - cast(*void)(*instance)) == 576, "ON_Mesh.m_srf_domain has unexpected offset % instead of 576", ((cast(*void)(*instance.m_srf_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_srf_domain)) == 32, "ON_Mesh.m_srf_domain has unexpected size % instead of 32", size_of(type_of(ON_Mesh.m_srf_domain)));
        assert(((cast(*void)(*instance.m_srf_scale)) - cast(*void)(*instance)) == 608, "ON_Mesh.m_srf_scale has unexpected offset % instead of 608", ((cast(*void)(*instance.m_srf_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_srf_scale)) == 16, "ON_Mesh.m_srf_scale has unexpected size % instead of 16", size_of(type_of(ON_Mesh.m_srf_scale)));
        assert(((cast(*void)(*instance.m_packed_tex_domain)) - cast(*void)(*instance)) == 624, "ON_Mesh.m_packed_tex_domain has unexpected offset % instead of 624", ((cast(*void)(*instance.m_packed_tex_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_packed_tex_domain)) == 32, "ON_Mesh.m_packed_tex_domain has unexpected size % instead of 32", size_of(type_of(ON_Mesh.m_packed_tex_domain)));
        assert(((cast(*void)(*instance.m_packed_tex_rotate)) - cast(*void)(*instance)) == 656, "ON_Mesh.m_packed_tex_rotate has unexpected offset % instead of 656", ((cast(*void)(*instance.m_packed_tex_rotate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_packed_tex_rotate)) == 1, "ON_Mesh.m_packed_tex_rotate has unexpected size % instead of 1", size_of(type_of(ON_Mesh.m_packed_tex_rotate)));
        assert(((cast(*void)(*instance.m_K)) - cast(*void)(*instance)) == 664, "ON_Mesh.m_K has unexpected offset % instead of 664", ((cast(*void)(*instance.m_K)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_K)) == 24, "ON_Mesh.m_K has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_K)));
        assert(((cast(*void)(*instance.m_Ctag)) - cast(*void)(*instance)) == 688, "ON_Mesh.m_Ctag has unexpected offset % instead of 688", ((cast(*void)(*instance.m_Ctag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_Ctag)) == 152, "ON_Mesh.m_Ctag has unexpected size % instead of 152", size_of(type_of(ON_Mesh.m_Ctag)));
        assert(((cast(*void)(*instance.m_C)) - cast(*void)(*instance)) == 840, "ON_Mesh.m_C has unexpected offset % instead of 840", ((cast(*void)(*instance.m_C)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_C)) == 24, "ON_Mesh.m_C has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_C)));
        assert(((cast(*void)(*instance.m_H)) - cast(*void)(*instance)) == 864, "ON_Mesh.m_H has unexpected offset % instead of 864", ((cast(*void)(*instance.m_H)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_H)) == 24, "ON_Mesh.m_H has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_H)));
        assert(((cast(*void)(*instance.m_hidden_count)) - cast(*void)(*instance)) == 888, "ON_Mesh.m_hidden_count has unexpected offset % instead of 888", ((cast(*void)(*instance.m_hidden_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_hidden_count)) == 4, "ON_Mesh.m_hidden_count has unexpected size % instead of 4", size_of(type_of(ON_Mesh.m_hidden_count)));
        assert(((cast(*void)(*instance.m_parent)) - cast(*void)(*instance)) == 896, "ON_Mesh.m_parent has unexpected offset % instead of 896", ((cast(*void)(*instance.m_parent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_parent)) == 8, "ON_Mesh.m_parent has unexpected size % instead of 8", size_of(type_of(ON_Mesh.m_parent)));
        assert(((cast(*void)(*instance.m_top)) - cast(*void)(*instance)) == 904, "ON_Mesh.m_top has unexpected offset % instead of 904", ((cast(*void)(*instance.m_top)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_top)) == 120, "ON_Mesh.m_top has unexpected size % instead of 120", size_of(type_of(ON_Mesh.m_top)));
        assert(((cast(*void)(*instance.m_mesh_parameters)) - cast(*void)(*instance)) == 1024, "ON_Mesh.m_mesh_parameters has unexpected offset % instead of 1024", ((cast(*void)(*instance.m_mesh_parameters)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_mesh_parameters)) == 8, "ON_Mesh.m_mesh_parameters has unexpected size % instead of 8", size_of(type_of(ON_Mesh.m_mesh_parameters)));
        assert(((cast(*void)(*instance.m_invalid_count)) - cast(*void)(*instance)) == 1032, "ON_Mesh.m_invalid_count has unexpected offset % instead of 1032", ((cast(*void)(*instance.m_invalid_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_invalid_count)) == 4, "ON_Mesh.m_invalid_count has unexpected size % instead of 4", size_of(type_of(ON_Mesh.m_invalid_count)));
        assert(((cast(*void)(*instance.m_quad_count)) - cast(*void)(*instance)) == 1036, "ON_Mesh.m_quad_count has unexpected offset % instead of 1036", ((cast(*void)(*instance.m_quad_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_quad_count)) == 4, "ON_Mesh.m_quad_count has unexpected size % instead of 4", size_of(type_of(ON_Mesh.m_quad_count)));
        assert(((cast(*void)(*instance.m_triangle_count)) - cast(*void)(*instance)) == 1040, "ON_Mesh.m_triangle_count has unexpected offset % instead of 1040", ((cast(*void)(*instance.m_triangle_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_triangle_count)) == 4, "ON_Mesh.m_triangle_count has unexpected size % instead of 4", size_of(type_of(ON_Mesh.m_triangle_count)));
        assert(((cast(*void)(*instance.m_mesh_is_closed)) - cast(*void)(*instance)) == 1044, "ON_Mesh.m_mesh_is_closed has unexpected offset % instead of 1044", ((cast(*void)(*instance.m_mesh_is_closed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_mesh_is_closed)) == 1, "ON_Mesh.m_mesh_is_closed has unexpected size % instead of 1", size_of(type_of(ON_Mesh.m_mesh_is_closed)));
        assert(((cast(*void)(*instance.m_mesh_is_manifold)) - cast(*void)(*instance)) == 1045, "ON_Mesh.m_mesh_is_manifold has unexpected offset % instead of 1045", ((cast(*void)(*instance.m_mesh_is_manifold)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_mesh_is_manifold)) == 1, "ON_Mesh.m_mesh_is_manifold has unexpected size % instead of 1", size_of(type_of(ON_Mesh.m_mesh_is_manifold)));
        assert(((cast(*void)(*instance.m_mesh_is_oriented)) - cast(*void)(*instance)) == 1046, "ON_Mesh.m_mesh_is_oriented has unexpected offset % instead of 1046", ((cast(*void)(*instance.m_mesh_is_oriented)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_mesh_is_oriented)) == 1, "ON_Mesh.m_mesh_is_oriented has unexpected size % instead of 1", size_of(type_of(ON_Mesh.m_mesh_is_oriented)));
        assert(((cast(*void)(*instance.m_mesh_is_solid)) - cast(*void)(*instance)) == 1047, "ON_Mesh.m_mesh_is_solid has unexpected offset % instead of 1047", ((cast(*void)(*instance.m_mesh_is_solid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_mesh_is_solid)) == 1, "ON_Mesh.m_mesh_is_solid has unexpected size % instead of 1", size_of(type_of(ON_Mesh.m_mesh_is_solid)));
        assert(((cast(*void)(*instance.m_vertex_bbox)) - cast(*void)(*instance)) == 1048, "ON_Mesh.m_vertex_bbox has unexpected offset % instead of 1048", ((cast(*void)(*instance.m_vertex_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_vertex_bbox)) == 48, "ON_Mesh.m_vertex_bbox has unexpected size % instead of 48", size_of(type_of(ON_Mesh.m_vertex_bbox)));
        assert(((cast(*void)(*instance.m_nbox)) - cast(*void)(*instance)) == 1096, "ON_Mesh.m_nbox has unexpected offset % instead of 1096", ((cast(*void)(*instance.m_nbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_nbox)) == 24, "ON_Mesh.m_nbox has unexpected size % instead of 24", size_of(type_of(ON_Mesh.m_nbox)));
        assert(((cast(*void)(*instance.m_tbox)) - cast(*void)(*instance)) == 1120, "ON_Mesh.m_tbox has unexpected offset % instead of 1120", ((cast(*void)(*instance.m_tbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_tbox)) == 16, "ON_Mesh.m_tbox has unexpected size % instead of 16", size_of(type_of(ON_Mesh.m_tbox)));
        assert(((cast(*void)(*instance.m_tight_bbox_cache)) - cast(*void)(*instance)) == 1136, "ON_Mesh.m_tight_bbox_cache has unexpected offset % instead of 1136", ((cast(*void)(*instance.m_tight_bbox_cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_tight_bbox_cache)) == 584, "ON_Mesh.m_tight_bbox_cache has unexpected size % instead of 584", size_of(type_of(ON_Mesh.m_tight_bbox_cache)));
        assert(((cast(*void)(*instance.m_kstat)) - cast(*void)(*instance)) == 1720, "ON_Mesh.m_kstat has unexpected offset % instead of 1720", ((cast(*void)(*instance.m_kstat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_kstat)) == 32, "ON_Mesh.m_kstat has unexpected size % instead of 32", size_of(type_of(ON_Mesh.m_kstat)));
        assert(((cast(*void)(*instance.m_partition)) - cast(*void)(*instance)) == 1752, "ON_Mesh.m_partition has unexpected offset % instead of 1752", ((cast(*void)(*instance.m_partition)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Mesh.m_partition)) == 8, "ON_Mesh.m_partition has unexpected size % instead of 8", size_of(type_of(ON_Mesh.m_partition)));
        assert(size_of(ON_Mesh) == 1760, "ON_Mesh has size % instead of 1760", size_of(ON_Mesh));
    }

    {
        instance: ON_MeshRef;
        assert(((cast(*void)(*instance.m_mesh_sp)) - cast(*void)(*instance)) == 0, "ON_MeshRef.m_mesh_sp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_mesh_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshRef.m_mesh_sp)) == 16, "ON_MeshRef.m_mesh_sp has unexpected size % instead of 16", size_of(type_of(ON_MeshRef.m_mesh_sp)));
        assert(size_of(ON_MeshRef) == 16, "ON_MeshRef has size % instead of 16", size_of(ON_MeshRef));
    }

    {
        instance: ON_MeshCache;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_MeshCache.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshCache.m_impl)) == 8, "ON_MeshCache.m_impl has unexpected size % instead of 8", size_of(type_of(ON_MeshCache.m_impl)));
        assert(size_of(ON_MeshCache) == 8, "ON_MeshCache has size % instead of 8", size_of(ON_MeshCache));
    }

    {
        instance: ON_MeshNgonIterator;
        assert(((cast(*void)(*instance.m_mesh)) - cast(*void)(*instance)) == 0, "ON_MeshNgonIterator.m_mesh has unexpected offset % instead of 0", ((cast(*void)(*instance.m_mesh)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_mesh)) == 8, "ON_MeshNgonIterator.m_mesh has unexpected size % instead of 8", size_of(type_of(ON_MeshNgonIterator.m_mesh)));
        assert(((cast(*void)(*instance.m_facedex_to_ngondex_map)) - cast(*void)(*instance)) == 8, "ON_MeshNgonIterator.m_facedex_to_ngondex_map has unexpected offset % instead of 8", ((cast(*void)(*instance.m_facedex_to_ngondex_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_facedex_to_ngondex_map)) == 8, "ON_MeshNgonIterator.m_facedex_to_ngondex_map has unexpected size % instead of 8", size_of(type_of(ON_MeshNgonIterator.m_facedex_to_ngondex_map)));
        assert(((cast(*void)(*instance.m_current_ngon)) - cast(*void)(*instance)) == 16, "ON_MeshNgonIterator.m_current_ngon has unexpected offset % instead of 16", ((cast(*void)(*instance.m_current_ngon)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_current_ngon)) == 8, "ON_MeshNgonIterator.m_current_ngon has unexpected size % instead of 8", size_of(type_of(ON_MeshNgonIterator.m_current_ngon)));
        assert(((cast(*void)(*instance.m_ngon_buffer)) - cast(*void)(*instance)) == 24, "ON_MeshNgonIterator.m_ngon_buffer has unexpected offset % instead of 24", ((cast(*void)(*instance.m_ngon_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_ngon_buffer)) == 80, "ON_MeshNgonIterator.m_ngon_buffer has unexpected size % instead of 80", size_of(type_of(ON_MeshNgonIterator.m_ngon_buffer)));
        assert(((cast(*void)(*instance.m_current_ngon_ci)) - cast(*void)(*instance)) == 104, "ON_MeshNgonIterator.m_current_ngon_ci has unexpected offset % instead of 104", ((cast(*void)(*instance.m_current_ngon_ci)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_current_ngon_ci)) == 8, "ON_MeshNgonIterator.m_current_ngon_ci has unexpected size % instead of 8", size_of(type_of(ON_MeshNgonIterator.m_current_ngon_ci)));
        assert(((cast(*void)(*instance.m_mesh_face_count)) - cast(*void)(*instance)) == 112, "ON_MeshNgonIterator.m_mesh_face_count has unexpected offset % instead of 112", ((cast(*void)(*instance.m_mesh_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_mesh_face_count)) == 4, "ON_MeshNgonIterator.m_mesh_face_count has unexpected size % instead of 4", size_of(type_of(ON_MeshNgonIterator.m_mesh_face_count)));
        assert(((cast(*void)(*instance.m_mesh_ngon_count)) - cast(*void)(*instance)) == 116, "ON_MeshNgonIterator.m_mesh_ngon_count has unexpected offset % instead of 116", ((cast(*void)(*instance.m_mesh_ngon_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_mesh_ngon_count)) == 4, "ON_MeshNgonIterator.m_mesh_ngon_count has unexpected size % instead of 4", size_of(type_of(ON_MeshNgonIterator.m_mesh_ngon_count)));
        assert(((cast(*void)(*instance.m_iterator_index)) - cast(*void)(*instance)) == 120, "ON_MeshNgonIterator.m_iterator_index has unexpected offset % instead of 120", ((cast(*void)(*instance.m_iterator_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshNgonIterator.m_iterator_index)) == 4, "ON_MeshNgonIterator.m_iterator_index has unexpected size % instead of 4", size_of(type_of(ON_MeshNgonIterator.m_iterator_index)));
        assert(size_of(ON_MeshNgonIterator) == 128, "ON_MeshNgonIterator has size % instead of 128", size_of(ON_MeshNgonIterator));
    }

    {
        instance: ON_MeshComponentRef;
        assert(((cast(*void)(*instance.m_mesh)) - cast(*void)(*instance)) == 16, "ON_MeshComponentRef.m_mesh has unexpected offset % instead of 16", ((cast(*void)(*instance.m_mesh)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshComponentRef.m_mesh)) == 8, "ON_MeshComponentRef.m_mesh has unexpected size % instead of 8", size_of(type_of(ON_MeshComponentRef.m_mesh)));
        assert(((cast(*void)(*instance.m_mesh_ci)) - cast(*void)(*instance)) == 24, "ON_MeshComponentRef.m_mesh_ci has unexpected offset % instead of 24", ((cast(*void)(*instance.m_mesh_ci)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshComponentRef.m_mesh_ci)) == 8, "ON_MeshComponentRef.m_mesh_ci has unexpected size % instead of 8", size_of(type_of(ON_MeshComponentRef.m_mesh_ci)));
        assert(size_of(ON_MeshComponentRef) == 32, "ON_MeshComponentRef has size % instead of 32", size_of(ON_MeshComponentRef));
    }

    {
        instance: ON_PointGrid;
        assert(((cast(*void)(*instance.m_point_count)) - cast(*void)(*instance)) == 16, "ON_PointGrid.m_point_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_point_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointGrid.m_point_count)) == 8, "ON_PointGrid.m_point_count has unexpected size % instead of 8", size_of(type_of(ON_PointGrid.m_point_count)));
        assert(((cast(*void)(*instance.m_point_stride0)) - cast(*void)(*instance)) == 24, "ON_PointGrid.m_point_stride0 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_point_stride0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointGrid.m_point_stride0)) == 4, "ON_PointGrid.m_point_stride0 has unexpected size % instead of 4", size_of(type_of(ON_PointGrid.m_point_stride0)));
        assert(((cast(*void)(*instance.m_point)) - cast(*void)(*instance)) == 32, "ON_PointGrid.m_point has unexpected offset % instead of 32", ((cast(*void)(*instance.m_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PointGrid.m_point)) == 24, "ON_PointGrid.m_point has unexpected size % instead of 24", size_of(type_of(ON_PointGrid.m_point)));
        assert(size_of(ON_PointGrid) == 56, "ON_PointGrid has size % instead of 56", size_of(ON_PointGrid));
    }

    {
        instance: ON_LineCurve;
        assert(((cast(*void)(*instance.m_line)) - cast(*void)(*instance)) == 16, "ON_LineCurve.m_line has unexpected offset % instead of 16", ((cast(*void)(*instance.m_line)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LineCurve.m_line)) == 48, "ON_LineCurve.m_line has unexpected size % instead of 48", size_of(type_of(ON_LineCurve.m_line)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 64, "ON_LineCurve.m_t has unexpected offset % instead of 64", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LineCurve.m_t)) == 16, "ON_LineCurve.m_t has unexpected size % instead of 16", size_of(type_of(ON_LineCurve.m_t)));
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 80, "ON_LineCurve.m_dim has unexpected offset % instead of 80", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LineCurve.m_dim)) == 4, "ON_LineCurve.m_dim has unexpected size % instead of 4", size_of(type_of(ON_LineCurve.m_dim)));
        assert(size_of(ON_LineCurve) == 88, "ON_LineCurve has size % instead of 88", size_of(ON_LineCurve));
    }

    {
        instance: ON_ArcCurve;
        assert(((cast(*void)(*instance.m_arc)) - cast(*void)(*instance)) == 16, "ON_ArcCurve.m_arc has unexpected offset % instead of 16", ((cast(*void)(*instance.m_arc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ArcCurve.m_arc)) == 152, "ON_ArcCurve.m_arc has unexpected size % instead of 152", size_of(type_of(ON_ArcCurve.m_arc)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 168, "ON_ArcCurve.m_t has unexpected offset % instead of 168", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ArcCurve.m_t)) == 16, "ON_ArcCurve.m_t has unexpected size % instead of 16", size_of(type_of(ON_ArcCurve.m_t)));
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 184, "ON_ArcCurve.m_dim has unexpected offset % instead of 184", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ArcCurve.m_dim)) == 4, "ON_ArcCurve.m_dim has unexpected size % instead of 4", size_of(type_of(ON_ArcCurve.m_dim)));
        assert(size_of(ON_ArcCurve) == 192, "ON_ArcCurve has size % instead of 192", size_of(ON_ArcCurve));
    }

    {
        instance: ON_PolylineCurve;
        assert(((cast(*void)(*instance.m_pline)) - cast(*void)(*instance)) == 16, "ON_PolylineCurve.m_pline has unexpected offset % instead of 16", ((cast(*void)(*instance.m_pline)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolylineCurve.m_pline)) == 24, "ON_PolylineCurve.m_pline has unexpected size % instead of 24", size_of(type_of(ON_PolylineCurve.m_pline)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 40, "ON_PolylineCurve.m_t has unexpected offset % instead of 40", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolylineCurve.m_t)) == 24, "ON_PolylineCurve.m_t has unexpected size % instead of 24", size_of(type_of(ON_PolylineCurve.m_t)));
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 64, "ON_PolylineCurve.m_dim has unexpected offset % instead of 64", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolylineCurve.m_dim)) == 4, "ON_PolylineCurve.m_dim has unexpected size % instead of 4", size_of(type_of(ON_PolylineCurve.m_dim)));
        assert(size_of(ON_PolylineCurve) == 72, "ON_PolylineCurve has size % instead of 72", size_of(ON_PolylineCurve));
    }

    {
        instance: ON_NurbsCurve;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 16, "ON_NurbsCurve.m_dim has unexpected offset % instead of 16", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_dim)) == 4, "ON_NurbsCurve.m_dim has unexpected size % instead of 4", size_of(type_of(ON_NurbsCurve.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 20, "ON_NurbsCurve.m_is_rat has unexpected offset % instead of 20", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_is_rat)) == 4, "ON_NurbsCurve.m_is_rat has unexpected size % instead of 4", size_of(type_of(ON_NurbsCurve.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 24, "ON_NurbsCurve.m_order has unexpected offset % instead of 24", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_order)) == 4, "ON_NurbsCurve.m_order has unexpected size % instead of 4", size_of(type_of(ON_NurbsCurve.m_order)));
        assert(((cast(*void)(*instance.m_cv_count)) - cast(*void)(*instance)) == 28, "ON_NurbsCurve.m_cv_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_cv_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_cv_count)) == 4, "ON_NurbsCurve.m_cv_count has unexpected size % instead of 4", size_of(type_of(ON_NurbsCurve.m_cv_count)));
        assert(((cast(*void)(*instance.m_knot_capacity_and_tags)) - cast(*void)(*instance)) == 32, "ON_NurbsCurve.m_knot_capacity_and_tags has unexpected offset % instead of 32", ((cast(*void)(*instance.m_knot_capacity_and_tags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_knot_capacity_and_tags)) == 4, "ON_NurbsCurve.m_knot_capacity_and_tags has unexpected size % instead of 4", size_of(type_of(ON_NurbsCurve.m_knot_capacity_and_tags)));
        assert(((cast(*void)(*instance.m_knot)) - cast(*void)(*instance)) == 40, "ON_NurbsCurve.m_knot has unexpected offset % instead of 40", ((cast(*void)(*instance.m_knot)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_knot)) == 8, "ON_NurbsCurve.m_knot has unexpected size % instead of 8", size_of(type_of(ON_NurbsCurve.m_knot)));
        assert(((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)) == 48, "ON_NurbsCurve.m_cv_stride has unexpected offset % instead of 48", ((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_cv_stride)) == 4, "ON_NurbsCurve.m_cv_stride has unexpected size % instead of 4", size_of(type_of(ON_NurbsCurve.m_cv_stride)));
        assert(((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)) == 52, "ON_NurbsCurve.m_cv_capacity has unexpected offset % instead of 52", ((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_cv_capacity)) == 4, "ON_NurbsCurve.m_cv_capacity has unexpected size % instead of 4", size_of(type_of(ON_NurbsCurve.m_cv_capacity)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 56, "ON_NurbsCurve.m_cv has unexpected offset % instead of 56", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCurve.m_cv)) == 8, "ON_NurbsCurve.m_cv has unexpected size % instead of 8", size_of(type_of(ON_NurbsCurve.m_cv)));
        assert(size_of(ON_NurbsCurve) == 64, "ON_NurbsCurve has size % instead of 64", size_of(ON_NurbsCurve));
    }

    {
        instance: ON_PolyCurve;
        assert(((cast(*void)(*instance.m_segment)) - cast(*void)(*instance)) == 16, "ON_PolyCurve.m_segment has unexpected offset % instead of 16", ((cast(*void)(*instance.m_segment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolyCurve.m_segment)) == 24, "ON_PolyCurve.m_segment has unexpected size % instead of 24", size_of(type_of(ON_PolyCurve.m_segment)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 40, "ON_PolyCurve.m_t has unexpected offset % instead of 40", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolyCurve.m_t)) == 24, "ON_PolyCurve.m_t has unexpected size % instead of 24", size_of(type_of(ON_PolyCurve.m_t)));
        assert(size_of(ON_PolyCurve) == 64, "ON_PolyCurve has size % instead of 64", size_of(ON_PolyCurve));
    }

    {
        instance: ON_CurveOnSurface;
        assert(((cast(*void)(*instance.m_c2)) - cast(*void)(*instance)) == 16, "ON_CurveOnSurface.m_c2 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_c2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveOnSurface.m_c2)) == 8, "ON_CurveOnSurface.m_c2 has unexpected size % instead of 8", size_of(type_of(ON_CurveOnSurface.m_c2)));
        assert(((cast(*void)(*instance.m_c3)) - cast(*void)(*instance)) == 24, "ON_CurveOnSurface.m_c3 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_c3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveOnSurface.m_c3)) == 8, "ON_CurveOnSurface.m_c3 has unexpected size % instead of 8", size_of(type_of(ON_CurveOnSurface.m_c3)));
        assert(((cast(*void)(*instance.m_s)) - cast(*void)(*instance)) == 32, "ON_CurveOnSurface.m_s has unexpected offset % instead of 32", ((cast(*void)(*instance.m_s)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveOnSurface.m_s)) == 8, "ON_CurveOnSurface.m_s has unexpected size % instead of 8", size_of(type_of(ON_CurveOnSurface.m_s)));
        assert(size_of(ON_CurveOnSurface) == 40, "ON_CurveOnSurface has size % instead of 40", size_of(ON_CurveOnSurface));
    }

    assert(size_of(ON_TensorProduct) == 8, "ON_TensorProduct has size % instead of 8", size_of(ON_TensorProduct));

    {
        instance: ON_NurbsSurface;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 16, "ON_NurbsSurface.m_dim has unexpected offset % instead of 16", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_dim)) == 4, "ON_NurbsSurface.m_dim has unexpected size % instead of 4", size_of(type_of(ON_NurbsSurface.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 20, "ON_NurbsSurface.m_is_rat has unexpected offset % instead of 20", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_is_rat)) == 4, "ON_NurbsSurface.m_is_rat has unexpected size % instead of 4", size_of(type_of(ON_NurbsSurface.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 24, "ON_NurbsSurface.m_order has unexpected offset % instead of 24", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_order)) == 8, "ON_NurbsSurface.m_order has unexpected size % instead of 8", size_of(type_of(ON_NurbsSurface.m_order)));
        assert(((cast(*void)(*instance.m_cv_count)) - cast(*void)(*instance)) == 32, "ON_NurbsSurface.m_cv_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_cv_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_cv_count)) == 8, "ON_NurbsSurface.m_cv_count has unexpected size % instead of 8", size_of(type_of(ON_NurbsSurface.m_cv_count)));
        assert(((cast(*void)(*instance.m_knot_capacity)) - cast(*void)(*instance)) == 40, "ON_NurbsSurface.m_knot_capacity has unexpected offset % instead of 40", ((cast(*void)(*instance.m_knot_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_knot_capacity)) == 8, "ON_NurbsSurface.m_knot_capacity has unexpected size % instead of 8", size_of(type_of(ON_NurbsSurface.m_knot_capacity)));
        assert(((cast(*void)(*instance.m_knot)) - cast(*void)(*instance)) == 48, "ON_NurbsSurface.m_knot has unexpected offset % instead of 48", ((cast(*void)(*instance.m_knot)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_knot)) == 16, "ON_NurbsSurface.m_knot has unexpected size % instead of 16", size_of(type_of(ON_NurbsSurface.m_knot)));
        assert(((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)) == 64, "ON_NurbsSurface.m_cv_stride has unexpected offset % instead of 64", ((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_cv_stride)) == 8, "ON_NurbsSurface.m_cv_stride has unexpected size % instead of 8", size_of(type_of(ON_NurbsSurface.m_cv_stride)));
        assert(((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)) == 72, "ON_NurbsSurface.m_cv_capacity has unexpected offset % instead of 72", ((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_cv_capacity)) == 4, "ON_NurbsSurface.m_cv_capacity has unexpected size % instead of 4", size_of(type_of(ON_NurbsSurface.m_cv_capacity)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 80, "ON_NurbsSurface.m_cv has unexpected offset % instead of 80", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsSurface.m_cv)) == 8, "ON_NurbsSurface.m_cv has unexpected size % instead of 8", size_of(type_of(ON_NurbsSurface.m_cv)));
        assert(size_of(ON_NurbsSurface) == 88, "ON_NurbsSurface has size % instead of 88", size_of(ON_NurbsSurface));
    }

    {
        instance: ON_NurbsCage;
        assert(((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)) == 16, "ON_NurbsCage.m_dim has unexpected offset % instead of 16", ((cast(*void)(*instance.m_dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_dim)) == 4, "ON_NurbsCage.m_dim has unexpected size % instead of 4", size_of(type_of(ON_NurbsCage.m_dim)));
        assert(((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)) == 20, "ON_NurbsCage.m_is_rat has unexpected offset % instead of 20", ((cast(*void)(*instance.m_is_rat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_is_rat)) == 1, "ON_NurbsCage.m_is_rat has unexpected size % instead of 1", size_of(type_of(ON_NurbsCage.m_is_rat)));
        assert(((cast(*void)(*instance.m_order)) - cast(*void)(*instance)) == 24, "ON_NurbsCage.m_order has unexpected offset % instead of 24", ((cast(*void)(*instance.m_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_order)) == 12, "ON_NurbsCage.m_order has unexpected size % instead of 12", size_of(type_of(ON_NurbsCage.m_order)));
        assert(((cast(*void)(*instance.m_cv_count)) - cast(*void)(*instance)) == 36, "ON_NurbsCage.m_cv_count has unexpected offset % instead of 36", ((cast(*void)(*instance.m_cv_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_cv_count)) == 12, "ON_NurbsCage.m_cv_count has unexpected size % instead of 12", size_of(type_of(ON_NurbsCage.m_cv_count)));
        assert(((cast(*void)(*instance.m_knot_capacity)) - cast(*void)(*instance)) == 48, "ON_NurbsCage.m_knot_capacity has unexpected offset % instead of 48", ((cast(*void)(*instance.m_knot_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_knot_capacity)) == 12, "ON_NurbsCage.m_knot_capacity has unexpected size % instead of 12", size_of(type_of(ON_NurbsCage.m_knot_capacity)));
        assert(((cast(*void)(*instance.m_knot)) - cast(*void)(*instance)) == 64, "ON_NurbsCage.m_knot has unexpected offset % instead of 64", ((cast(*void)(*instance.m_knot)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_knot)) == 24, "ON_NurbsCage.m_knot has unexpected size % instead of 24", size_of(type_of(ON_NurbsCage.m_knot)));
        assert(((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)) == 88, "ON_NurbsCage.m_cv_stride has unexpected offset % instead of 88", ((cast(*void)(*instance.m_cv_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_cv_stride)) == 12, "ON_NurbsCage.m_cv_stride has unexpected size % instead of 12", size_of(type_of(ON_NurbsCage.m_cv_stride)));
        assert(((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)) == 100, "ON_NurbsCage.m_cv_capacity has unexpected offset % instead of 100", ((cast(*void)(*instance.m_cv_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_cv_capacity)) == 4, "ON_NurbsCage.m_cv_capacity has unexpected size % instead of 4", size_of(type_of(ON_NurbsCage.m_cv_capacity)));
        assert(((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)) == 104, "ON_NurbsCage.m_cv has unexpected offset % instead of 104", ((cast(*void)(*instance.m_cv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_NurbsCage.m_cv)) == 8, "ON_NurbsCage.m_cv has unexpected size % instead of 8", size_of(type_of(ON_NurbsCage.m_cv)));
        assert(size_of(ON_NurbsCage) == 112, "ON_NurbsCage has size % instead of 112", size_of(ON_NurbsCage));
    }

    {
        instance: ON_MorphControl;
        assert(((cast(*void)(*instance.m_varient)) - cast(*void)(*instance)) == 16, "ON_MorphControl.m_varient has unexpected offset % instead of 16", ((cast(*void)(*instance.m_varient)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_varient)) == 4, "ON_MorphControl.m_varient has unexpected size % instead of 4", size_of(type_of(ON_MorphControl.m_varient)));
        assert(((cast(*void)(*instance.m_nurbs_curve0)) - cast(*void)(*instance)) == 24, "ON_MorphControl.m_nurbs_curve0 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_nurbs_curve0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_curve0)) == 64, "ON_MorphControl.m_nurbs_curve0 has unexpected size % instead of 64", size_of(type_of(ON_MorphControl.m_nurbs_curve0)));
        assert(((cast(*void)(*instance.m_nurbs_curve)) - cast(*void)(*instance)) == 88, "ON_MorphControl.m_nurbs_curve has unexpected offset % instead of 88", ((cast(*void)(*instance.m_nurbs_curve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_curve)) == 64, "ON_MorphControl.m_nurbs_curve has unexpected size % instead of 64", size_of(type_of(ON_MorphControl.m_nurbs_curve)));
        assert(((cast(*void)(*instance.m_nurbs_curve_domain)) - cast(*void)(*instance)) == 152, "ON_MorphControl.m_nurbs_curve_domain has unexpected offset % instead of 152", ((cast(*void)(*instance.m_nurbs_curve_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_curve_domain)) == 16, "ON_MorphControl.m_nurbs_curve_domain has unexpected size % instead of 16", size_of(type_of(ON_MorphControl.m_nurbs_curve_domain)));
        assert(((cast(*void)(*instance.m_nurbs_surface0)) - cast(*void)(*instance)) == 168, "ON_MorphControl.m_nurbs_surface0 has unexpected offset % instead of 168", ((cast(*void)(*instance.m_nurbs_surface0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_surface0)) == 88, "ON_MorphControl.m_nurbs_surface0 has unexpected size % instead of 88", size_of(type_of(ON_MorphControl.m_nurbs_surface0)));
        assert(((cast(*void)(*instance.m_nurbs_surface)) - cast(*void)(*instance)) == 256, "ON_MorphControl.m_nurbs_surface has unexpected offset % instead of 256", ((cast(*void)(*instance.m_nurbs_surface)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_surface)) == 88, "ON_MorphControl.m_nurbs_surface has unexpected size % instead of 88", size_of(type_of(ON_MorphControl.m_nurbs_surface)));
        assert(((cast(*void)(*instance.m_nurbs_surface_domain)) - cast(*void)(*instance)) == 344, "ON_MorphControl.m_nurbs_surface_domain has unexpected offset % instead of 344", ((cast(*void)(*instance.m_nurbs_surface_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_surface_domain)) == 32, "ON_MorphControl.m_nurbs_surface_domain has unexpected size % instead of 32", size_of(type_of(ON_MorphControl.m_nurbs_surface_domain)));
        assert(((cast(*void)(*instance.m_nurbs_cage0)) - cast(*void)(*instance)) == 376, "ON_MorphControl.m_nurbs_cage0 has unexpected offset % instead of 376", ((cast(*void)(*instance.m_nurbs_cage0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_cage0)) == 128, "ON_MorphControl.m_nurbs_cage0 has unexpected size % instead of 128", size_of(type_of(ON_MorphControl.m_nurbs_cage0)));
        assert(((cast(*void)(*instance.m_nurbs_cage)) - cast(*void)(*instance)) == 504, "ON_MorphControl.m_nurbs_cage has unexpected offset % instead of 504", ((cast(*void)(*instance.m_nurbs_cage)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_nurbs_cage)) == 112, "ON_MorphControl.m_nurbs_cage has unexpected size % instead of 112", size_of(type_of(ON_MorphControl.m_nurbs_cage)));
        assert(((cast(*void)(*instance.m_captive_id)) - cast(*void)(*instance)) == 616, "ON_MorphControl.m_captive_id has unexpected offset % instead of 616", ((cast(*void)(*instance.m_captive_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_captive_id)) == 32, "ON_MorphControl.m_captive_id has unexpected size % instead of 32", size_of(type_of(ON_MorphControl.m_captive_id)));
        assert(((cast(*void)(*instance.m_localizers)) - cast(*void)(*instance)) == 648, "ON_MorphControl.m_localizers has unexpected offset % instead of 648", ((cast(*void)(*instance.m_localizers)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_localizers)) == 24, "ON_MorphControl.m_localizers has unexpected size % instead of 24", size_of(type_of(ON_MorphControl.m_localizers)));
        assert(((cast(*void)(*instance.m_sporh_tolerance)) - cast(*void)(*instance)) == 672, "ON_MorphControl.m_sporh_tolerance has unexpected offset % instead of 672", ((cast(*void)(*instance.m_sporh_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_sporh_tolerance)) == 8, "ON_MorphControl.m_sporh_tolerance has unexpected size % instead of 8", size_of(type_of(ON_MorphControl.m_sporh_tolerance)));
        assert(((cast(*void)(*instance.m_sporh_bQuickPreview)) - cast(*void)(*instance)) == 680, "ON_MorphControl.m_sporh_bQuickPreview has unexpected offset % instead of 680", ((cast(*void)(*instance.m_sporh_bQuickPreview)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_sporh_bQuickPreview)) == 1, "ON_MorphControl.m_sporh_bQuickPreview has unexpected size % instead of 1", size_of(type_of(ON_MorphControl.m_sporh_bQuickPreview)));
        assert(((cast(*void)(*instance.m_sporh_bPreserveStructure)) - cast(*void)(*instance)) == 681, "ON_MorphControl.m_sporh_bPreserveStructure has unexpected offset % instead of 681", ((cast(*void)(*instance.m_sporh_bPreserveStructure)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MorphControl.m_sporh_bPreserveStructure)) == 1, "ON_MorphControl.m_sporh_bPreserveStructure has unexpected size % instead of 1", size_of(type_of(ON_MorphControl.m_sporh_bPreserveStructure)));
        assert(size_of(ON_MorphControl) == 688, "ON_MorphControl has size % instead of 688", size_of(ON_MorphControl));
    }

    {
        instance: ON_CageMorph;
        assert(((cast(*void)(*instance.m_control)) - cast(*void)(*instance)) == 32, "ON_CageMorph.m_control has unexpected offset % instead of 32", ((cast(*void)(*instance.m_control)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CageMorph.m_control)) == 8, "ON_CageMorph.m_control has unexpected size % instead of 8", size_of(type_of(ON_CageMorph.m_control)));
        assert(size_of(ON_CageMorph) == 40, "ON_CageMorph has size % instead of 40", size_of(ON_CageMorph));
    }

    {
        instance: ON_HermiteSurface;
        assert(((cast(*void)(*instance.m_u_count)) - cast(*void)(*instance)) == 0, "ON_HermiteSurface.m_u_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_u_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_u_count)) == 4, "ON_HermiteSurface.m_u_count has unexpected size % instead of 4", size_of(type_of(ON_HermiteSurface.m_u_count)));
        assert(((cast(*void)(*instance.m_v_count)) - cast(*void)(*instance)) == 4, "ON_HermiteSurface.m_v_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_v_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_v_count)) == 4, "ON_HermiteSurface.m_v_count has unexpected size % instead of 4", size_of(type_of(ON_HermiteSurface.m_v_count)));
        assert(((cast(*void)(*instance.m_u_parameters)) - cast(*void)(*instance)) == 8, "ON_HermiteSurface.m_u_parameters has unexpected offset % instead of 8", ((cast(*void)(*instance.m_u_parameters)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_u_parameters)) == 24, "ON_HermiteSurface.m_u_parameters has unexpected size % instead of 24", size_of(type_of(ON_HermiteSurface.m_u_parameters)));
        assert(((cast(*void)(*instance.m_v_parameters)) - cast(*void)(*instance)) == 32, "ON_HermiteSurface.m_v_parameters has unexpected offset % instead of 32", ((cast(*void)(*instance.m_v_parameters)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_v_parameters)) == 24, "ON_HermiteSurface.m_v_parameters has unexpected size % instead of 24", size_of(type_of(ON_HermiteSurface.m_v_parameters)));
        assert(((cast(*void)(*instance.m_grid_points)) - cast(*void)(*instance)) == 56, "ON_HermiteSurface.m_grid_points has unexpected offset % instead of 56", ((cast(*void)(*instance.m_grid_points)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_grid_points)) == 24, "ON_HermiteSurface.m_grid_points has unexpected size % instead of 24", size_of(type_of(ON_HermiteSurface.m_grid_points)));
        assert(((cast(*void)(*instance.m_u_tangents)) - cast(*void)(*instance)) == 80, "ON_HermiteSurface.m_u_tangents has unexpected offset % instead of 80", ((cast(*void)(*instance.m_u_tangents)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_u_tangents)) == 24, "ON_HermiteSurface.m_u_tangents has unexpected size % instead of 24", size_of(type_of(ON_HermiteSurface.m_u_tangents)));
        assert(((cast(*void)(*instance.m_v_tangents)) - cast(*void)(*instance)) == 104, "ON_HermiteSurface.m_v_tangents has unexpected offset % instead of 104", ((cast(*void)(*instance.m_v_tangents)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_v_tangents)) == 24, "ON_HermiteSurface.m_v_tangents has unexpected size % instead of 24", size_of(type_of(ON_HermiteSurface.m_v_tangents)));
        assert(((cast(*void)(*instance.m_twists)) - cast(*void)(*instance)) == 128, "ON_HermiteSurface.m_twists has unexpected offset % instead of 128", ((cast(*void)(*instance.m_twists)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HermiteSurface.m_twists)) == 24, "ON_HermiteSurface.m_twists has unexpected size % instead of 24", size_of(type_of(ON_HermiteSurface.m_twists)));
        assert(size_of(ON_HermiteSurface) == 152, "ON_HermiteSurface has size % instead of 152", size_of(ON_HermiteSurface));
    }

    {
        instance: ON_PlaneSurface;
        assert(((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)) == 16, "ON_PlaneSurface.m_plane has unexpected offset % instead of 16", ((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlaneSurface.m_plane)) == 128, "ON_PlaneSurface.m_plane has unexpected size % instead of 128", size_of(type_of(ON_PlaneSurface.m_plane)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 144, "ON_PlaneSurface.m_domain has unexpected offset % instead of 144", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlaneSurface.m_domain)) == 32, "ON_PlaneSurface.m_domain has unexpected size % instead of 32", size_of(type_of(ON_PlaneSurface.m_domain)));
        assert(((cast(*void)(*instance.m_extents)) - cast(*void)(*instance)) == 176, "ON_PlaneSurface.m_extents has unexpected offset % instead of 176", ((cast(*void)(*instance.m_extents)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PlaneSurface.m_extents)) == 32, "ON_PlaneSurface.m_extents has unexpected size % instead of 32", size_of(type_of(ON_PlaneSurface.m_extents)));
        assert(size_of(ON_PlaneSurface) == 208, "ON_PlaneSurface has size % instead of 208", size_of(ON_PlaneSurface));
    }

    {
        instance: ON_ClippingPlaneSurface;
        assert(((cast(*void)(*instance.m_clipping_plane)) - cast(*void)(*instance)) == 208, "ON_ClippingPlaneSurface.m_clipping_plane has unexpected offset % instead of 208", ((cast(*void)(*instance.m_clipping_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ClippingPlaneSurface.m_clipping_plane)) == 184, "ON_ClippingPlaneSurface.m_clipping_plane has unexpected size % instead of 184", size_of(type_of(ON_ClippingPlaneSurface.m_clipping_plane)));
        assert(size_of(ON_ClippingPlaneSurface) == 392, "ON_ClippingPlaneSurface has size % instead of 392", size_of(ON_ClippingPlaneSurface));
    }

    {
        instance: ON_RevSurface;
        assert(((cast(*void)(*instance.m_curve)) - cast(*void)(*instance)) == 16, "ON_RevSurface.m_curve has unexpected offset % instead of 16", ((cast(*void)(*instance.m_curve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RevSurface.m_curve)) == 8, "ON_RevSurface.m_curve has unexpected size % instead of 8", size_of(type_of(ON_RevSurface.m_curve)));
        assert(((cast(*void)(*instance.m_axis)) - cast(*void)(*instance)) == 24, "ON_RevSurface.m_axis has unexpected offset % instead of 24", ((cast(*void)(*instance.m_axis)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RevSurface.m_axis)) == 48, "ON_RevSurface.m_axis has unexpected size % instead of 48", size_of(type_of(ON_RevSurface.m_axis)));
        assert(((cast(*void)(*instance.m_angle)) - cast(*void)(*instance)) == 72, "ON_RevSurface.m_angle has unexpected offset % instead of 72", ((cast(*void)(*instance.m_angle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RevSurface.m_angle)) == 16, "ON_RevSurface.m_angle has unexpected size % instead of 16", size_of(type_of(ON_RevSurface.m_angle)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 88, "ON_RevSurface.m_t has unexpected offset % instead of 88", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RevSurface.m_t)) == 16, "ON_RevSurface.m_t has unexpected size % instead of 16", size_of(type_of(ON_RevSurface.m_t)));
        assert(((cast(*void)(*instance.m_bTransposed)) - cast(*void)(*instance)) == 104, "ON_RevSurface.m_bTransposed has unexpected offset % instead of 104", ((cast(*void)(*instance.m_bTransposed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RevSurface.m_bTransposed)) == 1, "ON_RevSurface.m_bTransposed has unexpected size % instead of 1", size_of(type_of(ON_RevSurface.m_bTransposed)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 112, "ON_RevSurface.m_bbox has unexpected offset % instead of 112", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RevSurface.m_bbox)) == 48, "ON_RevSurface.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_RevSurface.m_bbox)));
        assert(size_of(ON_RevSurface) == 160, "ON_RevSurface has size % instead of 160", size_of(ON_RevSurface));
    }

    {
        instance: ON_SumSurface;
        assert(((cast(*void)(*instance.m_curve)) - cast(*void)(*instance)) == 16, "ON_SumSurface.m_curve has unexpected offset % instead of 16", ((cast(*void)(*instance.m_curve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SumSurface.m_curve)) == 16, "ON_SumSurface.m_curve has unexpected size % instead of 16", size_of(type_of(ON_SumSurface.m_curve)));
        assert(((cast(*void)(*instance.m_basepoint)) - cast(*void)(*instance)) == 32, "ON_SumSurface.m_basepoint has unexpected offset % instead of 32", ((cast(*void)(*instance.m_basepoint)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SumSurface.m_basepoint)) == 24, "ON_SumSurface.m_basepoint has unexpected size % instead of 24", size_of(type_of(ON_SumSurface.m_basepoint)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 56, "ON_SumSurface.m_bbox has unexpected offset % instead of 56", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SumSurface.m_bbox)) == 48, "ON_SumSurface.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_SumSurface.m_bbox)));
        assert(size_of(ON_SumSurface) == 104, "ON_SumSurface has size % instead of 104", size_of(ON_SumSurface));
    }

    {
        instance: ON_BrepVertex;
        assert(((cast(*void)(*instance.m_vertex_user)) - cast(*void)(*instance)) == 40, "ON_BrepVertex.m_vertex_user has unexpected offset % instead of 40", ((cast(*void)(*instance.m_vertex_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepVertex.m_vertex_user)) == 8, "ON_BrepVertex.m_vertex_user has unexpected size % instead of 8", size_of(type_of(ON_BrepVertex.m_vertex_user)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 48, "ON_BrepVertex.m_status has unexpected offset % instead of 48", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepVertex.m_status)) == 2, "ON_BrepVertex.m_status has unexpected size % instead of 2", size_of(type_of(ON_BrepVertex.m_status)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 50, "ON_BrepVertex.m_reserved1 has unexpected offset % instead of 50", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepVertex.m_reserved1)) == 2, "ON_BrepVertex.m_reserved1 has unexpected size % instead of 2", size_of(type_of(ON_BrepVertex.m_reserved1)));
        assert(((cast(*void)(*instance.m_vertex_index)) - cast(*void)(*instance)) == 52, "ON_BrepVertex.m_vertex_index has unexpected offset % instead of 52", ((cast(*void)(*instance.m_vertex_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepVertex.m_vertex_index)) == 4, "ON_BrepVertex.m_vertex_index has unexpected size % instead of 4", size_of(type_of(ON_BrepVertex.m_vertex_index)));
        assert(((cast(*void)(*instance.m_ei)) - cast(*void)(*instance)) == 56, "ON_BrepVertex.m_ei has unexpected offset % instead of 56", ((cast(*void)(*instance.m_ei)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepVertex.m_ei)) == 24, "ON_BrepVertex.m_ei has unexpected size % instead of 24", size_of(type_of(ON_BrepVertex.m_ei)));
        assert(((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)) == 80, "ON_BrepVertex.m_tolerance has unexpected offset % instead of 80", ((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepVertex.m_tolerance)) == 8, "ON_BrepVertex.m_tolerance has unexpected size % instead of 8", size_of(type_of(ON_BrepVertex.m_tolerance)));
        assert(size_of(ON_BrepVertex) == 88, "ON_BrepVertex has size % instead of 88", size_of(ON_BrepVertex));
    }

    {
        instance: ON_BrepEdge;
        assert(((cast(*void)(*instance.m_edge_user)) - cast(*void)(*instance)) == 64, "ON_BrepEdge.m_edge_user has unexpected offset % instead of 64", ((cast(*void)(*instance.m_edge_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_edge_user)) == 8, "ON_BrepEdge.m_edge_user has unexpected size % instead of 8", size_of(type_of(ON_BrepEdge.m_edge_user)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 72, "ON_BrepEdge.m_status has unexpected offset % instead of 72", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_status)) == 2, "ON_BrepEdge.m_status has unexpected size % instead of 2", size_of(type_of(ON_BrepEdge.m_status)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 74, "ON_BrepEdge.m_reserved1 has unexpected offset % instead of 74", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_reserved1)) == 2, "ON_BrepEdge.m_reserved1 has unexpected size % instead of 2", size_of(type_of(ON_BrepEdge.m_reserved1)));
        assert(((cast(*void)(*instance.m_edge_index)) - cast(*void)(*instance)) == 76, "ON_BrepEdge.m_edge_index has unexpected offset % instead of 76", ((cast(*void)(*instance.m_edge_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_edge_index)) == 4, "ON_BrepEdge.m_edge_index has unexpected size % instead of 4", size_of(type_of(ON_BrepEdge.m_edge_index)));
        assert(((cast(*void)(*instance.m_c3i)) - cast(*void)(*instance)) == 80, "ON_BrepEdge.m_c3i has unexpected offset % instead of 80", ((cast(*void)(*instance.m_c3i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_c3i)) == 4, "ON_BrepEdge.m_c3i has unexpected size % instead of 4", size_of(type_of(ON_BrepEdge.m_c3i)));
        assert(((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)) == 84, "ON_BrepEdge.m_vi has unexpected offset % instead of 84", ((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_vi)) == 8, "ON_BrepEdge.m_vi has unexpected size % instead of 8", size_of(type_of(ON_BrepEdge.m_vi)));
        assert(((cast(*void)(*instance.m_ti)) - cast(*void)(*instance)) == 96, "ON_BrepEdge.m_ti has unexpected offset % instead of 96", ((cast(*void)(*instance.m_ti)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_ti)) == 24, "ON_BrepEdge.m_ti has unexpected size % instead of 24", size_of(type_of(ON_BrepEdge.m_ti)));
        assert(((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)) == 120, "ON_BrepEdge.m_tolerance has unexpected offset % instead of 120", ((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_tolerance)) == 8, "ON_BrepEdge.m_tolerance has unexpected size % instead of 8", size_of(type_of(ON_BrepEdge.m_tolerance)));
        assert(((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)) == 128, "ON_BrepEdge.m_brep has unexpected offset % instead of 128", ((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepEdge.m_brep)) == 8, "ON_BrepEdge.m_brep has unexpected size % instead of 8", size_of(type_of(ON_BrepEdge.m_brep)));
        assert(size_of(ON_BrepEdge) == 136, "ON_BrepEdge has size % instead of 136", size_of(ON_BrepEdge));
    }

    {
        instance: ON_BrepTrimPoint;
        assert(((cast(*void)(*instance.p)) - cast(*void)(*instance)) == 0, "ON_BrepTrimPoint.p has unexpected offset % instead of 0", ((cast(*void)(*instance.p)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrimPoint.p)) == 16, "ON_BrepTrimPoint.p has unexpected size % instead of 16", size_of(type_of(ON_BrepTrimPoint.p)));
        assert(((cast(*void)(*instance.t)) - cast(*void)(*instance)) == 16, "ON_BrepTrimPoint.t has unexpected offset % instead of 16", ((cast(*void)(*instance.t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrimPoint.t)) == 8, "ON_BrepTrimPoint.t has unexpected size % instead of 8", size_of(type_of(ON_BrepTrimPoint.t)));
        assert(((cast(*void)(*instance.e)) - cast(*void)(*instance)) == 24, "ON_BrepTrimPoint.e has unexpected offset % instead of 24", ((cast(*void)(*instance.e)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrimPoint.e)) == 8, "ON_BrepTrimPoint.e has unexpected size % instead of 8", size_of(type_of(ON_BrepTrimPoint.e)));
        assert(size_of(ON_BrepTrimPoint) == 32, "ON_BrepTrimPoint has size % instead of 32", size_of(ON_BrepTrimPoint));
    }

    {
        instance: ON_BrepTrim;
        assert(((cast(*void)(*instance.m_trim_user)) - cast(*void)(*instance)) == 64, "ON_BrepTrim.m_trim_user has unexpected offset % instead of 64", ((cast(*void)(*instance.m_trim_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_trim_user)) == 8, "ON_BrepTrim.m_trim_user has unexpected size % instead of 8", size_of(type_of(ON_BrepTrim.m_trim_user)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 72, "ON_BrepTrim.m_status has unexpected offset % instead of 72", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_status)) == 2, "ON_BrepTrim.m_status has unexpected size % instead of 2", size_of(type_of(ON_BrepTrim.m_status)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 74, "ON_BrepTrim.m_reserved1 has unexpected offset % instead of 74", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_reserved1)) == 2, "ON_BrepTrim.m_reserved1 has unexpected size % instead of 2", size_of(type_of(ON_BrepTrim.m_reserved1)));
        assert(((cast(*void)(*instance.m_trim_index)) - cast(*void)(*instance)) == 76, "ON_BrepTrim.m_trim_index has unexpected offset % instead of 76", ((cast(*void)(*instance.m_trim_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_trim_index)) == 4, "ON_BrepTrim.m_trim_index has unexpected size % instead of 4", size_of(type_of(ON_BrepTrim.m_trim_index)));
        assert(((cast(*void)(*instance.m_c2i)) - cast(*void)(*instance)) == 80, "ON_BrepTrim.m_c2i has unexpected offset % instead of 80", ((cast(*void)(*instance.m_c2i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_c2i)) == 4, "ON_BrepTrim.m_c2i has unexpected size % instead of 4", size_of(type_of(ON_BrepTrim.m_c2i)));
        assert(((cast(*void)(*instance.m_ei)) - cast(*void)(*instance)) == 84, "ON_BrepTrim.m_ei has unexpected offset % instead of 84", ((cast(*void)(*instance.m_ei)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_ei)) == 4, "ON_BrepTrim.m_ei has unexpected size % instead of 4", size_of(type_of(ON_BrepTrim.m_ei)));
        assert(((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)) == 88, "ON_BrepTrim.m_vi has unexpected offset % instead of 88", ((cast(*void)(*instance.m_vi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_vi)) == 8, "ON_BrepTrim.m_vi has unexpected size % instead of 8", size_of(type_of(ON_BrepTrim.m_vi)));
        assert(((cast(*void)(*instance.m_bRev3d)) - cast(*void)(*instance)) == 96, "ON_BrepTrim.m_bRev3d has unexpected offset % instead of 96", ((cast(*void)(*instance.m_bRev3d)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_bRev3d)) == 1, "ON_BrepTrim.m_bRev3d has unexpected size % instead of 1", size_of(type_of(ON_BrepTrim.m_bRev3d)));
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 100, "ON_BrepTrim.m_type has unexpected offset % instead of 100", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_type)) == 4, "ON_BrepTrim.m_type has unexpected size % instead of 4", size_of(type_of(ON_BrepTrim.m_type)));
        assert(((cast(*void)(*instance.m_iso)) - cast(*void)(*instance)) == 104, "ON_BrepTrim.m_iso has unexpected offset % instead of 104", ((cast(*void)(*instance.m_iso)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_iso)) == 4, "ON_BrepTrim.m_iso has unexpected size % instead of 4", size_of(type_of(ON_BrepTrim.m_iso)));
        assert(((cast(*void)(*instance.m_li)) - cast(*void)(*instance)) == 108, "ON_BrepTrim.m_li has unexpected offset % instead of 108", ((cast(*void)(*instance.m_li)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_li)) == 4, "ON_BrepTrim.m_li has unexpected size % instead of 4", size_of(type_of(ON_BrepTrim.m_li)));
        assert(((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)) == 112, "ON_BrepTrim.m_tolerance has unexpected offset % instead of 112", ((cast(*void)(*instance.m_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_tolerance)) == 16, "ON_BrepTrim.m_tolerance has unexpected size % instead of 16", size_of(type_of(ON_BrepTrim.m_tolerance)));
        assert(((cast(*void)(*instance.m_pline)) - cast(*void)(*instance)) == 128, "ON_BrepTrim.m_pline has unexpected offset % instead of 128", ((cast(*void)(*instance.m_pline)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_pline)) == 24, "ON_BrepTrim.m_pline has unexpected size % instead of 24", size_of(type_of(ON_BrepTrim.m_pline)));
        assert(((cast(*void)(*instance.m_pbox)) - cast(*void)(*instance)) == 152, "ON_BrepTrim.m_pbox has unexpected offset % instead of 152", ((cast(*void)(*instance.m_pbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_pbox)) == 48, "ON_BrepTrim.m_pbox has unexpected size % instead of 48", size_of(type_of(ON_BrepTrim.m_pbox)));
        assert(((cast(*void)(*instance.m__legacy_2d_tol)) - cast(*void)(*instance)) == 200, "ON_BrepTrim.m__legacy_2d_tol has unexpected offset % instead of 200", ((cast(*void)(*instance.m__legacy_2d_tol)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m__legacy_2d_tol)) == 8, "ON_BrepTrim.m__legacy_2d_tol has unexpected size % instead of 8", size_of(type_of(ON_BrepTrim.m__legacy_2d_tol)));
        assert(((cast(*void)(*instance.m__legacy_3d_tol)) - cast(*void)(*instance)) == 208, "ON_BrepTrim.m__legacy_3d_tol has unexpected offset % instead of 208", ((cast(*void)(*instance.m__legacy_3d_tol)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m__legacy_3d_tol)) == 8, "ON_BrepTrim.m__legacy_3d_tol has unexpected size % instead of 8", size_of(type_of(ON_BrepTrim.m__legacy_3d_tol)));
        assert(((cast(*void)(*instance.m__legacy_flags)) - cast(*void)(*instance)) == 216, "ON_BrepTrim.m__legacy_flags has unexpected offset % instead of 216", ((cast(*void)(*instance.m__legacy_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m__legacy_flags)) == 4, "ON_BrepTrim.m__legacy_flags has unexpected size % instead of 4", size_of(type_of(ON_BrepTrim.m__legacy_flags)));
        assert(((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)) == 224, "ON_BrepTrim.m_brep has unexpected offset % instead of 224", ((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepTrim.m_brep)) == 8, "ON_BrepTrim.m_brep has unexpected size % instead of 8", size_of(type_of(ON_BrepTrim.m_brep)));
        assert(size_of(ON_BrepTrim) == 232, "ON_BrepTrim has size % instead of 232", size_of(ON_BrepTrim));
    }

    {
        instance: ON_BrepLoop;
        assert(((cast(*void)(*instance.m_loop_user)) - cast(*void)(*instance)) == 16, "ON_BrepLoop.m_loop_user has unexpected offset % instead of 16", ((cast(*void)(*instance.m_loop_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_loop_user)) == 8, "ON_BrepLoop.m_loop_user has unexpected size % instead of 8", size_of(type_of(ON_BrepLoop.m_loop_user)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 24, "ON_BrepLoop.m_status has unexpected offset % instead of 24", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_status)) == 2, "ON_BrepLoop.m_status has unexpected size % instead of 2", size_of(type_of(ON_BrepLoop.m_status)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 26, "ON_BrepLoop.m_reserved1 has unexpected offset % instead of 26", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_reserved1)) == 2, "ON_BrepLoop.m_reserved1 has unexpected size % instead of 2", size_of(type_of(ON_BrepLoop.m_reserved1)));
        assert(((cast(*void)(*instance.m_loop_index)) - cast(*void)(*instance)) == 28, "ON_BrepLoop.m_loop_index has unexpected offset % instead of 28", ((cast(*void)(*instance.m_loop_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_loop_index)) == 4, "ON_BrepLoop.m_loop_index has unexpected size % instead of 4", size_of(type_of(ON_BrepLoop.m_loop_index)));
        assert(((cast(*void)(*instance.m_ti)) - cast(*void)(*instance)) == 32, "ON_BrepLoop.m_ti has unexpected offset % instead of 32", ((cast(*void)(*instance.m_ti)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_ti)) == 24, "ON_BrepLoop.m_ti has unexpected size % instead of 24", size_of(type_of(ON_BrepLoop.m_ti)));
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 56, "ON_BrepLoop.m_type has unexpected offset % instead of 56", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_type)) == 4, "ON_BrepLoop.m_type has unexpected size % instead of 4", size_of(type_of(ON_BrepLoop.m_type)));
        assert(((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)) == 60, "ON_BrepLoop.m_fi has unexpected offset % instead of 60", ((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_fi)) == 4, "ON_BrepLoop.m_fi has unexpected size % instead of 4", size_of(type_of(ON_BrepLoop.m_fi)));
        assert(((cast(*void)(*instance.m_pbox)) - cast(*void)(*instance)) == 64, "ON_BrepLoop.m_pbox has unexpected offset % instead of 64", ((cast(*void)(*instance.m_pbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_pbox)) == 48, "ON_BrepLoop.m_pbox has unexpected size % instead of 48", size_of(type_of(ON_BrepLoop.m_pbox)));
        assert(((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)) == 112, "ON_BrepLoop.m_brep has unexpected offset % instead of 112", ((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepLoop.m_brep)) == 8, "ON_BrepLoop.m_brep has unexpected size % instead of 8", size_of(type_of(ON_BrepLoop.m_brep)));
        assert(size_of(ON_BrepLoop) == 120, "ON_BrepLoop has size % instead of 120", size_of(ON_BrepLoop));
    }

    {
        instance: ON_BrepFace;
        assert(((cast(*void)(*instance.m_face_user)) - cast(*void)(*instance)) == 32, "ON_BrepFace.m_face_user has unexpected offset % instead of 32", ((cast(*void)(*instance.m_face_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_face_user)) == 8, "ON_BrepFace.m_face_user has unexpected size % instead of 8", size_of(type_of(ON_BrepFace.m_face_user)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 40, "ON_BrepFace.m_status has unexpected offset % instead of 40", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_status)) == 2, "ON_BrepFace.m_status has unexpected size % instead of 2", size_of(type_of(ON_BrepFace.m_status)));
        assert(((cast(*void)(*instance.m_pack_id_low)) - cast(*void)(*instance)) == 42, "ON_BrepFace.m_pack_id_low has unexpected offset % instead of 42", ((cast(*void)(*instance.m_pack_id_low)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_pack_id_low)) == 2, "ON_BrepFace.m_pack_id_low has unexpected size % instead of 2", size_of(type_of(ON_BrepFace.m_pack_id_low)));
        assert(((cast(*void)(*instance.m_face_index)) - cast(*void)(*instance)) == 44, "ON_BrepFace.m_face_index has unexpected offset % instead of 44", ((cast(*void)(*instance.m_face_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_face_index)) == 4, "ON_BrepFace.m_face_index has unexpected size % instead of 4", size_of(type_of(ON_BrepFace.m_face_index)));
        assert(((cast(*void)(*instance.m_li)) - cast(*void)(*instance)) == 48, "ON_BrepFace.m_li has unexpected offset % instead of 48", ((cast(*void)(*instance.m_li)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_li)) == 24, "ON_BrepFace.m_li has unexpected size % instead of 24", size_of(type_of(ON_BrepFace.m_li)));
        assert(((cast(*void)(*instance.m_si)) - cast(*void)(*instance)) == 72, "ON_BrepFace.m_si has unexpected offset % instead of 72", ((cast(*void)(*instance.m_si)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_si)) == 4, "ON_BrepFace.m_si has unexpected size % instead of 4", size_of(type_of(ON_BrepFace.m_si)));
        assert(((cast(*void)(*instance.m_bRev)) - cast(*void)(*instance)) == 76, "ON_BrepFace.m_bRev has unexpected offset % instead of 76", ((cast(*void)(*instance.m_bRev)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_bRev)) == 1, "ON_BrepFace.m_bRev has unexpected size % instead of 1", size_of(type_of(ON_BrepFace.m_bRev)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 77, "ON_BrepFace.m_reserved2 has unexpected offset % instead of 77", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_reserved2)) == 1, "ON_BrepFace.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_BrepFace.m_reserved2)));
        assert(((cast(*void)(*instance.m_pack_id_high)) - cast(*void)(*instance)) == 78, "ON_BrepFace.m_pack_id_high has unexpected offset % instead of 78", ((cast(*void)(*instance.m_pack_id_high)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_pack_id_high)) == 2, "ON_BrepFace.m_pack_id_high has unexpected size % instead of 2", size_of(type_of(ON_BrepFace.m_pack_id_high)));
        assert(((cast(*void)(*instance.m_face_material_channel)) - cast(*void)(*instance)) == 80, "ON_BrepFace.m_face_material_channel has unexpected offset % instead of 80", ((cast(*void)(*instance.m_face_material_channel)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_face_material_channel)) == 4, "ON_BrepFace.m_face_material_channel has unexpected size % instead of 4", size_of(type_of(ON_BrepFace.m_face_material_channel)));
        assert(((cast(*void)(*instance.m_face_uuid)) - cast(*void)(*instance)) == 84, "ON_BrepFace.m_face_uuid has unexpected offset % instead of 84", ((cast(*void)(*instance.m_face_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_face_uuid)) == 16, "ON_BrepFace.m_face_uuid has unexpected size % instead of 16", size_of(type_of(ON_BrepFace.m_face_uuid)));
        assert(((cast(*void)(*instance.m_per_face_color)) - cast(*void)(*instance)) == 100, "ON_BrepFace.m_per_face_color has unexpected offset % instead of 100", ((cast(*void)(*instance.m_per_face_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_per_face_color)) == 4, "ON_BrepFace.m_per_face_color has unexpected size % instead of 4", size_of(type_of(ON_BrepFace.m_per_face_color)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 104, "ON_BrepFace.m_bbox has unexpected offset % instead of 104", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_bbox)) == 48, "ON_BrepFace.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_BrepFace.m_bbox)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 152, "ON_BrepFace.m_domain has unexpected offset % instead of 152", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_domain)) == 32, "ON_BrepFace.m_domain has unexpected size % instead of 32", size_of(type_of(ON_BrepFace.m_domain)));
        assert(((cast(*void)(*instance.m_pImpl)) - cast(*void)(*instance)) == 184, "ON_BrepFace.m_pImpl has unexpected offset % instead of 184", ((cast(*void)(*instance.m_pImpl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_pImpl)) == 8, "ON_BrepFace.m_pImpl has unexpected size % instead of 8", size_of(type_of(ON_BrepFace.m_pImpl)));
        assert(((cast(*void)(*instance.m_reserved0)) - cast(*void)(*instance)) == 192, "ON_BrepFace.m_reserved0 has unexpected offset % instead of 192", ((cast(*void)(*instance.m_reserved0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_reserved0)) == 8, "ON_BrepFace.m_reserved0 has unexpected size % instead of 8", size_of(type_of(ON_BrepFace.m_reserved0)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 200, "ON_BrepFace.m_reserved1 has unexpected offset % instead of 200", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_reserved1)) == 8, "ON_BrepFace.m_reserved1 has unexpected size % instead of 8", size_of(type_of(ON_BrepFace.m_reserved1)));
        assert(((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)) == 208, "ON_BrepFace.m_brep has unexpected offset % instead of 208", ((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFace.m_brep)) == 8, "ON_BrepFace.m_brep has unexpected size % instead of 8", size_of(type_of(ON_BrepFace.m_brep)));
        assert(size_of(ON_BrepFace) == 216, "ON_BrepFace has size % instead of 216", size_of(ON_BrepFace));
    }

    {
        instance: ON_BrepFaceSide;
        assert(((cast(*void)(*instance.m_faceside_user)) - cast(*void)(*instance)) == 16, "ON_BrepFaceSide.m_faceside_user has unexpected offset % instead of 16", ((cast(*void)(*instance.m_faceside_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFaceSide.m_faceside_user)) == 8, "ON_BrepFaceSide.m_faceside_user has unexpected size % instead of 8", size_of(type_of(ON_BrepFaceSide.m_faceside_user)));
        assert(((cast(*void)(*instance.m_faceside_index)) - cast(*void)(*instance)) == 24, "ON_BrepFaceSide.m_faceside_index has unexpected offset % instead of 24", ((cast(*void)(*instance.m_faceside_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFaceSide.m_faceside_index)) == 4, "ON_BrepFaceSide.m_faceside_index has unexpected size % instead of 4", size_of(type_of(ON_BrepFaceSide.m_faceside_index)));
        assert(((cast(*void)(*instance.m_ri)) - cast(*void)(*instance)) == 28, "ON_BrepFaceSide.m_ri has unexpected offset % instead of 28", ((cast(*void)(*instance.m_ri)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFaceSide.m_ri)) == 4, "ON_BrepFaceSide.m_ri has unexpected size % instead of 4", size_of(type_of(ON_BrepFaceSide.m_ri)));
        assert(((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)) == 32, "ON_BrepFaceSide.m_fi has unexpected offset % instead of 32", ((cast(*void)(*instance.m_fi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFaceSide.m_fi)) == 4, "ON_BrepFaceSide.m_fi has unexpected size % instead of 4", size_of(type_of(ON_BrepFaceSide.m_fi)));
        assert(((cast(*void)(*instance.m_srf_dir)) - cast(*void)(*instance)) == 36, "ON_BrepFaceSide.m_srf_dir has unexpected offset % instead of 36", ((cast(*void)(*instance.m_srf_dir)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFaceSide.m_srf_dir)) == 4, "ON_BrepFaceSide.m_srf_dir has unexpected size % instead of 4", size_of(type_of(ON_BrepFaceSide.m_srf_dir)));
        assert(((cast(*void)(*instance.m_rtop)) - cast(*void)(*instance)) == 40, "ON_BrepFaceSide.m_rtop has unexpected offset % instead of 40", ((cast(*void)(*instance.m_rtop)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepFaceSide.m_rtop)) == 8, "ON_BrepFaceSide.m_rtop has unexpected size % instead of 8", size_of(type_of(ON_BrepFaceSide.m_rtop)));
        assert(size_of(ON_BrepFaceSide) == 48, "ON_BrepFaceSide has size % instead of 48", size_of(ON_BrepFaceSide));
    }

    {
        instance: ON_BrepRegion;
        assert(((cast(*void)(*instance.m_region_user)) - cast(*void)(*instance)) == 16, "ON_BrepRegion.m_region_user has unexpected offset % instead of 16", ((cast(*void)(*instance.m_region_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegion.m_region_user)) == 8, "ON_BrepRegion.m_region_user has unexpected size % instead of 8", size_of(type_of(ON_BrepRegion.m_region_user)));
        assert(((cast(*void)(*instance.m_region_index)) - cast(*void)(*instance)) == 24, "ON_BrepRegion.m_region_index has unexpected offset % instead of 24", ((cast(*void)(*instance.m_region_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegion.m_region_index)) == 4, "ON_BrepRegion.m_region_index has unexpected size % instead of 4", size_of(type_of(ON_BrepRegion.m_region_index)));
        assert(((cast(*void)(*instance.m_fsi)) - cast(*void)(*instance)) == 32, "ON_BrepRegion.m_fsi has unexpected offset % instead of 32", ((cast(*void)(*instance.m_fsi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegion.m_fsi)) == 24, "ON_BrepRegion.m_fsi has unexpected size % instead of 24", size_of(type_of(ON_BrepRegion.m_fsi)));
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 56, "ON_BrepRegion.m_type has unexpected offset % instead of 56", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegion.m_type)) == 4, "ON_BrepRegion.m_type has unexpected size % instead of 4", size_of(type_of(ON_BrepRegion.m_type)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 64, "ON_BrepRegion.m_bbox has unexpected offset % instead of 64", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegion.m_bbox)) == 48, "ON_BrepRegion.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_BrepRegion.m_bbox)));
        assert(((cast(*void)(*instance.m_rtop)) - cast(*void)(*instance)) == 112, "ON_BrepRegion.m_rtop has unexpected offset % instead of 112", ((cast(*void)(*instance.m_rtop)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegion.m_rtop)) == 8, "ON_BrepRegion.m_rtop has unexpected size % instead of 8", size_of(type_of(ON_BrepRegion.m_rtop)));
        assert(size_of(ON_BrepRegion) == 120, "ON_BrepRegion has size % instead of 120", size_of(ON_BrepRegion));
    }

    assert(size_of(ON_BrepVertexArray) == 24, "ON_BrepVertexArray has size % instead of 24", size_of(ON_BrepVertexArray));

    assert(size_of(ON_BrepEdgeArray) == 24, "ON_BrepEdgeArray has size % instead of 24", size_of(ON_BrepEdgeArray));

    assert(size_of(ON_BrepTrimArray) == 24, "ON_BrepTrimArray has size % instead of 24", size_of(ON_BrepTrimArray));

    assert(size_of(ON_BrepLoopArray) == 24, "ON_BrepLoopArray has size % instead of 24", size_of(ON_BrepLoopArray));

    assert(size_of(ON_BrepFaceArray) == 24, "ON_BrepFaceArray has size % instead of 24", size_of(ON_BrepFaceArray));

    assert(size_of(ON_BrepFaceSideArray) == 24, "ON_BrepFaceSideArray has size % instead of 24", size_of(ON_BrepFaceSideArray));

    assert(size_of(ON_BrepRegionArray) == 24, "ON_BrepRegionArray has size % instead of 24", size_of(ON_BrepRegionArray));

    {
        instance: ON_BrepRegionTopology;
        assert(((cast(*void)(*instance.m_FS)) - cast(*void)(*instance)) == 0, "ON_BrepRegionTopology.m_FS has unexpected offset % instead of 0", ((cast(*void)(*instance.m_FS)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegionTopology.m_FS)) == 24, "ON_BrepRegionTopology.m_FS has unexpected size % instead of 24", size_of(type_of(ON_BrepRegionTopology.m_FS)));
        assert(((cast(*void)(*instance.m_R)) - cast(*void)(*instance)) == 24, "ON_BrepRegionTopology.m_R has unexpected offset % instead of 24", ((cast(*void)(*instance.m_R)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegionTopology.m_R)) == 24, "ON_BrepRegionTopology.m_R has unexpected size % instead of 24", size_of(type_of(ON_BrepRegionTopology.m_R)));
        assert(((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)) == 48, "ON_BrepRegionTopology.m_brep has unexpected offset % instead of 48", ((cast(*void)(*instance.m_brep)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BrepRegionTopology.m_brep)) == 8, "ON_BrepRegionTopology.m_brep has unexpected size % instead of 8", size_of(type_of(ON_BrepRegionTopology.m_brep)));
        assert(size_of(ON_BrepRegionTopology) == 56, "ON_BrepRegionTopology has size % instead of 56", size_of(ON_BrepRegionTopology));
    }

    {
        instance: ON_Brep;
        assert(((cast(*void)(*instance.m_brep_user)) - cast(*void)(*instance)) == 16, "ON_Brep.m_brep_user has unexpected offset % instead of 16", ((cast(*void)(*instance.m_brep_user)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_brep_user)) == 8, "ON_Brep.m_brep_user has unexpected size % instead of 8", size_of(type_of(ON_Brep.m_brep_user)));
        assert(((cast(*void)(*instance.m_C2)) - cast(*void)(*instance)) == 24, "ON_Brep.m_C2 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_C2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_C2)) == 24, "ON_Brep.m_C2 has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_C2)));
        assert(((cast(*void)(*instance.m_C3)) - cast(*void)(*instance)) == 48, "ON_Brep.m_C3 has unexpected offset % instead of 48", ((cast(*void)(*instance.m_C3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_C3)) == 24, "ON_Brep.m_C3 has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_C3)));
        assert(((cast(*void)(*instance.m_S)) - cast(*void)(*instance)) == 72, "ON_Brep.m_S has unexpected offset % instead of 72", ((cast(*void)(*instance.m_S)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_S)) == 24, "ON_Brep.m_S has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_S)));
        assert(((cast(*void)(*instance.m_V)) - cast(*void)(*instance)) == 96, "ON_Brep.m_V has unexpected offset % instead of 96", ((cast(*void)(*instance.m_V)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_V)) == 24, "ON_Brep.m_V has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_V)));
        assert(((cast(*void)(*instance.m_E)) - cast(*void)(*instance)) == 120, "ON_Brep.m_E has unexpected offset % instead of 120", ((cast(*void)(*instance.m_E)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_E)) == 24, "ON_Brep.m_E has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_E)));
        assert(((cast(*void)(*instance.m_T)) - cast(*void)(*instance)) == 144, "ON_Brep.m_T has unexpected offset % instead of 144", ((cast(*void)(*instance.m_T)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_T)) == 24, "ON_Brep.m_T has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_T)));
        assert(((cast(*void)(*instance.m_L)) - cast(*void)(*instance)) == 168, "ON_Brep.m_L has unexpected offset % instead of 168", ((cast(*void)(*instance.m_L)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_L)) == 24, "ON_Brep.m_L has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_L)));
        assert(((cast(*void)(*instance.m_F)) - cast(*void)(*instance)) == 192, "ON_Brep.m_F has unexpected offset % instead of 192", ((cast(*void)(*instance.m_F)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_F)) == 24, "ON_Brep.m_F has unexpected size % instead of 24", size_of(type_of(ON_Brep.m_F)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 216, "ON_Brep.m_bbox has unexpected offset % instead of 216", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_bbox)) == 48, "ON_Brep.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_Brep.m_bbox)));
        assert(((cast(*void)(*instance.m_region_topology)) - cast(*void)(*instance)) == 264, "ON_Brep.m_region_topology has unexpected offset % instead of 264", ((cast(*void)(*instance.m_region_topology)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_region_topology)) == 8, "ON_Brep.m_region_topology has unexpected size % instead of 8", size_of(type_of(ON_Brep.m_region_topology)));
        assert(((cast(*void)(*instance.m_aggregate_status)) - cast(*void)(*instance)) == 272, "ON_Brep.m_aggregate_status has unexpected offset % instead of 272", ((cast(*void)(*instance.m_aggregate_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_aggregate_status)) == 32, "ON_Brep.m_aggregate_status has unexpected size % instead of 32", size_of(type_of(ON_Brep.m_aggregate_status)));
        assert(((cast(*void)(*instance.m_is_solid)) - cast(*void)(*instance)) == 304, "ON_Brep.m_is_solid has unexpected offset % instead of 304", ((cast(*void)(*instance.m_is_solid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_is_solid)) == 4, "ON_Brep.m_is_solid has unexpected size % instead of 4", size_of(type_of(ON_Brep.m_is_solid)));
        assert(((cast(*void)(*instance.m_sleep_lock)) - cast(*void)(*instance)) == 308, "ON_Brep.m_sleep_lock has unexpected offset % instead of 308", ((cast(*void)(*instance.m_sleep_lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Brep.m_sleep_lock)) == 4, "ON_Brep.m_sleep_lock has unexpected size % instead of 4", size_of(type_of(ON_Brep.m_sleep_lock)));
        assert(size_of(ON_Brep) == 312, "ON_Brep has size % instead of 312", size_of(ON_Brep));
    }

    {
        instance: ON_Extrusion;
        assert(((cast(*void)(*instance.m_path)) - cast(*void)(*instance)) == 16, "ON_Extrusion.m_path has unexpected offset % instead of 16", ((cast(*void)(*instance.m_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_path)) == 48, "ON_Extrusion.m_path has unexpected size % instead of 48", size_of(type_of(ON_Extrusion.m_path)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 64, "ON_Extrusion.m_t has unexpected offset % instead of 64", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_t)) == 16, "ON_Extrusion.m_t has unexpected size % instead of 16", size_of(type_of(ON_Extrusion.m_t)));
        assert(((cast(*void)(*instance.m_up)) - cast(*void)(*instance)) == 80, "ON_Extrusion.m_up has unexpected offset % instead of 80", ((cast(*void)(*instance.m_up)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_up)) == 24, "ON_Extrusion.m_up has unexpected size % instead of 24", size_of(type_of(ON_Extrusion.m_up)));
        assert(((cast(*void)(*instance.m_profile_count)) - cast(*void)(*instance)) == 104, "ON_Extrusion.m_profile_count has unexpected offset % instead of 104", ((cast(*void)(*instance.m_profile_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_profile_count)) == 4, "ON_Extrusion.m_profile_count has unexpected size % instead of 4", size_of(type_of(ON_Extrusion.m_profile_count)));
        assert(((cast(*void)(*instance.m_profile)) - cast(*void)(*instance)) == 112, "ON_Extrusion.m_profile has unexpected offset % instead of 112", ((cast(*void)(*instance.m_profile)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_profile)) == 8, "ON_Extrusion.m_profile has unexpected size % instead of 8", size_of(type_of(ON_Extrusion.m_profile)));
        assert(((cast(*void)(*instance.m_bCap)) - cast(*void)(*instance)) == 120, "ON_Extrusion.m_bCap has unexpected offset % instead of 120", ((cast(*void)(*instance.m_bCap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_bCap)) == 2, "ON_Extrusion.m_bCap has unexpected size % instead of 2", size_of(type_of(ON_Extrusion.m_bCap)));
        assert(((cast(*void)(*instance.m_bHaveN)) - cast(*void)(*instance)) == 122, "ON_Extrusion.m_bHaveN has unexpected offset % instead of 122", ((cast(*void)(*instance.m_bHaveN)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_bHaveN)) == 2, "ON_Extrusion.m_bHaveN has unexpected size % instead of 2", size_of(type_of(ON_Extrusion.m_bHaveN)));
        assert(((cast(*void)(*instance.m_N)) - cast(*void)(*instance)) == 128, "ON_Extrusion.m_N has unexpected offset % instead of 128", ((cast(*void)(*instance.m_N)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_N)) == 48, "ON_Extrusion.m_N has unexpected size % instead of 48", size_of(type_of(ON_Extrusion.m_N)));
        assert(((cast(*void)(*instance.m_path_domain)) - cast(*void)(*instance)) == 176, "ON_Extrusion.m_path_domain has unexpected offset % instead of 176", ((cast(*void)(*instance.m_path_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_path_domain)) == 16, "ON_Extrusion.m_path_domain has unexpected size % instead of 16", size_of(type_of(ON_Extrusion.m_path_domain)));
        assert(((cast(*void)(*instance.m_bTransposed)) - cast(*void)(*instance)) == 192, "ON_Extrusion.m_bTransposed has unexpected offset % instead of 192", ((cast(*void)(*instance.m_bTransposed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_bTransposed)) == 1, "ON_Extrusion.m_bTransposed has unexpected size % instead of 1", size_of(type_of(ON_Extrusion.m_bTransposed)));
        assert(((cast(*void)(*instance.m_mesh_cache)) - cast(*void)(*instance)) == 200, "ON_Extrusion.m_mesh_cache has unexpected offset % instead of 200", ((cast(*void)(*instance.m_mesh_cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Extrusion.m_mesh_cache)) == 8, "ON_Extrusion.m_mesh_cache has unexpected size % instead of 8", size_of(type_of(ON_Extrusion.m_mesh_cache)));
        assert(size_of(ON_Extrusion) == 208, "ON_Extrusion has size % instead of 208", size_of(ON_Extrusion));
    }

    {
        instance: ON_SubDEdgeSharpness;
        assert(((cast(*void)(*instance.m_edge_sharpness)) - cast(*void)(*instance)) == 0, "ON_SubDEdgeSharpness.m_edge_sharpness has unexpected offset % instead of 0", ((cast(*void)(*instance.m_edge_sharpness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeSharpness.m_edge_sharpness)) == 8, "ON_SubDEdgeSharpness.m_edge_sharpness has unexpected size % instead of 8", size_of(type_of(ON_SubDEdgeSharpness.m_edge_sharpness)));
        assert(size_of(ON_SubDEdgeSharpness) == 8, "ON_SubDEdgeSharpness has size % instead of 8", size_of(ON_SubDEdgeSharpness));
    }

    {
        instance: ON_SubDHash;
        assert(((cast(*void)(*instance.m_hash_type)) - cast(*void)(*instance)) == 0, "ON_SubDHash.m_hash_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_hash_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_hash_type)) == 1, "ON_SubDHash.m_hash_type has unexpected size % instead of 1", size_of(type_of(ON_SubDHash.m_hash_type)));
        assert(((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)) == 4, "ON_SubDHash.m_vertex_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_vertex_count)) == 4, "ON_SubDHash.m_vertex_count has unexpected size % instead of 4", size_of(type_of(ON_SubDHash.m_vertex_count)));
        assert(((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)) == 8, "ON_SubDHash.m_edge_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_edge_count)) == 4, "ON_SubDHash.m_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDHash.m_edge_count)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 12, "ON_SubDHash.m_face_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_face_count)) == 4, "ON_SubDHash.m_face_count has unexpected size % instead of 4", size_of(type_of(ON_SubDHash.m_face_count)));
        assert(((cast(*void)(*instance.m_subd_runtime_serial_number)) - cast(*void)(*instance)) == 16, "ON_SubDHash.m_subd_runtime_serial_number has unexpected offset % instead of 16", ((cast(*void)(*instance.m_subd_runtime_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_subd_runtime_serial_number)) == 8, "ON_SubDHash.m_subd_runtime_serial_number has unexpected size % instead of 8", size_of(type_of(ON_SubDHash.m_subd_runtime_serial_number)));
        assert(((cast(*void)(*instance.m_subd_geometry_content_serial_number)) - cast(*void)(*instance)) == 24, "ON_SubDHash.m_subd_geometry_content_serial_number has unexpected offset % instead of 24", ((cast(*void)(*instance.m_subd_geometry_content_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_subd_geometry_content_serial_number)) == 8, "ON_SubDHash.m_subd_geometry_content_serial_number has unexpected size % instead of 8", size_of(type_of(ON_SubDHash.m_subd_geometry_content_serial_number)));
        assert(((cast(*void)(*instance.m_vertex_hash)) - cast(*void)(*instance)) == 32, "ON_SubDHash.m_vertex_hash has unexpected offset % instead of 32", ((cast(*void)(*instance.m_vertex_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_vertex_hash)) == 20, "ON_SubDHash.m_vertex_hash has unexpected size % instead of 20", size_of(type_of(ON_SubDHash.m_vertex_hash)));
        assert(((cast(*void)(*instance.m_edge_hash)) - cast(*void)(*instance)) == 52, "ON_SubDHash.m_edge_hash has unexpected offset % instead of 52", ((cast(*void)(*instance.m_edge_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_edge_hash)) == 20, "ON_SubDHash.m_edge_hash has unexpected size % instead of 20", size_of(type_of(ON_SubDHash.m_edge_hash)));
        assert(((cast(*void)(*instance.m_face_hash)) - cast(*void)(*instance)) == 72, "ON_SubDHash.m_face_hash has unexpected offset % instead of 72", ((cast(*void)(*instance.m_face_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDHash.m_face_hash)) == 20, "ON_SubDHash.m_face_hash has unexpected size % instead of 20", size_of(type_of(ON_SubDHash.m_face_hash)));
        assert(size_of(ON_SubDHash) == 96, "ON_SubDHash has size % instead of 96", size_of(ON_SubDHash));
    }

    {
        instance: ON_SubDToBrepParameters;
        assert(((cast(*void)(*instance.m_bPackFaces)) - cast(*void)(*instance)) == 0, "ON_SubDToBrepParameters.m_bPackFaces has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bPackFaces)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDToBrepParameters.m_bPackFaces)) == 1, "ON_SubDToBrepParameters.m_bPackFaces has unexpected size % instead of 1", size_of(type_of(ON_SubDToBrepParameters.m_bPackFaces)));
        assert(((cast(*void)(*instance.m_extraordinary_vertex_process)) - cast(*void)(*instance)) == 1, "ON_SubDToBrepParameters.m_extraordinary_vertex_process has unexpected offset % instead of 1", ((cast(*void)(*instance.m_extraordinary_vertex_process)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDToBrepParameters.m_extraordinary_vertex_process)) == 1, "ON_SubDToBrepParameters.m_extraordinary_vertex_process has unexpected size % instead of 1", size_of(type_of(ON_SubDToBrepParameters.m_extraordinary_vertex_process)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 2, "ON_SubDToBrepParameters.m_reserved1 has unexpected offset % instead of 2", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDToBrepParameters.m_reserved1)) == 2, "ON_SubDToBrepParameters.m_reserved1 has unexpected size % instead of 2", size_of(type_of(ON_SubDToBrepParameters.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 4, "ON_SubDToBrepParameters.m_reserved2 has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDToBrepParameters.m_reserved2)) == 4, "ON_SubDToBrepParameters.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_SubDToBrepParameters.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 8, "ON_SubDToBrepParameters.m_reserved3 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDToBrepParameters.m_reserved3)) == 8, "ON_SubDToBrepParameters.m_reserved3 has unexpected size % instead of 8", size_of(type_of(ON_SubDToBrepParameters.m_reserved3)));
        assert(size_of(ON_SubDToBrepParameters) == 16, "ON_SubDToBrepParameters has size % instead of 16", size_of(ON_SubDToBrepParameters));
    }

    {
        instance: ON_SubDVertexPtr;
        assert(((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)) == 0, "ON_SubDVertexPtr.m_ptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexPtr.m_ptr)) == 8, "ON_SubDVertexPtr.m_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexPtr.m_ptr)));
        assert(size_of(ON_SubDVertexPtr) == 8, "ON_SubDVertexPtr has size % instead of 8", size_of(ON_SubDVertexPtr));
    }

    {
        instance: ON_SubDEdgePtr;
        assert(((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)) == 0, "ON_SubDEdgePtr.m_ptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgePtr.m_ptr)) == 8, "ON_SubDEdgePtr.m_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDEdgePtr.m_ptr)));
        assert(size_of(ON_SubDEdgePtr) == 8, "ON_SubDEdgePtr has size % instead of 8", size_of(ON_SubDEdgePtr));
    }

    {
        instance: ON_SubDFacePtr;
        assert(((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)) == 0, "ON_SubDFacePtr.m_ptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFacePtr.m_ptr)) == 8, "ON_SubDFacePtr.m_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDFacePtr.m_ptr)));
        assert(size_of(ON_SubDFacePtr) == 8, "ON_SubDFacePtr has size % instead of 8", size_of(ON_SubDFacePtr));
    }

    {
        instance: ON_SubDComponentPtr;
        assert(((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)) == 0, "ON_SubDComponentPtr.m_ptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentPtr.m_ptr)) == 8, "ON_SubDComponentPtr.m_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentPtr.m_ptr)));
        assert(size_of(ON_SubDComponentPtr) == 8, "ON_SubDComponentPtr has size % instead of 8", size_of(ON_SubDComponentPtr));
    }

    {
        instance: ON_SubDComponentAndNumber;
        assert(((cast(*void)(*instance.m_cptr)) - cast(*void)(*instance)) == 0, "ON_SubDComponentAndNumber.m_cptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_cptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentAndNumber.m_cptr)) == 8, "ON_SubDComponentAndNumber.m_cptr has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentAndNumber.m_cptr)));
        assert(((cast(*void)(*instance.m_x)) - cast(*void)(*instance)) == 8, "ON_SubDComponentAndNumber.m_x has unexpected offset % instead of 8", ((cast(*void)(*instance.m_x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentAndNumber.m_x)) == 8, "ON_SubDComponentAndNumber.m_x has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentAndNumber.m_x)));
        assert(size_of(ON_SubDComponentAndNumber) == 16, "ON_SubDComponentAndNumber has size % instead of 16", size_of(ON_SubDComponentAndNumber));
    }

    {
        instance: ON_SubDComponentAndPoint;
        assert(((cast(*void)(*instance.m_cptr)) - cast(*void)(*instance)) == 0, "ON_SubDComponentAndPoint.m_cptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_cptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentAndPoint.m_cptr)) == 8, "ON_SubDComponentAndPoint.m_cptr has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentAndPoint.m_cptr)));
        assert(((cast(*void)(*instance.m_P)) - cast(*void)(*instance)) == 8, "ON_SubDComponentAndPoint.m_P has unexpected offset % instead of 8", ((cast(*void)(*instance.m_P)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentAndPoint.m_P)) == 24, "ON_SubDComponentAndPoint.m_P has unexpected size % instead of 24", size_of(type_of(ON_SubDComponentAndPoint.m_P)));
        assert(size_of(ON_SubDComponentAndPoint) == 32, "ON_SubDComponentAndPoint has size % instead of 32", size_of(ON_SubDComponentAndPoint));
    }

    {
        instance: ON_SubDComponentTest;
        assert(((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)) == 8, "ON_SubDComponentTest.m_ptr has unexpected offset % instead of 8", ((cast(*void)(*instance.m_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentTest.m_ptr)) == 8, "ON_SubDComponentTest.m_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentTest.m_ptr)));
        assert(size_of(ON_SubDComponentTest) == 16, "ON_SubDComponentTest has size % instead of 16", size_of(ON_SubDComponentTest));
    }

    {
        instance: ON_SubDComponentId;
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 0, "ON_SubDComponentId.m_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentId.m_id)) == 4, "ON_SubDComponentId.m_id has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentId.m_id)));
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 4, "ON_SubDComponentId.m_type has unexpected offset % instead of 4", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentId.m_type)) == 1, "ON_SubDComponentId.m_type has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentId.m_type)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 5, "ON_SubDComponentId.m_reserved1 has unexpected offset % instead of 5", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentId.m_reserved1)) == 1, "ON_SubDComponentId.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentId.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 6, "ON_SubDComponentId.m_reserved2 has unexpected offset % instead of 6", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentId.m_reserved2)) == 2, "ON_SubDComponentId.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SubDComponentId.m_reserved2)));
        assert(size_of(ON_SubDComponentId) == 8, "ON_SubDComponentId has size % instead of 8", size_of(ON_SubDComponentId));
    }

    {
        instance: ON_SubDComponentIdList;
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 16, "ON_SubDComponentIdList.m_reserved1 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIdList.m_reserved1)) == 4, "ON_SubDComponentIdList.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentIdList.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 20, "ON_SubDComponentIdList.m_reserved2 has unexpected offset % instead of 20", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIdList.m_reserved2)) == 2, "ON_SubDComponentIdList.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SubDComponentIdList.m_reserved2)));
        assert(((cast(*void)(*instance.m_bInListPassesResult)) - cast(*void)(*instance)) == 22, "ON_SubDComponentIdList.m_bInListPassesResult has unexpected offset % instead of 22", ((cast(*void)(*instance.m_bInListPassesResult)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIdList.m_bInListPassesResult)) == 1, "ON_SubDComponentIdList.m_bInListPassesResult has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentIdList.m_bInListPassesResult)));
        assert(((cast(*void)(*instance.m_bSorted)) - cast(*void)(*instance)) == 23, "ON_SubDComponentIdList.m_bSorted has unexpected offset % instead of 23", ((cast(*void)(*instance.m_bSorted)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIdList.m_bSorted)) == 1, "ON_SubDComponentIdList.m_bSorted has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentIdList.m_bSorted)));
        assert(((cast(*void)(*instance.m_id_list)) - cast(*void)(*instance)) == 24, "ON_SubDComponentIdList.m_id_list has unexpected offset % instead of 24", ((cast(*void)(*instance.m_id_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIdList.m_id_list)) == 24, "ON_SubDComponentIdList.m_id_list has unexpected size % instead of 24", size_of(type_of(ON_SubDComponentIdList.m_id_list)));
        assert(size_of(ON_SubDComponentIdList) == 48, "ON_SubDComponentIdList has size % instead of 48", size_of(ON_SubDComponentIdList));
    }

    {
        instance: ON_SubDComponentPtrPair;
        assert(((cast(*void)(*instance.m_pair)) - cast(*void)(*instance)) == 0, "ON_SubDComponentPtrPair.m_pair has unexpected offset % instead of 0", ((cast(*void)(*instance.m_pair)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentPtrPair.m_pair)) == 16, "ON_SubDComponentPtrPair.m_pair has unexpected size % instead of 16", size_of(type_of(ON_SubDComponentPtrPair.m_pair)));
        assert(size_of(ON_SubDComponentPtrPair) == 16, "ON_SubDComponentPtrPair has size % instead of 16", size_of(ON_SubDComponentPtrPair));
    }

    {
        instance: ON_SubDComponentPtrPairHashTable;
        assert(((cast(*void)(*instance.m_pairs_fsp)) - cast(*void)(*instance)) == 24, "ON_SubDComponentPtrPairHashTable.m_pairs_fsp has unexpected offset % instead of 24", ((cast(*void)(*instance.m_pairs_fsp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentPtrPairHashTable.m_pairs_fsp)) == 72, "ON_SubDComponentPtrPairHashTable.m_pairs_fsp has unexpected size % instead of 72", size_of(type_of(ON_SubDComponentPtrPairHashTable.m_pairs_fsp)));
        assert(size_of(ON_SubDComponentPtrPairHashTable) == 96, "ON_SubDComponentPtrPairHashTable has size % instead of 96", size_of(ON_SubDComponentPtrPairHashTable));
    }

    {
        instance: ON_SubD_ComponentIdTypeAndTag;
        assert(((cast(*void)(*instance.m_cptr)) - cast(*void)(*instance)) == 0, "ON_SubD_ComponentIdTypeAndTag.m_cptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_cptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_cptr)) == 8, "ON_SubD_ComponentIdTypeAndTag.m_cptr has unexpected size % instead of 8", size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_cptr)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 8, "ON_SubD_ComponentIdTypeAndTag.m_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_id)) == 4, "ON_SubD_ComponentIdTypeAndTag.m_id has unexpected size % instead of 4", size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_id)));
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 12, "ON_SubD_ComponentIdTypeAndTag.m_type has unexpected offset % instead of 12", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_type)) == 1, "ON_SubD_ComponentIdTypeAndTag.m_type has unexpected size % instead of 1", size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_type)));
        assert(((cast(*void)(*instance.m_tag)) - cast(*void)(*instance)) == 13, "ON_SubD_ComponentIdTypeAndTag.m_tag has unexpected offset % instead of 13", ((cast(*void)(*instance.m_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_tag)) == 1, "ON_SubD_ComponentIdTypeAndTag.m_tag has unexpected size % instead of 1", size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_tag)));
        assert(((cast(*void)(*instance.m_bits)) - cast(*void)(*instance)) == 14, "ON_SubD_ComponentIdTypeAndTag.m_bits has unexpected offset % instead of 14", ((cast(*void)(*instance.m_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_bits)) == 1, "ON_SubD_ComponentIdTypeAndTag.m_bits has unexpected size % instead of 1", size_of(type_of(ON_SubD_ComponentIdTypeAndTag.m_bits)));
        assert(size_of(ON_SubD_ComponentIdTypeAndTag) == 16, "ON_SubD_ComponentIdTypeAndTag has size % instead of 16", size_of(ON_SubD_ComponentIdTypeAndTag));
    }

    {
        instance: ON_SubDSectorId;
        assert(((cast(*void)(*instance.m_vertex_id)) - cast(*void)(*instance)) == 0, "ON_SubDSectorId.m_vertex_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_vertex_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorId.m_vertex_id)) == 4, "ON_SubDSectorId.m_vertex_id has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorId.m_vertex_id)));
        assert(((cast(*void)(*instance.m_minimum_face_id)) - cast(*void)(*instance)) == 4, "ON_SubDSectorId.m_minimum_face_id has unexpected offset % instead of 4", ((cast(*void)(*instance.m_minimum_face_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorId.m_minimum_face_id)) == 4, "ON_SubDSectorId.m_minimum_face_id has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorId.m_minimum_face_id)));
        assert(((cast(*void)(*instance.m_sector_face_count)) - cast(*void)(*instance)) == 8, "ON_SubDSectorId.m_sector_face_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_sector_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorId.m_sector_face_count)) == 4, "ON_SubDSectorId.m_sector_face_count has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorId.m_sector_face_count)));
        assert(size_of(ON_SubDSectorId) == 12, "ON_SubDSectorId has size % instead of 12", size_of(ON_SubDSectorId));
    }

    {
        instance: ON_SubDVertexSurfacePointCoefficient;
        assert(((cast(*void)(*instance.m_limit_point_vertex)) - cast(*void)(*instance)) == 0, "ON_SubDVertexSurfacePointCoefficient.m_limit_point_vertex has unexpected offset % instead of 0", ((cast(*void)(*instance.m_limit_point_vertex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexSurfacePointCoefficient.m_limit_point_vertex)) == 8, "ON_SubDVertexSurfacePointCoefficient.m_limit_point_vertex has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexSurfacePointCoefficient.m_limit_point_vertex)));
        assert(((cast(*void)(*instance.m_ring_vertex)) - cast(*void)(*instance)) == 8, "ON_SubDVertexSurfacePointCoefficient.m_ring_vertex has unexpected offset % instead of 8", ((cast(*void)(*instance.m_ring_vertex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexSurfacePointCoefficient.m_ring_vertex)) == 8, "ON_SubDVertexSurfacePointCoefficient.m_ring_vertex has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexSurfacePointCoefficient.m_ring_vertex)));
        assert(((cast(*void)(*instance.m_c)) - cast(*void)(*instance)) == 16, "ON_SubDVertexSurfacePointCoefficient.m_c has unexpected offset % instead of 16", ((cast(*void)(*instance.m_c)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexSurfacePointCoefficient.m_c)) == 8, "ON_SubDVertexSurfacePointCoefficient.m_c has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexSurfacePointCoefficient.m_c)));
        assert(size_of(ON_SubDVertexSurfacePointCoefficient) == 24, "ON_SubDVertexSurfacePointCoefficient has size % instead of 24", size_of(ON_SubDVertexSurfacePointCoefficient));
    }

    {
        instance: ON_SubDComponentRegionIndex;
        assert(((cast(*void)(*instance.m_subdivision_count)) - cast(*void)(*instance)) == 0, "ON_SubDComponentRegionIndex.m_subdivision_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subdivision_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRegionIndex.m_subdivision_count)) == 2, "ON_SubDComponentRegionIndex.m_subdivision_count has unexpected size % instead of 2", size_of(type_of(ON_SubDComponentRegionIndex.m_subdivision_count)));
        assert(((cast(*void)(*instance.m_index)) - cast(*void)(*instance)) == 2, "ON_SubDComponentRegionIndex.m_index has unexpected offset % instead of 2", ((cast(*void)(*instance.m_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRegionIndex.m_index)) == 18, "ON_SubDComponentRegionIndex.m_index has unexpected size % instead of 18", size_of(type_of(ON_SubDComponentRegionIndex.m_index)));
        assert(size_of(ON_SubDComponentRegionIndex) == 20, "ON_SubDComponentRegionIndex has size % instead of 20", size_of(ON_SubDComponentRegionIndex));
    }

    {
        instance: ON_SubDComponentRegion;
        assert(((cast(*void)(*instance.m_level0_component)) - cast(*void)(*instance)) == 0, "ON_SubDComponentRegion.m_level0_component has unexpected offset % instead of 0", ((cast(*void)(*instance.m_level0_component)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRegion.m_level0_component)) == 8, "ON_SubDComponentRegion.m_level0_component has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentRegion.m_level0_component)));
        assert(((cast(*void)(*instance.m_level0_component_id)) - cast(*void)(*instance)) == 8, "ON_SubDComponentRegion.m_level0_component_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_level0_component_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRegion.m_level0_component_id)) == 4, "ON_SubDComponentRegion.m_level0_component_id has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRegion.m_level0_component_id)));
        assert(((cast(*void)(*instance.m_region_index)) - cast(*void)(*instance)) == 12, "ON_SubDComponentRegion.m_region_index has unexpected offset % instead of 12", ((cast(*void)(*instance.m_region_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRegion.m_region_index)) == 20, "ON_SubDComponentRegion.m_region_index has unexpected size % instead of 20", size_of(type_of(ON_SubDComponentRegion.m_region_index)));
        assert(size_of(ON_SubDComponentRegion) == 32, "ON_SubDComponentRegion has size % instead of 32", size_of(ON_SubDComponentRegion));
    }

    {
        instance: ON_SubDFaceRegion;
        assert(((cast(*void)(*instance.m_face_region)) - cast(*void)(*instance)) == 0, "ON_SubDFaceRegion.m_face_region has unexpected offset % instead of 0", ((cast(*void)(*instance.m_face_region)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegion.m_face_region)) == 32, "ON_SubDFaceRegion.m_face_region has unexpected size % instead of 32", size_of(type_of(ON_SubDFaceRegion.m_face_region)));
        assert(((cast(*void)(*instance.m_edge_region)) - cast(*void)(*instance)) == 32, "ON_SubDFaceRegion.m_edge_region has unexpected offset % instead of 32", ((cast(*void)(*instance.m_edge_region)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegion.m_edge_region)) == 128, "ON_SubDFaceRegion.m_edge_region has unexpected size % instead of 128", size_of(type_of(ON_SubDFaceRegion.m_edge_region)));
        assert(((cast(*void)(*instance.m_level0_edge_count)) - cast(*void)(*instance)) == 160, "ON_SubDFaceRegion.m_level0_edge_count has unexpected offset % instead of 160", ((cast(*void)(*instance.m_level0_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegion.m_level0_edge_count)) == 4, "ON_SubDFaceRegion.m_level0_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceRegion.m_level0_edge_count)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 164, "ON_SubDFaceRegion.m_reserved has unexpected offset % instead of 164", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegion.m_reserved)) == 4, "ON_SubDFaceRegion.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceRegion.m_reserved)));
        assert(((cast(*void)(*instance.m_vertex_id)) - cast(*void)(*instance)) == 168, "ON_SubDFaceRegion.m_vertex_id has unexpected offset % instead of 168", ((cast(*void)(*instance.m_vertex_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegion.m_vertex_id)) == 16, "ON_SubDFaceRegion.m_vertex_id has unexpected size % instead of 16", size_of(type_of(ON_SubDFaceRegion.m_vertex_id)));
        assert(((cast(*void)(*instance.m_sector_id)) - cast(*void)(*instance)) == 184, "ON_SubDFaceRegion.m_sector_id has unexpected offset % instead of 184", ((cast(*void)(*instance.m_sector_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegion.m_sector_id)) == 48, "ON_SubDFaceRegion.m_sector_id has unexpected size % instead of 48", size_of(type_of(ON_SubDFaceRegion.m_sector_id)));
        assert(size_of(ON_SubDFaceRegion) == 232, "ON_SubDFaceRegion has size % instead of 232", size_of(ON_SubDFaceRegion));
    }

    {
        instance: ON_SubDFaceRegionAndNurbs;
        assert(((cast(*void)(*instance.m_face_region)) - cast(*void)(*instance)) == 0, "ON_SubDFaceRegionAndNurbs.m_face_region has unexpected offset % instead of 0", ((cast(*void)(*instance.m_face_region)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegionAndNurbs.m_face_region)) == 232, "ON_SubDFaceRegionAndNurbs.m_face_region has unexpected size % instead of 232", size_of(type_of(ON_SubDFaceRegionAndNurbs.m_face_region)));
        assert(((cast(*void)(*instance.m_nurbs_surface)) - cast(*void)(*instance)) == 232, "ON_SubDFaceRegionAndNurbs.m_nurbs_surface has unexpected offset % instead of 232", ((cast(*void)(*instance.m_nurbs_surface)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceRegionAndNurbs.m_nurbs_surface)) == 8, "ON_SubDFaceRegionAndNurbs.m_nurbs_surface has unexpected size % instead of 8", size_of(type_of(ON_SubDFaceRegionAndNurbs.m_nurbs_surface)));
        assert(size_of(ON_SubDFaceRegionAndNurbs) == 240, "ON_SubDFaceRegionAndNurbs has size % instead of 240", size_of(ON_SubDFaceRegionAndNurbs));
    }

    {
        instance: ON_SubDFromSurfaceParameters;
        assert(((cast(*void)(*instance.m_method)) - cast(*void)(*instance)) == 0, "ON_SubDFromSurfaceParameters.m_method has unexpected offset % instead of 0", ((cast(*void)(*instance.m_method)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromSurfaceParameters.m_method)) == 1, "ON_SubDFromSurfaceParameters.m_method has unexpected size % instead of 1", size_of(type_of(ON_SubDFromSurfaceParameters.m_method)));
        assert(((cast(*void)(*instance.m_bCorners)) - cast(*void)(*instance)) == 1, "ON_SubDFromSurfaceParameters.m_bCorners has unexpected offset % instead of 1", ((cast(*void)(*instance.m_bCorners)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromSurfaceParameters.m_bCorners)) == 1, "ON_SubDFromSurfaceParameters.m_bCorners has unexpected size % instead of 1", size_of(type_of(ON_SubDFromSurfaceParameters.m_bCorners)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 2, "ON_SubDFromSurfaceParameters.m_reserved1 has unexpected offset % instead of 2", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved1)) == 2, "ON_SubDFromSurfaceParameters.m_reserved1 has unexpected size % instead of 2", size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 4, "ON_SubDFromSurfaceParameters.m_reserved2 has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved2)) == 4, "ON_SubDFromSurfaceParameters.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 8, "ON_SubDFromSurfaceParameters.m_reserved3 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved3)) == 8, "ON_SubDFromSurfaceParameters.m_reserved3 has unexpected size % instead of 8", size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 16, "ON_SubDFromSurfaceParameters.m_reserved4 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved4)) == 8, "ON_SubDFromSurfaceParameters.m_reserved4 has unexpected size % instead of 8", size_of(type_of(ON_SubDFromSurfaceParameters.m_reserved4)));
        assert(size_of(ON_SubDFromSurfaceParameters) == 24, "ON_SubDFromSurfaceParameters has size % instead of 24", size_of(ON_SubDFromSurfaceParameters));
    }

    {
        instance: ON_SubDExpandEdgesParameters;
        assert(((cast(*void)(*instance.m_constant_offset)) - cast(*void)(*instance)) == 0, "ON_SubDExpandEdgesParameters.m_constant_offset has unexpected offset % instead of 0", ((cast(*void)(*instance.m_constant_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_constant_offset)) == 8, "ON_SubDExpandEdgesParameters.m_constant_offset has unexpected size % instead of 8", size_of(type_of(ON_SubDExpandEdgesParameters.m_constant_offset)));
        assert(((cast(*void)(*instance.m_variable_offsets)) - cast(*void)(*instance)) == 8, "ON_SubDExpandEdgesParameters.m_variable_offsets has unexpected offset % instead of 8", ((cast(*void)(*instance.m_variable_offsets)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_variable_offsets)) == 16, "ON_SubDExpandEdgesParameters.m_variable_offsets has unexpected size % instead of 16", size_of(type_of(ON_SubDExpandEdgesParameters.m_variable_offsets)));
        assert(((cast(*void)(*instance.m_face_color)) - cast(*void)(*instance)) == 24, "ON_SubDExpandEdgesParameters.m_face_color has unexpected offset % instead of 24", ((cast(*void)(*instance.m_face_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_face_color)) == 4, "ON_SubDExpandEdgesParameters.m_face_color has unexpected size % instead of 4", size_of(type_of(ON_SubDExpandEdgesParameters.m_face_color)));
        assert(((cast(*void)(*instance.m_face_status)) - cast(*void)(*instance)) == 28, "ON_SubDExpandEdgesParameters.m_face_status has unexpected offset % instead of 28", ((cast(*void)(*instance.m_face_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_face_status)) == 2, "ON_SubDExpandEdgesParameters.m_face_status has unexpected size % instead of 2", size_of(type_of(ON_SubDExpandEdgesParameters.m_face_status)));
        assert(((cast(*void)(*instance.m_face_style)) - cast(*void)(*instance)) == 30, "ON_SubDExpandEdgesParameters.m_face_style has unexpected offset % instead of 30", ((cast(*void)(*instance.m_face_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_face_style)) == 1, "ON_SubDExpandEdgesParameters.m_face_style has unexpected size % instead of 1", size_of(type_of(ON_SubDExpandEdgesParameters.m_face_style)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 31, "ON_SubDExpandEdgesParameters.m_reserved1 has unexpected offset % instead of 31", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_reserved1)) == 1, "ON_SubDExpandEdgesParameters.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDExpandEdgesParameters.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 32, "ON_SubDExpandEdgesParameters.m_reserved2 has unexpected offset % instead of 32", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_reserved2)) == 8, "ON_SubDExpandEdgesParameters.m_reserved2 has unexpected size % instead of 8", size_of(type_of(ON_SubDExpandEdgesParameters.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 40, "ON_SubDExpandEdgesParameters.m_reserved3 has unexpected offset % instead of 40", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDExpandEdgesParameters.m_reserved3)) == 8, "ON_SubDExpandEdgesParameters.m_reserved3 has unexpected size % instead of 8", size_of(type_of(ON_SubDExpandEdgesParameters.m_reserved3)));
        assert(size_of(ON_SubDExpandEdgesParameters) == 48, "ON_SubDExpandEdgesParameters has size % instead of 48", size_of(ON_SubDExpandEdgesParameters));
    }

    {
        instance: ON_SubD;
        assert(((cast(*void)(*instance.m_subdimple_sp)) - cast(*void)(*instance)) == 16, "ON_SubD.m_subdimple_sp has unexpected offset % instead of 16", ((cast(*void)(*instance.m_subdimple_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD.m_subdimple_sp)) == 16, "ON_SubD.m_subdimple_sp has unexpected size % instead of 16", size_of(type_of(ON_SubD.m_subdimple_sp)));
        assert(size_of(ON_SubD) == 32, "ON_SubD has size % instead of 32", size_of(ON_SubD));
    }

    {
        instance: ON_SubDRef;
        assert(((cast(*void)(*instance.m_subd_sp)) - cast(*void)(*instance)) == 0, "ON_SubDRef.m_subd_sp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRef.m_subd_sp)) == 16, "ON_SubDRef.m_subd_sp has unexpected size % instead of 16", size_of(type_of(ON_SubDRef.m_subd_sp)));
        assert(size_of(ON_SubDRef) == 16, "ON_SubDRef has size % instead of 16", size_of(ON_SubDRef));
    }

    {
        instance: ON_SubDComponentList;
        assert(((cast(*void)(*instance.m_subd_runtime_serial_number)) - cast(*void)(*instance)) == 0, "ON_SubDComponentList.m_subd_runtime_serial_number has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_runtime_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_subd_runtime_serial_number)) == 8, "ON_SubDComponentList.m_subd_runtime_serial_number has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentList.m_subd_runtime_serial_number)));
        assert(((cast(*void)(*instance.m_subd_geometry_content_serial_number)) - cast(*void)(*instance)) == 8, "ON_SubDComponentList.m_subd_geometry_content_serial_number has unexpected offset % instead of 8", ((cast(*void)(*instance.m_subd_geometry_content_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_subd_geometry_content_serial_number)) == 8, "ON_SubDComponentList.m_subd_geometry_content_serial_number has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentList.m_subd_geometry_content_serial_number)));
        assert(((cast(*void)(*instance.m_subd_render_content_serial_number)) - cast(*void)(*instance)) == 16, "ON_SubDComponentList.m_subd_render_content_serial_number has unexpected offset % instead of 16", ((cast(*void)(*instance.m_subd_render_content_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_subd_render_content_serial_number)) == 8, "ON_SubDComponentList.m_subd_render_content_serial_number has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentList.m_subd_render_content_serial_number)));
        assert(((cast(*void)(*instance.m_subd_vertex_count)) - cast(*void)(*instance)) == 24, "ON_SubDComponentList.m_subd_vertex_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_subd_vertex_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_subd_vertex_count)) == 4, "ON_SubDComponentList.m_subd_vertex_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentList.m_subd_vertex_count)));
        assert(((cast(*void)(*instance.m_subd_edge_count)) - cast(*void)(*instance)) == 28, "ON_SubDComponentList.m_subd_edge_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_subd_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_subd_edge_count)) == 4, "ON_SubDComponentList.m_subd_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentList.m_subd_edge_count)));
        assert(((cast(*void)(*instance.m_subd_face_count)) - cast(*void)(*instance)) == 32, "ON_SubDComponentList.m_subd_face_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_subd_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_subd_face_count)) == 4, "ON_SubDComponentList.m_subd_face_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentList.m_subd_face_count)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 36, "ON_SubDComponentList.m_reserved has unexpected offset % instead of 36", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_reserved)) == 4, "ON_SubDComponentList.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentList.m_reserved)));
        assert(((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)) == 40, "ON_SubDComponentList.m_subd has unexpected offset % instead of 40", ((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_subd)) == 32, "ON_SubDComponentList.m_subd has unexpected size % instead of 32", size_of(type_of(ON_SubDComponentList.m_subd)));
        assert(((cast(*void)(*instance.m_component_list)) - cast(*void)(*instance)) == 72, "ON_SubDComponentList.m_component_list has unexpected offset % instead of 72", ((cast(*void)(*instance.m_component_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentList.m_component_list)) == 24, "ON_SubDComponentList.m_component_list has unexpected size % instead of 24", size_of(type_of(ON_SubDComponentList.m_component_list)));
        assert(size_of(ON_SubDComponentList) == 96, "ON_SubDComponentList has size % instead of 96", size_of(ON_SubDComponentList));
    }

    {
        instance: ON_SubDComponentMarksClearAndRestore;
        assert(((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)) == 0, "ON_SubDComponentMarksClearAndRestore.m_subd has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_subd)) == 32, "ON_SubDComponentMarksClearAndRestore.m_subd has unexpected size % instead of 32", size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_subd)));
        assert(((cast(*void)(*instance.m_component_list)) - cast(*void)(*instance)) == 32, "ON_SubDComponentMarksClearAndRestore.m_component_list has unexpected offset % instead of 32", ((cast(*void)(*instance.m_component_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_component_list)) == 24, "ON_SubDComponentMarksClearAndRestore.m_component_list has unexpected size % instead of 24", size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_component_list)));
        assert(((cast(*void)(*instance.m_bRestore)) - cast(*void)(*instance)) == 56, "ON_SubDComponentMarksClearAndRestore.m_bRestore has unexpected offset % instead of 56", ((cast(*void)(*instance.m_bRestore)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_bRestore)) == 1, "ON_SubDComponentMarksClearAndRestore.m_bRestore has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_bRestore)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 57, "ON_SubDComponentMarksClearAndRestore.m_reserved1 has unexpected offset % instead of 57", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved1)) == 1, "ON_SubDComponentMarksClearAndRestore.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 58, "ON_SubDComponentMarksClearAndRestore.m_reserved2 has unexpected offset % instead of 58", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved2)) == 1, "ON_SubDComponentMarksClearAndRestore.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 59, "ON_SubDComponentMarksClearAndRestore.m_reserved3 has unexpected offset % instead of 59", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved3)) == 1, "ON_SubDComponentMarksClearAndRestore.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 60, "ON_SubDComponentMarksClearAndRestore.m_reserved4 has unexpected offset % instead of 60", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved4)) == 4, "ON_SubDComponentMarksClearAndRestore.m_reserved4 has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentMarksClearAndRestore.m_reserved4)));
        assert(size_of(ON_SubDComponentMarksClearAndRestore) == 64, "ON_SubDComponentMarksClearAndRestore has size % instead of 64", size_of(ON_SubDComponentMarksClearAndRestore));
    }

    {
        instance: ON_SubDSectorType;
        assert(((cast(*void)(*instance.m_vertex_tag)) - cast(*void)(*instance)) == 0, "ON_SubDSectorType.m_vertex_tag has unexpected offset % instead of 0", ((cast(*void)(*instance.m_vertex_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_vertex_tag)) == 1, "ON_SubDSectorType.m_vertex_tag has unexpected size % instead of 1", size_of(type_of(ON_SubDSectorType.m_vertex_tag)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 1, "ON_SubDSectorType.m_reserved1 has unexpected offset % instead of 1", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_reserved1)) == 1, "ON_SubDSectorType.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDSectorType.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 2, "ON_SubDSectorType.m_reserved2 has unexpected offset % instead of 2", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_reserved2)) == 2, "ON_SubDSectorType.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SubDSectorType.m_reserved2)));
        assert(((cast(*void)(*instance.m_hash)) - cast(*void)(*instance)) == 4, "ON_SubDSectorType.m_hash has unexpected offset % instead of 4", ((cast(*void)(*instance.m_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_hash)) == 4, "ON_SubDSectorType.m_hash has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorType.m_hash)));
        assert(((cast(*void)(*instance.m_corner_sector_angle_index)) - cast(*void)(*instance)) == 8, "ON_SubDSectorType.m_corner_sector_angle_index has unexpected offset % instead of 8", ((cast(*void)(*instance.m_corner_sector_angle_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_corner_sector_angle_index)) == 4, "ON_SubDSectorType.m_corner_sector_angle_index has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorType.m_corner_sector_angle_index)));
        assert(((cast(*void)(*instance.m_sector_face_count)) - cast(*void)(*instance)) == 12, "ON_SubDSectorType.m_sector_face_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_sector_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_sector_face_count)) == 4, "ON_SubDSectorType.m_sector_face_count has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorType.m_sector_face_count)));
        assert(((cast(*void)(*instance.m_sector_coefficient)) - cast(*void)(*instance)) == 16, "ON_SubDSectorType.m_sector_coefficient has unexpected offset % instead of 16", ((cast(*void)(*instance.m_sector_coefficient)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_sector_coefficient)) == 8, "ON_SubDSectorType.m_sector_coefficient has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorType.m_sector_coefficient)));
        assert(((cast(*void)(*instance.m_sector_theta)) - cast(*void)(*instance)) == 24, "ON_SubDSectorType.m_sector_theta has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sector_theta)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_sector_theta)) == 8, "ON_SubDSectorType.m_sector_theta has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorType.m_sector_theta)));
        assert(((cast(*void)(*instance.m_corner_sector_angle_radians)) - cast(*void)(*instance)) == 32, "ON_SubDSectorType.m_corner_sector_angle_radians has unexpected offset % instead of 32", ((cast(*void)(*instance.m_corner_sector_angle_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorType.m_corner_sector_angle_radians)) == 8, "ON_SubDSectorType.m_corner_sector_angle_radians has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorType.m_corner_sector_angle_radians)));
        assert(size_of(ON_SubDSectorType) == 40, "ON_SubDSectorType has size % instead of 40", size_of(ON_SubDSectorType));
    }

    {
        instance: ON_SubDMeshFragmentGrid;
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 0, "ON_SubDMeshFragmentGrid.m_reserved1 has unexpected offset % instead of 0", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved1)) == 1, "ON_SubDMeshFragmentGrid.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 1, "ON_SubDMeshFragmentGrid.m_reserved2 has unexpected offset % instead of 1", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved2)) == 1, "ON_SubDMeshFragmentGrid.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved2)));
        assert(((cast(*void)(*instance.m_side_segment_count)) - cast(*void)(*instance)) == 2, "ON_SubDMeshFragmentGrid.m_side_segment_count has unexpected offset % instead of 2", ((cast(*void)(*instance.m_side_segment_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_side_segment_count)) == 1, "ON_SubDMeshFragmentGrid.m_side_segment_count has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentGrid.m_side_segment_count)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 3, "ON_SubDMeshFragmentGrid.m_reserved3 has unexpected offset % instead of 3", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved3)) == 1, "ON_SubDMeshFragmentGrid.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved3)));
        assert(((cast(*void)(*instance.m_F_count)) - cast(*void)(*instance)) == 4, "ON_SubDMeshFragmentGrid.m_F_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_F_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_F_count)) == 2, "ON_SubDMeshFragmentGrid.m_F_count has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragmentGrid.m_F_count)));
        assert(((cast(*void)(*instance.m_F_level_of_detail)) - cast(*void)(*instance)) == 6, "ON_SubDMeshFragmentGrid.m_F_level_of_detail has unexpected offset % instead of 6", ((cast(*void)(*instance.m_F_level_of_detail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_F_level_of_detail)) == 2, "ON_SubDMeshFragmentGrid.m_F_level_of_detail has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragmentGrid.m_F_level_of_detail)));
        assert(((cast(*void)(*instance.m_F_stride)) - cast(*void)(*instance)) == 8, "ON_SubDMeshFragmentGrid.m_F_stride has unexpected offset % instead of 8", ((cast(*void)(*instance.m_F_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_F_stride)) == 2, "ON_SubDMeshFragmentGrid.m_F_stride has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragmentGrid.m_F_stride)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 10, "ON_SubDMeshFragmentGrid.m_reserved4 has unexpected offset % instead of 10", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved4)) == 2, "ON_SubDMeshFragmentGrid.m_reserved4 has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved4)));
        assert(((cast(*void)(*instance.m_reserved5)) - cast(*void)(*instance)) == 12, "ON_SubDMeshFragmentGrid.m_reserved5 has unexpected offset % instead of 12", ((cast(*void)(*instance.m_reserved5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved5)) == 4, "ON_SubDMeshFragmentGrid.m_reserved5 has unexpected size % instead of 4", size_of(type_of(ON_SubDMeshFragmentGrid.m_reserved5)));
        assert(((cast(*void)(*instance.m_F)) - cast(*void)(*instance)) == 16, "ON_SubDMeshFragmentGrid.m_F has unexpected offset % instead of 16", ((cast(*void)(*instance.m_F)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_F)) == 8, "ON_SubDMeshFragmentGrid.m_F has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragmentGrid.m_F)));
        assert(((cast(*void)(*instance.m_S)) - cast(*void)(*instance)) == 24, "ON_SubDMeshFragmentGrid.m_S has unexpected offset % instead of 24", ((cast(*void)(*instance.m_S)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_S)) == 8, "ON_SubDMeshFragmentGrid.m_S has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragmentGrid.m_S)));
        assert(((cast(*void)(*instance.m_prev_level_of_detail)) - cast(*void)(*instance)) == 32, "ON_SubDMeshFragmentGrid.m_prev_level_of_detail has unexpected offset % instead of 32", ((cast(*void)(*instance.m_prev_level_of_detail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_prev_level_of_detail)) == 8, "ON_SubDMeshFragmentGrid.m_prev_level_of_detail has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragmentGrid.m_prev_level_of_detail)));
        assert(((cast(*void)(*instance.m_next_level_of_detail)) - cast(*void)(*instance)) == 40, "ON_SubDMeshFragmentGrid.m_next_level_of_detail has unexpected offset % instead of 40", ((cast(*void)(*instance.m_next_level_of_detail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentGrid.m_next_level_of_detail)) == 8, "ON_SubDMeshFragmentGrid.m_next_level_of_detail has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragmentGrid.m_next_level_of_detail)));
        assert(size_of(ON_SubDMeshFragmentGrid) == 48, "ON_SubDMeshFragmentGrid has size % instead of 48", size_of(ON_SubDMeshFragmentGrid));
    }

    {
        instance: ON_SubDMeshFragment;
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 0, "ON_SubDMeshFragment.m_reserved has unexpected offset % instead of 0", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_reserved)) == 8, "ON_SubDMeshFragment.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_reserved)));
        assert(((cast(*void)(*instance.m_face)) - cast(*void)(*instance)) == 8, "ON_SubDMeshFragment.m_face has unexpected offset % instead of 8", ((cast(*void)(*instance.m_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_face)) == 8, "ON_SubDMeshFragment.m_face has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_face)));
        assert(((cast(*void)(*instance.m_face_vertex_index)) - cast(*void)(*instance)) == 16, "ON_SubDMeshFragment.m_face_vertex_index has unexpected offset % instead of 16", ((cast(*void)(*instance.m_face_vertex_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_face_vertex_index)) == 8, "ON_SubDMeshFragment.m_face_vertex_index has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_face_vertex_index)));
        assert(((cast(*void)(*instance.m_next_fragment)) - cast(*void)(*instance)) == 24, "ON_SubDMeshFragment.m_next_fragment has unexpected offset % instead of 24", ((cast(*void)(*instance.m_next_fragment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_next_fragment)) == 8, "ON_SubDMeshFragment.m_next_fragment has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_next_fragment)));
        assert(((cast(*void)(*instance.m_prev_fragment)) - cast(*void)(*instance)) == 32, "ON_SubDMeshFragment.m_prev_fragment has unexpected offset % instead of 32", ((cast(*void)(*instance.m_prev_fragment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_prev_fragment)) == 8, "ON_SubDMeshFragment.m_prev_fragment has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_prev_fragment)));
        assert(((cast(*void)(*instance.m_face_fragment_count)) - cast(*void)(*instance)) == 40, "ON_SubDMeshFragment.m_face_fragment_count has unexpected offset % instead of 40", ((cast(*void)(*instance.m_face_fragment_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_face_fragment_count)) == 2, "ON_SubDMeshFragment.m_face_fragment_count has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragment.m_face_fragment_count)));
        assert(((cast(*void)(*instance.m_face_fragment_index)) - cast(*void)(*instance)) == 42, "ON_SubDMeshFragment.m_face_fragment_index has unexpected offset % instead of 42", ((cast(*void)(*instance.m_face_fragment_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_face_fragment_index)) == 2, "ON_SubDMeshFragment.m_face_fragment_index has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragment.m_face_fragment_index)));
        assert(((cast(*void)(*instance.m_vertex_count_etc)) - cast(*void)(*instance)) == 44, "ON_SubDMeshFragment.m_vertex_count_etc has unexpected offset % instead of 44", ((cast(*void)(*instance.m_vertex_count_etc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_vertex_count_etc)) == 2, "ON_SubDMeshFragment.m_vertex_count_etc has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragment.m_vertex_count_etc)));
        assert(((cast(*void)(*instance.m_vertex_capacity_etc)) - cast(*void)(*instance)) == 46, "ON_SubDMeshFragment.m_vertex_capacity_etc has unexpected offset % instead of 46", ((cast(*void)(*instance.m_vertex_capacity_etc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_vertex_capacity_etc)) == 2, "ON_SubDMeshFragment.m_vertex_capacity_etc has unexpected size % instead of 2", size_of(type_of(ON_SubDMeshFragment.m_vertex_capacity_etc)));
        assert(((cast(*void)(*instance.m_ctrlnetP)) - cast(*void)(*instance)) == 48, "ON_SubDMeshFragment.m_ctrlnetP has unexpected offset % instead of 48", ((cast(*void)(*instance.m_ctrlnetP)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_ctrlnetP)) == 96, "ON_SubDMeshFragment.m_ctrlnetP has unexpected size % instead of 96", size_of(type_of(ON_SubDMeshFragment.m_ctrlnetP)));
        assert(((cast(*void)(*instance.m_ctrlnetN)) - cast(*void)(*instance)) == 144, "ON_SubDMeshFragment.m_ctrlnetN has unexpected offset % instead of 144", ((cast(*void)(*instance.m_ctrlnetN)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_ctrlnetN)) == 24, "ON_SubDMeshFragment.m_ctrlnetN has unexpected size % instead of 24", size_of(type_of(ON_SubDMeshFragment.m_ctrlnetN)));
        assert(((cast(*void)(*instance.m_ctrlnetT)) - cast(*void)(*instance)) == 168, "ON_SubDMeshFragment.m_ctrlnetT has unexpected offset % instead of 168", ((cast(*void)(*instance.m_ctrlnetT)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_ctrlnetT)) == 96, "ON_SubDMeshFragment.m_ctrlnetT has unexpected size % instead of 96", size_of(type_of(ON_SubDMeshFragment.m_ctrlnetT)));
        assert(((cast(*void)(*instance.m_ctrlnetK)) - cast(*void)(*instance)) == 264, "ON_SubDMeshFragment.m_ctrlnetK has unexpected offset % instead of 264", ((cast(*void)(*instance.m_ctrlnetK)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_ctrlnetK)) == 64, "ON_SubDMeshFragment.m_ctrlnetK has unexpected size % instead of 64", size_of(type_of(ON_SubDMeshFragment.m_ctrlnetK)));
        assert(((cast(*void)(*instance.m_ctrlnetC)) - cast(*void)(*instance)) == 328, "ON_SubDMeshFragment.m_ctrlnetC has unexpected offset % instead of 328", ((cast(*void)(*instance.m_ctrlnetC)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_ctrlnetC)) == 16, "ON_SubDMeshFragment.m_ctrlnetC has unexpected size % instead of 16", size_of(type_of(ON_SubDMeshFragment.m_ctrlnetC)));
        assert(((cast(*void)(*instance.m_pack_rect)) - cast(*void)(*instance)) == 344, "ON_SubDMeshFragment.m_pack_rect has unexpected offset % instead of 344", ((cast(*void)(*instance.m_pack_rect)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_pack_rect)) == 64, "ON_SubDMeshFragment.m_pack_rect has unexpected size % instead of 64", size_of(type_of(ON_SubDMeshFragment.m_pack_rect)));
        assert(((cast(*void)(*instance.m_P)) - cast(*void)(*instance)) == 408, "ON_SubDMeshFragment.m_P has unexpected offset % instead of 408", ((cast(*void)(*instance.m_P)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_P)) == 8, "ON_SubDMeshFragment.m_P has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_P)));
        assert(((cast(*void)(*instance.m_P_stride)) - cast(*void)(*instance)) == 416, "ON_SubDMeshFragment.m_P_stride has unexpected offset % instead of 416", ((cast(*void)(*instance.m_P_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_P_stride)) == 8, "ON_SubDMeshFragment.m_P_stride has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_P_stride)));
        assert(((cast(*void)(*instance.m_N)) - cast(*void)(*instance)) == 424, "ON_SubDMeshFragment.m_N has unexpected offset % instead of 424", ((cast(*void)(*instance.m_N)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_N)) == 8, "ON_SubDMeshFragment.m_N has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_N)));
        assert(((cast(*void)(*instance.m_N_stride)) - cast(*void)(*instance)) == 432, "ON_SubDMeshFragment.m_N_stride has unexpected offset % instead of 432", ((cast(*void)(*instance.m_N_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_N_stride)) == 8, "ON_SubDMeshFragment.m_N_stride has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_N_stride)));
        assert(((cast(*void)(*instance.m_T)) - cast(*void)(*instance)) == 440, "ON_SubDMeshFragment.m_T has unexpected offset % instead of 440", ((cast(*void)(*instance.m_T)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_T)) == 8, "ON_SubDMeshFragment.m_T has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_T)));
        assert(((cast(*void)(*instance.m_T_stride)) - cast(*void)(*instance)) == 448, "ON_SubDMeshFragment.m_T_stride has unexpected offset % instead of 448", ((cast(*void)(*instance.m_T_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_T_stride)) == 8, "ON_SubDMeshFragment.m_T_stride has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_T_stride)));
        assert(((cast(*void)(*instance.m_K)) - cast(*void)(*instance)) == 456, "ON_SubDMeshFragment.m_K has unexpected offset % instead of 456", ((cast(*void)(*instance.m_K)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_K)) == 8, "ON_SubDMeshFragment.m_K has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_K)));
        assert(((cast(*void)(*instance.m_K_stride)) - cast(*void)(*instance)) == 464, "ON_SubDMeshFragment.m_K_stride has unexpected offset % instead of 464", ((cast(*void)(*instance.m_K_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_K_stride)) == 8, "ON_SubDMeshFragment.m_K_stride has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_K_stride)));
        assert(((cast(*void)(*instance.m_C)) - cast(*void)(*instance)) == 472, "ON_SubDMeshFragment.m_C has unexpected offset % instead of 472", ((cast(*void)(*instance.m_C)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_C)) == 8, "ON_SubDMeshFragment.m_C has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_C)));
        assert(((cast(*void)(*instance.m_C_stride)) - cast(*void)(*instance)) == 480, "ON_SubDMeshFragment.m_C_stride has unexpected offset % instead of 480", ((cast(*void)(*instance.m_C_stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_C_stride)) == 8, "ON_SubDMeshFragment.m_C_stride has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragment.m_C_stride)));
        assert(((cast(*void)(*instance.m_grid)) - cast(*void)(*instance)) == 488, "ON_SubDMeshFragment.m_grid has unexpected offset % instead of 488", ((cast(*void)(*instance.m_grid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_grid)) == 48, "ON_SubDMeshFragment.m_grid has unexpected size % instead of 48", size_of(type_of(ON_SubDMeshFragment.m_grid)));
        assert(((cast(*void)(*instance.m_surface_bbox)) - cast(*void)(*instance)) == 536, "ON_SubDMeshFragment.m_surface_bbox has unexpected offset % instead of 536", ((cast(*void)(*instance.m_surface_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragment.m_surface_bbox)) == 48, "ON_SubDMeshFragment.m_surface_bbox has unexpected size % instead of 48", size_of(type_of(ON_SubDMeshFragment.m_surface_bbox)));
        assert(size_of(ON_SubDMeshFragment) == 584, "ON_SubDMeshFragment has size % instead of 584", size_of(ON_SubDMeshFragment));
    }

    {
        instance: ON_SubDManagedMeshFragment;
        assert(((cast(*void)(*instance.m_obsolete1)) - cast(*void)(*instance)) == 584, "ON_SubDManagedMeshFragment.m_obsolete1 has unexpected offset % instead of 584", ((cast(*void)(*instance.m_obsolete1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDManagedMeshFragment.m_obsolete1)) == 8, "ON_SubDManagedMeshFragment.m_obsolete1 has unexpected size % instead of 8", size_of(type_of(ON_SubDManagedMeshFragment.m_obsolete1)));
        assert(((cast(*void)(*instance.m_obsolete2)) - cast(*void)(*instance)) == 592, "ON_SubDManagedMeshFragment.m_obsolete2 has unexpected offset % instead of 592", ((cast(*void)(*instance.m_obsolete2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDManagedMeshFragment.m_obsolete2)) == 8, "ON_SubDManagedMeshFragment.m_obsolete2 has unexpected size % instead of 8", size_of(type_of(ON_SubDManagedMeshFragment.m_obsolete2)));
        assert(size_of(ON_SubDManagedMeshFragment) == 600, "ON_SubDManagedMeshFragment has size % instead of 600", size_of(ON_SubDManagedMeshFragment));
    }

    {
        instance: ON_SubDMesh;
        assert(((cast(*void)(*instance.m_impl_sp)) - cast(*void)(*instance)) == 0, "ON_SubDMesh.m_impl_sp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMesh.m_impl_sp)) == 16, "ON_SubDMesh.m_impl_sp has unexpected size % instead of 16", size_of(type_of(ON_SubDMesh.m_impl_sp)));
        assert(size_of(ON_SubDMesh) == 16, "ON_SubDMesh has size % instead of 16", size_of(ON_SubDMesh));
    }

    {
        instance: ON_SubDSectorSurfacePoint;
        assert(((cast(*void)(*instance.m_limitP)) - cast(*void)(*instance)) == 0, "ON_SubDSectorSurfacePoint.m_limitP has unexpected offset % instead of 0", ((cast(*void)(*instance.m_limitP)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorSurfacePoint.m_limitP)) == 24, "ON_SubDSectorSurfacePoint.m_limitP has unexpected size % instead of 24", size_of(type_of(ON_SubDSectorSurfacePoint.m_limitP)));
        assert(((cast(*void)(*instance.m_limitT1)) - cast(*void)(*instance)) == 24, "ON_SubDSectorSurfacePoint.m_limitT1 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_limitT1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorSurfacePoint.m_limitT1)) == 24, "ON_SubDSectorSurfacePoint.m_limitT1 has unexpected size % instead of 24", size_of(type_of(ON_SubDSectorSurfacePoint.m_limitT1)));
        assert(((cast(*void)(*instance.m_limitT2)) - cast(*void)(*instance)) == 48, "ON_SubDSectorSurfacePoint.m_limitT2 has unexpected offset % instead of 48", ((cast(*void)(*instance.m_limitT2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorSurfacePoint.m_limitT2)) == 24, "ON_SubDSectorSurfacePoint.m_limitT2 has unexpected size % instead of 24", size_of(type_of(ON_SubDSectorSurfacePoint.m_limitT2)));
        assert(((cast(*void)(*instance.m_limitN)) - cast(*void)(*instance)) == 72, "ON_SubDSectorSurfacePoint.m_limitN has unexpected offset % instead of 72", ((cast(*void)(*instance.m_limitN)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorSurfacePoint.m_limitN)) == 24, "ON_SubDSectorSurfacePoint.m_limitN has unexpected size % instead of 24", size_of(type_of(ON_SubDSectorSurfacePoint.m_limitN)));
        assert(((cast(*void)(*instance.m_next_sector_limit_point)) - cast(*void)(*instance)) == 96, "ON_SubDSectorSurfacePoint.m_next_sector_limit_point has unexpected offset % instead of 96", ((cast(*void)(*instance.m_next_sector_limit_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorSurfacePoint.m_next_sector_limit_point)) == 8, "ON_SubDSectorSurfacePoint.m_next_sector_limit_point has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorSurfacePoint.m_next_sector_limit_point)));
        assert(((cast(*void)(*instance.m_sector_face)) - cast(*void)(*instance)) == 104, "ON_SubDSectorSurfacePoint.m_sector_face has unexpected offset % instead of 104", ((cast(*void)(*instance.m_sector_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorSurfacePoint.m_sector_face)) == 8, "ON_SubDSectorSurfacePoint.m_sector_face has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorSurfacePoint.m_sector_face)));
        assert(size_of(ON_SubDSectorSurfacePoint) == 112, "ON_SubDSectorSurfacePoint has size % instead of 112", size_of(ON_SubDSectorSurfacePoint));
    }

    {
        instance: ON_SubDComponentBase;
        assert(((cast(*void)(*instance.m_subd_point1)) - cast(*void)(*instance)) == 0, "ON_SubDComponentBase.m_subd_point1 has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_point1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_subd_point1)) == 8, "ON_SubDComponentBase.m_subd_point1 has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentBase.m_subd_point1)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 8, "ON_SubDComponentBase.m_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_id)) == 4, "ON_SubDComponentBase.m_id has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentBase.m_id)));
        assert(((cast(*void)(*instance.m_archive_id)) - cast(*void)(*instance)) == 12, "ON_SubDComponentBase.m_archive_id has unexpected offset % instead of 12", ((cast(*void)(*instance.m_archive_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_archive_id)) == 4, "ON_SubDComponentBase.m_archive_id has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentBase.m_archive_id)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 16, "ON_SubDComponentBase.m_status has unexpected offset % instead of 16", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_status)) == 2, "ON_SubDComponentBase.m_status has unexpected size % instead of 2", size_of(type_of(ON_SubDComponentBase.m_status)));
        assert(((cast(*void)(*instance.m_saved_points_flags)) - cast(*void)(*instance)) == 18, "ON_SubDComponentBase.m_saved_points_flags has unexpected offset % instead of 18", ((cast(*void)(*instance.m_saved_points_flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_saved_points_flags)) == 1, "ON_SubDComponentBase.m_saved_points_flags has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentBase.m_saved_points_flags)));
        assert(((cast(*void)(*instance.m_level)) - cast(*void)(*instance)) == 19, "ON_SubDComponentBase.m_level has unexpected offset % instead of 19", ((cast(*void)(*instance.m_level)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_level)) == 1, "ON_SubDComponentBase.m_level has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentBase.m_level)));
        assert(((cast(*void)(*instance.m_group_id)) - cast(*void)(*instance)) == 20, "ON_SubDComponentBase.m_group_id has unexpected offset % instead of 20", ((cast(*void)(*instance.m_group_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_group_id)) == 4, "ON_SubDComponentBase.m_group_id has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentBase.m_group_id)));
        assert(((cast(*void)(*instance.m_saved_subd_point1)) - cast(*void)(*instance)) == 24, "ON_SubDComponentBase.m_saved_subd_point1 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_saved_subd_point1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_saved_subd_point1)) == 24, "ON_SubDComponentBase.m_saved_subd_point1 has unexpected size % instead of 24", size_of(type_of(ON_SubDComponentBase.m_saved_subd_point1)));
        assert(((cast(*void)(*instance.m_reserved8bytes1)) - cast(*void)(*instance)) == 48, "ON_SubDComponentBase.m_reserved8bytes1 has unexpected offset % instead of 48", ((cast(*void)(*instance.m_reserved8bytes1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_reserved8bytes1)) == 8, "ON_SubDComponentBase.m_reserved8bytes1 has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentBase.m_reserved8bytes1)));
        assert(((cast(*void)(*instance.m_reserved8bytes2)) - cast(*void)(*instance)) == 56, "ON_SubDComponentBase.m_reserved8bytes2 has unexpected offset % instead of 56", ((cast(*void)(*instance.m_reserved8bytes2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_reserved8bytes2)) == 8, "ON_SubDComponentBase.m_reserved8bytes2 has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentBase.m_reserved8bytes2)));
        assert(((cast(*void)(*instance.m_reserved8bytes3)) - cast(*void)(*instance)) == 64, "ON_SubDComponentBase.m_reserved8bytes3 has unexpected offset % instead of 64", ((cast(*void)(*instance.m_reserved8bytes3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_reserved8bytes3)) == 8, "ON_SubDComponentBase.m_reserved8bytes3 has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentBase.m_reserved8bytes3)));
        assert(((cast(*void)(*instance.m_symmetry_set_next)) - cast(*void)(*instance)) == 72, "ON_SubDComponentBase.m_symmetry_set_next has unexpected offset % instead of 72", ((cast(*void)(*instance.m_symmetry_set_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentBase.m_symmetry_set_next)) == 8, "ON_SubDComponentBase.m_symmetry_set_next has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentBase.m_symmetry_set_next)));
        assert(size_of(ON_SubDComponentBase) == 80, "ON_SubDComponentBase has size % instead of 80", size_of(ON_SubDComponentBase));
    }

    {
        instance: ON_SubDVertexEdgeProperties;
        assert(((cast(*void)(*instance.m_null_edge_count)) - cast(*void)(*instance)) == 0, "ON_SubDVertexEdgeProperties.m_null_edge_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_null_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_null_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_null_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_null_edge_count)));
        assert(((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)) == 2, "ON_SubDVertexEdgeProperties.m_edge_count has unexpected offset % instead of 2", ((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_edge_count)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 4, "ON_SubDVertexEdgeProperties.m_face_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_face_count)) == 2, "ON_SubDVertexEdgeProperties.m_face_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_face_count)));
        assert(((cast(*void)(*instance.m_unset_edge_count)) - cast(*void)(*instance)) == 6, "ON_SubDVertexEdgeProperties.m_unset_edge_count has unexpected offset % instead of 6", ((cast(*void)(*instance.m_unset_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_unset_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_unset_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_unset_edge_count)));
        assert(((cast(*void)(*instance.m_smooth_edge_count)) - cast(*void)(*instance)) == 8, "ON_SubDVertexEdgeProperties.m_smooth_edge_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_smooth_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_smooth_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_smooth_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_smooth_edge_count)));
        assert(((cast(*void)(*instance.m_crease_edge_count)) - cast(*void)(*instance)) == 10, "ON_SubDVertexEdgeProperties.m_crease_edge_count has unexpected offset % instead of 10", ((cast(*void)(*instance.m_crease_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_crease_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_crease_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_crease_edge_count)));
        assert(((cast(*void)(*instance.m_wire_edge_count)) - cast(*void)(*instance)) == 12, "ON_SubDVertexEdgeProperties.m_wire_edge_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_wire_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_wire_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_wire_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_wire_edge_count)));
        assert(((cast(*void)(*instance.m_boundary_edge_count)) - cast(*void)(*instance)) == 14, "ON_SubDVertexEdgeProperties.m_boundary_edge_count has unexpected offset % instead of 14", ((cast(*void)(*instance.m_boundary_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_boundary_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_boundary_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_boundary_edge_count)));
        assert(((cast(*void)(*instance.m_interior_edge_count)) - cast(*void)(*instance)) == 16, "ON_SubDVertexEdgeProperties.m_interior_edge_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_interior_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_interior_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_interior_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_interior_edge_count)));
        assert(((cast(*void)(*instance.m_nonmanifold_edge_count)) - cast(*void)(*instance)) == 18, "ON_SubDVertexEdgeProperties.m_nonmanifold_edge_count has unexpected offset % instead of 18", ((cast(*void)(*instance.m_nonmanifold_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_nonmanifold_edge_count)) == 2, "ON_SubDVertexEdgeProperties.m_nonmanifold_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_nonmanifold_edge_count)));
        assert(((cast(*void)(*instance.m_min_edge_face_count)) - cast(*void)(*instance)) == 20, "ON_SubDVertexEdgeProperties.m_min_edge_face_count has unexpected offset % instead of 20", ((cast(*void)(*instance.m_min_edge_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_min_edge_face_count)) == 2, "ON_SubDVertexEdgeProperties.m_min_edge_face_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_min_edge_face_count)));
        assert(((cast(*void)(*instance.m_max_edge_face_count)) - cast(*void)(*instance)) == 22, "ON_SubDVertexEdgeProperties.m_max_edge_face_count has unexpected offset % instead of 22", ((cast(*void)(*instance.m_max_edge_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexEdgeProperties.m_max_edge_face_count)) == 2, "ON_SubDVertexEdgeProperties.m_max_edge_face_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertexEdgeProperties.m_max_edge_face_count)));
        assert(size_of(ON_SubDVertexEdgeProperties) == 24, "ON_SubDVertexEdgeProperties has size % instead of 24", size_of(ON_SubDVertexEdgeProperties));
    }

    {
        instance: ON_SubDVertex;
        assert(((cast(*void)(*instance.m_prev_vertex)) - cast(*void)(*instance)) == 80, "ON_SubDVertex.m_prev_vertex has unexpected offset % instead of 80", ((cast(*void)(*instance.m_prev_vertex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_prev_vertex)) == 8, "ON_SubDVertex.m_prev_vertex has unexpected size % instead of 8", size_of(type_of(ON_SubDVertex.m_prev_vertex)));
        assert(((cast(*void)(*instance.m_next_vertex)) - cast(*void)(*instance)) == 88, "ON_SubDVertex.m_next_vertex has unexpected offset % instead of 88", ((cast(*void)(*instance.m_next_vertex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_next_vertex)) == 8, "ON_SubDVertex.m_next_vertex has unexpected size % instead of 8", size_of(type_of(ON_SubDVertex.m_next_vertex)));
        assert(((cast(*void)(*instance.m_vertex_tag)) - cast(*void)(*instance)) == 96, "ON_SubDVertex.m_vertex_tag has unexpected offset % instead of 96", ((cast(*void)(*instance.m_vertex_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_vertex_tag)) == 1, "ON_SubDVertex.m_vertex_tag has unexpected size % instead of 1", size_of(type_of(ON_SubDVertex.m_vertex_tag)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 97, "ON_SubDVertex.m_reserved1 has unexpected offset % instead of 97", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_reserved1)) == 1, "ON_SubDVertex.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDVertex.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 98, "ON_SubDVertex.m_reserved2 has unexpected offset % instead of 98", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_reserved2)) == 2, "ON_SubDVertex.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SubDVertex.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 100, "ON_SubDVertex.m_reserved3 has unexpected offset % instead of 100", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_reserved3)) == 4, "ON_SubDVertex.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_SubDVertex.m_reserved3)));
        assert(((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)) == 104, "ON_SubDVertex.m_edge_count has unexpected offset % instead of 104", ((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_edge_count)) == 2, "ON_SubDVertex.m_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertex.m_edge_count)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 106, "ON_SubDVertex.m_face_count has unexpected offset % instead of 106", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_face_count)) == 2, "ON_SubDVertex.m_face_count has unexpected size % instead of 2", size_of(type_of(ON_SubDVertex.m_face_count)));
        assert(((cast(*void)(*instance.m_edge_capacity)) - cast(*void)(*instance)) == 108, "ON_SubDVertex.m_edge_capacity has unexpected offset % instead of 108", ((cast(*void)(*instance.m_edge_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_edge_capacity)) == 2, "ON_SubDVertex.m_edge_capacity has unexpected size % instead of 2", size_of(type_of(ON_SubDVertex.m_edge_capacity)));
        assert(((cast(*void)(*instance.m_face_capacity)) - cast(*void)(*instance)) == 110, "ON_SubDVertex.m_face_capacity has unexpected offset % instead of 110", ((cast(*void)(*instance.m_face_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_face_capacity)) == 2, "ON_SubDVertex.m_face_capacity has unexpected size % instead of 2", size_of(type_of(ON_SubDVertex.m_face_capacity)));
        assert(((cast(*void)(*instance.m_edges)) - cast(*void)(*instance)) == 112, "ON_SubDVertex.m_edges has unexpected offset % instead of 112", ((cast(*void)(*instance.m_edges)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_edges)) == 8, "ON_SubDVertex.m_edges has unexpected size % instead of 8", size_of(type_of(ON_SubDVertex.m_edges)));
        assert(((cast(*void)(*instance.m_faces)) - cast(*void)(*instance)) == 120, "ON_SubDVertex.m_faces has unexpected offset % instead of 120", ((cast(*void)(*instance.m_faces)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_faces)) == 8, "ON_SubDVertex.m_faces has unexpected size % instead of 8", size_of(type_of(ON_SubDVertex.m_faces)));
        assert(((cast(*void)(*instance.m_P)) - cast(*void)(*instance)) == 128, "ON_SubDVertex.m_P has unexpected offset % instead of 128", ((cast(*void)(*instance.m_P)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_P)) == 24, "ON_SubDVertex.m_P has unexpected size % instead of 24", size_of(type_of(ON_SubDVertex.m_P)));
        assert(((cast(*void)(*instance.m_limit_point)) - cast(*void)(*instance)) == 152, "ON_SubDVertex.m_limit_point has unexpected offset % instead of 152", ((cast(*void)(*instance.m_limit_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertex.m_limit_point)) == 112, "ON_SubDVertex.m_limit_point has unexpected size % instead of 112", size_of(type_of(ON_SubDVertex.m_limit_point)));
        assert(size_of(ON_SubDVertex) == 264, "ON_SubDVertex has size % instead of 264", size_of(ON_SubDVertex));
    }

    {
        instance: ON_SubDEdge;
        assert(((cast(*void)(*instance.m_prev_edge)) - cast(*void)(*instance)) == 80, "ON_SubDEdge.m_prev_edge has unexpected offset % instead of 80", ((cast(*void)(*instance.m_prev_edge)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_prev_edge)) == 8, "ON_SubDEdge.m_prev_edge has unexpected size % instead of 8", size_of(type_of(ON_SubDEdge.m_prev_edge)));
        assert(((cast(*void)(*instance.m_next_edge)) - cast(*void)(*instance)) == 88, "ON_SubDEdge.m_next_edge has unexpected offset % instead of 88", ((cast(*void)(*instance.m_next_edge)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_next_edge)) == 8, "ON_SubDEdge.m_next_edge has unexpected size % instead of 8", size_of(type_of(ON_SubDEdge.m_next_edge)));
        assert(((cast(*void)(*instance.m_edge_tag)) - cast(*void)(*instance)) == 96, "ON_SubDEdge.m_edge_tag has unexpected offset % instead of 96", ((cast(*void)(*instance.m_edge_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_edge_tag)) == 1, "ON_SubDEdge.m_edge_tag has unexpected size % instead of 1", size_of(type_of(ON_SubDEdge.m_edge_tag)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 97, "ON_SubDEdge.m_reserved1 has unexpected offset % instead of 97", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_reserved1)) == 1, "ON_SubDEdge.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDEdge.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 98, "ON_SubDEdge.m_reserved2 has unexpected offset % instead of 98", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_reserved2)) == 2, "ON_SubDEdge.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SubDEdge.m_reserved2)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 100, "ON_SubDEdge.m_face_count has unexpected offset % instead of 100", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_face_count)) == 2, "ON_SubDEdge.m_face_count has unexpected size % instead of 2", size_of(type_of(ON_SubDEdge.m_face_count)));
        assert(((cast(*void)(*instance.m_facex_capacity)) - cast(*void)(*instance)) == 102, "ON_SubDEdge.m_facex_capacity has unexpected offset % instead of 102", ((cast(*void)(*instance.m_facex_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_facex_capacity)) == 2, "ON_SubDEdge.m_facex_capacity has unexpected size % instead of 2", size_of(type_of(ON_SubDEdge.m_facex_capacity)));
        assert(((cast(*void)(*instance.m_face2)) - cast(*void)(*instance)) == 104, "ON_SubDEdge.m_face2 has unexpected offset % instead of 104", ((cast(*void)(*instance.m_face2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_face2)) == 16, "ON_SubDEdge.m_face2 has unexpected size % instead of 16", size_of(type_of(ON_SubDEdge.m_face2)));
        assert(((cast(*void)(*instance.m_facex)) - cast(*void)(*instance)) == 120, "ON_SubDEdge.m_facex has unexpected offset % instead of 120", ((cast(*void)(*instance.m_facex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_facex)) == 8, "ON_SubDEdge.m_facex has unexpected size % instead of 8", size_of(type_of(ON_SubDEdge.m_facex)));
        assert(((cast(*void)(*instance.m_vertex)) - cast(*void)(*instance)) == 128, "ON_SubDEdge.m_vertex has unexpected offset % instead of 128", ((cast(*void)(*instance.m_vertex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_vertex)) == 16, "ON_SubDEdge.m_vertex has unexpected size % instead of 16", size_of(type_of(ON_SubDEdge.m_vertex)));
        assert(((cast(*void)(*instance.m_sector_coefficient)) - cast(*void)(*instance)) == 144, "ON_SubDEdge.m_sector_coefficient has unexpected offset % instead of 144", ((cast(*void)(*instance.m_sector_coefficient)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_sector_coefficient)) == 16, "ON_SubDEdge.m_sector_coefficient has unexpected size % instead of 16", size_of(type_of(ON_SubDEdge.m_sector_coefficient)));
        assert(((cast(*void)(*instance.m_sharpness)) - cast(*void)(*instance)) == 160, "ON_SubDEdge.m_sharpness has unexpected offset % instead of 160", ((cast(*void)(*instance.m_sharpness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_sharpness)) == 8, "ON_SubDEdge.m_sharpness has unexpected size % instead of 8", size_of(type_of(ON_SubDEdge.m_sharpness)));
        assert(((cast(*void)(*instance.m_limit_curve)) - cast(*void)(*instance)) == 168, "ON_SubDEdge.m_limit_curve has unexpected offset % instead of 168", ((cast(*void)(*instance.m_limit_curve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdge.m_limit_curve)) == 8, "ON_SubDEdge.m_limit_curve has unexpected size % instead of 8", size_of(type_of(ON_SubDEdge.m_limit_curve)));
        assert(size_of(ON_SubDEdge) == 176, "ON_SubDEdge has size % instead of 176", size_of(ON_SubDEdge));
    }

    {
        instance: ON_SubDFace;
        assert(((cast(*void)(*instance.m_prev_face)) - cast(*void)(*instance)) == 80, "ON_SubDFace.m_prev_face has unexpected offset % instead of 80", ((cast(*void)(*instance.m_prev_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_prev_face)) == 8, "ON_SubDFace.m_prev_face has unexpected size % instead of 8", size_of(type_of(ON_SubDFace.m_prev_face)));
        assert(((cast(*void)(*instance.m_next_face)) - cast(*void)(*instance)) == 88, "ON_SubDFace.m_next_face has unexpected offset % instead of 88", ((cast(*void)(*instance.m_next_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_next_face)) == 8, "ON_SubDFace.m_next_face has unexpected size % instead of 8", size_of(type_of(ON_SubDFace.m_next_face)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 96, "ON_SubDFace.m_reserved1 has unexpected offset % instead of 96", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_reserved1)) == 4, "ON_SubDFace.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_SubDFace.m_reserved1)));
        assert(((cast(*void)(*instance.m_pack_id)) - cast(*void)(*instance)) == 100, "ON_SubDFace.m_pack_id has unexpected offset % instead of 100", ((cast(*void)(*instance.m_pack_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_pack_id)) == 4, "ON_SubDFace.m_pack_id has unexpected size % instead of 4", size_of(type_of(ON_SubDFace.m_pack_id)));
        assert(((cast(*void)(*instance.m_pack_rect_origin)) - cast(*void)(*instance)) == 104, "ON_SubDFace.m_pack_rect_origin has unexpected offset % instead of 104", ((cast(*void)(*instance.m_pack_rect_origin)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_pack_rect_origin)) == 16, "ON_SubDFace.m_pack_rect_origin has unexpected size % instead of 16", size_of(type_of(ON_SubDFace.m_pack_rect_origin)));
        assert(((cast(*void)(*instance.m_pack_rect_size)) - cast(*void)(*instance)) == 120, "ON_SubDFace.m_pack_rect_size has unexpected offset % instead of 120", ((cast(*void)(*instance.m_pack_rect_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_pack_rect_size)) == 16, "ON_SubDFace.m_pack_rect_size has unexpected size % instead of 16", size_of(type_of(ON_SubDFace.m_pack_rect_size)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 136, "ON_SubDFace.m_reserved2 has unexpected offset % instead of 136", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_reserved2)) == 4, "ON_SubDFace.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_SubDFace.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 140, "ON_SubDFace.m_reserved3 has unexpected offset % instead of 140", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_reserved3)) == 4, "ON_SubDFace.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_SubDFace.m_reserved3)));
        assert(((cast(*void)(*instance.m_pack_status_bits)) - cast(*void)(*instance)) == 144, "ON_SubDFace.m_pack_status_bits has unexpected offset % instead of 144", ((cast(*void)(*instance.m_pack_status_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_pack_status_bits)) == 1, "ON_SubDFace.m_pack_status_bits has unexpected size % instead of 1", size_of(type_of(ON_SubDFace.m_pack_status_bits)));
        assert(((cast(*void)(*instance.m_texture_status_bits)) - cast(*void)(*instance)) == 145, "ON_SubDFace.m_texture_status_bits has unexpected offset % instead of 145", ((cast(*void)(*instance.m_texture_status_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_texture_status_bits)) == 1, "ON_SubDFace.m_texture_status_bits has unexpected size % instead of 1", size_of(type_of(ON_SubDFace.m_texture_status_bits)));
        assert(((cast(*void)(*instance.m_material_channel_index)) - cast(*void)(*instance)) == 146, "ON_SubDFace.m_material_channel_index has unexpected offset % instead of 146", ((cast(*void)(*instance.m_material_channel_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_material_channel_index)) == 2, "ON_SubDFace.m_material_channel_index has unexpected size % instead of 2", size_of(type_of(ON_SubDFace.m_material_channel_index)));
        assert(((cast(*void)(*instance.m_per_face_color)) - cast(*void)(*instance)) == 148, "ON_SubDFace.m_per_face_color has unexpected offset % instead of 148", ((cast(*void)(*instance.m_per_face_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_per_face_color)) == 4, "ON_SubDFace.m_per_face_color has unexpected size % instead of 4", size_of(type_of(ON_SubDFace.m_per_face_color)));
        assert(((cast(*void)(*instance.m_level_zero_face_id)) - cast(*void)(*instance)) == 152, "ON_SubDFace.m_level_zero_face_id has unexpected offset % instead of 152", ((cast(*void)(*instance.m_level_zero_face_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_level_zero_face_id)) == 4, "ON_SubDFace.m_level_zero_face_id has unexpected size % instead of 4", size_of(type_of(ON_SubDFace.m_level_zero_face_id)));
        assert(((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)) == 156, "ON_SubDFace.m_edge_count has unexpected offset % instead of 156", ((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_edge_count)) == 2, "ON_SubDFace.m_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDFace.m_edge_count)));
        assert(((cast(*void)(*instance.m_edgex_capacity)) - cast(*void)(*instance)) == 158, "ON_SubDFace.m_edgex_capacity has unexpected offset % instead of 158", ((cast(*void)(*instance.m_edgex_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_edgex_capacity)) == 2, "ON_SubDFace.m_edgex_capacity has unexpected size % instead of 2", size_of(type_of(ON_SubDFace.m_edgex_capacity)));
        assert(((cast(*void)(*instance.m_edge4)) - cast(*void)(*instance)) == 160, "ON_SubDFace.m_edge4 has unexpected offset % instead of 160", ((cast(*void)(*instance.m_edge4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_edge4)) == 32, "ON_SubDFace.m_edge4 has unexpected size % instead of 32", size_of(type_of(ON_SubDFace.m_edge4)));
        assert(((cast(*void)(*instance.m_edgex)) - cast(*void)(*instance)) == 192, "ON_SubDFace.m_edgex has unexpected offset % instead of 192", ((cast(*void)(*instance.m_edgex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_edgex)) == 8, "ON_SubDFace.m_edgex has unexpected size % instead of 8", size_of(type_of(ON_SubDFace.m_edgex)));
        assert(((cast(*void)(*instance.m_texture_points)) - cast(*void)(*instance)) == 200, "ON_SubDFace.m_texture_points has unexpected offset % instead of 200", ((cast(*void)(*instance.m_texture_points)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_texture_points)) == 8, "ON_SubDFace.m_texture_points has unexpected size % instead of 8", size_of(type_of(ON_SubDFace.m_texture_points)));
        assert(((cast(*void)(*instance.m_mesh_fragments)) - cast(*void)(*instance)) == 208, "ON_SubDFace.m_mesh_fragments has unexpected offset % instead of 208", ((cast(*void)(*instance.m_mesh_fragments)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFace.m_mesh_fragments)) == 8, "ON_SubDFace.m_mesh_fragments has unexpected size % instead of 8", size_of(type_of(ON_SubDFace.m_mesh_fragments)));
        assert(size_of(ON_SubDFace) == 216, "ON_SubDFace has size % instead of 216", size_of(ON_SubDFace));
    }

    {
        instance: ON_SubDVertexArray;
        assert(((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)) == 0, "ON_SubDVertexArray.m_subd has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexArray.m_subd)) == 32, "ON_SubDVertexArray.m_subd has unexpected size % instead of 32", size_of(type_of(ON_SubDVertexArray.m_subd)));
        assert(((cast(*void)(*instance.m_a)) - cast(*void)(*instance)) == 32, "ON_SubDVertexArray.m_a has unexpected offset % instead of 32", ((cast(*void)(*instance.m_a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexArray.m_a)) == 8, "ON_SubDVertexArray.m_a has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexArray.m_a)));
        assert(((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)) == 40, "ON_SubDVertexArray.m_vertex_count has unexpected offset % instead of 40", ((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexArray.m_vertex_count)) == 4, "ON_SubDVertexArray.m_vertex_count has unexpected size % instead of 4", size_of(type_of(ON_SubDVertexArray.m_vertex_count)));
        assert(((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)) == 48, "ON_SubDVertexArray.m_sp has unexpected offset % instead of 48", ((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexArray.m_sp)) == 16, "ON_SubDVertexArray.m_sp has unexpected size % instead of 16", size_of(type_of(ON_SubDVertexArray.m_sp)));
        assert(size_of(ON_SubDVertexArray) == 64, "ON_SubDVertexArray has size % instead of 64", size_of(ON_SubDVertexArray));
    }

    {
        instance: ON_SubDEdgeArray;
        assert(((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)) == 0, "ON_SubDEdgeArray.m_subd has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeArray.m_subd)) == 32, "ON_SubDEdgeArray.m_subd has unexpected size % instead of 32", size_of(type_of(ON_SubDEdgeArray.m_subd)));
        assert(((cast(*void)(*instance.m_a)) - cast(*void)(*instance)) == 32, "ON_SubDEdgeArray.m_a has unexpected offset % instead of 32", ((cast(*void)(*instance.m_a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeArray.m_a)) == 8, "ON_SubDEdgeArray.m_a has unexpected size % instead of 8", size_of(type_of(ON_SubDEdgeArray.m_a)));
        assert(((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)) == 40, "ON_SubDEdgeArray.m_edge_count has unexpected offset % instead of 40", ((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeArray.m_edge_count)) == 4, "ON_SubDEdgeArray.m_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDEdgeArray.m_edge_count)));
        assert(((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)) == 48, "ON_SubDEdgeArray.m_sp has unexpected offset % instead of 48", ((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeArray.m_sp)) == 16, "ON_SubDEdgeArray.m_sp has unexpected size % instead of 16", size_of(type_of(ON_SubDEdgeArray.m_sp)));
        assert(size_of(ON_SubDEdgeArray) == 64, "ON_SubDEdgeArray has size % instead of 64", size_of(ON_SubDEdgeArray));
    }

    {
        instance: ON_SubDFaceArray;
        assert(((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)) == 0, "ON_SubDFaceArray.m_subd has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceArray.m_subd)) == 32, "ON_SubDFaceArray.m_subd has unexpected size % instead of 32", size_of(type_of(ON_SubDFaceArray.m_subd)));
        assert(((cast(*void)(*instance.m_a)) - cast(*void)(*instance)) == 32, "ON_SubDFaceArray.m_a has unexpected offset % instead of 32", ((cast(*void)(*instance.m_a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceArray.m_a)) == 8, "ON_SubDFaceArray.m_a has unexpected size % instead of 8", size_of(type_of(ON_SubDFaceArray.m_a)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 40, "ON_SubDFaceArray.m_face_count has unexpected offset % instead of 40", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceArray.m_face_count)) == 4, "ON_SubDFaceArray.m_face_count has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceArray.m_face_count)));
        assert(((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)) == 48, "ON_SubDFaceArray.m_sp has unexpected offset % instead of 48", ((cast(*void)(*instance.m_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceArray.m_sp)) == 16, "ON_SubDFaceArray.m_sp has unexpected size % instead of 16", size_of(type_of(ON_SubDFaceArray.m_sp)));
        assert(size_of(ON_SubDFaceArray) == 64, "ON_SubDFaceArray has size % instead of 64", size_of(ON_SubDFaceArray));
    }

    {
        instance: ON_SubDVertexIterator;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 0, "ON_SubDVertexIterator.m_subd_ref has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIterator.m_subd_ref)) == 16, "ON_SubDVertexIterator.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDVertexIterator.m_subd_ref)));
        assert(((cast(*void)(*instance.m_v_first)) - cast(*void)(*instance)) == 16, "ON_SubDVertexIterator.m_v_first has unexpected offset % instead of 16", ((cast(*void)(*instance.m_v_first)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIterator.m_v_first)) == 8, "ON_SubDVertexIterator.m_v_first has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexIterator.m_v_first)));
        assert(((cast(*void)(*instance.m_v_last)) - cast(*void)(*instance)) == 24, "ON_SubDVertexIterator.m_v_last has unexpected offset % instead of 24", ((cast(*void)(*instance.m_v_last)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIterator.m_v_last)) == 8, "ON_SubDVertexIterator.m_v_last has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexIterator.m_v_last)));
        assert(((cast(*void)(*instance.m_v_current)) - cast(*void)(*instance)) == 32, "ON_SubDVertexIterator.m_v_current has unexpected offset % instead of 32", ((cast(*void)(*instance.m_v_current)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIterator.m_v_current)) == 8, "ON_SubDVertexIterator.m_v_current has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexIterator.m_v_current)));
        assert(((cast(*void)(*instance.m_vertex_index)) - cast(*void)(*instance)) == 40, "ON_SubDVertexIterator.m_vertex_index has unexpected offset % instead of 40", ((cast(*void)(*instance.m_vertex_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIterator.m_vertex_index)) == 4, "ON_SubDVertexIterator.m_vertex_index has unexpected size % instead of 4", size_of(type_of(ON_SubDVertexIterator.m_vertex_index)));
        assert(((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)) == 44, "ON_SubDVertexIterator.m_vertex_count has unexpected offset % instead of 44", ((cast(*void)(*instance.m_vertex_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIterator.m_vertex_count)) == 4, "ON_SubDVertexIterator.m_vertex_count has unexpected size % instead of 4", size_of(type_of(ON_SubDVertexIterator.m_vertex_count)));
        assert(((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)) == 48, "ON_SubDVertexIterator.m_component_ptr has unexpected offset % instead of 48", ((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIterator.m_component_ptr)) == 8, "ON_SubDVertexIterator.m_component_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDVertexIterator.m_component_ptr)));
        assert(size_of(ON_SubDVertexIterator) == 56, "ON_SubDVertexIterator has size % instead of 56", size_of(ON_SubDVertexIterator));
    }

    {
        instance: ON_SubDVertexIdIterator;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 24, "ON_SubDVertexIdIterator.m_subd_ref has unexpected offset % instead of 24", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDVertexIdIterator.m_subd_ref)) == 16, "ON_SubDVertexIdIterator.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDVertexIdIterator.m_subd_ref)));
        assert(size_of(ON_SubDVertexIdIterator) == 40, "ON_SubDVertexIdIterator has size % instead of 40", size_of(ON_SubDVertexIdIterator));
    }

    {
        instance: ON_SubDEdgeIterator;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 0, "ON_SubDEdgeIterator.m_subd_ref has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIterator.m_subd_ref)) == 16, "ON_SubDEdgeIterator.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDEdgeIterator.m_subd_ref)));
        assert(((cast(*void)(*instance.m_e_first)) - cast(*void)(*instance)) == 16, "ON_SubDEdgeIterator.m_e_first has unexpected offset % instead of 16", ((cast(*void)(*instance.m_e_first)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIterator.m_e_first)) == 8, "ON_SubDEdgeIterator.m_e_first has unexpected size % instead of 8", size_of(type_of(ON_SubDEdgeIterator.m_e_first)));
        assert(((cast(*void)(*instance.m_e_last)) - cast(*void)(*instance)) == 24, "ON_SubDEdgeIterator.m_e_last has unexpected offset % instead of 24", ((cast(*void)(*instance.m_e_last)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIterator.m_e_last)) == 8, "ON_SubDEdgeIterator.m_e_last has unexpected size % instead of 8", size_of(type_of(ON_SubDEdgeIterator.m_e_last)));
        assert(((cast(*void)(*instance.m_e_current)) - cast(*void)(*instance)) == 32, "ON_SubDEdgeIterator.m_e_current has unexpected offset % instead of 32", ((cast(*void)(*instance.m_e_current)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIterator.m_e_current)) == 8, "ON_SubDEdgeIterator.m_e_current has unexpected size % instead of 8", size_of(type_of(ON_SubDEdgeIterator.m_e_current)));
        assert(((cast(*void)(*instance.m_edge_index)) - cast(*void)(*instance)) == 40, "ON_SubDEdgeIterator.m_edge_index has unexpected offset % instead of 40", ((cast(*void)(*instance.m_edge_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIterator.m_edge_index)) == 4, "ON_SubDEdgeIterator.m_edge_index has unexpected size % instead of 4", size_of(type_of(ON_SubDEdgeIterator.m_edge_index)));
        assert(((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)) == 44, "ON_SubDEdgeIterator.m_edge_count has unexpected offset % instead of 44", ((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIterator.m_edge_count)) == 4, "ON_SubDEdgeIterator.m_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDEdgeIterator.m_edge_count)));
        assert(((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)) == 48, "ON_SubDEdgeIterator.m_component_ptr has unexpected offset % instead of 48", ((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIterator.m_component_ptr)) == 8, "ON_SubDEdgeIterator.m_component_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDEdgeIterator.m_component_ptr)));
        assert(size_of(ON_SubDEdgeIterator) == 56, "ON_SubDEdgeIterator has size % instead of 56", size_of(ON_SubDEdgeIterator));
    }

    {
        instance: ON_SubDEdgeIdIterator;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 24, "ON_SubDEdgeIdIterator.m_subd_ref has unexpected offset % instead of 24", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeIdIterator.m_subd_ref)) == 16, "ON_SubDEdgeIdIterator.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDEdgeIdIterator.m_subd_ref)));
        assert(size_of(ON_SubDEdgeIdIterator) == 40, "ON_SubDEdgeIdIterator has size % instead of 40", size_of(ON_SubDEdgeIdIterator));
    }

    {
        instance: ON_SubDFaceIterator;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 0, "ON_SubDFaceIterator.m_subd_ref has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIterator.m_subd_ref)) == 16, "ON_SubDFaceIterator.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDFaceIterator.m_subd_ref)));
        assert(((cast(*void)(*instance.m_face_first)) - cast(*void)(*instance)) == 16, "ON_SubDFaceIterator.m_face_first has unexpected offset % instead of 16", ((cast(*void)(*instance.m_face_first)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIterator.m_face_first)) == 8, "ON_SubDFaceIterator.m_face_first has unexpected size % instead of 8", size_of(type_of(ON_SubDFaceIterator.m_face_first)));
        assert(((cast(*void)(*instance.m_face_last)) - cast(*void)(*instance)) == 24, "ON_SubDFaceIterator.m_face_last has unexpected offset % instead of 24", ((cast(*void)(*instance.m_face_last)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIterator.m_face_last)) == 8, "ON_SubDFaceIterator.m_face_last has unexpected size % instead of 8", size_of(type_of(ON_SubDFaceIterator.m_face_last)));
        assert(((cast(*void)(*instance.m_face_current)) - cast(*void)(*instance)) == 32, "ON_SubDFaceIterator.m_face_current has unexpected offset % instead of 32", ((cast(*void)(*instance.m_face_current)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIterator.m_face_current)) == 8, "ON_SubDFaceIterator.m_face_current has unexpected size % instead of 8", size_of(type_of(ON_SubDFaceIterator.m_face_current)));
        assert(((cast(*void)(*instance.m_face_index)) - cast(*void)(*instance)) == 40, "ON_SubDFaceIterator.m_face_index has unexpected offset % instead of 40", ((cast(*void)(*instance.m_face_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIterator.m_face_index)) == 4, "ON_SubDFaceIterator.m_face_index has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceIterator.m_face_index)));
        assert(((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)) == 44, "ON_SubDFaceIterator.m_face_count has unexpected offset % instead of 44", ((cast(*void)(*instance.m_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIterator.m_face_count)) == 4, "ON_SubDFaceIterator.m_face_count has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceIterator.m_face_count)));
        assert(((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)) == 48, "ON_SubDFaceIterator.m_component_ptr has unexpected offset % instead of 48", ((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIterator.m_component_ptr)) == 8, "ON_SubDFaceIterator.m_component_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDFaceIterator.m_component_ptr)));
        assert(size_of(ON_SubDFaceIterator) == 56, "ON_SubDFaceIterator has size % instead of 56", size_of(ON_SubDFaceIterator));
    }

    {
        instance: ON_SubDFaceIdIterator;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 24, "ON_SubDFaceIdIterator.m_subd_ref has unexpected offset % instead of 24", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceIdIterator.m_subd_ref)) == 16, "ON_SubDFaceIdIterator.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDFaceIdIterator.m_subd_ref)));
        assert(size_of(ON_SubDFaceIdIterator) == 40, "ON_SubDFaceIdIterator has size % instead of 40", size_of(ON_SubDFaceIdIterator));
    }

    {
        instance: ON_SubDComponentIterator;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 0, "ON_SubDComponentIterator.m_subd_ref has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_subd_ref)) == 16, "ON_SubDComponentIterator.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDComponentIterator.m_subd_ref)));
        assert(((cast(*void)(*instance.m_subd_level)) - cast(*void)(*instance)) == 16, "ON_SubDComponentIterator.m_subd_level has unexpected offset % instead of 16", ((cast(*void)(*instance.m_subd_level)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_subd_level)) == 4, "ON_SubDComponentIterator.m_subd_level has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentIterator.m_subd_level)));
        assert(((cast(*void)(*instance.m_vertex_first)) - cast(*void)(*instance)) == 24, "ON_SubDComponentIterator.m_vertex_first has unexpected offset % instead of 24", ((cast(*void)(*instance.m_vertex_first)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_vertex_first)) == 8, "ON_SubDComponentIterator.m_vertex_first has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentIterator.m_vertex_first)));
        assert(((cast(*void)(*instance.m_vertex_last)) - cast(*void)(*instance)) == 32, "ON_SubDComponentIterator.m_vertex_last has unexpected offset % instead of 32", ((cast(*void)(*instance.m_vertex_last)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_vertex_last)) == 8, "ON_SubDComponentIterator.m_vertex_last has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentIterator.m_vertex_last)));
        assert(((cast(*void)(*instance.m_edge_first)) - cast(*void)(*instance)) == 40, "ON_SubDComponentIterator.m_edge_first has unexpected offset % instead of 40", ((cast(*void)(*instance.m_edge_first)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_edge_first)) == 8, "ON_SubDComponentIterator.m_edge_first has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentIterator.m_edge_first)));
        assert(((cast(*void)(*instance.m_edge_last)) - cast(*void)(*instance)) == 48, "ON_SubDComponentIterator.m_edge_last has unexpected offset % instead of 48", ((cast(*void)(*instance.m_edge_last)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_edge_last)) == 8, "ON_SubDComponentIterator.m_edge_last has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentIterator.m_edge_last)));
        assert(((cast(*void)(*instance.m_face_first)) - cast(*void)(*instance)) == 56, "ON_SubDComponentIterator.m_face_first has unexpected offset % instead of 56", ((cast(*void)(*instance.m_face_first)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_face_first)) == 8, "ON_SubDComponentIterator.m_face_first has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentIterator.m_face_first)));
        assert(((cast(*void)(*instance.m_face_last)) - cast(*void)(*instance)) == 64, "ON_SubDComponentIterator.m_face_last has unexpected offset % instead of 64", ((cast(*void)(*instance.m_face_last)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_face_last)) == 8, "ON_SubDComponentIterator.m_face_last has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentIterator.m_face_last)));
        assert(((cast(*void)(*instance.m_cptr_current)) - cast(*void)(*instance)) == 72, "ON_SubDComponentIterator.m_cptr_current has unexpected offset % instead of 72", ((cast(*void)(*instance.m_cptr_current)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentIterator.m_cptr_current)) == 8, "ON_SubDComponentIterator.m_cptr_current has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentIterator.m_cptr_current)));
        assert(size_of(ON_SubDComponentIterator) == 80, "ON_SubDComponentIterator has size % instead of 80", size_of(ON_SubDComponentIterator));
    }

    {
        instance: ON_SubDMeshFragmentIterator;
        assert(((cast(*void)(*instance.m_limit_mesh)) - cast(*void)(*instance)) == 0, "ON_SubDMeshFragmentIterator.m_limit_mesh has unexpected offset % instead of 0", ((cast(*void)(*instance.m_limit_mesh)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_limit_mesh)) == 16, "ON_SubDMeshFragmentIterator.m_limit_mesh has unexpected size % instead of 16", size_of(type_of(ON_SubDMeshFragmentIterator.m_limit_mesh)));
        assert(((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)) == 16, "ON_SubDMeshFragmentIterator.m_subd has unexpected offset % instead of 16", ((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_subd)) == 32, "ON_SubDMeshFragmentIterator.m_subd has unexpected size % instead of 32", size_of(type_of(ON_SubDMeshFragmentIterator.m_subd)));
        assert(((cast(*void)(*instance.m_fit)) - cast(*void)(*instance)) == 48, "ON_SubDMeshFragmentIterator.m_fit has unexpected offset % instead of 48", ((cast(*void)(*instance.m_fit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_fit)) == 56, "ON_SubDMeshFragmentIterator.m_fit has unexpected size % instead of 56", size_of(type_of(ON_SubDMeshFragmentIterator.m_fit)));
        assert(((cast(*void)(*instance.m_current_fragment)) - cast(*void)(*instance)) == 104, "ON_SubDMeshFragmentIterator.m_current_fragment has unexpected offset % instead of 104", ((cast(*void)(*instance.m_current_fragment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_current_fragment)) == 8, "ON_SubDMeshFragmentIterator.m_current_fragment has unexpected size % instead of 8", size_of(type_of(ON_SubDMeshFragmentIterator.m_current_fragment)));
        assert(((cast(*void)(*instance.m_bFromFaceFragments)) - cast(*void)(*instance)) == 112, "ON_SubDMeshFragmentIterator.m_bFromFaceFragments has unexpected offset % instead of 112", ((cast(*void)(*instance.m_bFromFaceFragments)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_bFromFaceFragments)) == 1, "ON_SubDMeshFragmentIterator.m_bFromFaceFragments has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentIterator.m_bFromFaceFragments)));
        assert(((cast(*void)(*instance.m_bHaveCounts)) - cast(*void)(*instance)) == 113, "ON_SubDMeshFragmentIterator.m_bHaveCounts has unexpected offset % instead of 113", ((cast(*void)(*instance.m_bHaveCounts)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_bHaveCounts)) == 1, "ON_SubDMeshFragmentIterator.m_bHaveCounts has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentIterator.m_bHaveCounts)));
        assert(((cast(*void)(*instance.m_subd_appearance_override)) - cast(*void)(*instance)) == 114, "ON_SubDMeshFragmentIterator.m_subd_appearance_override has unexpected offset % instead of 114", ((cast(*void)(*instance.m_subd_appearance_override)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_subd_appearance_override)) == 1, "ON_SubDMeshFragmentIterator.m_subd_appearance_override has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentIterator.m_subd_appearance_override)));
        assert(((cast(*void)(*instance.m_reserved_density_reduction)) - cast(*void)(*instance)) == 115, "ON_SubDMeshFragmentIterator.m_reserved_density_reduction has unexpected offset % instead of 115", ((cast(*void)(*instance.m_reserved_density_reduction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_reserved_density_reduction)) == 1, "ON_SubDMeshFragmentIterator.m_reserved_density_reduction has unexpected size % instead of 1", size_of(type_of(ON_SubDMeshFragmentIterator.m_reserved_density_reduction)));
        assert(((cast(*void)(*instance.m_maximum_mesh_density)) - cast(*void)(*instance)) == 116, "ON_SubDMeshFragmentIterator.m_maximum_mesh_density has unexpected offset % instead of 116", ((cast(*void)(*instance.m_maximum_mesh_density)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_maximum_mesh_density)) == 4, "ON_SubDMeshFragmentIterator.m_maximum_mesh_density has unexpected size % instead of 4", size_of(type_of(ON_SubDMeshFragmentIterator.m_maximum_mesh_density)));
        assert(((cast(*void)(*instance.m_full_size_fragment_count)) - cast(*void)(*instance)) == 120, "ON_SubDMeshFragmentIterator.m_full_size_fragment_count has unexpected offset % instead of 120", ((cast(*void)(*instance.m_full_size_fragment_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_full_size_fragment_count)) == 4, "ON_SubDMeshFragmentIterator.m_full_size_fragment_count has unexpected size % instead of 4", size_of(type_of(ON_SubDMeshFragmentIterator.m_full_size_fragment_count)));
        assert(((cast(*void)(*instance.m_half_size_fragment_count)) - cast(*void)(*instance)) == 124, "ON_SubDMeshFragmentIterator.m_half_size_fragment_count has unexpected offset % instead of 124", ((cast(*void)(*instance.m_half_size_fragment_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMeshFragmentIterator.m_half_size_fragment_count)) == 4, "ON_SubDMeshFragmentIterator.m_half_size_fragment_count has unexpected size % instead of 4", size_of(type_of(ON_SubDMeshFragmentIterator.m_half_size_fragment_count)));
        assert(size_of(ON_SubDMeshFragmentIterator) == 128, "ON_SubDMeshFragmentIterator has size % instead of 128", size_of(ON_SubDMeshFragmentIterator));
    }

    {
        instance: ON_SubDSectorIterator;
        assert(((cast(*void)(*instance.m_center_vertex)) - cast(*void)(*instance)) == 0, "ON_SubDSectorIterator.m_center_vertex has unexpected offset % instead of 0", ((cast(*void)(*instance.m_center_vertex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_center_vertex)) == 8, "ON_SubDSectorIterator.m_center_vertex has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorIterator.m_center_vertex)));
        assert(((cast(*void)(*instance.m_initial_face)) - cast(*void)(*instance)) == 8, "ON_SubDSectorIterator.m_initial_face has unexpected offset % instead of 8", ((cast(*void)(*instance.m_initial_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_initial_face)) == 8, "ON_SubDSectorIterator.m_initial_face has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorIterator.m_initial_face)));
        assert(((cast(*void)(*instance.m_current_face)) - cast(*void)(*instance)) == 16, "ON_SubDSectorIterator.m_current_face has unexpected offset % instead of 16", ((cast(*void)(*instance.m_current_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_current_face)) == 8, "ON_SubDSectorIterator.m_current_face has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorIterator.m_current_face)));
        assert(((cast(*void)(*instance.m_current_eptr)) - cast(*void)(*instance)) == 24, "ON_SubDSectorIterator.m_current_eptr has unexpected offset % instead of 24", ((cast(*void)(*instance.m_current_eptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_current_eptr)) == 16, "ON_SubDSectorIterator.m_current_eptr has unexpected size % instead of 16", size_of(type_of(ON_SubDSectorIterator.m_current_eptr)));
        assert(((cast(*void)(*instance.m_initial_fvi)) - cast(*void)(*instance)) == 40, "ON_SubDSectorIterator.m_initial_fvi has unexpected offset % instead of 40", ((cast(*void)(*instance.m_initial_fvi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_initial_fvi)) == 4, "ON_SubDSectorIterator.m_initial_fvi has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorIterator.m_initial_fvi)));
        assert(((cast(*void)(*instance.m_current_fvi)) - cast(*void)(*instance)) == 44, "ON_SubDSectorIterator.m_current_fvi has unexpected offset % instead of 44", ((cast(*void)(*instance.m_current_fvi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_current_fvi)) == 4, "ON_SubDSectorIterator.m_current_fvi has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorIterator.m_current_fvi)));
        assert(((cast(*void)(*instance.m_current_fei)) - cast(*void)(*instance)) == 48, "ON_SubDSectorIterator.m_current_fei has unexpected offset % instead of 48", ((cast(*void)(*instance.m_current_fei)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_current_fei)) == 8, "ON_SubDSectorIterator.m_current_fei has unexpected size % instead of 8", size_of(type_of(ON_SubDSectorIterator.m_current_fei)));
        assert(((cast(*void)(*instance.m_initial_face_dir)) - cast(*void)(*instance)) == 56, "ON_SubDSectorIterator.m_initial_face_dir has unexpected offset % instead of 56", ((cast(*void)(*instance.m_initial_face_dir)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_initial_face_dir)) == 4, "ON_SubDSectorIterator.m_initial_face_dir has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorIterator.m_initial_face_dir)));
        assert(((cast(*void)(*instance.m_current_face_dir)) - cast(*void)(*instance)) == 60, "ON_SubDSectorIterator.m_current_face_dir has unexpected offset % instead of 60", ((cast(*void)(*instance.m_current_face_dir)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_current_face_dir)) == 4, "ON_SubDSectorIterator.m_current_face_dir has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorIterator.m_current_face_dir)));
        assert(((cast(*void)(*instance.m_current_ring_index)) - cast(*void)(*instance)) == 64, "ON_SubDSectorIterator.m_current_ring_index has unexpected offset % instead of 64", ((cast(*void)(*instance.m_current_ring_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDSectorIterator.m_current_ring_index)) == 4, "ON_SubDSectorIterator.m_current_ring_index has unexpected size % instead of 4", size_of(type_of(ON_SubDSectorIterator.m_current_ring_index)));
        assert(size_of(ON_SubDSectorIterator) == 72, "ON_SubDSectorIterator has size % instead of 72", size_of(ON_SubDSectorIterator));
    }

    {
        instance: ON_SubDFaceEdgeIterator;
        assert(((cast(*void)(*instance.m_face)) - cast(*void)(*instance)) == 0, "ON_SubDFaceEdgeIterator.m_face has unexpected offset % instead of 0", ((cast(*void)(*instance.m_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceEdgeIterator.m_face)) == 8, "ON_SubDFaceEdgeIterator.m_face has unexpected size % instead of 8", size_of(type_of(ON_SubDFaceEdgeIterator.m_face)));
        assert(((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)) == 8, "ON_SubDFaceEdgeIterator.m_edge_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceEdgeIterator.m_edge_count)) == 4, "ON_SubDFaceEdgeIterator.m_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceEdgeIterator.m_edge_count)));
        assert(((cast(*void)(*instance.m_edge_index0)) - cast(*void)(*instance)) == 12, "ON_SubDFaceEdgeIterator.m_edge_index0 has unexpected offset % instead of 12", ((cast(*void)(*instance.m_edge_index0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceEdgeIterator.m_edge_index0)) == 4, "ON_SubDFaceEdgeIterator.m_edge_index0 has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceEdgeIterator.m_edge_index0)));
        assert(((cast(*void)(*instance.m_edge_index)) - cast(*void)(*instance)) == 16, "ON_SubDFaceEdgeIterator.m_edge_index has unexpected offset % instead of 16", ((cast(*void)(*instance.m_edge_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFaceEdgeIterator.m_edge_index)) == 4, "ON_SubDFaceEdgeIterator.m_edge_index has unexpected size % instead of 4", size_of(type_of(ON_SubDFaceEdgeIterator.m_edge_index)));
        assert(size_of(ON_SubDFaceEdgeIterator) == 24, "ON_SubDFaceEdgeIterator has size % instead of 24", size_of(ON_SubDFaceEdgeIterator));
    }

    {
        instance: ON_SubDFromMeshParameters;
        assert(((cast(*void)(*instance.m_merge_edges_bits)) - cast(*void)(*instance)) == 0, "ON_SubDFromMeshParameters.m_merge_edges_bits has unexpected offset % instead of 0", ((cast(*void)(*instance.m_merge_edges_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_merge_edges_bits)) == 1, "ON_SubDFromMeshParameters.m_merge_edges_bits has unexpected size % instead of 1", size_of(type_of(ON_SubDFromMeshParameters.m_merge_edges_bits)));
        assert(((cast(*void)(*instance.m_bInterpolateMeshVertices)) - cast(*void)(*instance)) == 1, "ON_SubDFromMeshParameters.m_bInterpolateMeshVertices has unexpected offset % instead of 1", ((cast(*void)(*instance.m_bInterpolateMeshVertices)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_bInterpolateMeshVertices)) == 1, "ON_SubDFromMeshParameters.m_bInterpolateMeshVertices has unexpected size % instead of 1", size_of(type_of(ON_SubDFromMeshParameters.m_bInterpolateMeshVertices)));
        assert(((cast(*void)(*instance.m_interior_crease_option)) - cast(*void)(*instance)) == 2, "ON_SubDFromMeshParameters.m_interior_crease_option has unexpected offset % instead of 2", ((cast(*void)(*instance.m_interior_crease_option)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_interior_crease_option)) == 1, "ON_SubDFromMeshParameters.m_interior_crease_option has unexpected size % instead of 1", size_of(type_of(ON_SubDFromMeshParameters.m_interior_crease_option)));
        assert(((cast(*void)(*instance.m_convex_corner_option)) - cast(*void)(*instance)) == 3, "ON_SubDFromMeshParameters.m_convex_corner_option has unexpected offset % instead of 3", ((cast(*void)(*instance.m_convex_corner_option)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_convex_corner_option)) == 1, "ON_SubDFromMeshParameters.m_convex_corner_option has unexpected size % instead of 1", size_of(type_of(ON_SubDFromMeshParameters.m_convex_corner_option)));
        assert(((cast(*void)(*instance.m_concave_corner_option)) - cast(*void)(*instance)) == 4, "ON_SubDFromMeshParameters.m_concave_corner_option has unexpected offset % instead of 4", ((cast(*void)(*instance.m_concave_corner_option)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_concave_corner_option)) == 1, "ON_SubDFromMeshParameters.m_concave_corner_option has unexpected size % instead of 1", size_of(type_of(ON_SubDFromMeshParameters.m_concave_corner_option)));
        assert(((cast(*void)(*instance.m_texture_coordinates_option)) - cast(*void)(*instance)) == 5, "ON_SubDFromMeshParameters.m_texture_coordinates_option has unexpected offset % instead of 5", ((cast(*void)(*instance.m_texture_coordinates_option)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_texture_coordinates_option)) == 1, "ON_SubDFromMeshParameters.m_texture_coordinates_option has unexpected size % instead of 1", size_of(type_of(ON_SubDFromMeshParameters.m_texture_coordinates_option)));
        assert(((cast(*void)(*instance.m_maximum_convex_corner_edge_count)) - cast(*void)(*instance)) == 6, "ON_SubDFromMeshParameters.m_maximum_convex_corner_edge_count has unexpected offset % instead of 6", ((cast(*void)(*instance.m_maximum_convex_corner_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_maximum_convex_corner_edge_count)) == 2, "ON_SubDFromMeshParameters.m_maximum_convex_corner_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDFromMeshParameters.m_maximum_convex_corner_edge_count)));
        assert(((cast(*void)(*instance.m_minimum_concave_corner_edge_count)) - cast(*void)(*instance)) == 8, "ON_SubDFromMeshParameters.m_minimum_concave_corner_edge_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_minimum_concave_corner_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_minimum_concave_corner_edge_count)) == 2, "ON_SubDFromMeshParameters.m_minimum_concave_corner_edge_count has unexpected size % instead of 2", size_of(type_of(ON_SubDFromMeshParameters.m_minimum_concave_corner_edge_count)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 10, "ON_SubDFromMeshParameters.m_reserved2 has unexpected offset % instead of 10", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_reserved2)) == 2, "ON_SubDFromMeshParameters.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SubDFromMeshParameters.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 12, "ON_SubDFromMeshParameters.m_reserved3 has unexpected offset % instead of 12", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_reserved3)) == 4, "ON_SubDFromMeshParameters.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_SubDFromMeshParameters.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 16, "ON_SubDFromMeshParameters.m_reserved4 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_reserved4)) == 8, "ON_SubDFromMeshParameters.m_reserved4 has unexpected size % instead of 8", size_of(type_of(ON_SubDFromMeshParameters.m_reserved4)));
        assert(((cast(*void)(*instance.m_maximum_convex_corner_angle_radians)) - cast(*void)(*instance)) == 24, "ON_SubDFromMeshParameters.m_maximum_convex_corner_angle_radians has unexpected offset % instead of 24", ((cast(*void)(*instance.m_maximum_convex_corner_angle_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_maximum_convex_corner_angle_radians)) == 8, "ON_SubDFromMeshParameters.m_maximum_convex_corner_angle_radians has unexpected size % instead of 8", size_of(type_of(ON_SubDFromMeshParameters.m_maximum_convex_corner_angle_radians)));
        assert(((cast(*void)(*instance.m_minimum_concave_corner_angle_radians)) - cast(*void)(*instance)) == 32, "ON_SubDFromMeshParameters.m_minimum_concave_corner_angle_radians has unexpected offset % instead of 32", ((cast(*void)(*instance.m_minimum_concave_corner_angle_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDFromMeshParameters.m_minimum_concave_corner_angle_radians)) == 8, "ON_SubDFromMeshParameters.m_minimum_concave_corner_angle_radians has unexpected size % instead of 8", size_of(type_of(ON_SubDFromMeshParameters.m_minimum_concave_corner_angle_radians)));
        assert(size_of(ON_SubDFromMeshParameters) == 40, "ON_SubDFromMeshParameters has size % instead of 40", size_of(ON_SubDFromMeshParameters));
    }

    {
        instance: ON_SubDComponentRef;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 16, "ON_SubDComponentRef.m_subd_ref has unexpected offset % instead of 16", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRef.m_subd_ref)) == 16, "ON_SubDComponentRef.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDComponentRef.m_subd_ref)));
        assert(((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)) == 32, "ON_SubDComponentRef.m_component_ptr has unexpected offset % instead of 32", ((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRef.m_component_ptr)) == 8, "ON_SubDComponentRef.m_component_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentRef.m_component_ptr)));
        assert(((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)) == 40, "ON_SubDComponentRef.m_component_index has unexpected offset % instead of 40", ((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRef.m_component_index)) == 8, "ON_SubDComponentRef.m_component_index has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentRef.m_component_index)));
        assert(((cast(*void)(*instance.m_component_location)) - cast(*void)(*instance)) == 48, "ON_SubDComponentRef.m_component_location has unexpected offset % instead of 48", ((cast(*void)(*instance.m_component_location)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRef.m_component_location)) == 1, "ON_SubDComponentRef.m_component_location has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentRef.m_component_location)));
        assert(((cast(*void)(*instance.m_reference_id)) - cast(*void)(*instance)) == 56, "ON_SubDComponentRef.m_reference_id has unexpected offset % instead of 56", ((cast(*void)(*instance.m_reference_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRef.m_reference_id)) == 8, "ON_SubDComponentRef.m_reference_id has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentRef.m_reference_id)));
        assert(size_of(ON_SubDComponentRef) == 64, "ON_SubDComponentRef has size % instead of 64", size_of(ON_SubDComponentRef));
    }

    {
        instance: ON_SubDComponentRefList;
        assert(((cast(*void)(*instance.m_list)) - cast(*void)(*instance)) == 0, "ON_SubDComponentRefList.m_list has unexpected offset % instead of 0", ((cast(*void)(*instance.m_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_list)) == 24, "ON_SubDComponentRefList.m_list has unexpected size % instead of 24", size_of(type_of(ON_SubDComponentRefList.m_list)));
        assert(((cast(*void)(*instance.m_subd_count)) - cast(*void)(*instance)) == 24, "ON_SubDComponentRefList.m_subd_count has unexpected offset % instead of 24", ((cast(*void)(*instance.m_subd_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_count)) == 4, "ON_SubDComponentRefList.m_subd_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_count)));
        assert(((cast(*void)(*instance.m_subd_vertex_smooth_count)) - cast(*void)(*instance)) == 28, "ON_SubDComponentRefList.m_subd_vertex_smooth_count has unexpected offset % instead of 28", ((cast(*void)(*instance.m_subd_vertex_smooth_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_smooth_count)) == 4, "ON_SubDComponentRefList.m_subd_vertex_smooth_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_smooth_count)));
        assert(((cast(*void)(*instance.m_subd_vertex_dart_count)) - cast(*void)(*instance)) == 32, "ON_SubDComponentRefList.m_subd_vertex_dart_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_subd_vertex_dart_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_dart_count)) == 4, "ON_SubDComponentRefList.m_subd_vertex_dart_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_dart_count)));
        assert(((cast(*void)(*instance.m_subd_vertex_crease_count)) - cast(*void)(*instance)) == 36, "ON_SubDComponentRefList.m_subd_vertex_crease_count has unexpected offset % instead of 36", ((cast(*void)(*instance.m_subd_vertex_crease_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_crease_count)) == 4, "ON_SubDComponentRefList.m_subd_vertex_crease_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_crease_count)));
        assert(((cast(*void)(*instance.m_subd_vertex_corner_count)) - cast(*void)(*instance)) == 40, "ON_SubDComponentRefList.m_subd_vertex_corner_count has unexpected offset % instead of 40", ((cast(*void)(*instance.m_subd_vertex_corner_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_corner_count)) == 4, "ON_SubDComponentRefList.m_subd_vertex_corner_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_vertex_corner_count)));
        assert(((cast(*void)(*instance.m_subd_edge_smooth_count)) - cast(*void)(*instance)) == 44, "ON_SubDComponentRefList.m_subd_edge_smooth_count has unexpected offset % instead of 44", ((cast(*void)(*instance.m_subd_edge_smooth_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_edge_smooth_count)) == 4, "ON_SubDComponentRefList.m_subd_edge_smooth_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_edge_smooth_count)));
        assert(((cast(*void)(*instance.m_subd_edge_crease_count)) - cast(*void)(*instance)) == 48, "ON_SubDComponentRefList.m_subd_edge_crease_count has unexpected offset % instead of 48", ((cast(*void)(*instance.m_subd_edge_crease_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_edge_crease_count)) == 4, "ON_SubDComponentRefList.m_subd_edge_crease_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_edge_crease_count)));
        assert(((cast(*void)(*instance.m_subd_face_count)) - cast(*void)(*instance)) == 52, "ON_SubDComponentRefList.m_subd_face_count has unexpected offset % instead of 52", ((cast(*void)(*instance.m_subd_face_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_subd_face_count)) == 4, "ON_SubDComponentRefList.m_subd_face_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_subd_face_count)));
        assert(((cast(*void)(*instance.m_bIsClean)) - cast(*void)(*instance)) == 56, "ON_SubDComponentRefList.m_bIsClean has unexpected offset % instead of 56", ((cast(*void)(*instance.m_bIsClean)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_bIsClean)) == 1, "ON_SubDComponentRefList.m_bIsClean has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentRefList.m_bIsClean)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 57, "ON_SubDComponentRefList.m_reserved1 has unexpected offset % instead of 57", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_reserved1)) == 1, "ON_SubDComponentRefList.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentRefList.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 58, "ON_SubDComponentRefList.m_reserved2 has unexpected offset % instead of 58", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_reserved2)) == 2, "ON_SubDComponentRefList.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_SubDComponentRefList.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 60, "ON_SubDComponentRefList.m_reserved3 has unexpected offset % instead of 60", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_reserved3)) == 4, "ON_SubDComponentRefList.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentRefList.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 64, "ON_SubDComponentRefList.m_reserved4 has unexpected offset % instead of 64", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentRefList.m_reserved4)) == 8, "ON_SubDComponentRefList.m_reserved4 has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentRefList.m_reserved4)));
        assert(size_of(ON_SubDComponentRefList) == 72, "ON_SubDComponentRefList has size % instead of 72", size_of(ON_SubDComponentRefList));
    }

    {
        instance: ON_SubDComponentPoint;
        assert(((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)) == 0, "ON_SubDComponentPoint.m_component_ptr has unexpected offset % instead of 0", ((cast(*void)(*instance.m_component_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentPoint.m_component_ptr)) == 8, "ON_SubDComponentPoint.m_component_ptr has unexpected size % instead of 8", size_of(type_of(ON_SubDComponentPoint.m_component_ptr)));
        assert(((cast(*void)(*instance.m_pick_point)) - cast(*void)(*instance)) == 8, "ON_SubDComponentPoint.m_pick_point has unexpected offset % instead of 8", ((cast(*void)(*instance.m_pick_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentPoint.m_pick_point)) == 72, "ON_SubDComponentPoint.m_pick_point has unexpected size % instead of 72", size_of(type_of(ON_SubDComponentPoint.m_pick_point)));
        assert(size_of(ON_SubDComponentPoint) == 80, "ON_SubDComponentPoint has size % instead of 80", size_of(ON_SubDComponentPoint));
    }

    {
        instance: ON_SubDMatrix;
        assert(((cast(*void)(*instance.m_sector_type)) - cast(*void)(*instance)) == 0, "ON_SubDMatrix.m_sector_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sector_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m_sector_type)) == 40, "ON_SubDMatrix.m_sector_type has unexpected size % instead of 40", size_of(type_of(ON_SubDMatrix.m_sector_type)));
        assert(((cast(*void)(*instance.m_R)) - cast(*void)(*instance)) == 40, "ON_SubDMatrix.m_R has unexpected offset % instead of 40", ((cast(*void)(*instance.m_R)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m_R)) == 4, "ON_SubDMatrix.m_R has unexpected size % instead of 4", size_of(type_of(ON_SubDMatrix.m_R)));
        assert(((cast(*void)(*instance.m_S)) - cast(*void)(*instance)) == 48, "ON_SubDMatrix.m_S has unexpected offset % instead of 48", ((cast(*void)(*instance.m_S)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m_S)) == 8, "ON_SubDMatrix.m_S has unexpected size % instead of 8", size_of(type_of(ON_SubDMatrix.m_S)));
        assert(((cast(*void)(*instance.m_LP)) - cast(*void)(*instance)) == 56, "ON_SubDMatrix.m_LP has unexpected offset % instead of 56", ((cast(*void)(*instance.m_LP)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m_LP)) == 8, "ON_SubDMatrix.m_LP has unexpected size % instead of 8", size_of(type_of(ON_SubDMatrix.m_LP)));
        assert(((cast(*void)(*instance.m_L1)) - cast(*void)(*instance)) == 64, "ON_SubDMatrix.m_L1 has unexpected offset % instead of 64", ((cast(*void)(*instance.m_L1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m_L1)) == 8, "ON_SubDMatrix.m_L1 has unexpected size % instead of 8", size_of(type_of(ON_SubDMatrix.m_L1)));
        assert(((cast(*void)(*instance.m_L2)) - cast(*void)(*instance)) == 72, "ON_SubDMatrix.m_L2 has unexpected offset % instead of 72", ((cast(*void)(*instance.m_L2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m_L2)) == 8, "ON_SubDMatrix.m_L2 has unexpected size % instead of 8", size_of(type_of(ON_SubDMatrix.m_L2)));
        assert(((cast(*void)(*instance.m__max_R)) - cast(*void)(*instance)) == 80, "ON_SubDMatrix.m__max_R has unexpected offset % instead of 80", ((cast(*void)(*instance.m__max_R)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m__max_R)) == 4, "ON_SubDMatrix.m__max_R has unexpected size % instead of 4", size_of(type_of(ON_SubDMatrix.m__max_R)));
        assert(((cast(*void)(*instance.m__S)) - cast(*void)(*instance)) == 88, "ON_SubDMatrix.m__S has unexpected offset % instead of 88", ((cast(*void)(*instance.m__S)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m__S)) == 72, "ON_SubDMatrix.m__S has unexpected size % instead of 72", size_of(type_of(ON_SubDMatrix.m__S)));
        assert(((cast(*void)(*instance.m__buffer)) - cast(*void)(*instance)) == 160, "ON_SubDMatrix.m__buffer has unexpected offset % instead of 160", ((cast(*void)(*instance.m__buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDMatrix.m__buffer)) == 24, "ON_SubDMatrix.m__buffer has unexpected size % instead of 24", size_of(type_of(ON_SubDMatrix.m__buffer)));
        assert(size_of(ON_SubDMatrix) == 184, "ON_SubDMatrix has size % instead of 184", size_of(ON_SubDMatrix));
    }

    {
        instance: ON_SubD_FixedSizeHeap;
        assert(((cast(*void)(*instance.m_sn)) - cast(*void)(*instance)) == 0, "ON_SubD_FixedSizeHeap.m_sn has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_sn)) == 4, "ON_SubD_FixedSizeHeap.m_sn has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_sn)));
        assert(((cast(*void)(*instance.m_v)) - cast(*void)(*instance)) == 8, "ON_SubD_FixedSizeHeap.m_v has unexpected offset % instead of 8", ((cast(*void)(*instance.m_v)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_v)) == 8, "ON_SubD_FixedSizeHeap.m_v has unexpected size % instead of 8", size_of(type_of(ON_SubD_FixedSizeHeap.m_v)));
        assert(((cast(*void)(*instance.m_v_capacity)) - cast(*void)(*instance)) == 16, "ON_SubD_FixedSizeHeap.m_v_capacity has unexpected offset % instead of 16", ((cast(*void)(*instance.m_v_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_v_capacity)) == 4, "ON_SubD_FixedSizeHeap.m_v_capacity has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_v_capacity)));
        assert(((cast(*void)(*instance.m_v_index)) - cast(*void)(*instance)) == 20, "ON_SubD_FixedSizeHeap.m_v_index has unexpected offset % instead of 20", ((cast(*void)(*instance.m_v_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_v_index)) == 4, "ON_SubD_FixedSizeHeap.m_v_index has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_v_index)));
        assert(((cast(*void)(*instance.m_e)) - cast(*void)(*instance)) == 24, "ON_SubD_FixedSizeHeap.m_e has unexpected offset % instead of 24", ((cast(*void)(*instance.m_e)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_e)) == 8, "ON_SubD_FixedSizeHeap.m_e has unexpected size % instead of 8", size_of(type_of(ON_SubD_FixedSizeHeap.m_e)));
        assert(((cast(*void)(*instance.m_e_capacity)) - cast(*void)(*instance)) == 32, "ON_SubD_FixedSizeHeap.m_e_capacity has unexpected offset % instead of 32", ((cast(*void)(*instance.m_e_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_e_capacity)) == 4, "ON_SubD_FixedSizeHeap.m_e_capacity has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_e_capacity)));
        assert(((cast(*void)(*instance.m_e_index)) - cast(*void)(*instance)) == 36, "ON_SubD_FixedSizeHeap.m_e_index has unexpected offset % instead of 36", ((cast(*void)(*instance.m_e_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_e_index)) == 4, "ON_SubD_FixedSizeHeap.m_e_index has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_e_index)));
        assert(((cast(*void)(*instance.m_f)) - cast(*void)(*instance)) == 40, "ON_SubD_FixedSizeHeap.m_f has unexpected offset % instead of 40", ((cast(*void)(*instance.m_f)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_f)) == 8, "ON_SubD_FixedSizeHeap.m_f has unexpected size % instead of 8", size_of(type_of(ON_SubD_FixedSizeHeap.m_f)));
        assert(((cast(*void)(*instance.m_f_capacity)) - cast(*void)(*instance)) == 48, "ON_SubD_FixedSizeHeap.m_f_capacity has unexpected offset % instead of 48", ((cast(*void)(*instance.m_f_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_f_capacity)) == 4, "ON_SubD_FixedSizeHeap.m_f_capacity has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_f_capacity)));
        assert(((cast(*void)(*instance.m_f_index)) - cast(*void)(*instance)) == 52, "ON_SubD_FixedSizeHeap.m_f_index has unexpected offset % instead of 52", ((cast(*void)(*instance.m_f_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_f_index)) == 4, "ON_SubD_FixedSizeHeap.m_f_index has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_f_index)));
        assert(((cast(*void)(*instance.m_p)) - cast(*void)(*instance)) == 56, "ON_SubD_FixedSizeHeap.m_p has unexpected offset % instead of 56", ((cast(*void)(*instance.m_p)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_p)) == 8, "ON_SubD_FixedSizeHeap.m_p has unexpected size % instead of 8", size_of(type_of(ON_SubD_FixedSizeHeap.m_p)));
        assert(((cast(*void)(*instance.m_p_capacity)) - cast(*void)(*instance)) == 64, "ON_SubD_FixedSizeHeap.m_p_capacity has unexpected offset % instead of 64", ((cast(*void)(*instance.m_p_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_p_capacity)) == 4, "ON_SubD_FixedSizeHeap.m_p_capacity has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_p_capacity)));
        assert(((cast(*void)(*instance.m_p_index)) - cast(*void)(*instance)) == 68, "ON_SubD_FixedSizeHeap.m_p_index has unexpected offset % instead of 68", ((cast(*void)(*instance.m_p_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_p_index)) == 4, "ON_SubD_FixedSizeHeap.m_p_index has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_p_index)));
        assert(((cast(*void)(*instance.m_hash_table)) - cast(*void)(*instance)) == 72, "ON_SubD_FixedSizeHeap.m_hash_table has unexpected offset % instead of 72", ((cast(*void)(*instance.m_hash_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_hash_table)) == 8, "ON_SubD_FixedSizeHeap.m_hash_table has unexpected size % instead of 8", size_of(type_of(ON_SubD_FixedSizeHeap.m_hash_table)));
        assert(((cast(*void)(*instance.m_hash_elements)) - cast(*void)(*instance)) == 80, "ON_SubD_FixedSizeHeap.m_hash_elements has unexpected offset % instead of 80", ((cast(*void)(*instance.m_hash_elements)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_hash_elements)) == 8, "ON_SubD_FixedSizeHeap.m_hash_elements has unexpected size % instead of 8", size_of(type_of(ON_SubD_FixedSizeHeap.m_hash_elements)));
        assert(((cast(*void)(*instance.m_h_capacity)) - cast(*void)(*instance)) == 88, "ON_SubD_FixedSizeHeap.m_h_capacity has unexpected offset % instead of 88", ((cast(*void)(*instance.m_h_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_h_capacity)) == 4, "ON_SubD_FixedSizeHeap.m_h_capacity has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_h_capacity)));
        assert(((cast(*void)(*instance.m_h_count)) - cast(*void)(*instance)) == 92, "ON_SubD_FixedSizeHeap.m_h_count has unexpected offset % instead of 92", ((cast(*void)(*instance.m_h_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubD_FixedSizeHeap.m_h_count)) == 4, "ON_SubD_FixedSizeHeap.m_h_count has unexpected size % instead of 4", size_of(type_of(ON_SubD_FixedSizeHeap.m_h_count)));
        assert(size_of(ON_SubD_FixedSizeHeap) == 96, "ON_SubD_FixedSizeHeap has size % instead of 96", size_of(ON_SubD_FixedSizeHeap));
    }

    {
        instance: ON_SubDEdgeChain;
        assert(((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)) == 0, "ON_SubDEdgeChain.m_subd_ref has unexpected offset % instead of 0", ((cast(*void)(*instance.m_subd_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_subd_ref)) == 16, "ON_SubDEdgeChain.m_subd_ref has unexpected size % instead of 16", size_of(type_of(ON_SubDEdgeChain.m_subd_ref)));
        assert(((cast(*void)(*instance.m_edge_chain)) - cast(*void)(*instance)) == 16, "ON_SubDEdgeChain.m_edge_chain has unexpected offset % instead of 16", ((cast(*void)(*instance.m_edge_chain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_edge_chain)) == 24, "ON_SubDEdgeChain.m_edge_chain has unexpected size % instead of 24", size_of(type_of(ON_SubDEdgeChain.m_edge_chain)));
        assert(((cast(*void)(*instance.m_persistent_subd_id)) - cast(*void)(*instance)) == 40, "ON_SubDEdgeChain.m_persistent_subd_id has unexpected offset % instead of 40", ((cast(*void)(*instance.m_persistent_subd_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_persistent_subd_id)) == 16, "ON_SubDEdgeChain.m_persistent_subd_id has unexpected size % instead of 16", size_of(type_of(ON_SubDEdgeChain.m_persistent_subd_id)));
        assert(((cast(*void)(*instance.m_persistent_edge_id)) - cast(*void)(*instance)) == 56, "ON_SubDEdgeChain.m_persistent_edge_id has unexpected offset % instead of 56", ((cast(*void)(*instance.m_persistent_edge_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_persistent_edge_id)) == 24, "ON_SubDEdgeChain.m_persistent_edge_id has unexpected size % instead of 24", size_of(type_of(ON_SubDEdgeChain.m_persistent_edge_id)));
        assert(((cast(*void)(*instance.m_persistent_edge_orientation)) - cast(*void)(*instance)) == 80, "ON_SubDEdgeChain.m_persistent_edge_orientation has unexpected offset % instead of 80", ((cast(*void)(*instance.m_persistent_edge_orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_persistent_edge_orientation)) == 24, "ON_SubDEdgeChain.m_persistent_edge_orientation has unexpected size % instead of 24", size_of(type_of(ON_SubDEdgeChain.m_persistent_edge_orientation)));
        assert(((cast(*void)(*instance.m_unique_tester)) - cast(*void)(*instance)) == 104, "ON_SubDEdgeChain.m_unique_tester has unexpected offset % instead of 104", ((cast(*void)(*instance.m_unique_tester)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_unique_tester)) == 16, "ON_SubDEdgeChain.m_unique_tester has unexpected size % instead of 16", size_of(type_of(ON_SubDEdgeChain.m_unique_tester)));
        assert(((cast(*void)(*instance.m_status_check_pass)) - cast(*void)(*instance)) == 120, "ON_SubDEdgeChain.m_status_check_pass has unexpected offset % instead of 120", ((cast(*void)(*instance.m_status_check_pass)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_status_check_pass)) == 2, "ON_SubDEdgeChain.m_status_check_pass has unexpected size % instead of 2", size_of(type_of(ON_SubDEdgeChain.m_status_check_pass)));
        assert(((cast(*void)(*instance.m_status_check_fail)) - cast(*void)(*instance)) == 122, "ON_SubDEdgeChain.m_status_check_fail has unexpected offset % instead of 122", ((cast(*void)(*instance.m_status_check_fail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_status_check_fail)) == 2, "ON_SubDEdgeChain.m_status_check_fail has unexpected size % instead of 2", size_of(type_of(ON_SubDEdgeChain.m_status_check_fail)));
        assert(((cast(*void)(*instance.m_bEnableStatusCheck)) - cast(*void)(*instance)) == 124, "ON_SubDEdgeChain.m_bEnableStatusCheck has unexpected offset % instead of 124", ((cast(*void)(*instance.m_bEnableStatusCheck)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDEdgeChain.m_bEnableStatusCheck)) == 1, "ON_SubDEdgeChain.m_bEnableStatusCheck has unexpected size % instead of 1", size_of(type_of(ON_SubDEdgeChain.m_bEnableStatusCheck)));
        assert(size_of(ON_SubDEdgeChain) == 128, "ON_SubDEdgeChain has size % instead of 128", size_of(ON_SubDEdgeChain));
    }

    {
        instance: ON_SubDComponentFilter;
        assert(((cast(*void)(*instance.m_bRejectVertices)) - cast(*void)(*instance)) == 0, "ON_SubDComponentFilter.m_bRejectVertices has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bRejectVertices)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_bRejectVertices)) == 1, "ON_SubDComponentFilter.m_bRejectVertices has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentFilter.m_bRejectVertices)));
        assert(((cast(*void)(*instance.m_vertex_topology_filter)) - cast(*void)(*instance)) == 1, "ON_SubDComponentFilter.m_vertex_topology_filter has unexpected offset % instead of 1", ((cast(*void)(*instance.m_vertex_topology_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_vertex_topology_filter)) == 1, "ON_SubDComponentFilter.m_vertex_topology_filter has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentFilter.m_vertex_topology_filter)));
        assert(((cast(*void)(*instance.m_vertex_tag_filter)) - cast(*void)(*instance)) == 2, "ON_SubDComponentFilter.m_vertex_tag_filter has unexpected offset % instead of 2", ((cast(*void)(*instance.m_vertex_tag_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_vertex_tag_filter)) == 4, "ON_SubDComponentFilter.m_vertex_tag_filter has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentFilter.m_vertex_tag_filter)));
        assert(((cast(*void)(*instance.m_bRejectEdges)) - cast(*void)(*instance)) == 6, "ON_SubDComponentFilter.m_bRejectEdges has unexpected offset % instead of 6", ((cast(*void)(*instance.m_bRejectEdges)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_bRejectEdges)) == 1, "ON_SubDComponentFilter.m_bRejectEdges has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentFilter.m_bRejectEdges)));
        assert(((cast(*void)(*instance.m_edge_topology_filter)) - cast(*void)(*instance)) == 7, "ON_SubDComponentFilter.m_edge_topology_filter has unexpected offset % instead of 7", ((cast(*void)(*instance.m_edge_topology_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_edge_topology_filter)) == 1, "ON_SubDComponentFilter.m_edge_topology_filter has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentFilter.m_edge_topology_filter)));
        assert(((cast(*void)(*instance.m_edge_tag_filter)) - cast(*void)(*instance)) == 8, "ON_SubDComponentFilter.m_edge_tag_filter has unexpected offset % instead of 8", ((cast(*void)(*instance.m_edge_tag_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_edge_tag_filter)) == 2, "ON_SubDComponentFilter.m_edge_tag_filter has unexpected size % instead of 2", size_of(type_of(ON_SubDComponentFilter.m_edge_tag_filter)));
        assert(((cast(*void)(*instance.m_bRejectFaces)) - cast(*void)(*instance)) == 10, "ON_SubDComponentFilter.m_bRejectFaces has unexpected offset % instead of 10", ((cast(*void)(*instance.m_bRejectFaces)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_bRejectFaces)) == 1, "ON_SubDComponentFilter.m_bRejectFaces has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentFilter.m_bRejectFaces)));
        assert(((cast(*void)(*instance.m_face_topology_filter)) - cast(*void)(*instance)) == 11, "ON_SubDComponentFilter.m_face_topology_filter has unexpected offset % instead of 11", ((cast(*void)(*instance.m_face_topology_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_face_topology_filter)) == 1, "ON_SubDComponentFilter.m_face_topology_filter has unexpected size % instead of 1", size_of(type_of(ON_SubDComponentFilter.m_face_topology_filter)));
        assert(((cast(*void)(*instance.m_minimum_face_edge_count)) - cast(*void)(*instance)) == 12, "ON_SubDComponentFilter.m_minimum_face_edge_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_minimum_face_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_minimum_face_edge_count)) == 4, "ON_SubDComponentFilter.m_minimum_face_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentFilter.m_minimum_face_edge_count)));
        assert(((cast(*void)(*instance.m_maximum_face_edge_count)) - cast(*void)(*instance)) == 16, "ON_SubDComponentFilter.m_maximum_face_edge_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_maximum_face_edge_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDComponentFilter.m_maximum_face_edge_count)) == 4, "ON_SubDComponentFilter.m_maximum_face_edge_count has unexpected size % instead of 4", size_of(type_of(ON_SubDComponentFilter.m_maximum_face_edge_count)));
        assert(size_of(ON_SubDComponentFilter) == 20, "ON_SubDComponentFilter has size % instead of 20", size_of(ON_SubDComponentFilter));
    }

    {
        instance: ON_SubDRTree;
        assert(((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)) == 72, "ON_SubDRTree.m_subd has unexpected offset % instead of 72", ((cast(*void)(*instance.m_subd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTree.m_subd)) == 32, "ON_SubDRTree.m_subd has unexpected size % instead of 32", size_of(type_of(ON_SubDRTree.m_subd)));
        assert(size_of(ON_SubDRTree) == 104, "ON_SubDRTree has size % instead of 104", size_of(ON_SubDRTree));
    }

    {
        instance: ON_SubDRTreeVertexFinder;
        assert(((cast(*void)(*instance.m_P)) - cast(*void)(*instance)) == 0, "ON_SubDRTreeVertexFinder.m_P has unexpected offset % instead of 0", ((cast(*void)(*instance.m_P)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_P)) == 24, "ON_SubDRTreeVertexFinder.m_P has unexpected size % instead of 24", size_of(type_of(ON_SubDRTreeVertexFinder.m_P)));
        assert(((cast(*void)(*instance.m_distance)) - cast(*void)(*instance)) == 24, "ON_SubDRTreeVertexFinder.m_distance has unexpected offset % instead of 24", ((cast(*void)(*instance.m_distance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_distance)) == 8, "ON_SubDRTreeVertexFinder.m_distance has unexpected size % instead of 8", size_of(type_of(ON_SubDRTreeVertexFinder.m_distance)));
        assert(((cast(*void)(*instance.m_v)) - cast(*void)(*instance)) == 32, "ON_SubDRTreeVertexFinder.m_v has unexpected offset % instead of 32", ((cast(*void)(*instance.m_v)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_v)) == 8, "ON_SubDRTreeVertexFinder.m_v has unexpected size % instead of 8", size_of(type_of(ON_SubDRTreeVertexFinder.m_v)));
        assert(((cast(*void)(*instance.m_bMarkFilterEnabled)) - cast(*void)(*instance)) == 40, "ON_SubDRTreeVertexFinder.m_bMarkFilterEnabled has unexpected offset % instead of 40", ((cast(*void)(*instance.m_bMarkFilterEnabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_bMarkFilterEnabled)) == 1, "ON_SubDRTreeVertexFinder.m_bMarkFilterEnabled has unexpected size % instead of 1", size_of(type_of(ON_SubDRTreeVertexFinder.m_bMarkFilterEnabled)));
        assert(((cast(*void)(*instance.m_bMarkFilter)) - cast(*void)(*instance)) == 41, "ON_SubDRTreeVertexFinder.m_bMarkFilter has unexpected offset % instead of 41", ((cast(*void)(*instance.m_bMarkFilter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_bMarkFilter)) == 1, "ON_SubDRTreeVertexFinder.m_bMarkFilter has unexpected size % instead of 1", size_of(type_of(ON_SubDRTreeVertexFinder.m_bMarkFilter)));
        assert(((cast(*void)(*instance.m_mark_bits_filter)) - cast(*void)(*instance)) == 42, "ON_SubDRTreeVertexFinder.m_mark_bits_filter has unexpected offset % instead of 42", ((cast(*void)(*instance.m_mark_bits_filter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_mark_bits_filter)) == 1, "ON_SubDRTreeVertexFinder.m_mark_bits_filter has unexpected size % instead of 1", size_of(type_of(ON_SubDRTreeVertexFinder.m_mark_bits_filter)));
        assert(((cast(*void)(*instance.m_mark_bits)) - cast(*void)(*instance)) == 43, "ON_SubDRTreeVertexFinder.m_mark_bits has unexpected offset % instead of 43", ((cast(*void)(*instance.m_mark_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_mark_bits)) == 1, "ON_SubDRTreeVertexFinder.m_mark_bits has unexpected size % instead of 1", size_of(type_of(ON_SubDRTreeVertexFinder.m_mark_bits)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 44, "ON_SubDRTreeVertexFinder.m_reserved2 has unexpected offset % instead of 44", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SubDRTreeVertexFinder.m_reserved2)) == 4, "ON_SubDRTreeVertexFinder.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_SubDRTreeVertexFinder.m_reserved2)));
        assert(size_of(ON_SubDRTreeVertexFinder) == 48, "ON_SubDRTreeVertexFinder has size % instead of 48", size_of(ON_SubDRTreeVertexFinder));
    }

    {
        instance: ON_XMLVariant;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLVariant._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLVariant._private)) == 8, "ON_XMLVariant._private has unexpected size % instead of 8", size_of(type_of(ON_XMLVariant._private)));
        assert(((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)) == 16, "ON_XMLVariant._PRIVATE has unexpected offset % instead of 16", ((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLVariant._PRIVATE)) == 232, "ON_XMLVariant._PRIVATE has unexpected size % instead of 232", size_of(type_of(ON_XMLVariant._PRIVATE)));
        assert(size_of(ON_XMLVariant) == 248, "ON_XMLVariant has size % instead of 248", size_of(ON_XMLVariant));
    }

    {
        instance: ON_XMLProperty;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLProperty._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLProperty._private)) == 8, "ON_XMLProperty._private has unexpected size % instead of 8", size_of(type_of(ON_XMLProperty._private)));
        assert(((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)) == 16, "ON_XMLProperty._PRIVATE has unexpected offset % instead of 16", ((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLProperty._PRIVATE)) == 88, "ON_XMLProperty._PRIVATE has unexpected size % instead of 88", size_of(type_of(ON_XMLProperty._PRIVATE)));
        assert(size_of(ON_XMLProperty) == 104, "ON_XMLProperty has size % instead of 104", size_of(ON_XMLProperty));
    }

    {
        instance: ON_XMLSegmentedStream;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLSegmentedStream._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLSegmentedStream._private)) == 8, "ON_XMLSegmentedStream._private has unexpected size % instead of 8", size_of(type_of(ON_XMLSegmentedStream._private)));
        assert(size_of(ON_XMLSegmentedStream) == 16, "ON_XMLSegmentedStream has size % instead of 16", size_of(ON_XMLSegmentedStream));
    }

    {
        instance: ON_XMLNode.CharacterCounts;
        assert(((cast(*void)(*instance._logical)) - cast(*void)(*instance)) == 0, "ON_XMLNode.CharacterCounts._logical has unexpected offset % instead of 0", ((cast(*void)(*instance._logical)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLNode.CharacterCounts._logical)) == 4, "ON_XMLNode.CharacterCounts._logical has unexpected size % instead of 4", size_of(type_of(ON_XMLNode.CharacterCounts._logical)));
        assert(((cast(*void)(*instance._physical)) - cast(*void)(*instance)) == 4, "ON_XMLNode.CharacterCounts._physical has unexpected offset % instead of 4", ((cast(*void)(*instance._physical)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLNode.CharacterCounts._physical)) == 4, "ON_XMLNode.CharacterCounts._physical has unexpected size % instead of 4", size_of(type_of(ON_XMLNode.CharacterCounts._physical)));
        assert(((cast(*void)(*instance._reserved)) - cast(*void)(*instance)) == 8, "ON_XMLNode.CharacterCounts._reserved has unexpected offset % instead of 8", ((cast(*void)(*instance._reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLNode.CharacterCounts._reserved)) == 8, "ON_XMLNode.CharacterCounts._reserved has unexpected size % instead of 8", size_of(type_of(ON_XMLNode.CharacterCounts._reserved)));
        assert(size_of(ON_XMLNode.CharacterCounts) == 16, "ON_XMLNode.CharacterCounts has size % instead of 16", size_of(ON_XMLNode.CharacterCounts));
    }

    {
        instance: ON_XMLNode.ChildIterator;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLNode.ChildIterator._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLNode.ChildIterator._private)) == 8, "ON_XMLNode.ChildIterator._private has unexpected size % instead of 8", size_of(type_of(ON_XMLNode.ChildIterator._private)));
        assert(size_of(ON_XMLNode.ChildIterator) == 16, "ON_XMLNode.ChildIterator has size % instead of 16", size_of(ON_XMLNode.ChildIterator));
    }

    {
        instance: ON_XMLNode.PropertyIterator;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLNode.PropertyIterator._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLNode.PropertyIterator._private)) == 8, "ON_XMLNode.PropertyIterator._private has unexpected size % instead of 8", size_of(type_of(ON_XMLNode.PropertyIterator._private)));
        assert(size_of(ON_XMLNode.PropertyIterator) == 16, "ON_XMLNode.PropertyIterator has size % instead of 16", size_of(ON_XMLNode.PropertyIterator));
    }

    {
        instance: ON_XMLNode;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLNode._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLNode._private)) == 8, "ON_XMLNode._private has unexpected size % instead of 8", size_of(type_of(ON_XMLNode._private)));
        assert(((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)) == 16, "ON_XMLNode._PRIVATE has unexpected offset % instead of 16", ((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLNode._PRIVATE)) == 216, "ON_XMLNode._PRIVATE has unexpected size % instead of 216", size_of(type_of(ON_XMLNode._PRIVATE)));
        assert(size_of(ON_XMLNode) == 232, "ON_XMLNode has size % instead of 232", size_of(ON_XMLNode));
    }

    {
        instance: ON_XMLRootNode;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 232, "ON_XMLRootNode._private has unexpected offset % instead of 232", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLRootNode._private)) == 8, "ON_XMLRootNode._private has unexpected size % instead of 8", size_of(type_of(ON_XMLRootNode._private)));
        assert(size_of(ON_XMLRootNode) == 240, "ON_XMLRootNode has size % instead of 240", size_of(ON_XMLRootNode));
    }

    {
        instance: ON_XMLUserData;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 200, "ON_XMLUserData._private has unexpected offset % instead of 200", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLUserData._private)) == 8, "ON_XMLUserData._private has unexpected size % instead of 8", size_of(type_of(ON_XMLUserData._private)));
        assert(((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)) == 208, "ON_XMLUserData._PRIVATE has unexpected offset % instead of 208", ((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLUserData._PRIVATE)) == 304, "ON_XMLUserData._PRIVATE has unexpected size % instead of 304", size_of(type_of(ON_XMLUserData._PRIVATE)));
        assert(size_of(ON_XMLUserData) == 512, "ON_XMLUserData has size % instead of 512", size_of(ON_XMLUserData));
    }

    {
        instance: ON_XMLParameters.CIterator;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLParameters.CIterator._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLParameters.CIterator._private)) == 8, "ON_XMLParameters.CIterator._private has unexpected size % instead of 8", size_of(type_of(ON_XMLParameters.CIterator._private)));
        assert(size_of(ON_XMLParameters.CIterator) == 16, "ON_XMLParameters.CIterator has size % instead of 16", size_of(ON_XMLParameters.CIterator));
    }

    {
        instance: ON_XMLParameters;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_XMLParameters._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLParameters._private)) == 8, "ON_XMLParameters._private has unexpected size % instead of 8", size_of(type_of(ON_XMLParameters._private)));
        assert(size_of(ON_XMLParameters) == 16, "ON_XMLParameters has size % instead of 16", size_of(ON_XMLParameters));
    }

    assert(size_of(ON_XMLParametersV8) == 16, "ON_XMLParametersV8 has size % instead of 16", size_of(ON_XMLParametersV8));

    {
        instance: ON_XMLParamBlock;
        assert(((cast(*void)(*instance._node)) - cast(*void)(*instance)) == 16, "ON_XMLParamBlock._node has unexpected offset % instead of 16", ((cast(*void)(*instance._node)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLParamBlock._node)) == 240, "ON_XMLParamBlock._node has unexpected size % instead of 240", size_of(type_of(ON_XMLParamBlock._node)));
        assert(((cast(*void)(*instance._reserved)) - cast(*void)(*instance)) == 256, "ON_XMLParamBlock._reserved has unexpected offset % instead of 256", ((cast(*void)(*instance._reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_XMLParamBlock._reserved)) == 8, "ON_XMLParamBlock._reserved has unexpected size % instead of 8", size_of(type_of(ON_XMLParamBlock._reserved)));
        assert(size_of(ON_XMLParamBlock) == 264, "ON_XMLParamBlock has size % instead of 264", size_of(ON_XMLParamBlock));
    }

    assert(size_of(ON_RdkUserData) == 512, "ON_RdkUserData has size % instead of 512", size_of(ON_RdkUserData));

    {
        instance: ON_RdkDocumentDefaults;
        assert(((cast(*void)(*instance._root)) - cast(*void)(*instance)) == 8, "ON_RdkDocumentDefaults._root has unexpected offset % instead of 8", ((cast(*void)(*instance._root)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RdkDocumentDefaults._root)) == 240, "ON_RdkDocumentDefaults._root has unexpected size % instead of 240", size_of(type_of(ON_RdkDocumentDefaults._root)));
        assert(((cast(*void)(*instance._vs)) - cast(*void)(*instance)) == 248, "ON_RdkDocumentDefaults._vs has unexpected offset % instead of 248", ((cast(*void)(*instance._vs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RdkDocumentDefaults._vs)) == 4, "ON_RdkDocumentDefaults._vs has unexpected size % instead of 4", size_of(type_of(ON_RdkDocumentDefaults._vs)));
        assert(((cast(*void)(*instance._major_version)) - cast(*void)(*instance)) == 252, "ON_RdkDocumentDefaults._major_version has unexpected offset % instead of 252", ((cast(*void)(*instance._major_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RdkDocumentDefaults._major_version)) == 4, "ON_RdkDocumentDefaults._major_version has unexpected size % instead of 4", size_of(type_of(ON_RdkDocumentDefaults._major_version)));
        assert(((cast(*void)(*instance._reserved)) - cast(*void)(*instance)) == 256, "ON_RdkDocumentDefaults._reserved has unexpected offset % instead of 256", ((cast(*void)(*instance._reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RdkDocumentDefaults._reserved)) == 8, "ON_RdkDocumentDefaults._reserved has unexpected size % instead of 8", size_of(type_of(ON_RdkDocumentDefaults._reserved)));
        assert(size_of(ON_RdkDocumentDefaults) == 264, "ON_RdkDocumentDefaults has size % instead of 264", size_of(ON_RdkDocumentDefaults));
    }

    {
        instance: ON_Decal;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_Decal._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Decal._impl)) == 8, "ON_Decal._impl has unexpected size % instead of 8", size_of(type_of(ON_Decal._impl)));
        assert(size_of(ON_Decal) == 16, "ON_Decal has size % instead of 16", size_of(ON_Decal));
    }

    {
        instance: ON_Bitmap;
        assert(((cast(*void)(*instance.m_file_reference)) - cast(*void)(*instance)) == 144, "ON_Bitmap.m_file_reference has unexpected offset % instead of 144", ((cast(*void)(*instance.m_file_reference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Bitmap.m_file_reference)) == 184, "ON_Bitmap.m_file_reference has unexpected size % instead of 184", size_of(type_of(ON_Bitmap.m_file_reference)));
        assert(size_of(ON_Bitmap) == 328, "ON_Bitmap has size % instead of 328", size_of(ON_Bitmap));
    }

    {
        instance: ON_WindowsBitmap;
        assert(((cast(*void)(*instance.m_bmi)) - cast(*void)(*instance)) == 328, "ON_WindowsBitmap.m_bmi has unexpected offset % instead of 328", ((cast(*void)(*instance.m_bmi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsBitmap.m_bmi)) == 8, "ON_WindowsBitmap.m_bmi has unexpected size % instead of 8", size_of(type_of(ON_WindowsBitmap.m_bmi)));
        assert(((cast(*void)(*instance.m_bits)) - cast(*void)(*instance)) == 336, "ON_WindowsBitmap.m_bits has unexpected offset % instead of 336", ((cast(*void)(*instance.m_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsBitmap.m_bits)) == 8, "ON_WindowsBitmap.m_bits has unexpected size % instead of 8", size_of(type_of(ON_WindowsBitmap.m_bits)));
        assert(((cast(*void)(*instance.m_bFreeBMI)) - cast(*void)(*instance)) == 344, "ON_WindowsBitmap.m_bFreeBMI has unexpected offset % instead of 344", ((cast(*void)(*instance.m_bFreeBMI)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsBitmap.m_bFreeBMI)) == 4, "ON_WindowsBitmap.m_bFreeBMI has unexpected size % instead of 4", size_of(type_of(ON_WindowsBitmap.m_bFreeBMI)));
        assert(size_of(ON_WindowsBitmap) == 352, "ON_WindowsBitmap has size % instead of 352", size_of(ON_WindowsBitmap));
    }

    assert(size_of(ON_WindowsBitmapEx) == 352, "ON_WindowsBitmapEx has size % instead of 352", size_of(ON_WindowsBitmapEx));

    {
        instance: ON_EmbeddedBitmap;
        assert(((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)) == 328, "ON_EmbeddedBitmap.m_buffer has unexpected offset % instead of 328", ((cast(*void)(*instance.m_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EmbeddedBitmap.m_buffer)) == 8, "ON_EmbeddedBitmap.m_buffer has unexpected size % instead of 8", size_of(type_of(ON_EmbeddedBitmap.m_buffer)));
        assert(((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)) == 336, "ON_EmbeddedBitmap.m_sizeof_buffer has unexpected offset % instead of 336", ((cast(*void)(*instance.m_sizeof_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EmbeddedBitmap.m_sizeof_buffer)) == 8, "ON_EmbeddedBitmap.m_sizeof_buffer has unexpected size % instead of 8", size_of(type_of(ON_EmbeddedBitmap.m_sizeof_buffer)));
        assert(((cast(*void)(*instance.m_managed_buffer)) - cast(*void)(*instance)) == 344, "ON_EmbeddedBitmap.m_managed_buffer has unexpected offset % instead of 344", ((cast(*void)(*instance.m_managed_buffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EmbeddedBitmap.m_managed_buffer)) == 1, "ON_EmbeddedBitmap.m_managed_buffer has unexpected size % instead of 1", size_of(type_of(ON_EmbeddedBitmap.m_managed_buffer)));
        assert(((cast(*void)(*instance.m_buffer_crc32)) - cast(*void)(*instance)) == 348, "ON_EmbeddedBitmap.m_buffer_crc32 has unexpected offset % instead of 348", ((cast(*void)(*instance.m_buffer_crc32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EmbeddedBitmap.m_buffer_crc32)) == 4, "ON_EmbeddedBitmap.m_buffer_crc32 has unexpected size % instead of 4", size_of(type_of(ON_EmbeddedBitmap.m_buffer_crc32)));
        assert(size_of(ON_EmbeddedBitmap) == 352, "ON_EmbeddedBitmap has size % instead of 352", size_of(ON_EmbeddedBitmap));
    }

    {
        instance: ON_ReferencedComponentSettings;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_ReferencedComponentSettings.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ReferencedComponentSettings.m_impl)) == 8, "ON_ReferencedComponentSettings.m_impl has unexpected size % instead of 8", size_of(type_of(ON_ReferencedComponentSettings.m_impl)));
        assert(size_of(ON_ReferencedComponentSettings) == 8, "ON_ReferencedComponentSettings has size % instead of 8", size_of(ON_ReferencedComponentSettings));
    }

    {
        instance: ON_InstanceDefinition;
        assert(((cast(*void)(*instance.m_object_uuid)) - cast(*void)(*instance)) == 144, "ON_InstanceDefinition.m_object_uuid has unexpected offset % instead of 144", ((cast(*void)(*instance.m_object_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_object_uuid)) == 24, "ON_InstanceDefinition.m_object_uuid has unexpected size % instead of 24", size_of(type_of(ON_InstanceDefinition.m_object_uuid)));
        assert(((cast(*void)(*instance.m_description)) - cast(*void)(*instance)) == 168, "ON_InstanceDefinition.m_description has unexpected offset % instead of 168", ((cast(*void)(*instance.m_description)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_description)) == 8, "ON_InstanceDefinition.m_description has unexpected size % instead of 8", size_of(type_of(ON_InstanceDefinition.m_description)));
        assert(((cast(*void)(*instance.m_url)) - cast(*void)(*instance)) == 176, "ON_InstanceDefinition.m_url has unexpected offset % instead of 176", ((cast(*void)(*instance.m_url)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_url)) == 8, "ON_InstanceDefinition.m_url has unexpected size % instead of 8", size_of(type_of(ON_InstanceDefinition.m_url)));
        assert(((cast(*void)(*instance.m_url_tag)) - cast(*void)(*instance)) == 184, "ON_InstanceDefinition.m_url_tag has unexpected offset % instead of 184", ((cast(*void)(*instance.m_url_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_url_tag)) == 8, "ON_InstanceDefinition.m_url_tag has unexpected size % instead of 8", size_of(type_of(ON_InstanceDefinition.m_url_tag)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 192, "ON_InstanceDefinition.m_bbox has unexpected offset % instead of 192", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_bbox)) == 48, "ON_InstanceDefinition.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_InstanceDefinition.m_bbox)));
        assert(((cast(*void)(*instance.m_us)) - cast(*void)(*instance)) == 240, "ON_InstanceDefinition.m_us has unexpected offset % instead of 240", ((cast(*void)(*instance.m_us)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_us)) == 24, "ON_InstanceDefinition.m_us has unexpected size % instead of 24", size_of(type_of(ON_InstanceDefinition.m_us)));
        assert(((cast(*void)(*instance.m_idef_update_type)) - cast(*void)(*instance)) == 264, "ON_InstanceDefinition.m_idef_update_type has unexpected offset % instead of 264", ((cast(*void)(*instance.m_idef_update_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_idef_update_type)) == 4, "ON_InstanceDefinition.m_idef_update_type has unexpected size % instead of 4", size_of(type_of(ON_InstanceDefinition.m_idef_update_type)));
        assert(((cast(*void)(*instance.m_bSkipNestedLinkedDefinitions)) - cast(*void)(*instance)) == 268, "ON_InstanceDefinition.m_bSkipNestedLinkedDefinitions has unexpected offset % instead of 268", ((cast(*void)(*instance.m_bSkipNestedLinkedDefinitions)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_bSkipNestedLinkedDefinitions)) == 1, "ON_InstanceDefinition.m_bSkipNestedLinkedDefinitions has unexpected size % instead of 1", size_of(type_of(ON_InstanceDefinition.m_bSkipNestedLinkedDefinitions)));
        assert(((cast(*void)(*instance.m_linked_file_reference)) - cast(*void)(*instance)) == 272, "ON_InstanceDefinition.m_linked_file_reference has unexpected offset % instead of 272", ((cast(*void)(*instance.m_linked_file_reference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_linked_file_reference)) == 184, "ON_InstanceDefinition.m_linked_file_reference has unexpected size % instead of 184", size_of(type_of(ON_InstanceDefinition.m_linked_file_reference)));
        assert(((cast(*void)(*instance.m_linked_file_V5_checksum)) - cast(*void)(*instance)) == 456, "ON_InstanceDefinition.m_linked_file_V5_checksum has unexpected offset % instead of 456", ((cast(*void)(*instance.m_linked_file_V5_checksum)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_linked_file_V5_checksum)) == 48, "ON_InstanceDefinition.m_linked_file_V5_checksum has unexpected size % instead of 48", size_of(type_of(ON_InstanceDefinition.m_linked_file_V5_checksum)));
        assert(((cast(*void)(*instance.m_linked_idef_component_settings)) - cast(*void)(*instance)) == 504, "ON_InstanceDefinition.m_linked_idef_component_settings has unexpected offset % instead of 504", ((cast(*void)(*instance.m_linked_idef_component_settings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_linked_idef_component_settings)) == 8, "ON_InstanceDefinition.m_linked_idef_component_settings has unexpected size % instead of 8", size_of(type_of(ON_InstanceDefinition.m_linked_idef_component_settings)));
        assert(((cast(*void)(*instance.m_linked_component_appearance)) - cast(*void)(*instance)) == 512, "ON_InstanceDefinition.m_linked_component_appearance has unexpected offset % instead of 512", ((cast(*void)(*instance.m_linked_component_appearance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_linked_component_appearance)) == 1, "ON_InstanceDefinition.m_linked_component_appearance has unexpected size % instead of 1", size_of(type_of(ON_InstanceDefinition.m_linked_component_appearance)));
        assert(((cast(*void)(*instance.m_geometry_content_hash)) - cast(*void)(*instance)) == 513, "ON_InstanceDefinition.m_geometry_content_hash has unexpected offset % instead of 513", ((cast(*void)(*instance.m_geometry_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_geometry_content_hash)) == 20, "ON_InstanceDefinition.m_geometry_content_hash has unexpected size % instead of 20", size_of(type_of(ON_InstanceDefinition.m_geometry_content_hash)));
        assert(((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)) == 533, "ON_InstanceDefinition.m_content_hash has unexpected offset % instead of 533", ((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_content_hash)) == 20, "ON_InstanceDefinition.m_content_hash has unexpected size % instead of 20", size_of(type_of(ON_InstanceDefinition.m_content_hash)));
        assert(((cast(*void)(*instance.m_reserved2A)) - cast(*void)(*instance)) == 553, "ON_InstanceDefinition.m_reserved2A has unexpected offset % instead of 553", ((cast(*void)(*instance.m_reserved2A)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_reserved2A)) == 1, "ON_InstanceDefinition.m_reserved2A has unexpected size % instead of 1", size_of(type_of(ON_InstanceDefinition.m_reserved2A)));
        assert(((cast(*void)(*instance.m_reserved2B)) - cast(*void)(*instance)) == 554, "ON_InstanceDefinition.m_reserved2B has unexpected offset % instead of 554", ((cast(*void)(*instance.m_reserved2B)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_reserved2B)) == 1, "ON_InstanceDefinition.m_reserved2B has unexpected size % instead of 1", size_of(type_of(ON_InstanceDefinition.m_reserved2B)));
        assert(((cast(*void)(*instance.m_reserved2C)) - cast(*void)(*instance)) == 555, "ON_InstanceDefinition.m_reserved2C has unexpected offset % instead of 555", ((cast(*void)(*instance.m_reserved2C)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_reserved2C)) == 1, "ON_InstanceDefinition.m_reserved2C has unexpected size % instead of 1", size_of(type_of(ON_InstanceDefinition.m_reserved2C)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 556, "ON_InstanceDefinition.m_reserved1 has unexpected offset % instead of 556", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_reserved1)) == 4, "ON_InstanceDefinition.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_InstanceDefinition.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved_ptr)) - cast(*void)(*instance)) == 560, "ON_InstanceDefinition.m_reserved_ptr has unexpected offset % instead of 560", ((cast(*void)(*instance.m_reserved_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceDefinition.m_reserved_ptr)) == 8, "ON_InstanceDefinition.m_reserved_ptr has unexpected size % instead of 8", size_of(type_of(ON_InstanceDefinition.m_reserved_ptr)));
        assert(size_of(ON_InstanceDefinition) == 568, "ON_InstanceDefinition has size % instead of 568", size_of(ON_InstanceDefinition));
    }

    {
        instance: ON_InstanceRef;
        assert(((cast(*void)(*instance.m_instance_definition_uuid)) - cast(*void)(*instance)) == 16, "ON_InstanceRef.m_instance_definition_uuid has unexpected offset % instead of 16", ((cast(*void)(*instance.m_instance_definition_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceRef.m_instance_definition_uuid)) == 16, "ON_InstanceRef.m_instance_definition_uuid has unexpected size % instead of 16", size_of(type_of(ON_InstanceRef.m_instance_definition_uuid)));
        assert(((cast(*void)(*instance.m_xform)) - cast(*void)(*instance)) == 32, "ON_InstanceRef.m_xform has unexpected offset % instead of 32", ((cast(*void)(*instance.m_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceRef.m_xform)) == 128, "ON_InstanceRef.m_xform has unexpected size % instead of 128", size_of(type_of(ON_InstanceRef.m_xform)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 160, "ON_InstanceRef.m_bbox has unexpected offset % instead of 160", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_InstanceRef.m_bbox)) == 48, "ON_InstanceRef.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_InstanceRef.m_bbox)));
        assert(size_of(ON_InstanceRef) == 208, "ON_InstanceRef has size % instead of 208", size_of(ON_InstanceRef));
    }

    {
        instance: ON_3dmRevisionHistory;
        assert(((cast(*void)(*instance.m_sCreatedBy)) - cast(*void)(*instance)) == 0, "ON_3dmRevisionHistory.m_sCreatedBy has unexpected offset % instead of 0", ((cast(*void)(*instance.m_sCreatedBy)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRevisionHistory.m_sCreatedBy)) == 8, "ON_3dmRevisionHistory.m_sCreatedBy has unexpected size % instead of 8", size_of(type_of(ON_3dmRevisionHistory.m_sCreatedBy)));
        assert(((cast(*void)(*instance.m_sLastEditedBy)) - cast(*void)(*instance)) == 8, "ON_3dmRevisionHistory.m_sLastEditedBy has unexpected offset % instead of 8", ((cast(*void)(*instance.m_sLastEditedBy)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRevisionHistory.m_sLastEditedBy)) == 8, "ON_3dmRevisionHistory.m_sLastEditedBy has unexpected size % instead of 8", size_of(type_of(ON_3dmRevisionHistory.m_sLastEditedBy)));
        assert(((cast(*void)(*instance.m_create_time)) - cast(*void)(*instance)) == 16, "ON_3dmRevisionHistory.m_create_time has unexpected offset % instead of 16", ((cast(*void)(*instance.m_create_time)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRevisionHistory.m_create_time)) == 36, "ON_3dmRevisionHistory.m_create_time has unexpected size % instead of 36", size_of(type_of(ON_3dmRevisionHistory.m_create_time)));
        assert(((cast(*void)(*instance.m_last_edit_time)) - cast(*void)(*instance)) == 52, "ON_3dmRevisionHistory.m_last_edit_time has unexpected offset % instead of 52", ((cast(*void)(*instance.m_last_edit_time)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRevisionHistory.m_last_edit_time)) == 36, "ON_3dmRevisionHistory.m_last_edit_time has unexpected size % instead of 36", size_of(type_of(ON_3dmRevisionHistory.m_last_edit_time)));
        assert(((cast(*void)(*instance.m_revision_count)) - cast(*void)(*instance)) == 88, "ON_3dmRevisionHistory.m_revision_count has unexpected offset % instead of 88", ((cast(*void)(*instance.m_revision_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRevisionHistory.m_revision_count)) == 4, "ON_3dmRevisionHistory.m_revision_count has unexpected size % instead of 4", size_of(type_of(ON_3dmRevisionHistory.m_revision_count)));
        assert(size_of(ON_3dmRevisionHistory) == 96, "ON_3dmRevisionHistory has size % instead of 96", size_of(ON_3dmRevisionHistory));
    }

    {
        instance: ON_3dmNotes;
        assert(((cast(*void)(*instance.m_notes)) - cast(*void)(*instance)) == 0, "ON_3dmNotes.m_notes has unexpected offset % instead of 0", ((cast(*void)(*instance.m_notes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmNotes.m_notes)) == 8, "ON_3dmNotes.m_notes has unexpected size % instead of 8", size_of(type_of(ON_3dmNotes.m_notes)));
        assert(((cast(*void)(*instance.m_bVisible)) - cast(*void)(*instance)) == 8, "ON_3dmNotes.m_bVisible has unexpected offset % instead of 8", ((cast(*void)(*instance.m_bVisible)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmNotes.m_bVisible)) == 1, "ON_3dmNotes.m_bVisible has unexpected size % instead of 1", size_of(type_of(ON_3dmNotes.m_bVisible)));
        assert(((cast(*void)(*instance.m_bHTML)) - cast(*void)(*instance)) == 9, "ON_3dmNotes.m_bHTML has unexpected offset % instead of 9", ((cast(*void)(*instance.m_bHTML)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmNotes.m_bHTML)) == 1, "ON_3dmNotes.m_bHTML has unexpected size % instead of 1", size_of(type_of(ON_3dmNotes.m_bHTML)));
        assert(((cast(*void)(*instance.m_window_left)) - cast(*void)(*instance)) == 12, "ON_3dmNotes.m_window_left has unexpected offset % instead of 12", ((cast(*void)(*instance.m_window_left)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmNotes.m_window_left)) == 4, "ON_3dmNotes.m_window_left has unexpected size % instead of 4", size_of(type_of(ON_3dmNotes.m_window_left)));
        assert(((cast(*void)(*instance.m_window_top)) - cast(*void)(*instance)) == 16, "ON_3dmNotes.m_window_top has unexpected offset % instead of 16", ((cast(*void)(*instance.m_window_top)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmNotes.m_window_top)) == 4, "ON_3dmNotes.m_window_top has unexpected size % instead of 4", size_of(type_of(ON_3dmNotes.m_window_top)));
        assert(((cast(*void)(*instance.m_window_right)) - cast(*void)(*instance)) == 20, "ON_3dmNotes.m_window_right has unexpected offset % instead of 20", ((cast(*void)(*instance.m_window_right)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmNotes.m_window_right)) == 4, "ON_3dmNotes.m_window_right has unexpected size % instead of 4", size_of(type_of(ON_3dmNotes.m_window_right)));
        assert(((cast(*void)(*instance.m_window_bottom)) - cast(*void)(*instance)) == 24, "ON_3dmNotes.m_window_bottom has unexpected offset % instead of 24", ((cast(*void)(*instance.m_window_bottom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmNotes.m_window_bottom)) == 4, "ON_3dmNotes.m_window_bottom has unexpected size % instead of 4", size_of(type_of(ON_3dmNotes.m_window_bottom)));
        assert(size_of(ON_3dmNotes) == 32, "ON_3dmNotes has size % instead of 32", size_of(ON_3dmNotes));
    }

    {
        instance: ON_3dmApplication;
        assert(((cast(*void)(*instance.m_application_name)) - cast(*void)(*instance)) == 0, "ON_3dmApplication.m_application_name has unexpected offset % instead of 0", ((cast(*void)(*instance.m_application_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmApplication.m_application_name)) == 8, "ON_3dmApplication.m_application_name has unexpected size % instead of 8", size_of(type_of(ON_3dmApplication.m_application_name)));
        assert(((cast(*void)(*instance.m_application_URL)) - cast(*void)(*instance)) == 8, "ON_3dmApplication.m_application_URL has unexpected offset % instead of 8", ((cast(*void)(*instance.m_application_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmApplication.m_application_URL)) == 8, "ON_3dmApplication.m_application_URL has unexpected size % instead of 8", size_of(type_of(ON_3dmApplication.m_application_URL)));
        assert(((cast(*void)(*instance.m_application_details)) - cast(*void)(*instance)) == 16, "ON_3dmApplication.m_application_details has unexpected offset % instead of 16", ((cast(*void)(*instance.m_application_details)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmApplication.m_application_details)) == 8, "ON_3dmApplication.m_application_details has unexpected size % instead of 8", size_of(type_of(ON_3dmApplication.m_application_details)));
        assert(size_of(ON_3dmApplication) == 24, "ON_3dmApplication has size % instead of 24", size_of(ON_3dmApplication));
    }

    {
        instance: ON_3dmProperties;
        assert(((cast(*void)(*instance.m_RevisionHistory)) - cast(*void)(*instance)) == 0, "ON_3dmProperties.m_RevisionHistory has unexpected offset % instead of 0", ((cast(*void)(*instance.m_RevisionHistory)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmProperties.m_RevisionHistory)) == 96, "ON_3dmProperties.m_RevisionHistory has unexpected size % instead of 96", size_of(type_of(ON_3dmProperties.m_RevisionHistory)));
        assert(((cast(*void)(*instance.m_Notes)) - cast(*void)(*instance)) == 96, "ON_3dmProperties.m_Notes has unexpected offset % instead of 96", ((cast(*void)(*instance.m_Notes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmProperties.m_Notes)) == 32, "ON_3dmProperties.m_Notes has unexpected size % instead of 32", size_of(type_of(ON_3dmProperties.m_Notes)));
        assert(((cast(*void)(*instance.m_PreviewImage)) - cast(*void)(*instance)) == 128, "ON_3dmProperties.m_PreviewImage has unexpected offset % instead of 128", ((cast(*void)(*instance.m_PreviewImage)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmProperties.m_PreviewImage)) == 352, "ON_3dmProperties.m_PreviewImage has unexpected size % instead of 352", size_of(type_of(ON_3dmProperties.m_PreviewImage)));
        assert(((cast(*void)(*instance.m_Application)) - cast(*void)(*instance)) == 480, "ON_3dmProperties.m_Application has unexpected offset % instead of 480", ((cast(*void)(*instance.m_Application)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmProperties.m_Application)) == 24, "ON_3dmProperties.m_Application has unexpected size % instead of 24", size_of(type_of(ON_3dmProperties.m_Application)));
        assert(((cast(*void)(*instance.m_3dmArchiveFullPathName)) - cast(*void)(*instance)) == 504, "ON_3dmProperties.m_3dmArchiveFullPathName has unexpected offset % instead of 504", ((cast(*void)(*instance.m_3dmArchiveFullPathName)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmProperties.m_3dmArchiveFullPathName)) == 8, "ON_3dmProperties.m_3dmArchiveFullPathName has unexpected size % instead of 8", size_of(type_of(ON_3dmProperties.m_3dmArchiveFullPathName)));
        assert(size_of(ON_3dmProperties) == 512, "ON_3dmProperties has size % instead of 512", size_of(ON_3dmProperties));
    }

    {
        instance: ON_3dmUnitsAndTolerances;
        assert(((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)) == 0, "ON_3dmUnitsAndTolerances.m_unit_system has unexpected offset % instead of 0", ((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmUnitsAndTolerances.m_unit_system)) == 24, "ON_3dmUnitsAndTolerances.m_unit_system has unexpected size % instead of 24", size_of(type_of(ON_3dmUnitsAndTolerances.m_unit_system)));
        assert(((cast(*void)(*instance.m_absolute_tolerance)) - cast(*void)(*instance)) == 24, "ON_3dmUnitsAndTolerances.m_absolute_tolerance has unexpected offset % instead of 24", ((cast(*void)(*instance.m_absolute_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmUnitsAndTolerances.m_absolute_tolerance)) == 8, "ON_3dmUnitsAndTolerances.m_absolute_tolerance has unexpected size % instead of 8", size_of(type_of(ON_3dmUnitsAndTolerances.m_absolute_tolerance)));
        assert(((cast(*void)(*instance.m_angle_tolerance)) - cast(*void)(*instance)) == 32, "ON_3dmUnitsAndTolerances.m_angle_tolerance has unexpected offset % instead of 32", ((cast(*void)(*instance.m_angle_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmUnitsAndTolerances.m_angle_tolerance)) == 8, "ON_3dmUnitsAndTolerances.m_angle_tolerance has unexpected size % instead of 8", size_of(type_of(ON_3dmUnitsAndTolerances.m_angle_tolerance)));
        assert(((cast(*void)(*instance.m_relative_tolerance)) - cast(*void)(*instance)) == 40, "ON_3dmUnitsAndTolerances.m_relative_tolerance has unexpected offset % instead of 40", ((cast(*void)(*instance.m_relative_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmUnitsAndTolerances.m_relative_tolerance)) == 8, "ON_3dmUnitsAndTolerances.m_relative_tolerance has unexpected size % instead of 8", size_of(type_of(ON_3dmUnitsAndTolerances.m_relative_tolerance)));
        assert(((cast(*void)(*instance.m_distance_display_mode)) - cast(*void)(*instance)) == 48, "ON_3dmUnitsAndTolerances.m_distance_display_mode has unexpected offset % instead of 48", ((cast(*void)(*instance.m_distance_display_mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmUnitsAndTolerances.m_distance_display_mode)) == 1, "ON_3dmUnitsAndTolerances.m_distance_display_mode has unexpected size % instead of 1", size_of(type_of(ON_3dmUnitsAndTolerances.m_distance_display_mode)));
        assert(((cast(*void)(*instance.m_distance_display_precision)) - cast(*void)(*instance)) == 52, "ON_3dmUnitsAndTolerances.m_distance_display_precision has unexpected offset % instead of 52", ((cast(*void)(*instance.m_distance_display_precision)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmUnitsAndTolerances.m_distance_display_precision)) == 4, "ON_3dmUnitsAndTolerances.m_distance_display_precision has unexpected size % instead of 4", size_of(type_of(ON_3dmUnitsAndTolerances.m_distance_display_precision)));
        assert(size_of(ON_3dmUnitsAndTolerances) == 56, "ON_3dmUnitsAndTolerances has size % instead of 56", size_of(ON_3dmUnitsAndTolerances));
    }

    {
        instance: ON_3dmAnnotationSettings;
        assert(((cast(*void)(*instance.m_dimscale)) - cast(*void)(*instance)) == 0, "ON_3dmAnnotationSettings.m_dimscale has unexpected offset % instead of 0", ((cast(*void)(*instance.m_dimscale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_dimscale)) == 8, "ON_3dmAnnotationSettings.m_dimscale has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_dimscale)));
        assert(((cast(*void)(*instance.m_textheight)) - cast(*void)(*instance)) == 8, "ON_3dmAnnotationSettings.m_textheight has unexpected offset % instead of 8", ((cast(*void)(*instance.m_textheight)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_textheight)) == 8, "ON_3dmAnnotationSettings.m_textheight has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_textheight)));
        assert(((cast(*void)(*instance.m_dimexe)) - cast(*void)(*instance)) == 16, "ON_3dmAnnotationSettings.m_dimexe has unexpected offset % instead of 16", ((cast(*void)(*instance.m_dimexe)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_dimexe)) == 8, "ON_3dmAnnotationSettings.m_dimexe has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_dimexe)));
        assert(((cast(*void)(*instance.m_dimexo)) - cast(*void)(*instance)) == 24, "ON_3dmAnnotationSettings.m_dimexo has unexpected offset % instead of 24", ((cast(*void)(*instance.m_dimexo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_dimexo)) == 8, "ON_3dmAnnotationSettings.m_dimexo has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_dimexo)));
        assert(((cast(*void)(*instance.m_arrowlength)) - cast(*void)(*instance)) == 32, "ON_3dmAnnotationSettings.m_arrowlength has unexpected offset % instead of 32", ((cast(*void)(*instance.m_arrowlength)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_arrowlength)) == 8, "ON_3dmAnnotationSettings.m_arrowlength has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_arrowlength)));
        assert(((cast(*void)(*instance.m_arrowwidth)) - cast(*void)(*instance)) == 40, "ON_3dmAnnotationSettings.m_arrowwidth has unexpected offset % instead of 40", ((cast(*void)(*instance.m_arrowwidth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_arrowwidth)) == 8, "ON_3dmAnnotationSettings.m_arrowwidth has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_arrowwidth)));
        assert(((cast(*void)(*instance.m_centermark)) - cast(*void)(*instance)) == 48, "ON_3dmAnnotationSettings.m_centermark has unexpected offset % instead of 48", ((cast(*void)(*instance.m_centermark)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_centermark)) == 8, "ON_3dmAnnotationSettings.m_centermark has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_centermark)));
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 56, "ON_3dmAnnotationSettings.m_private has unexpected offset % instead of 56", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_private)) == 8, "ON_3dmAnnotationSettings.m_private has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_private)));
        assert(((cast(*void)(*instance.m_b_V5_EnableAnnotationScaling)) - cast(*void)(*instance)) == 64, "ON_3dmAnnotationSettings.m_b_V5_EnableAnnotationScaling has unexpected offset % instead of 64", ((cast(*void)(*instance.m_b_V5_EnableAnnotationScaling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_b_V5_EnableAnnotationScaling)) == 1, "ON_3dmAnnotationSettings.m_b_V5_EnableAnnotationScaling has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_b_V5_EnableAnnotationScaling)));
        assert(((cast(*void)(*instance.m_bEnableModelSpaceAnnotationScaling)) - cast(*void)(*instance)) == 65, "ON_3dmAnnotationSettings.m_bEnableModelSpaceAnnotationScaling has unexpected offset % instead of 65", ((cast(*void)(*instance.m_bEnableModelSpaceAnnotationScaling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_bEnableModelSpaceAnnotationScaling)) == 1, "ON_3dmAnnotationSettings.m_bEnableModelSpaceAnnotationScaling has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_bEnableModelSpaceAnnotationScaling)));
        assert(((cast(*void)(*instance.m_bEnableLayoutSpaceAnnotationScaling)) - cast(*void)(*instance)) == 66, "ON_3dmAnnotationSettings.m_bEnableLayoutSpaceAnnotationScaling has unexpected offset % instead of 66", ((cast(*void)(*instance.m_bEnableLayoutSpaceAnnotationScaling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_bEnableLayoutSpaceAnnotationScaling)) == 1, "ON_3dmAnnotationSettings.m_bEnableLayoutSpaceAnnotationScaling has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_bEnableLayoutSpaceAnnotationScaling)));
        assert(((cast(*void)(*instance.m_bEnableHatchScaling)) - cast(*void)(*instance)) == 67, "ON_3dmAnnotationSettings.m_bEnableHatchScaling has unexpected offset % instead of 67", ((cast(*void)(*instance.m_bEnableHatchScaling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_bEnableHatchScaling)) == 1, "ON_3dmAnnotationSettings.m_bEnableHatchScaling has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_bEnableHatchScaling)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 68, "ON_3dmAnnotationSettings.m_reserved1 has unexpected offset % instead of 68", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_reserved1)) == 4, "ON_3dmAnnotationSettings.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_3dmAnnotationSettings.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 72, "ON_3dmAnnotationSettings.m_reserved2 has unexpected offset % instead of 72", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_reserved2)) == 1, "ON_3dmAnnotationSettings.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 73, "ON_3dmAnnotationSettings.m_reserved3 has unexpected offset % instead of 73", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_reserved3)) == 1, "ON_3dmAnnotationSettings.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 74, "ON_3dmAnnotationSettings.m_reserved4 has unexpected offset % instead of 74", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_reserved4)) == 1, "ON_3dmAnnotationSettings.m_reserved4 has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_reserved4)));
        assert(((cast(*void)(*instance.m_dimunits)) - cast(*void)(*instance)) == 75, "ON_3dmAnnotationSettings.m_dimunits has unexpected offset % instead of 75", ((cast(*void)(*instance.m_dimunits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_dimunits)) == 1, "ON_3dmAnnotationSettings.m_dimunits has unexpected size % instead of 1", size_of(type_of(ON_3dmAnnotationSettings.m_dimunits)));
        assert(((cast(*void)(*instance.m_arrowtype)) - cast(*void)(*instance)) == 76, "ON_3dmAnnotationSettings.m_arrowtype has unexpected offset % instead of 76", ((cast(*void)(*instance.m_arrowtype)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_arrowtype)) == 4, "ON_3dmAnnotationSettings.m_arrowtype has unexpected size % instead of 4", size_of(type_of(ON_3dmAnnotationSettings.m_arrowtype)));
        assert(((cast(*void)(*instance.m_angularunits)) - cast(*void)(*instance)) == 80, "ON_3dmAnnotationSettings.m_angularunits has unexpected offset % instead of 80", ((cast(*void)(*instance.m_angularunits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_angularunits)) == 4, "ON_3dmAnnotationSettings.m_angularunits has unexpected size % instead of 4", size_of(type_of(ON_3dmAnnotationSettings.m_angularunits)));
        assert(((cast(*void)(*instance.m_lengthformat)) - cast(*void)(*instance)) == 84, "ON_3dmAnnotationSettings.m_lengthformat has unexpected offset % instead of 84", ((cast(*void)(*instance.m_lengthformat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_lengthformat)) == 4, "ON_3dmAnnotationSettings.m_lengthformat has unexpected size % instead of 4", size_of(type_of(ON_3dmAnnotationSettings.m_lengthformat)));
        assert(((cast(*void)(*instance.m_angleformat)) - cast(*void)(*instance)) == 88, "ON_3dmAnnotationSettings.m_angleformat has unexpected offset % instead of 88", ((cast(*void)(*instance.m_angleformat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_angleformat)) == 4, "ON_3dmAnnotationSettings.m_angleformat has unexpected size % instead of 4", size_of(type_of(ON_3dmAnnotationSettings.m_angleformat)));
        assert(((cast(*void)(*instance.m_resolution)) - cast(*void)(*instance)) == 92, "ON_3dmAnnotationSettings.m_resolution has unexpected offset % instead of 92", ((cast(*void)(*instance.m_resolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_resolution)) == 4, "ON_3dmAnnotationSettings.m_resolution has unexpected size % instead of 4", size_of(type_of(ON_3dmAnnotationSettings.m_resolution)));
        assert(((cast(*void)(*instance.m_facename)) - cast(*void)(*instance)) == 96, "ON_3dmAnnotationSettings.m_facename has unexpected offset % instead of 96", ((cast(*void)(*instance.m_facename)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnnotationSettings.m_facename)) == 8, "ON_3dmAnnotationSettings.m_facename has unexpected size % instead of 8", size_of(type_of(ON_3dmAnnotationSettings.m_facename)));
        assert(size_of(ON_3dmAnnotationSettings) == 104, "ON_3dmAnnotationSettings has size % instead of 104", size_of(ON_3dmAnnotationSettings));
    }

    {
        instance: ON_3dmConstructionPlaneGridDefaults;
        assert(((cast(*void)(*instance.m_grid_spacing)) - cast(*void)(*instance)) == 0, "ON_3dmConstructionPlaneGridDefaults.m_grid_spacing has unexpected offset % instead of 0", ((cast(*void)(*instance.m_grid_spacing)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_grid_spacing)) == 8, "ON_3dmConstructionPlaneGridDefaults.m_grid_spacing has unexpected size % instead of 8", size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_grid_spacing)));
        assert(((cast(*void)(*instance.m_snap_spacing)) - cast(*void)(*instance)) == 8, "ON_3dmConstructionPlaneGridDefaults.m_snap_spacing has unexpected offset % instead of 8", ((cast(*void)(*instance.m_snap_spacing)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_snap_spacing)) == 8, "ON_3dmConstructionPlaneGridDefaults.m_snap_spacing has unexpected size % instead of 8", size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_snap_spacing)));
        assert(((cast(*void)(*instance.m_grid_line_count)) - cast(*void)(*instance)) == 16, "ON_3dmConstructionPlaneGridDefaults.m_grid_line_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_grid_line_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_grid_line_count)) == 4, "ON_3dmConstructionPlaneGridDefaults.m_grid_line_count has unexpected size % instead of 4", size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_grid_line_count)));
        assert(((cast(*void)(*instance.m_grid_thick_frequency)) - cast(*void)(*instance)) == 20, "ON_3dmConstructionPlaneGridDefaults.m_grid_thick_frequency has unexpected offset % instead of 20", ((cast(*void)(*instance.m_grid_thick_frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_grid_thick_frequency)) == 4, "ON_3dmConstructionPlaneGridDefaults.m_grid_thick_frequency has unexpected size % instead of 4", size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_grid_thick_frequency)));
        assert(((cast(*void)(*instance.m_bShowGrid)) - cast(*void)(*instance)) == 24, "ON_3dmConstructionPlaneGridDefaults.m_bShowGrid has unexpected offset % instead of 24", ((cast(*void)(*instance.m_bShowGrid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_bShowGrid)) == 1, "ON_3dmConstructionPlaneGridDefaults.m_bShowGrid has unexpected size % instead of 1", size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_bShowGrid)));
        assert(((cast(*void)(*instance.m_bShowGridAxes)) - cast(*void)(*instance)) == 25, "ON_3dmConstructionPlaneGridDefaults.m_bShowGridAxes has unexpected offset % instead of 25", ((cast(*void)(*instance.m_bShowGridAxes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_bShowGridAxes)) == 1, "ON_3dmConstructionPlaneGridDefaults.m_bShowGridAxes has unexpected size % instead of 1", size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_bShowGridAxes)));
        assert(((cast(*void)(*instance.m_bShowWorldAxes)) - cast(*void)(*instance)) == 26, "ON_3dmConstructionPlaneGridDefaults.m_bShowWorldAxes has unexpected offset % instead of 26", ((cast(*void)(*instance.m_bShowWorldAxes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_bShowWorldAxes)) == 1, "ON_3dmConstructionPlaneGridDefaults.m_bShowWorldAxes has unexpected size % instead of 1", size_of(type_of(ON_3dmConstructionPlaneGridDefaults.m_bShowWorldAxes)));
        assert(size_of(ON_3dmConstructionPlaneGridDefaults) == 32, "ON_3dmConstructionPlaneGridDefaults has size % instead of 32", size_of(ON_3dmConstructionPlaneGridDefaults));
    }

    {
        instance: ON_3dmConstructionPlane;
        assert(((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)) == 0, "ON_3dmConstructionPlane.m_plane has unexpected offset % instead of 0", ((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlane.m_plane)) == 128, "ON_3dmConstructionPlane.m_plane has unexpected size % instead of 128", size_of(type_of(ON_3dmConstructionPlane.m_plane)));
        assert(((cast(*void)(*instance.m_grid_spacing)) - cast(*void)(*instance)) == 128, "ON_3dmConstructionPlane.m_grid_spacing has unexpected offset % instead of 128", ((cast(*void)(*instance.m_grid_spacing)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlane.m_grid_spacing)) == 8, "ON_3dmConstructionPlane.m_grid_spacing has unexpected size % instead of 8", size_of(type_of(ON_3dmConstructionPlane.m_grid_spacing)));
        assert(((cast(*void)(*instance.m_snap_spacing)) - cast(*void)(*instance)) == 136, "ON_3dmConstructionPlane.m_snap_spacing has unexpected offset % instead of 136", ((cast(*void)(*instance.m_snap_spacing)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlane.m_snap_spacing)) == 8, "ON_3dmConstructionPlane.m_snap_spacing has unexpected size % instead of 8", size_of(type_of(ON_3dmConstructionPlane.m_snap_spacing)));
        assert(((cast(*void)(*instance.m_grid_line_count)) - cast(*void)(*instance)) == 144, "ON_3dmConstructionPlane.m_grid_line_count has unexpected offset % instead of 144", ((cast(*void)(*instance.m_grid_line_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlane.m_grid_line_count)) == 4, "ON_3dmConstructionPlane.m_grid_line_count has unexpected size % instead of 4", size_of(type_of(ON_3dmConstructionPlane.m_grid_line_count)));
        assert(((cast(*void)(*instance.m_grid_thick_frequency)) - cast(*void)(*instance)) == 148, "ON_3dmConstructionPlane.m_grid_thick_frequency has unexpected offset % instead of 148", ((cast(*void)(*instance.m_grid_thick_frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlane.m_grid_thick_frequency)) == 4, "ON_3dmConstructionPlane.m_grid_thick_frequency has unexpected size % instead of 4", size_of(type_of(ON_3dmConstructionPlane.m_grid_thick_frequency)));
        assert(((cast(*void)(*instance.m_bDepthBuffer)) - cast(*void)(*instance)) == 152, "ON_3dmConstructionPlane.m_bDepthBuffer has unexpected offset % instead of 152", ((cast(*void)(*instance.m_bDepthBuffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlane.m_bDepthBuffer)) == 1, "ON_3dmConstructionPlane.m_bDepthBuffer has unexpected size % instead of 1", size_of(type_of(ON_3dmConstructionPlane.m_bDepthBuffer)));
        assert(((cast(*void)(*instance.m_name)) - cast(*void)(*instance)) == 160, "ON_3dmConstructionPlane.m_name has unexpected offset % instead of 160", ((cast(*void)(*instance.m_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmConstructionPlane.m_name)) == 8, "ON_3dmConstructionPlane.m_name has unexpected size % instead of 8", size_of(type_of(ON_3dmConstructionPlane.m_name)));
        assert(size_of(ON_3dmConstructionPlane) == 168, "ON_3dmConstructionPlane has size % instead of 168", size_of(ON_3dmConstructionPlane));
    }

    {
        instance: ON_3dmViewPosition;
        assert(((cast(*void)(*instance.m_wnd_left)) - cast(*void)(*instance)) == 0, "ON_3dmViewPosition.m_wnd_left has unexpected offset % instead of 0", ((cast(*void)(*instance.m_wnd_left)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_wnd_left)) == 8, "ON_3dmViewPosition.m_wnd_left has unexpected size % instead of 8", size_of(type_of(ON_3dmViewPosition.m_wnd_left)));
        assert(((cast(*void)(*instance.m_wnd_right)) - cast(*void)(*instance)) == 8, "ON_3dmViewPosition.m_wnd_right has unexpected offset % instead of 8", ((cast(*void)(*instance.m_wnd_right)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_wnd_right)) == 8, "ON_3dmViewPosition.m_wnd_right has unexpected size % instead of 8", size_of(type_of(ON_3dmViewPosition.m_wnd_right)));
        assert(((cast(*void)(*instance.m_wnd_top)) - cast(*void)(*instance)) == 16, "ON_3dmViewPosition.m_wnd_top has unexpected offset % instead of 16", ((cast(*void)(*instance.m_wnd_top)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_wnd_top)) == 8, "ON_3dmViewPosition.m_wnd_top has unexpected size % instead of 8", size_of(type_of(ON_3dmViewPosition.m_wnd_top)));
        assert(((cast(*void)(*instance.m_wnd_bottom)) - cast(*void)(*instance)) == 24, "ON_3dmViewPosition.m_wnd_bottom has unexpected offset % instead of 24", ((cast(*void)(*instance.m_wnd_bottom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_wnd_bottom)) == 8, "ON_3dmViewPosition.m_wnd_bottom has unexpected size % instead of 8", size_of(type_of(ON_3dmViewPosition.m_wnd_bottom)));
        assert(((cast(*void)(*instance.m_bMaximized)) - cast(*void)(*instance)) == 32, "ON_3dmViewPosition.m_bMaximized has unexpected offset % instead of 32", ((cast(*void)(*instance.m_bMaximized)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_bMaximized)) == 1, "ON_3dmViewPosition.m_bMaximized has unexpected size % instead of 1", size_of(type_of(ON_3dmViewPosition.m_bMaximized)));
        assert(((cast(*void)(*instance.m_floating_viewport)) - cast(*void)(*instance)) == 33, "ON_3dmViewPosition.m_floating_viewport has unexpected offset % instead of 33", ((cast(*void)(*instance.m_floating_viewport)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_floating_viewport)) == 1, "ON_3dmViewPosition.m_floating_viewport has unexpected size % instead of 1", size_of(type_of(ON_3dmViewPosition.m_floating_viewport)));
        assert(((cast(*void)(*instance.m_reserved_1)) - cast(*void)(*instance)) == 34, "ON_3dmViewPosition.m_reserved_1 has unexpected offset % instead of 34", ((cast(*void)(*instance.m_reserved_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_reserved_1)) == 1, "ON_3dmViewPosition.m_reserved_1 has unexpected size % instead of 1", size_of(type_of(ON_3dmViewPosition.m_reserved_1)));
        assert(((cast(*void)(*instance.m_reserved_2)) - cast(*void)(*instance)) == 35, "ON_3dmViewPosition.m_reserved_2 has unexpected offset % instead of 35", ((cast(*void)(*instance.m_reserved_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_reserved_2)) == 1, "ON_3dmViewPosition.m_reserved_2 has unexpected size % instead of 1", size_of(type_of(ON_3dmViewPosition.m_reserved_2)));
        assert(((cast(*void)(*instance.m_reserved_3)) - cast(*void)(*instance)) == 36, "ON_3dmViewPosition.m_reserved_3 has unexpected offset % instead of 36", ((cast(*void)(*instance.m_reserved_3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewPosition.m_reserved_3)) == 1, "ON_3dmViewPosition.m_reserved_3 has unexpected size % instead of 1", size_of(type_of(ON_3dmViewPosition.m_reserved_3)));
        assert(size_of(ON_3dmViewPosition) == 40, "ON_3dmViewPosition has size % instead of 40", size_of(ON_3dmViewPosition));
    }

    {
        instance: ON_3dmViewTraceImage;
        assert(((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)) == 0, "ON_3dmViewTraceImage.m_plane has unexpected offset % instead of 0", ((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewTraceImage.m_plane)) == 128, "ON_3dmViewTraceImage.m_plane has unexpected size % instead of 128", size_of(type_of(ON_3dmViewTraceImage.m_plane)));
        assert(((cast(*void)(*instance.m_width)) - cast(*void)(*instance)) == 128, "ON_3dmViewTraceImage.m_width has unexpected offset % instead of 128", ((cast(*void)(*instance.m_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewTraceImage.m_width)) == 8, "ON_3dmViewTraceImage.m_width has unexpected size % instead of 8", size_of(type_of(ON_3dmViewTraceImage.m_width)));
        assert(((cast(*void)(*instance.m_height)) - cast(*void)(*instance)) == 136, "ON_3dmViewTraceImage.m_height has unexpected offset % instead of 136", ((cast(*void)(*instance.m_height)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewTraceImage.m_height)) == 8, "ON_3dmViewTraceImage.m_height has unexpected size % instead of 8", size_of(type_of(ON_3dmViewTraceImage.m_height)));
        assert(((cast(*void)(*instance.m_image_file_reference)) - cast(*void)(*instance)) == 144, "ON_3dmViewTraceImage.m_image_file_reference has unexpected offset % instead of 144", ((cast(*void)(*instance.m_image_file_reference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewTraceImage.m_image_file_reference)) == 184, "ON_3dmViewTraceImage.m_image_file_reference has unexpected size % instead of 184", size_of(type_of(ON_3dmViewTraceImage.m_image_file_reference)));
        assert(((cast(*void)(*instance.m_bGrayScale)) - cast(*void)(*instance)) == 328, "ON_3dmViewTraceImage.m_bGrayScale has unexpected offset % instead of 328", ((cast(*void)(*instance.m_bGrayScale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewTraceImage.m_bGrayScale)) == 1, "ON_3dmViewTraceImage.m_bGrayScale has unexpected size % instead of 1", size_of(type_of(ON_3dmViewTraceImage.m_bGrayScale)));
        assert(((cast(*void)(*instance.m_bHidden)) - cast(*void)(*instance)) == 329, "ON_3dmViewTraceImage.m_bHidden has unexpected offset % instead of 329", ((cast(*void)(*instance.m_bHidden)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewTraceImage.m_bHidden)) == 1, "ON_3dmViewTraceImage.m_bHidden has unexpected size % instead of 1", size_of(type_of(ON_3dmViewTraceImage.m_bHidden)));
        assert(((cast(*void)(*instance.m_bFiltered)) - cast(*void)(*instance)) == 330, "ON_3dmViewTraceImage.m_bFiltered has unexpected offset % instead of 330", ((cast(*void)(*instance.m_bFiltered)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmViewTraceImage.m_bFiltered)) == 1, "ON_3dmViewTraceImage.m_bFiltered has unexpected size % instead of 1", size_of(type_of(ON_3dmViewTraceImage.m_bFiltered)));
        assert(size_of(ON_3dmViewTraceImage) == 336, "ON_3dmViewTraceImage has size % instead of 336", size_of(ON_3dmViewTraceImage));
    }

    {
        instance: ON_3dmWallpaperImage;
        assert(((cast(*void)(*instance.m_image_file_reference)) - cast(*void)(*instance)) == 0, "ON_3dmWallpaperImage.m_image_file_reference has unexpected offset % instead of 0", ((cast(*void)(*instance.m_image_file_reference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmWallpaperImage.m_image_file_reference)) == 184, "ON_3dmWallpaperImage.m_image_file_reference has unexpected size % instead of 184", size_of(type_of(ON_3dmWallpaperImage.m_image_file_reference)));
        assert(((cast(*void)(*instance.m_bGrayScale)) - cast(*void)(*instance)) == 184, "ON_3dmWallpaperImage.m_bGrayScale has unexpected offset % instead of 184", ((cast(*void)(*instance.m_bGrayScale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmWallpaperImage.m_bGrayScale)) == 1, "ON_3dmWallpaperImage.m_bGrayScale has unexpected size % instead of 1", size_of(type_of(ON_3dmWallpaperImage.m_bGrayScale)));
        assert(((cast(*void)(*instance.m_bHidden)) - cast(*void)(*instance)) == 185, "ON_3dmWallpaperImage.m_bHidden has unexpected offset % instead of 185", ((cast(*void)(*instance.m_bHidden)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmWallpaperImage.m_bHidden)) == 1, "ON_3dmWallpaperImage.m_bHidden has unexpected size % instead of 1", size_of(type_of(ON_3dmWallpaperImage.m_bHidden)));
        assert(size_of(ON_3dmWallpaperImage) == 192, "ON_3dmWallpaperImage has size % instead of 192", size_of(ON_3dmWallpaperImage));
    }

    {
        instance: ON_3dmPageSettings;
        assert(((cast(*void)(*instance.m_page_number)) - cast(*void)(*instance)) == 0, "ON_3dmPageSettings.m_page_number has unexpected offset % instead of 0", ((cast(*void)(*instance.m_page_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_page_number)) == 4, "ON_3dmPageSettings.m_page_number has unexpected size % instead of 4", size_of(type_of(ON_3dmPageSettings.m_page_number)));
        assert(((cast(*void)(*instance.m_width_mm)) - cast(*void)(*instance)) == 8, "ON_3dmPageSettings.m_width_mm has unexpected offset % instead of 8", ((cast(*void)(*instance.m_width_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_width_mm)) == 8, "ON_3dmPageSettings.m_width_mm has unexpected size % instead of 8", size_of(type_of(ON_3dmPageSettings.m_width_mm)));
        assert(((cast(*void)(*instance.m_height_mm)) - cast(*void)(*instance)) == 16, "ON_3dmPageSettings.m_height_mm has unexpected offset % instead of 16", ((cast(*void)(*instance.m_height_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_height_mm)) == 8, "ON_3dmPageSettings.m_height_mm has unexpected size % instead of 8", size_of(type_of(ON_3dmPageSettings.m_height_mm)));
        assert(((cast(*void)(*instance.m_left_margin_mm)) - cast(*void)(*instance)) == 24, "ON_3dmPageSettings.m_left_margin_mm has unexpected offset % instead of 24", ((cast(*void)(*instance.m_left_margin_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_left_margin_mm)) == 8, "ON_3dmPageSettings.m_left_margin_mm has unexpected size % instead of 8", size_of(type_of(ON_3dmPageSettings.m_left_margin_mm)));
        assert(((cast(*void)(*instance.m_right_margin_mm)) - cast(*void)(*instance)) == 32, "ON_3dmPageSettings.m_right_margin_mm has unexpected offset % instead of 32", ((cast(*void)(*instance.m_right_margin_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_right_margin_mm)) == 8, "ON_3dmPageSettings.m_right_margin_mm has unexpected size % instead of 8", size_of(type_of(ON_3dmPageSettings.m_right_margin_mm)));
        assert(((cast(*void)(*instance.m_top_margin_mm)) - cast(*void)(*instance)) == 40, "ON_3dmPageSettings.m_top_margin_mm has unexpected offset % instead of 40", ((cast(*void)(*instance.m_top_margin_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_top_margin_mm)) == 8, "ON_3dmPageSettings.m_top_margin_mm has unexpected size % instead of 8", size_of(type_of(ON_3dmPageSettings.m_top_margin_mm)));
        assert(((cast(*void)(*instance.m_bottom_margin_mm)) - cast(*void)(*instance)) == 48, "ON_3dmPageSettings.m_bottom_margin_mm has unexpected offset % instead of 48", ((cast(*void)(*instance.m_bottom_margin_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_bottom_margin_mm)) == 8, "ON_3dmPageSettings.m_bottom_margin_mm has unexpected size % instead of 8", size_of(type_of(ON_3dmPageSettings.m_bottom_margin_mm)));
        assert(((cast(*void)(*instance.m_printer_name)) - cast(*void)(*instance)) == 56, "ON_3dmPageSettings.m_printer_name has unexpected offset % instead of 56", ((cast(*void)(*instance.m_printer_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmPageSettings.m_printer_name)) == 8, "ON_3dmPageSettings.m_printer_name has unexpected size % instead of 8", size_of(type_of(ON_3dmPageSettings.m_printer_name)));
        assert(size_of(ON_3dmPageSettings) == 64, "ON_3dmPageSettings has size % instead of 64", size_of(ON_3dmPageSettings));
    }

    assert(size_of(ON_StandardDisplayModeId) == 1, "ON_StandardDisplayModeId has size % instead of 1", size_of(ON_StandardDisplayModeId));

    {
        instance: ON_3dmView;
        assert(((cast(*void)(*instance.m_vp)) - cast(*void)(*instance)) == 0, "ON_3dmView.m_vp has unexpected offset % instead of 0", ((cast(*void)(*instance.m_vp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_vp)) == 584, "ON_3dmView.m_vp has unexpected size % instead of 584", size_of(type_of(ON_3dmView.m_vp)));
        assert(((cast(*void)(*instance.m_clipping_planes)) - cast(*void)(*instance)) == 584, "ON_3dmView.m_clipping_planes has unexpected offset % instead of 584", ((cast(*void)(*instance.m_clipping_planes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_clipping_planes)) == 24, "ON_3dmView.m_clipping_planes has unexpected size % instead of 24", size_of(type_of(ON_3dmView.m_clipping_planes)));
        assert(((cast(*void)(*instance.m_bLockedProjection)) - cast(*void)(*instance)) == 608, "ON_3dmView.m_bLockedProjection has unexpected offset % instead of 608", ((cast(*void)(*instance.m_bLockedProjection)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_bLockedProjection)) == 1, "ON_3dmView.m_bLockedProjection has unexpected size % instead of 1", size_of(type_of(ON_3dmView.m_bLockedProjection)));
        assert(((cast(*void)(*instance.m_section_behavior)) - cast(*void)(*instance)) == 609, "ON_3dmView.m_section_behavior has unexpected offset % instead of 609", ((cast(*void)(*instance.m_section_behavior)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_section_behavior)) == 1, "ON_3dmView.m_section_behavior has unexpected size % instead of 1", size_of(type_of(ON_3dmView.m_section_behavior)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 610, "ON_3dmView.m_reserved has unexpected offset % instead of 610", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_reserved)) == 6, "ON_3dmView.m_reserved has unexpected size % instead of 6", size_of(type_of(ON_3dmView.m_reserved)));
        assert(((cast(*void)(*instance.m_name)) - cast(*void)(*instance)) == 616, "ON_3dmView.m_name has unexpected offset % instead of 616", ((cast(*void)(*instance.m_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_name)) == 8, "ON_3dmView.m_name has unexpected size % instead of 8", size_of(type_of(ON_3dmView.m_name)));
        assert(((cast(*void)(*instance.m_display_mode_id)) - cast(*void)(*instance)) == 624, "ON_3dmView.m_display_mode_id has unexpected offset % instead of 624", ((cast(*void)(*instance.m_display_mode_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_display_mode_id)) == 16, "ON_3dmView.m_display_mode_id has unexpected size % instead of 16", size_of(type_of(ON_3dmView.m_display_mode_id)));
        assert(((cast(*void)(*instance.m_position)) - cast(*void)(*instance)) == 640, "ON_3dmView.m_position has unexpected offset % instead of 640", ((cast(*void)(*instance.m_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_position)) == 40, "ON_3dmView.m_position has unexpected size % instead of 40", size_of(type_of(ON_3dmView.m_position)));
        assert(((cast(*void)(*instance.m_view_type)) - cast(*void)(*instance)) == 680, "ON_3dmView.m_view_type has unexpected offset % instead of 680", ((cast(*void)(*instance.m_view_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_view_type)) == 4, "ON_3dmView.m_view_type has unexpected size % instead of 4", size_of(type_of(ON_3dmView.m_view_type)));
        assert(((cast(*void)(*instance.m_page_settings)) - cast(*void)(*instance)) == 688, "ON_3dmView.m_page_settings has unexpected offset % instead of 688", ((cast(*void)(*instance.m_page_settings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_page_settings)) == 64, "ON_3dmView.m_page_settings has unexpected size % instead of 64", size_of(type_of(ON_3dmView.m_page_settings)));
        assert(((cast(*void)(*instance.m_named_view_id)) - cast(*void)(*instance)) == 752, "ON_3dmView.m_named_view_id has unexpected offset % instead of 752", ((cast(*void)(*instance.m_named_view_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_named_view_id)) == 16, "ON_3dmView.m_named_view_id has unexpected size % instead of 16", size_of(type_of(ON_3dmView.m_named_view_id)));
        assert(((cast(*void)(*instance.m_cplane)) - cast(*void)(*instance)) == 768, "ON_3dmView.m_cplane has unexpected offset % instead of 768", ((cast(*void)(*instance.m_cplane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_cplane)) == 168, "ON_3dmView.m_cplane has unexpected size % instead of 168", size_of(type_of(ON_3dmView.m_cplane)));
        assert(((cast(*void)(*instance.m_bShowConstructionGrid)) - cast(*void)(*instance)) == 936, "ON_3dmView.m_bShowConstructionGrid has unexpected offset % instead of 936", ((cast(*void)(*instance.m_bShowConstructionGrid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_bShowConstructionGrid)) == 1, "ON_3dmView.m_bShowConstructionGrid has unexpected size % instead of 1", size_of(type_of(ON_3dmView.m_bShowConstructionGrid)));
        assert(((cast(*void)(*instance.m_bShowConstructionAxes)) - cast(*void)(*instance)) == 937, "ON_3dmView.m_bShowConstructionAxes has unexpected offset % instead of 937", ((cast(*void)(*instance.m_bShowConstructionAxes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_bShowConstructionAxes)) == 1, "ON_3dmView.m_bShowConstructionAxes has unexpected size % instead of 1", size_of(type_of(ON_3dmView.m_bShowConstructionAxes)));
        assert(((cast(*void)(*instance.m_bShowConstructionZAxis)) - cast(*void)(*instance)) == 938, "ON_3dmView.m_bShowConstructionZAxis has unexpected offset % instead of 938", ((cast(*void)(*instance.m_bShowConstructionZAxis)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_bShowConstructionZAxis)) == 1, "ON_3dmView.m_bShowConstructionZAxis has unexpected size % instead of 1", size_of(type_of(ON_3dmView.m_bShowConstructionZAxis)));
        assert(((cast(*void)(*instance.m_bShowWorldAxes)) - cast(*void)(*instance)) == 939, "ON_3dmView.m_bShowWorldAxes has unexpected offset % instead of 939", ((cast(*void)(*instance.m_bShowWorldAxes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_bShowWorldAxes)) == 1, "ON_3dmView.m_bShowWorldAxes has unexpected size % instead of 1", size_of(type_of(ON_3dmView.m_bShowWorldAxes)));
        assert(((cast(*void)(*instance.m_trace_image)) - cast(*void)(*instance)) == 944, "ON_3dmView.m_trace_image has unexpected offset % instead of 944", ((cast(*void)(*instance.m_trace_image)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_trace_image)) == 336, "ON_3dmView.m_trace_image has unexpected size % instead of 336", size_of(type_of(ON_3dmView.m_trace_image)));
        assert(((cast(*void)(*instance.m_wallpaper_image)) - cast(*void)(*instance)) == 1280, "ON_3dmView.m_wallpaper_image has unexpected offset % instead of 1280", ((cast(*void)(*instance.m_wallpaper_image)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_wallpaper_image)) == 192, "ON_3dmView.m_wallpaper_image has unexpected size % instead of 192", size_of(type_of(ON_3dmView.m_wallpaper_image)));
        assert(((cast(*void)(*instance.m_dFocalBlurDistance)) - cast(*void)(*instance)) == 1472, "ON_3dmView.m_dFocalBlurDistance has unexpected offset % instead of 1472", ((cast(*void)(*instance.m_dFocalBlurDistance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_dFocalBlurDistance)) == 8, "ON_3dmView.m_dFocalBlurDistance has unexpected size % instead of 8", size_of(type_of(ON_3dmView.m_dFocalBlurDistance)));
        assert(((cast(*void)(*instance.m_dFocalBlurAperture)) - cast(*void)(*instance)) == 1480, "ON_3dmView.m_dFocalBlurAperture has unexpected offset % instead of 1480", ((cast(*void)(*instance.m_dFocalBlurAperture)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_dFocalBlurAperture)) == 8, "ON_3dmView.m_dFocalBlurAperture has unexpected size % instead of 8", size_of(type_of(ON_3dmView.m_dFocalBlurAperture)));
        assert(((cast(*void)(*instance.m_dFocalBlurJitter)) - cast(*void)(*instance)) == 1488, "ON_3dmView.m_dFocalBlurJitter has unexpected offset % instead of 1488", ((cast(*void)(*instance.m_dFocalBlurJitter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_dFocalBlurJitter)) == 8, "ON_3dmView.m_dFocalBlurJitter has unexpected size % instead of 8", size_of(type_of(ON_3dmView.m_dFocalBlurJitter)));
        assert(((cast(*void)(*instance.m_uFocalBlurSampleCount)) - cast(*void)(*instance)) == 1496, "ON_3dmView.m_uFocalBlurSampleCount has unexpected offset % instead of 1496", ((cast(*void)(*instance.m_uFocalBlurSampleCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_uFocalBlurSampleCount)) == 4, "ON_3dmView.m_uFocalBlurSampleCount has unexpected size % instead of 4", size_of(type_of(ON_3dmView.m_uFocalBlurSampleCount)));
        assert(((cast(*void)(*instance.m_FocalBlurMode)) - cast(*void)(*instance)) == 1500, "ON_3dmView.m_FocalBlurMode has unexpected offset % instead of 1500", ((cast(*void)(*instance.m_FocalBlurMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_FocalBlurMode)) == 4, "ON_3dmView.m_FocalBlurMode has unexpected size % instead of 4", size_of(type_of(ON_3dmView.m_FocalBlurMode)));
        assert(((cast(*void)(*instance.m_sizeRendering)) - cast(*void)(*instance)) == 1504, "ON_3dmView.m_sizeRendering has unexpected offset % instead of 1504", ((cast(*void)(*instance.m_sizeRendering)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.m_sizeRendering)) == 8, "ON_3dmView.m_sizeRendering has unexpected size % instead of 8", size_of(type_of(ON_3dmView.m_sizeRendering)));
        assert(((cast(*void)(*instance.reserved)) - cast(*void)(*instance)) == 1512, "ON_3dmView.reserved has unexpected offset % instead of 1512", ((cast(*void)(*instance.reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmView.reserved)) == 8, "ON_3dmView.reserved has unexpected size % instead of 8", size_of(type_of(ON_3dmView.reserved)));
        assert(size_of(ON_3dmView) == 1520, "ON_3dmView has size % instead of 1520", size_of(ON_3dmView));
    }

    {
        instance: ON_3dmRenderSettings;
        assert(((cast(*void)(*instance.m_rendering_source)) - cast(*void)(*instance)) == 16, "ON_3dmRenderSettings.m_rendering_source has unexpected offset % instead of 16", ((cast(*void)(*instance.m_rendering_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_rendering_source)) == 4, "ON_3dmRenderSettings.m_rendering_source has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_rendering_source)));
        assert(((cast(*void)(*instance.m_specific_viewport)) - cast(*void)(*instance)) == 24, "ON_3dmRenderSettings.m_specific_viewport has unexpected offset % instead of 24", ((cast(*void)(*instance.m_specific_viewport)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_specific_viewport)) == 8, "ON_3dmRenderSettings.m_specific_viewport has unexpected size % instead of 8", size_of(type_of(ON_3dmRenderSettings.m_specific_viewport)));
        assert(((cast(*void)(*instance.m_named_view)) - cast(*void)(*instance)) == 32, "ON_3dmRenderSettings.m_named_view has unexpected offset % instead of 32", ((cast(*void)(*instance.m_named_view)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_named_view)) == 8, "ON_3dmRenderSettings.m_named_view has unexpected size % instead of 8", size_of(type_of(ON_3dmRenderSettings.m_named_view)));
        assert(((cast(*void)(*instance.m_snapshot)) - cast(*void)(*instance)) == 40, "ON_3dmRenderSettings.m_snapshot has unexpected offset % instead of 40", ((cast(*void)(*instance.m_snapshot)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_snapshot)) == 8, "ON_3dmRenderSettings.m_snapshot has unexpected size % instead of 8", size_of(type_of(ON_3dmRenderSettings.m_snapshot)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 48, "ON_3dmRenderSettings.m_reserved1 has unexpected offset % instead of 48", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_reserved1)) == 2, "ON_3dmRenderSettings.m_reserved1 has unexpected size % instead of 2", size_of(type_of(ON_3dmRenderSettings.m_reserved1)));
        assert(((cast(*void)(*instance.m_bForceViewportAspectRatio)) - cast(*void)(*instance)) == 50, "ON_3dmRenderSettings.m_bForceViewportAspectRatio has unexpected offset % instead of 50", ((cast(*void)(*instance.m_bForceViewportAspectRatio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bForceViewportAspectRatio)) == 1, "ON_3dmRenderSettings.m_bForceViewportAspectRatio has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bForceViewportAspectRatio)));
        assert(((cast(*void)(*instance.m_bCustomImageSize)) - cast(*void)(*instance)) == 51, "ON_3dmRenderSettings.m_bCustomImageSize has unexpected offset % instead of 51", ((cast(*void)(*instance.m_bCustomImageSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bCustomImageSize)) == 1, "ON_3dmRenderSettings.m_bCustomImageSize has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bCustomImageSize)));
        assert(((cast(*void)(*instance.m_image_width)) - cast(*void)(*instance)) == 52, "ON_3dmRenderSettings.m_image_width has unexpected offset % instead of 52", ((cast(*void)(*instance.m_image_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_image_width)) == 4, "ON_3dmRenderSettings.m_image_width has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_image_width)));
        assert(((cast(*void)(*instance.m_image_height)) - cast(*void)(*instance)) == 56, "ON_3dmRenderSettings.m_image_height has unexpected offset % instead of 56", ((cast(*void)(*instance.m_image_height)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_image_height)) == 4, "ON_3dmRenderSettings.m_image_height has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_image_height)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 60, "ON_3dmRenderSettings.m_reserved3 has unexpected offset % instead of 60", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_reserved3)) == 4, "ON_3dmRenderSettings.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_reserved3)));
        assert(((cast(*void)(*instance.m_image_dpi)) - cast(*void)(*instance)) == 64, "ON_3dmRenderSettings.m_image_dpi has unexpected offset % instead of 64", ((cast(*void)(*instance.m_image_dpi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_image_dpi)) == 8, "ON_3dmRenderSettings.m_image_dpi has unexpected size % instead of 8", size_of(type_of(ON_3dmRenderSettings.m_image_dpi)));
        assert(((cast(*void)(*instance.m_image_us)) - cast(*void)(*instance)) == 72, "ON_3dmRenderSettings.m_image_us has unexpected offset % instead of 72", ((cast(*void)(*instance.m_image_us)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_image_us)) == 1, "ON_3dmRenderSettings.m_image_us has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_image_us)));
        assert(((cast(*void)(*instance.m_ambient_light)) - cast(*void)(*instance)) == 76, "ON_3dmRenderSettings.m_ambient_light has unexpected offset % instead of 76", ((cast(*void)(*instance.m_ambient_light)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_ambient_light)) == 4, "ON_3dmRenderSettings.m_ambient_light has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_ambient_light)));
        assert(((cast(*void)(*instance.m_background_style)) - cast(*void)(*instance)) == 80, "ON_3dmRenderSettings.m_background_style has unexpected offset % instead of 80", ((cast(*void)(*instance.m_background_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_background_style)) == 4, "ON_3dmRenderSettings.m_background_style has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_background_style)));
        assert(((cast(*void)(*instance.m_background_color)) - cast(*void)(*instance)) == 84, "ON_3dmRenderSettings.m_background_color has unexpected offset % instead of 84", ((cast(*void)(*instance.m_background_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_background_color)) == 4, "ON_3dmRenderSettings.m_background_color has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_background_color)));
        assert(((cast(*void)(*instance.m_background_bottom_color)) - cast(*void)(*instance)) == 88, "ON_3dmRenderSettings.m_background_bottom_color has unexpected offset % instead of 88", ((cast(*void)(*instance.m_background_bottom_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_background_bottom_color)) == 4, "ON_3dmRenderSettings.m_background_bottom_color has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_background_bottom_color)));
        assert(((cast(*void)(*instance.m_background_bitmap_filename)) - cast(*void)(*instance)) == 96, "ON_3dmRenderSettings.m_background_bitmap_filename has unexpected offset % instead of 96", ((cast(*void)(*instance.m_background_bitmap_filename)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_background_bitmap_filename)) == 8, "ON_3dmRenderSettings.m_background_bitmap_filename has unexpected size % instead of 8", size_of(type_of(ON_3dmRenderSettings.m_background_bitmap_filename)));
        assert(((cast(*void)(*instance.m_embedded_image_file_id)) - cast(*void)(*instance)) == 104, "ON_3dmRenderSettings.m_embedded_image_file_id has unexpected offset % instead of 104", ((cast(*void)(*instance.m_embedded_image_file_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_embedded_image_file_id)) == 16, "ON_3dmRenderSettings.m_embedded_image_file_id has unexpected size % instead of 16", size_of(type_of(ON_3dmRenderSettings.m_embedded_image_file_id)));
        assert(((cast(*void)(*instance.m_bUseHiddenLights)) - cast(*void)(*instance)) == 120, "ON_3dmRenderSettings.m_bUseHiddenLights has unexpected offset % instead of 120", ((cast(*void)(*instance.m_bUseHiddenLights)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUseHiddenLights)) == 1, "ON_3dmRenderSettings.m_bUseHiddenLights has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUseHiddenLights)));
        assert(((cast(*void)(*instance.m_bDepthCue)) - cast(*void)(*instance)) == 121, "ON_3dmRenderSettings.m_bDepthCue has unexpected offset % instead of 121", ((cast(*void)(*instance.m_bDepthCue)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bDepthCue)) == 1, "ON_3dmRenderSettings.m_bDepthCue has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bDepthCue)));
        assert(((cast(*void)(*instance.m_bFlatShade)) - cast(*void)(*instance)) == 122, "ON_3dmRenderSettings.m_bFlatShade has unexpected offset % instead of 122", ((cast(*void)(*instance.m_bFlatShade)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bFlatShade)) == 1, "ON_3dmRenderSettings.m_bFlatShade has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bFlatShade)));
        assert(((cast(*void)(*instance.m_bRenderBackfaces)) - cast(*void)(*instance)) == 123, "ON_3dmRenderSettings.m_bRenderBackfaces has unexpected offset % instead of 123", ((cast(*void)(*instance.m_bRenderBackfaces)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bRenderBackfaces)) == 1, "ON_3dmRenderSettings.m_bRenderBackfaces has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bRenderBackfaces)));
        assert(((cast(*void)(*instance.m_bRenderPoints)) - cast(*void)(*instance)) == 124, "ON_3dmRenderSettings.m_bRenderPoints has unexpected offset % instead of 124", ((cast(*void)(*instance.m_bRenderPoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bRenderPoints)) == 1, "ON_3dmRenderSettings.m_bRenderPoints has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bRenderPoints)));
        assert(((cast(*void)(*instance.m_bRenderCurves)) - cast(*void)(*instance)) == 125, "ON_3dmRenderSettings.m_bRenderCurves has unexpected offset % instead of 125", ((cast(*void)(*instance.m_bRenderCurves)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bRenderCurves)) == 1, "ON_3dmRenderSettings.m_bRenderCurves has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bRenderCurves)));
        assert(((cast(*void)(*instance.m_bRenderIsoparams)) - cast(*void)(*instance)) == 126, "ON_3dmRenderSettings.m_bRenderIsoparams has unexpected offset % instead of 126", ((cast(*void)(*instance.m_bRenderIsoparams)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bRenderIsoparams)) == 1, "ON_3dmRenderSettings.m_bRenderIsoparams has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bRenderIsoparams)));
        assert(((cast(*void)(*instance.m_bRenderMeshEdges)) - cast(*void)(*instance)) == 127, "ON_3dmRenderSettings.m_bRenderMeshEdges has unexpected offset % instead of 127", ((cast(*void)(*instance.m_bRenderMeshEdges)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bRenderMeshEdges)) == 1, "ON_3dmRenderSettings.m_bRenderMeshEdges has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bRenderMeshEdges)));
        assert(((cast(*void)(*instance.m_bRenderAnnotation)) - cast(*void)(*instance)) == 128, "ON_3dmRenderSettings.m_bRenderAnnotation has unexpected offset % instead of 128", ((cast(*void)(*instance.m_bRenderAnnotation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bRenderAnnotation)) == 1, "ON_3dmRenderSettings.m_bRenderAnnotation has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bRenderAnnotation)));
        assert(((cast(*void)(*instance.m_bScaleBackgroundToFit)) - cast(*void)(*instance)) == 129, "ON_3dmRenderSettings.m_bScaleBackgroundToFit has unexpected offset % instead of 129", ((cast(*void)(*instance.m_bScaleBackgroundToFit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bScaleBackgroundToFit)) == 1, "ON_3dmRenderSettings.m_bScaleBackgroundToFit has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bScaleBackgroundToFit)));
        assert(((cast(*void)(*instance.m_bTransparentBackground)) - cast(*void)(*instance)) == 130, "ON_3dmRenderSettings.m_bTransparentBackground has unexpected offset % instead of 130", ((cast(*void)(*instance.m_bTransparentBackground)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bTransparentBackground)) == 1, "ON_3dmRenderSettings.m_bTransparentBackground has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bTransparentBackground)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 131, "ON_3dmRenderSettings.m_reserved4 has unexpected offset % instead of 131", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_reserved4)) == 1, "ON_3dmRenderSettings.m_reserved4 has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_reserved4)));
        assert(((cast(*void)(*instance.m_reserved5)) - cast(*void)(*instance)) == 132, "ON_3dmRenderSettings.m_reserved5 has unexpected offset % instead of 132", ((cast(*void)(*instance.m_reserved5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_reserved5)) == 4, "ON_3dmRenderSettings.m_reserved5 has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_reserved5)));
        assert(((cast(*void)(*instance.m_antialias_style)) - cast(*void)(*instance)) == 136, "ON_3dmRenderSettings.m_antialias_style has unexpected offset % instead of 136", ((cast(*void)(*instance.m_antialias_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_antialias_style)) == 4, "ON_3dmRenderSettings.m_antialias_style has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_antialias_style)));
        assert(((cast(*void)(*instance.m_shadowmap_style)) - cast(*void)(*instance)) == 140, "ON_3dmRenderSettings.m_shadowmap_style has unexpected offset % instead of 140", ((cast(*void)(*instance.m_shadowmap_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_shadowmap_style)) == 4, "ON_3dmRenderSettings.m_shadowmap_style has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_shadowmap_style)));
        assert(((cast(*void)(*instance.m_shadowmap_width)) - cast(*void)(*instance)) == 144, "ON_3dmRenderSettings.m_shadowmap_width has unexpected offset % instead of 144", ((cast(*void)(*instance.m_shadowmap_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_shadowmap_width)) == 4, "ON_3dmRenderSettings.m_shadowmap_width has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_shadowmap_width)));
        assert(((cast(*void)(*instance.m_shadowmap_height)) - cast(*void)(*instance)) == 148, "ON_3dmRenderSettings.m_shadowmap_height has unexpected offset % instead of 148", ((cast(*void)(*instance.m_shadowmap_height)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_shadowmap_height)) == 4, "ON_3dmRenderSettings.m_shadowmap_height has unexpected size % instead of 4", size_of(type_of(ON_3dmRenderSettings.m_shadowmap_height)));
        assert(((cast(*void)(*instance.m_shadowmap_offset)) - cast(*void)(*instance)) == 152, "ON_3dmRenderSettings.m_shadowmap_offset has unexpected offset % instead of 152", ((cast(*void)(*instance.m_shadowmap_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_shadowmap_offset)) == 8, "ON_3dmRenderSettings.m_shadowmap_offset has unexpected size % instead of 8", size_of(type_of(ON_3dmRenderSettings.m_shadowmap_offset)));
        assert(((cast(*void)(*instance.m_bUsesAmbientAttr)) - cast(*void)(*instance)) == 160, "ON_3dmRenderSettings.m_bUsesAmbientAttr has unexpected offset % instead of 160", ((cast(*void)(*instance.m_bUsesAmbientAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesAmbientAttr)) == 1, "ON_3dmRenderSettings.m_bUsesAmbientAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesAmbientAttr)));
        assert(((cast(*void)(*instance.m_bUsesBackgroundAttr)) - cast(*void)(*instance)) == 161, "ON_3dmRenderSettings.m_bUsesBackgroundAttr has unexpected offset % instead of 161", ((cast(*void)(*instance.m_bUsesBackgroundAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesBackgroundAttr)) == 1, "ON_3dmRenderSettings.m_bUsesBackgroundAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesBackgroundAttr)));
        assert(((cast(*void)(*instance.m_bUsesBackfaceAttr)) - cast(*void)(*instance)) == 162, "ON_3dmRenderSettings.m_bUsesBackfaceAttr has unexpected offset % instead of 162", ((cast(*void)(*instance.m_bUsesBackfaceAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesBackfaceAttr)) == 1, "ON_3dmRenderSettings.m_bUsesBackfaceAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesBackfaceAttr)));
        assert(((cast(*void)(*instance.m_bUsesPointsAttr)) - cast(*void)(*instance)) == 163, "ON_3dmRenderSettings.m_bUsesPointsAttr has unexpected offset % instead of 163", ((cast(*void)(*instance.m_bUsesPointsAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesPointsAttr)) == 1, "ON_3dmRenderSettings.m_bUsesPointsAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesPointsAttr)));
        assert(((cast(*void)(*instance.m_bUsesCurvesAttr)) - cast(*void)(*instance)) == 164, "ON_3dmRenderSettings.m_bUsesCurvesAttr has unexpected offset % instead of 164", ((cast(*void)(*instance.m_bUsesCurvesAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesCurvesAttr)) == 1, "ON_3dmRenderSettings.m_bUsesCurvesAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesCurvesAttr)));
        assert(((cast(*void)(*instance.m_bUsesIsoparmsAttr)) - cast(*void)(*instance)) == 165, "ON_3dmRenderSettings.m_bUsesIsoparmsAttr has unexpected offset % instead of 165", ((cast(*void)(*instance.m_bUsesIsoparmsAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesIsoparmsAttr)) == 1, "ON_3dmRenderSettings.m_bUsesIsoparmsAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesIsoparmsAttr)));
        assert(((cast(*void)(*instance.m_bUsesMeshEdgesAttr)) - cast(*void)(*instance)) == 166, "ON_3dmRenderSettings.m_bUsesMeshEdgesAttr has unexpected offset % instead of 166", ((cast(*void)(*instance.m_bUsesMeshEdgesAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesMeshEdgesAttr)) == 1, "ON_3dmRenderSettings.m_bUsesMeshEdgesAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesMeshEdgesAttr)));
        assert(((cast(*void)(*instance.m_bUsesAnnotationAttr)) - cast(*void)(*instance)) == 167, "ON_3dmRenderSettings.m_bUsesAnnotationAttr has unexpected offset % instead of 167", ((cast(*void)(*instance.m_bUsesAnnotationAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesAnnotationAttr)) == 1, "ON_3dmRenderSettings.m_bUsesAnnotationAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesAnnotationAttr)));
        assert(((cast(*void)(*instance.m_bUsesHiddenLightsAttr)) - cast(*void)(*instance)) == 168, "ON_3dmRenderSettings.m_bUsesHiddenLightsAttr has unexpected offset % instead of 168", ((cast(*void)(*instance.m_bUsesHiddenLightsAttr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_bUsesHiddenLightsAttr)) == 1, "ON_3dmRenderSettings.m_bUsesHiddenLightsAttr has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_bUsesHiddenLightsAttr)));
        assert(((cast(*void)(*instance.m_reserved6)) - cast(*void)(*instance)) == 169, "ON_3dmRenderSettings.m_reserved6 has unexpected offset % instead of 169", ((cast(*void)(*instance.m_reserved6)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_reserved6)) == 1, "ON_3dmRenderSettings.m_reserved6 has unexpected size % instead of 1", size_of(type_of(ON_3dmRenderSettings.m_reserved6)));
        assert(((cast(*void)(*instance.m_reserved7)) - cast(*void)(*instance)) == 170, "ON_3dmRenderSettings.m_reserved7 has unexpected offset % instead of 170", ((cast(*void)(*instance.m_reserved7)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_reserved7)) == 2, "ON_3dmRenderSettings.m_reserved7 has unexpected size % instead of 2", size_of(type_of(ON_3dmRenderSettings.m_reserved7)));
        assert(((cast(*void)(*instance.m_reserved8)) - cast(*void)(*instance)) == 172, "ON_3dmRenderSettings.m_reserved8 has unexpected offset % instead of 172", ((cast(*void)(*instance.m_reserved8)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_reserved8)) == 2, "ON_3dmRenderSettings.m_reserved8 has unexpected size % instead of 2", size_of(type_of(ON_3dmRenderSettings.m_reserved8)));
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 176, "ON_3dmRenderSettings.m_private has unexpected offset % instead of 176", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmRenderSettings.m_private)) == 8, "ON_3dmRenderSettings.m_private has unexpected size % instead of 8", size_of(type_of(ON_3dmRenderSettings.m_private)));
        assert(size_of(ON_3dmRenderSettings) == 184, "ON_3dmRenderSettings has size % instead of 184", size_of(ON_3dmRenderSettings));
    }

    {
        instance: ON_EarthAnchorPoint;
        assert(((cast(*void)(*instance.m_earth_latitude)) - cast(*void)(*instance)) == 0, "ON_EarthAnchorPoint.m_earth_latitude has unexpected offset % instead of 0", ((cast(*void)(*instance.m_earth_latitude)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_earth_latitude)) == 8, "ON_EarthAnchorPoint.m_earth_latitude has unexpected size % instead of 8", size_of(type_of(ON_EarthAnchorPoint.m_earth_latitude)));
        assert(((cast(*void)(*instance.m_earth_longitude)) - cast(*void)(*instance)) == 8, "ON_EarthAnchorPoint.m_earth_longitude has unexpected offset % instead of 8", ((cast(*void)(*instance.m_earth_longitude)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_earth_longitude)) == 8, "ON_EarthAnchorPoint.m_earth_longitude has unexpected size % instead of 8", size_of(type_of(ON_EarthAnchorPoint.m_earth_longitude)));
        assert(((cast(*void)(*instance.m_earth_elevation_meters)) - cast(*void)(*instance)) == 16, "ON_EarthAnchorPoint.m_earth_elevation_meters has unexpected offset % instead of 16", ((cast(*void)(*instance.m_earth_elevation_meters)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_earth_elevation_meters)) == 8, "ON_EarthAnchorPoint.m_earth_elevation_meters has unexpected size % instead of 8", size_of(type_of(ON_EarthAnchorPoint.m_earth_elevation_meters)));
        assert(((cast(*void)(*instance.m_earth_coordinate_system)) - cast(*void)(*instance)) == 24, "ON_EarthAnchorPoint.m_earth_coordinate_system has unexpected offset % instead of 24", ((cast(*void)(*instance.m_earth_coordinate_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_earth_coordinate_system)) == 1, "ON_EarthAnchorPoint.m_earth_coordinate_system has unexpected size % instead of 1", size_of(type_of(ON_EarthAnchorPoint.m_earth_coordinate_system)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 25, "ON_EarthAnchorPoint.m_reserved1 has unexpected offset % instead of 25", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_reserved1)) == 1, "ON_EarthAnchorPoint.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_EarthAnchorPoint.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 26, "ON_EarthAnchorPoint.m_reserved2 has unexpected offset % instead of 26", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_reserved2)) == 1, "ON_EarthAnchorPoint.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_EarthAnchorPoint.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 27, "ON_EarthAnchorPoint.m_reserved3 has unexpected offset % instead of 27", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_reserved3)) == 1, "ON_EarthAnchorPoint.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_EarthAnchorPoint.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 28, "ON_EarthAnchorPoint.m_reserved4 has unexpected offset % instead of 28", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_reserved4)) == 4, "ON_EarthAnchorPoint.m_reserved4 has unexpected size % instead of 4", size_of(type_of(ON_EarthAnchorPoint.m_reserved4)));
        assert(((cast(*void)(*instance.m_model_point)) - cast(*void)(*instance)) == 32, "ON_EarthAnchorPoint.m_model_point has unexpected offset % instead of 32", ((cast(*void)(*instance.m_model_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_model_point)) == 24, "ON_EarthAnchorPoint.m_model_point has unexpected size % instead of 24", size_of(type_of(ON_EarthAnchorPoint.m_model_point)));
        assert(((cast(*void)(*instance.m_model_north)) - cast(*void)(*instance)) == 56, "ON_EarthAnchorPoint.m_model_north has unexpected offset % instead of 56", ((cast(*void)(*instance.m_model_north)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_model_north)) == 24, "ON_EarthAnchorPoint.m_model_north has unexpected size % instead of 24", size_of(type_of(ON_EarthAnchorPoint.m_model_north)));
        assert(((cast(*void)(*instance.m_model_east)) - cast(*void)(*instance)) == 80, "ON_EarthAnchorPoint.m_model_east has unexpected offset % instead of 80", ((cast(*void)(*instance.m_model_east)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_model_east)) == 24, "ON_EarthAnchorPoint.m_model_east has unexpected size % instead of 24", size_of(type_of(ON_EarthAnchorPoint.m_model_east)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 104, "ON_EarthAnchorPoint.m_id has unexpected offset % instead of 104", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_id)) == 16, "ON_EarthAnchorPoint.m_id has unexpected size % instead of 16", size_of(type_of(ON_EarthAnchorPoint.m_id)));
        assert(((cast(*void)(*instance.m_name)) - cast(*void)(*instance)) == 120, "ON_EarthAnchorPoint.m_name has unexpected offset % instead of 120", ((cast(*void)(*instance.m_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_name)) == 8, "ON_EarthAnchorPoint.m_name has unexpected size % instead of 8", size_of(type_of(ON_EarthAnchorPoint.m_name)));
        assert(((cast(*void)(*instance.m_description)) - cast(*void)(*instance)) == 128, "ON_EarthAnchorPoint.m_description has unexpected offset % instead of 128", ((cast(*void)(*instance.m_description)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_description)) == 8, "ON_EarthAnchorPoint.m_description has unexpected size % instead of 8", size_of(type_of(ON_EarthAnchorPoint.m_description)));
        assert(((cast(*void)(*instance.m_url)) - cast(*void)(*instance)) == 136, "ON_EarthAnchorPoint.m_url has unexpected offset % instead of 136", ((cast(*void)(*instance.m_url)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_url)) == 8, "ON_EarthAnchorPoint.m_url has unexpected size % instead of 8", size_of(type_of(ON_EarthAnchorPoint.m_url)));
        assert(((cast(*void)(*instance.m_url_tag)) - cast(*void)(*instance)) == 144, "ON_EarthAnchorPoint.m_url_tag has unexpected offset % instead of 144", ((cast(*void)(*instance.m_url_tag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EarthAnchorPoint.m_url_tag)) == 8, "ON_EarthAnchorPoint.m_url_tag has unexpected size % instead of 8", size_of(type_of(ON_EarthAnchorPoint.m_url_tag)));
        assert(size_of(ON_EarthAnchorPoint) == 152, "ON_EarthAnchorPoint has size % instead of 152", size_of(ON_EarthAnchorPoint));
    }

    {
        instance: ON_3dmIOSettings;
        assert(((cast(*void)(*instance.m_bSaveTextureBitmapsInFile)) - cast(*void)(*instance)) == 0, "ON_3dmIOSettings.m_bSaveTextureBitmapsInFile has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bSaveTextureBitmapsInFile)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmIOSettings.m_bSaveTextureBitmapsInFile)) == 1, "ON_3dmIOSettings.m_bSaveTextureBitmapsInFile has unexpected size % instead of 1", size_of(type_of(ON_3dmIOSettings.m_bSaveTextureBitmapsInFile)));
        assert(((cast(*void)(*instance.m_idef_link_update)) - cast(*void)(*instance)) == 4, "ON_3dmIOSettings.m_idef_link_update has unexpected offset % instead of 4", ((cast(*void)(*instance.m_idef_link_update)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmIOSettings.m_idef_link_update)) == 4, "ON_3dmIOSettings.m_idef_link_update has unexpected size % instead of 4", size_of(type_of(ON_3dmIOSettings.m_idef_link_update)));
        assert(size_of(ON_3dmIOSettings) == 8, "ON_3dmIOSettings has size % instead of 8", size_of(ON_3dmIOSettings));
    }

    {
        instance: ON_3dmSettings;
        assert(((cast(*void)(*instance.m_model_URL)) - cast(*void)(*instance)) == 0, "ON_3dmSettings.m_model_URL has unexpected offset % instead of 0", ((cast(*void)(*instance.m_model_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_model_URL)) == 8, "ON_3dmSettings.m_model_URL has unexpected size % instead of 8", size_of(type_of(ON_3dmSettings.m_model_URL)));
        assert(((cast(*void)(*instance.m_model_basepoint)) - cast(*void)(*instance)) == 8, "ON_3dmSettings.m_model_basepoint has unexpected offset % instead of 8", ((cast(*void)(*instance.m_model_basepoint)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_model_basepoint)) == 24, "ON_3dmSettings.m_model_basepoint has unexpected size % instead of 24", size_of(type_of(ON_3dmSettings.m_model_basepoint)));
        assert(((cast(*void)(*instance.m_earth_anchor_point)) - cast(*void)(*instance)) == 32, "ON_3dmSettings.m_earth_anchor_point has unexpected offset % instead of 32", ((cast(*void)(*instance.m_earth_anchor_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_earth_anchor_point)) == 152, "ON_3dmSettings.m_earth_anchor_point has unexpected size % instead of 152", size_of(type_of(ON_3dmSettings.m_earth_anchor_point)));
        assert(((cast(*void)(*instance.m_ModelUnitsAndTolerances)) - cast(*void)(*instance)) == 184, "ON_3dmSettings.m_ModelUnitsAndTolerances has unexpected offset % instead of 184", ((cast(*void)(*instance.m_ModelUnitsAndTolerances)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_ModelUnitsAndTolerances)) == 56, "ON_3dmSettings.m_ModelUnitsAndTolerances has unexpected size % instead of 56", size_of(type_of(ON_3dmSettings.m_ModelUnitsAndTolerances)));
        assert(((cast(*void)(*instance.m_PageUnitsAndTolerances)) - cast(*void)(*instance)) == 240, "ON_3dmSettings.m_PageUnitsAndTolerances has unexpected offset % instead of 240", ((cast(*void)(*instance.m_PageUnitsAndTolerances)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_PageUnitsAndTolerances)) == 56, "ON_3dmSettings.m_PageUnitsAndTolerances has unexpected size % instead of 56", size_of(type_of(ON_3dmSettings.m_PageUnitsAndTolerances)));
        assert(((cast(*void)(*instance.m_RenderMeshSettings)) - cast(*void)(*instance)) == 296, "ON_3dmSettings.m_RenderMeshSettings has unexpected offset % instead of 296", ((cast(*void)(*instance.m_RenderMeshSettings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_RenderMeshSettings)) == 224, "ON_3dmSettings.m_RenderMeshSettings has unexpected size % instead of 224", size_of(type_of(ON_3dmSettings.m_RenderMeshSettings)));
        assert(((cast(*void)(*instance.m_CustomRenderMeshSettings)) - cast(*void)(*instance)) == 520, "ON_3dmSettings.m_CustomRenderMeshSettings has unexpected offset % instead of 520", ((cast(*void)(*instance.m_CustomRenderMeshSettings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_CustomRenderMeshSettings)) == 224, "ON_3dmSettings.m_CustomRenderMeshSettings has unexpected size % instead of 224", size_of(type_of(ON_3dmSettings.m_CustomRenderMeshSettings)));
        assert(((cast(*void)(*instance.m_AnalysisMeshSettings)) - cast(*void)(*instance)) == 744, "ON_3dmSettings.m_AnalysisMeshSettings has unexpected offset % instead of 744", ((cast(*void)(*instance.m_AnalysisMeshSettings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_AnalysisMeshSettings)) == 224, "ON_3dmSettings.m_AnalysisMeshSettings has unexpected size % instead of 224", size_of(type_of(ON_3dmSettings.m_AnalysisMeshSettings)));
        assert(((cast(*void)(*instance.m_AnnotationSettings)) - cast(*void)(*instance)) == 968, "ON_3dmSettings.m_AnnotationSettings has unexpected offset % instead of 968", ((cast(*void)(*instance.m_AnnotationSettings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_AnnotationSettings)) == 104, "ON_3dmSettings.m_AnnotationSettings has unexpected size % instead of 104", size_of(type_of(ON_3dmSettings.m_AnnotationSettings)));
        assert(((cast(*void)(*instance.m_named_cplanes)) - cast(*void)(*instance)) == 1072, "ON_3dmSettings.m_named_cplanes has unexpected offset % instead of 1072", ((cast(*void)(*instance.m_named_cplanes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_named_cplanes)) == 24, "ON_3dmSettings.m_named_cplanes has unexpected size % instead of 24", size_of(type_of(ON_3dmSettings.m_named_cplanes)));
        assert(((cast(*void)(*instance.m_named_views)) - cast(*void)(*instance)) == 1096, "ON_3dmSettings.m_named_views has unexpected offset % instead of 1096", ((cast(*void)(*instance.m_named_views)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_named_views)) == 24, "ON_3dmSettings.m_named_views has unexpected size % instead of 24", size_of(type_of(ON_3dmSettings.m_named_views)));
        assert(((cast(*void)(*instance.m_views)) - cast(*void)(*instance)) == 1120, "ON_3dmSettings.m_views has unexpected offset % instead of 1120", ((cast(*void)(*instance.m_views)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_views)) == 24, "ON_3dmSettings.m_views has unexpected size % instead of 24", size_of(type_of(ON_3dmSettings.m_views)));
        assert(((cast(*void)(*instance.m_active_view_id)) - cast(*void)(*instance)) == 1144, "ON_3dmSettings.m_active_view_id has unexpected offset % instead of 1144", ((cast(*void)(*instance.m_active_view_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_active_view_id)) == 16, "ON_3dmSettings.m_active_view_id has unexpected size % instead of 16", size_of(type_of(ON_3dmSettings.m_active_view_id)));
        assert(((cast(*void)(*instance.m_V5_current_layer_index)) - cast(*void)(*instance)) == 1160, "ON_3dmSettings.m_V5_current_layer_index has unexpected offset % instead of 1160", ((cast(*void)(*instance.m_V5_current_layer_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_V5_current_layer_index)) == 4, "ON_3dmSettings.m_V5_current_layer_index has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_V5_current_layer_index)));
        assert(((cast(*void)(*instance.m_current_layer_id)) - cast(*void)(*instance)) == 1164, "ON_3dmSettings.m_current_layer_id has unexpected offset % instead of 1164", ((cast(*void)(*instance.m_current_layer_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_layer_id)) == 16, "ON_3dmSettings.m_current_layer_id has unexpected size % instead of 16", size_of(type_of(ON_3dmSettings.m_current_layer_id)));
        assert(((cast(*void)(*instance.m_V5_current_render_material_index)) - cast(*void)(*instance)) == 1180, "ON_3dmSettings.m_V5_current_render_material_index has unexpected offset % instead of 1180", ((cast(*void)(*instance.m_V5_current_render_material_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_V5_current_render_material_index)) == 4, "ON_3dmSettings.m_V5_current_render_material_index has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_V5_current_render_material_index)));
        assert(((cast(*void)(*instance.m_current_render_material_id)) - cast(*void)(*instance)) == 1184, "ON_3dmSettings.m_current_render_material_id has unexpected offset % instead of 1184", ((cast(*void)(*instance.m_current_render_material_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_render_material_id)) == 16, "ON_3dmSettings.m_current_render_material_id has unexpected size % instead of 16", size_of(type_of(ON_3dmSettings.m_current_render_material_id)));
        assert(((cast(*void)(*instance.m_current_material_source)) - cast(*void)(*instance)) == 1200, "ON_3dmSettings.m_current_material_source has unexpected offset % instead of 1200", ((cast(*void)(*instance.m_current_material_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_material_source)) == 4, "ON_3dmSettings.m_current_material_source has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_current_material_source)));
        assert(((cast(*void)(*instance.m_current_color)) - cast(*void)(*instance)) == 1204, "ON_3dmSettings.m_current_color has unexpected offset % instead of 1204", ((cast(*void)(*instance.m_current_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_color)) == 4, "ON_3dmSettings.m_current_color has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_current_color)));
        assert(((cast(*void)(*instance.m_current_color_source)) - cast(*void)(*instance)) == 1208, "ON_3dmSettings.m_current_color_source has unexpected offset % instead of 1208", ((cast(*void)(*instance.m_current_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_color_source)) == 4, "ON_3dmSettings.m_current_color_source has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_current_color_source)));
        assert(((cast(*void)(*instance.m_current_plot_color)) - cast(*void)(*instance)) == 1212, "ON_3dmSettings.m_current_plot_color has unexpected offset % instead of 1212", ((cast(*void)(*instance.m_current_plot_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_plot_color)) == 4, "ON_3dmSettings.m_current_plot_color has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_current_plot_color)));
        assert(((cast(*void)(*instance.m_current_plot_color_source)) - cast(*void)(*instance)) == 1216, "ON_3dmSettings.m_current_plot_color_source has unexpected offset % instead of 1216", ((cast(*void)(*instance.m_current_plot_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_plot_color_source)) == 4, "ON_3dmSettings.m_current_plot_color_source has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_current_plot_color_source)));
        assert(((cast(*void)(*instance.m_V5_current_line_pattern_index)) - cast(*void)(*instance)) == 1220, "ON_3dmSettings.m_V5_current_line_pattern_index has unexpected offset % instead of 1220", ((cast(*void)(*instance.m_V5_current_line_pattern_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_V5_current_line_pattern_index)) == 4, "ON_3dmSettings.m_V5_current_line_pattern_index has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_V5_current_line_pattern_index)));
        assert(((cast(*void)(*instance.m_current_line_pattern_id)) - cast(*void)(*instance)) == 1224, "ON_3dmSettings.m_current_line_pattern_id has unexpected offset % instead of 1224", ((cast(*void)(*instance.m_current_line_pattern_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_line_pattern_id)) == 16, "ON_3dmSettings.m_current_line_pattern_id has unexpected size % instead of 16", size_of(type_of(ON_3dmSettings.m_current_line_pattern_id)));
        assert(((cast(*void)(*instance.m_current_linetype_source)) - cast(*void)(*instance)) == 1240, "ON_3dmSettings.m_current_linetype_source has unexpected offset % instead of 1240", ((cast(*void)(*instance.m_current_linetype_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_linetype_source)) == 4, "ON_3dmSettings.m_current_linetype_source has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_current_linetype_source)));
        assert(((cast(*void)(*instance.m_V5_current_text_style_index)) - cast(*void)(*instance)) == 1244, "ON_3dmSettings.m_V5_current_text_style_index has unexpected offset % instead of 1244", ((cast(*void)(*instance.m_V5_current_text_style_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_V5_current_text_style_index)) == 4, "ON_3dmSettings.m_V5_current_text_style_index has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_V5_current_text_style_index)));
        assert(((cast(*void)(*instance.m_current_text_style_id)) - cast(*void)(*instance)) == 1248, "ON_3dmSettings.m_current_text_style_id has unexpected offset % instead of 1248", ((cast(*void)(*instance.m_current_text_style_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_text_style_id)) == 16, "ON_3dmSettings.m_current_text_style_id has unexpected size % instead of 16", size_of(type_of(ON_3dmSettings.m_current_text_style_id)));
        assert(((cast(*void)(*instance.m_V5_current_dimension_style_index)) - cast(*void)(*instance)) == 1264, "ON_3dmSettings.m_V5_current_dimension_style_index has unexpected offset % instead of 1264", ((cast(*void)(*instance.m_V5_current_dimension_style_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_V5_current_dimension_style_index)) == 4, "ON_3dmSettings.m_V5_current_dimension_style_index has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_V5_current_dimension_style_index)));
        assert(((cast(*void)(*instance.m_current_dimension_style_id)) - cast(*void)(*instance)) == 1268, "ON_3dmSettings.m_current_dimension_style_id has unexpected offset % instead of 1268", ((cast(*void)(*instance.m_current_dimension_style_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_dimension_style_id)) == 16, "ON_3dmSettings.m_current_dimension_style_id has unexpected size % instead of 16", size_of(type_of(ON_3dmSettings.m_current_dimension_style_id)));
        assert(((cast(*void)(*instance.m_current_hatch_pattern_id)) - cast(*void)(*instance)) == 1284, "ON_3dmSettings.m_current_hatch_pattern_id has unexpected offset % instead of 1284", ((cast(*void)(*instance.m_current_hatch_pattern_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_hatch_pattern_id)) == 16, "ON_3dmSettings.m_current_hatch_pattern_id has unexpected size % instead of 16", size_of(type_of(ON_3dmSettings.m_current_hatch_pattern_id)));
        assert(((cast(*void)(*instance.m_current_wire_density)) - cast(*void)(*instance)) == 1300, "ON_3dmSettings.m_current_wire_density has unexpected offset % instead of 1300", ((cast(*void)(*instance.m_current_wire_density)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_current_wire_density)) == 4, "ON_3dmSettings.m_current_wire_density has unexpected size % instead of 4", size_of(type_of(ON_3dmSettings.m_current_wire_density)));
        assert(((cast(*void)(*instance.m_RenderSettings)) - cast(*void)(*instance)) == 1304, "ON_3dmSettings.m_RenderSettings has unexpected offset % instead of 1304", ((cast(*void)(*instance.m_RenderSettings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_RenderSettings)) == 184, "ON_3dmSettings.m_RenderSettings has unexpected size % instead of 184", size_of(type_of(ON_3dmSettings.m_RenderSettings)));
        assert(((cast(*void)(*instance.m_GridDefaults)) - cast(*void)(*instance)) == 1488, "ON_3dmSettings.m_GridDefaults has unexpected offset % instead of 1488", ((cast(*void)(*instance.m_GridDefaults)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_GridDefaults)) == 32, "ON_3dmSettings.m_GridDefaults has unexpected size % instead of 32", size_of(type_of(ON_3dmSettings.m_GridDefaults)));
        assert(((cast(*void)(*instance.m_linetype_display_scale)) - cast(*void)(*instance)) == 1520, "ON_3dmSettings.m_linetype_display_scale has unexpected offset % instead of 1520", ((cast(*void)(*instance.m_linetype_display_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_linetype_display_scale)) == 8, "ON_3dmSettings.m_linetype_display_scale has unexpected size % instead of 8", size_of(type_of(ON_3dmSettings.m_linetype_display_scale)));
        assert(((cast(*void)(*instance.m_plugin_list)) - cast(*void)(*instance)) == 1528, "ON_3dmSettings.m_plugin_list has unexpected offset % instead of 1528", ((cast(*void)(*instance.m_plugin_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_plugin_list)) == 24, "ON_3dmSettings.m_plugin_list has unexpected size % instead of 24", size_of(type_of(ON_3dmSettings.m_plugin_list)));
        assert(((cast(*void)(*instance.m_IO_settings)) - cast(*void)(*instance)) == 1552, "ON_3dmSettings.m_IO_settings has unexpected offset % instead of 1552", ((cast(*void)(*instance.m_IO_settings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmSettings.m_IO_settings)) == 8, "ON_3dmSettings.m_IO_settings has unexpected size % instead of 8", size_of(type_of(ON_3dmSettings.m_IO_settings)));
        assert(size_of(ON_3dmSettings) == 1560, "ON_3dmSettings has size % instead of 1560", size_of(ON_3dmSettings));
    }

    {
        instance: ON_3dmAnimationProperties;
        assert(((cast(*void)(*instance.m_CaptureTypes)) - cast(*void)(*instance)) == 0, "ON_3dmAnimationProperties.m_CaptureTypes has unexpected offset % instead of 0", ((cast(*void)(*instance.m_CaptureTypes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_CaptureTypes)) == 4, "ON_3dmAnimationProperties.m_CaptureTypes has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_CaptureTypes)));
        assert(((cast(*void)(*instance.m_sFileExtension)) - cast(*void)(*instance)) == 8, "ON_3dmAnimationProperties.m_sFileExtension has unexpected offset % instead of 8", ((cast(*void)(*instance.m_sFileExtension)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_sFileExtension)) == 8, "ON_3dmAnimationProperties.m_sFileExtension has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_sFileExtension)));
        assert(((cast(*void)(*instance.m_sCaptureMethod)) - cast(*void)(*instance)) == 16, "ON_3dmAnimationProperties.m_sCaptureMethod has unexpected offset % instead of 16", ((cast(*void)(*instance.m_sCaptureMethod)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_sCaptureMethod)) == 8, "ON_3dmAnimationProperties.m_sCaptureMethod has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_sCaptureMethod)));
        assert(((cast(*void)(*instance.m_sHtmlFilename)) - cast(*void)(*instance)) == 24, "ON_3dmAnimationProperties.m_sHtmlFilename has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sHtmlFilename)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_sHtmlFilename)) == 8, "ON_3dmAnimationProperties.m_sHtmlFilename has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_sHtmlFilename)));
        assert(((cast(*void)(*instance.m_sViewport)) - cast(*void)(*instance)) == 32, "ON_3dmAnimationProperties.m_sViewport has unexpected offset % instead of 32", ((cast(*void)(*instance.m_sViewport)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_sViewport)) == 8, "ON_3dmAnimationProperties.m_sViewport has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_sViewport)));
        assert(((cast(*void)(*instance.m_idDisplayMode)) - cast(*void)(*instance)) == 40, "ON_3dmAnimationProperties.m_idDisplayMode has unexpected offset % instead of 40", ((cast(*void)(*instance.m_idDisplayMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_idDisplayMode)) == 16, "ON_3dmAnimationProperties.m_idDisplayMode has unexpected size % instead of 16", size_of(type_of(ON_3dmAnimationProperties.m_idDisplayMode)));
        assert(((cast(*void)(*instance.m_aCameraPoints)) - cast(*void)(*instance)) == 56, "ON_3dmAnimationProperties.m_aCameraPoints has unexpected offset % instead of 56", ((cast(*void)(*instance.m_aCameraPoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_aCameraPoints)) == 24, "ON_3dmAnimationProperties.m_aCameraPoints has unexpected size % instead of 24", size_of(type_of(ON_3dmAnimationProperties.m_aCameraPoints)));
        assert(((cast(*void)(*instance.m_aTargetPoints)) - cast(*void)(*instance)) == 80, "ON_3dmAnimationProperties.m_aTargetPoints has unexpected offset % instead of 80", ((cast(*void)(*instance.m_aTargetPoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_aTargetPoints)) == 24, "ON_3dmAnimationProperties.m_aTargetPoints has unexpected size % instead of 24", size_of(type_of(ON_3dmAnimationProperties.m_aTargetPoints)));
        assert(((cast(*void)(*instance.m_iFrameCount)) - cast(*void)(*instance)) == 104, "ON_3dmAnimationProperties.m_iFrameCount has unexpected offset % instead of 104", ((cast(*void)(*instance.m_iFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iFrameCount)) == 4, "ON_3dmAnimationProperties.m_iFrameCount has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iFrameCount)));
        assert(((cast(*void)(*instance.m_iCurrentFrame)) - cast(*void)(*instance)) == 108, "ON_3dmAnimationProperties.m_iCurrentFrame has unexpected offset % instead of 108", ((cast(*void)(*instance.m_iCurrentFrame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iCurrentFrame)) == 4, "ON_3dmAnimationProperties.m_iCurrentFrame has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iCurrentFrame)));
        assert(((cast(*void)(*instance.m_idCameraPath)) - cast(*void)(*instance)) == 112, "ON_3dmAnimationProperties.m_idCameraPath has unexpected offset % instead of 112", ((cast(*void)(*instance.m_idCameraPath)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_idCameraPath)) == 16, "ON_3dmAnimationProperties.m_idCameraPath has unexpected size % instead of 16", size_of(type_of(ON_3dmAnimationProperties.m_idCameraPath)));
        assert(((cast(*void)(*instance.m_idTargetPath)) - cast(*void)(*instance)) == 128, "ON_3dmAnimationProperties.m_idTargetPath has unexpected offset % instead of 128", ((cast(*void)(*instance.m_idTargetPath)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_idTargetPath)) == 16, "ON_3dmAnimationProperties.m_idTargetPath has unexpected size % instead of 16", size_of(type_of(ON_3dmAnimationProperties.m_idTargetPath)));
        assert(((cast(*void)(*instance.m_dLatitude)) - cast(*void)(*instance)) == 144, "ON_3dmAnimationProperties.m_dLatitude has unexpected offset % instead of 144", ((cast(*void)(*instance.m_dLatitude)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_dLatitude)) == 8, "ON_3dmAnimationProperties.m_dLatitude has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_dLatitude)));
        assert(((cast(*void)(*instance.m_dLongitude)) - cast(*void)(*instance)) == 152, "ON_3dmAnimationProperties.m_dLongitude has unexpected offset % instead of 152", ((cast(*void)(*instance.m_dLongitude)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_dLongitude)) == 8, "ON_3dmAnimationProperties.m_dLongitude has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_dLongitude)));
        assert(((cast(*void)(*instance.m_dNorthAngle)) - cast(*void)(*instance)) == 160, "ON_3dmAnimationProperties.m_dNorthAngle has unexpected offset % instead of 160", ((cast(*void)(*instance.m_dNorthAngle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_dNorthAngle)) == 8, "ON_3dmAnimationProperties.m_dNorthAngle has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_dNorthAngle)));
        assert(((cast(*void)(*instance.m_iStartDay)) - cast(*void)(*instance)) == 168, "ON_3dmAnimationProperties.m_iStartDay has unexpected offset % instead of 168", ((cast(*void)(*instance.m_iStartDay)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iStartDay)) == 4, "ON_3dmAnimationProperties.m_iStartDay has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iStartDay)));
        assert(((cast(*void)(*instance.m_iStartMonth)) - cast(*void)(*instance)) == 172, "ON_3dmAnimationProperties.m_iStartMonth has unexpected offset % instead of 172", ((cast(*void)(*instance.m_iStartMonth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iStartMonth)) == 4, "ON_3dmAnimationProperties.m_iStartMonth has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iStartMonth)));
        assert(((cast(*void)(*instance.m_iStartYear)) - cast(*void)(*instance)) == 176, "ON_3dmAnimationProperties.m_iStartYear has unexpected offset % instead of 176", ((cast(*void)(*instance.m_iStartYear)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iStartYear)) == 4, "ON_3dmAnimationProperties.m_iStartYear has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iStartYear)));
        assert(((cast(*void)(*instance.m_iEndDay)) - cast(*void)(*instance)) == 180, "ON_3dmAnimationProperties.m_iEndDay has unexpected offset % instead of 180", ((cast(*void)(*instance.m_iEndDay)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iEndDay)) == 4, "ON_3dmAnimationProperties.m_iEndDay has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iEndDay)));
        assert(((cast(*void)(*instance.m_iEndMonth)) - cast(*void)(*instance)) == 184, "ON_3dmAnimationProperties.m_iEndMonth has unexpected offset % instead of 184", ((cast(*void)(*instance.m_iEndMonth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iEndMonth)) == 4, "ON_3dmAnimationProperties.m_iEndMonth has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iEndMonth)));
        assert(((cast(*void)(*instance.m_iEndYear)) - cast(*void)(*instance)) == 188, "ON_3dmAnimationProperties.m_iEndYear has unexpected offset % instead of 188", ((cast(*void)(*instance.m_iEndYear)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iEndYear)) == 4, "ON_3dmAnimationProperties.m_iEndYear has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iEndYear)));
        assert(((cast(*void)(*instance.m_iStartHour)) - cast(*void)(*instance)) == 192, "ON_3dmAnimationProperties.m_iStartHour has unexpected offset % instead of 192", ((cast(*void)(*instance.m_iStartHour)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iStartHour)) == 4, "ON_3dmAnimationProperties.m_iStartHour has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iStartHour)));
        assert(((cast(*void)(*instance.m_iStartMinutes)) - cast(*void)(*instance)) == 196, "ON_3dmAnimationProperties.m_iStartMinutes has unexpected offset % instead of 196", ((cast(*void)(*instance.m_iStartMinutes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iStartMinutes)) == 4, "ON_3dmAnimationProperties.m_iStartMinutes has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iStartMinutes)));
        assert(((cast(*void)(*instance.m_iStartSeconds)) - cast(*void)(*instance)) == 200, "ON_3dmAnimationProperties.m_iStartSeconds has unexpected offset % instead of 200", ((cast(*void)(*instance.m_iStartSeconds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iStartSeconds)) == 4, "ON_3dmAnimationProperties.m_iStartSeconds has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iStartSeconds)));
        assert(((cast(*void)(*instance.m_iEndHour)) - cast(*void)(*instance)) == 204, "ON_3dmAnimationProperties.m_iEndHour has unexpected offset % instead of 204", ((cast(*void)(*instance.m_iEndHour)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iEndHour)) == 4, "ON_3dmAnimationProperties.m_iEndHour has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iEndHour)));
        assert(((cast(*void)(*instance.m_iEndMinutes)) - cast(*void)(*instance)) == 208, "ON_3dmAnimationProperties.m_iEndMinutes has unexpected offset % instead of 208", ((cast(*void)(*instance.m_iEndMinutes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iEndMinutes)) == 4, "ON_3dmAnimationProperties.m_iEndMinutes has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iEndMinutes)));
        assert(((cast(*void)(*instance.m_iEndSeconds)) - cast(*void)(*instance)) == 212, "ON_3dmAnimationProperties.m_iEndSeconds has unexpected offset % instead of 212", ((cast(*void)(*instance.m_iEndSeconds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iEndSeconds)) == 4, "ON_3dmAnimationProperties.m_iEndSeconds has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iEndSeconds)));
        assert(((cast(*void)(*instance.m_iDaysBetweenFrames)) - cast(*void)(*instance)) == 216, "ON_3dmAnimationProperties.m_iDaysBetweenFrames has unexpected offset % instead of 216", ((cast(*void)(*instance.m_iDaysBetweenFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iDaysBetweenFrames)) == 4, "ON_3dmAnimationProperties.m_iDaysBetweenFrames has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iDaysBetweenFrames)));
        assert(((cast(*void)(*instance.m_iMinutesBetweenFrames)) - cast(*void)(*instance)) == 220, "ON_3dmAnimationProperties.m_iMinutesBetweenFrames has unexpected offset % instead of 220", ((cast(*void)(*instance.m_iMinutesBetweenFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iMinutesBetweenFrames)) == 4, "ON_3dmAnimationProperties.m_iMinutesBetweenFrames has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iMinutesBetweenFrames)));
        assert(((cast(*void)(*instance.m_iLightIndex)) - cast(*void)(*instance)) == 224, "ON_3dmAnimationProperties.m_iLightIndex has unexpected offset % instead of 224", ((cast(*void)(*instance.m_iLightIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_iLightIndex)) == 4, "ON_3dmAnimationProperties.m_iLightIndex has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_iLightIndex)));
        assert(((cast(*void)(*instance.m_sFolderName)) - cast(*void)(*instance)) == 232, "ON_3dmAnimationProperties.m_sFolderName has unexpected offset % instead of 232", ((cast(*void)(*instance.m_sFolderName)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_sFolderName)) == 8, "ON_3dmAnimationProperties.m_sFolderName has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.m_sFolderName)));
        assert(((cast(*void)(*instance.m_aImages)) - cast(*void)(*instance)) == 240, "ON_3dmAnimationProperties.m_aImages has unexpected offset % instead of 240", ((cast(*void)(*instance.m_aImages)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_aImages)) == 24, "ON_3dmAnimationProperties.m_aImages has unexpected size % instead of 24", size_of(type_of(ON_3dmAnimationProperties.m_aImages)));
        assert(((cast(*void)(*instance.m_aDates)) - cast(*void)(*instance)) == 264, "ON_3dmAnimationProperties.m_aDates has unexpected offset % instead of 264", ((cast(*void)(*instance.m_aDates)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_aDates)) == 24, "ON_3dmAnimationProperties.m_aDates has unexpected size % instead of 24", size_of(type_of(ON_3dmAnimationProperties.m_aDates)));
        assert(((cast(*void)(*instance.m_bRenderFull)) - cast(*void)(*instance)) == 288, "ON_3dmAnimationProperties.m_bRenderFull has unexpected offset % instead of 288", ((cast(*void)(*instance.m_bRenderFull)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_bRenderFull)) == 1, "ON_3dmAnimationProperties.m_bRenderFull has unexpected size % instead of 1", size_of(type_of(ON_3dmAnimationProperties.m_bRenderFull)));
        assert(((cast(*void)(*instance.m_bRenderPreview)) - cast(*void)(*instance)) == 289, "ON_3dmAnimationProperties.m_bRenderPreview has unexpected offset % instead of 289", ((cast(*void)(*instance.m_bRenderPreview)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_bRenderPreview)) == 1, "ON_3dmAnimationProperties.m_bRenderPreview has unexpected size % instead of 1", size_of(type_of(ON_3dmAnimationProperties.m_bRenderPreview)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 290, "ON_3dmAnimationProperties.m_reserved1 has unexpected offset % instead of 290", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_reserved1)) == 1, "ON_3dmAnimationProperties.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_3dmAnimationProperties.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 291, "ON_3dmAnimationProperties.m_reserved2 has unexpected offset % instead of 291", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_reserved2)) == 1, "ON_3dmAnimationProperties.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_3dmAnimationProperties.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 292, "ON_3dmAnimationProperties.m_reserved4 has unexpected offset % instead of 292", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.m_reserved4)) == 4, "ON_3dmAnimationProperties.m_reserved4 has unexpected size % instead of 4", size_of(type_of(ON_3dmAnimationProperties.m_reserved4)));
        assert(((cast(*void)(*instance.reserved)) - cast(*void)(*instance)) == 296, "ON_3dmAnimationProperties.reserved has unexpected offset % instead of 296", ((cast(*void)(*instance.reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmAnimationProperties.reserved)) == 8, "ON_3dmAnimationProperties.reserved has unexpected size % instead of 8", size_of(type_of(ON_3dmAnimationProperties.reserved)));
        assert(size_of(ON_3dmAnimationProperties) == 304, "ON_3dmAnimationProperties has size % instead of 304", size_of(ON_3dmAnimationProperties));
    }

    {
        instance: ON_3dmObjectAttributes;
        assert(((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)) == 16, "ON_3dmObjectAttributes.m_uuid has unexpected offset % instead of 16", ((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_uuid)) == 16, "ON_3dmObjectAttributes.m_uuid has unexpected size % instead of 16", size_of(type_of(ON_3dmObjectAttributes.m_uuid)));
        assert(((cast(*void)(*instance.m_name)) - cast(*void)(*instance)) == 32, "ON_3dmObjectAttributes.m_name has unexpected offset % instead of 32", ((cast(*void)(*instance.m_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_name)) == 8, "ON_3dmObjectAttributes.m_name has unexpected size % instead of 8", size_of(type_of(ON_3dmObjectAttributes.m_name)));
        assert(((cast(*void)(*instance.m_url)) - cast(*void)(*instance)) == 40, "ON_3dmObjectAttributes.m_url has unexpected offset % instead of 40", ((cast(*void)(*instance.m_url)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_url)) == 8, "ON_3dmObjectAttributes.m_url has unexpected size % instead of 8", size_of(type_of(ON_3dmObjectAttributes.m_url)));
        assert(((cast(*void)(*instance.m_layer_index)) - cast(*void)(*instance)) == 48, "ON_3dmObjectAttributes.m_layer_index has unexpected offset % instead of 48", ((cast(*void)(*instance.m_layer_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_layer_index)) == 4, "ON_3dmObjectAttributes.m_layer_index has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_layer_index)));
        assert(((cast(*void)(*instance.m_linetype_index)) - cast(*void)(*instance)) == 52, "ON_3dmObjectAttributes.m_linetype_index has unexpected offset % instead of 52", ((cast(*void)(*instance.m_linetype_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_linetype_index)) == 4, "ON_3dmObjectAttributes.m_linetype_index has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_linetype_index)));
        assert(((cast(*void)(*instance.m_material_index)) - cast(*void)(*instance)) == 56, "ON_3dmObjectAttributes.m_material_index has unexpected offset % instead of 56", ((cast(*void)(*instance.m_material_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_material_index)) == 4, "ON_3dmObjectAttributes.m_material_index has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_material_index)));
        assert(((cast(*void)(*instance.m_rendering_attributes)) - cast(*void)(*instance)) == 64, "ON_3dmObjectAttributes.m_rendering_attributes has unexpected offset % instead of 64", ((cast(*void)(*instance.m_rendering_attributes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_rendering_attributes)) == 56, "ON_3dmObjectAttributes.m_rendering_attributes has unexpected size % instead of 56", size_of(type_of(ON_3dmObjectAttributes.m_rendering_attributes)));
        assert(((cast(*void)(*instance.m_color)) - cast(*void)(*instance)) == 120, "ON_3dmObjectAttributes.m_color has unexpected offset % instead of 120", ((cast(*void)(*instance.m_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_color)) == 4, "ON_3dmObjectAttributes.m_color has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_color)));
        assert(((cast(*void)(*instance.m_plot_color)) - cast(*void)(*instance)) == 124, "ON_3dmObjectAttributes.m_plot_color has unexpected offset % instead of 124", ((cast(*void)(*instance.m_plot_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_plot_color)) == 4, "ON_3dmObjectAttributes.m_plot_color has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_plot_color)));
        assert(((cast(*void)(*instance.m_display_order)) - cast(*void)(*instance)) == 128, "ON_3dmObjectAttributes.m_display_order has unexpected offset % instead of 128", ((cast(*void)(*instance.m_display_order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_display_order)) == 4, "ON_3dmObjectAttributes.m_display_order has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_display_order)));
        assert(((cast(*void)(*instance.m_plot_weight_mm)) - cast(*void)(*instance)) == 136, "ON_3dmObjectAttributes.m_plot_weight_mm has unexpected offset % instead of 136", ((cast(*void)(*instance.m_plot_weight_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_plot_weight_mm)) == 8, "ON_3dmObjectAttributes.m_plot_weight_mm has unexpected size % instead of 8", size_of(type_of(ON_3dmObjectAttributes.m_plot_weight_mm)));
        assert(((cast(*void)(*instance.m_object_decoration)) - cast(*void)(*instance)) == 144, "ON_3dmObjectAttributes.m_object_decoration has unexpected offset % instead of 144", ((cast(*void)(*instance.m_object_decoration)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_object_decoration)) == 4, "ON_3dmObjectAttributes.m_object_decoration has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_object_decoration)));
        assert(((cast(*void)(*instance.m_wire_density)) - cast(*void)(*instance)) == 148, "ON_3dmObjectAttributes.m_wire_density has unexpected offset % instead of 148", ((cast(*void)(*instance.m_wire_density)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_wire_density)) == 4, "ON_3dmObjectAttributes.m_wire_density has unexpected size % instead of 4", size_of(type_of(ON_3dmObjectAttributes.m_wire_density)));
        assert(((cast(*void)(*instance.m_viewport_id)) - cast(*void)(*instance)) == 152, "ON_3dmObjectAttributes.m_viewport_id has unexpected offset % instead of 152", ((cast(*void)(*instance.m_viewport_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_viewport_id)) == 16, "ON_3dmObjectAttributes.m_viewport_id has unexpected size % instead of 16", size_of(type_of(ON_3dmObjectAttributes.m_viewport_id)));
        assert(((cast(*void)(*instance.m_space)) - cast(*void)(*instance)) == 168, "ON_3dmObjectAttributes.m_space has unexpected offset % instead of 168", ((cast(*void)(*instance.m_space)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_space)) == 1, "ON_3dmObjectAttributes.m_space has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_space)));
        assert(((cast(*void)(*instance.m_bVisible)) - cast(*void)(*instance)) == 169, "ON_3dmObjectAttributes.m_bVisible has unexpected offset % instead of 169", ((cast(*void)(*instance.m_bVisible)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_bVisible)) == 1, "ON_3dmObjectAttributes.m_bVisible has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_bVisible)));
        assert(((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)) == 170, "ON_3dmObjectAttributes.m_mode has unexpected offset % instead of 170", ((cast(*void)(*instance.m_mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_mode)) == 1, "ON_3dmObjectAttributes.m_mode has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_mode)));
        assert(((cast(*void)(*instance.m_color_source)) - cast(*void)(*instance)) == 171, "ON_3dmObjectAttributes.m_color_source has unexpected offset % instead of 171", ((cast(*void)(*instance.m_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_color_source)) == 1, "ON_3dmObjectAttributes.m_color_source has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_color_source)));
        assert(((cast(*void)(*instance.m_plot_color_source)) - cast(*void)(*instance)) == 172, "ON_3dmObjectAttributes.m_plot_color_source has unexpected offset % instead of 172", ((cast(*void)(*instance.m_plot_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_plot_color_source)) == 1, "ON_3dmObjectAttributes.m_plot_color_source has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_plot_color_source)));
        assert(((cast(*void)(*instance.m_plot_weight_source)) - cast(*void)(*instance)) == 173, "ON_3dmObjectAttributes.m_plot_weight_source has unexpected offset % instead of 173", ((cast(*void)(*instance.m_plot_weight_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_plot_weight_source)) == 1, "ON_3dmObjectAttributes.m_plot_weight_source has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_plot_weight_source)));
        assert(((cast(*void)(*instance.m_material_source)) - cast(*void)(*instance)) == 174, "ON_3dmObjectAttributes.m_material_source has unexpected offset % instead of 174", ((cast(*void)(*instance.m_material_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_material_source)) == 1, "ON_3dmObjectAttributes.m_material_source has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_material_source)));
        assert(((cast(*void)(*instance.m_linetype_source)) - cast(*void)(*instance)) == 175, "ON_3dmObjectAttributes.m_linetype_source has unexpected offset % instead of 175", ((cast(*void)(*instance.m_linetype_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_linetype_source)) == 1, "ON_3dmObjectAttributes.m_linetype_source has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_linetype_source)));
        assert(((cast(*void)(*instance.m_reserved_0)) - cast(*void)(*instance)) == 176, "ON_3dmObjectAttributes.m_reserved_0 has unexpected offset % instead of 176", ((cast(*void)(*instance.m_reserved_0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_reserved_0)) == 1, "ON_3dmObjectAttributes.m_reserved_0 has unexpected size % instead of 1", size_of(type_of(ON_3dmObjectAttributes.m_reserved_0)));
        assert(((cast(*void)(*instance.m_object_frame)) - cast(*void)(*instance)) == 184, "ON_3dmObjectAttributes.m_object_frame has unexpected offset % instead of 184", ((cast(*void)(*instance.m_object_frame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_object_frame)) == 128, "ON_3dmObjectAttributes.m_object_frame has unexpected size % instead of 128", size_of(type_of(ON_3dmObjectAttributes.m_object_frame)));
        assert(((cast(*void)(*instance.m_group)) - cast(*void)(*instance)) == 312, "ON_3dmObjectAttributes.m_group has unexpected offset % instead of 312", ((cast(*void)(*instance.m_group)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_group)) == 24, "ON_3dmObjectAttributes.m_group has unexpected size % instead of 24", size_of(type_of(ON_3dmObjectAttributes.m_group)));
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 336, "ON_3dmObjectAttributes.m_private has unexpected offset % instead of 336", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_private)) == 8, "ON_3dmObjectAttributes.m_private has unexpected size % instead of 8", size_of(type_of(ON_3dmObjectAttributes.m_private)));
        assert(((cast(*void)(*instance.m_dmref)) - cast(*void)(*instance)) == 344, "ON_3dmObjectAttributes.m_dmref has unexpected offset % instead of 344", ((cast(*void)(*instance.m_dmref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_3dmObjectAttributes.m_dmref)) == 24, "ON_3dmObjectAttributes.m_dmref has unexpected size % instead of 24", size_of(type_of(ON_3dmObjectAttributes.m_dmref)));
        assert(size_of(ON_3dmObjectAttributes) == 368, "ON_3dmObjectAttributes has size % instead of 368", size_of(ON_3dmObjectAttributes));
    }

    assert(size_of(ON_TextContext) == 1, "ON_TextContext has size % instead of 1", size_of(ON_TextContext));

    {
        instance: ON_StackedText;
        assert(((cast(*void)(*instance.m_top_run)) - cast(*void)(*instance)) == 0, "ON_StackedText.m_top_run has unexpected offset % instead of 0", ((cast(*void)(*instance.m_top_run)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StackedText.m_top_run)) == 8, "ON_StackedText.m_top_run has unexpected size % instead of 8", size_of(type_of(ON_StackedText.m_top_run)));
        assert(((cast(*void)(*instance.m_bottom_run)) - cast(*void)(*instance)) == 8, "ON_StackedText.m_bottom_run has unexpected offset % instead of 8", ((cast(*void)(*instance.m_bottom_run)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StackedText.m_bottom_run)) == 8, "ON_StackedText.m_bottom_run has unexpected size % instead of 8", size_of(type_of(ON_StackedText.m_bottom_run)));
        assert(((cast(*void)(*instance.m_parent_run)) - cast(*void)(*instance)) == 16, "ON_StackedText.m_parent_run has unexpected offset % instead of 16", ((cast(*void)(*instance.m_parent_run)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StackedText.m_parent_run)) == 8, "ON_StackedText.m_parent_run has unexpected size % instead of 8", size_of(type_of(ON_StackedText.m_parent_run)));
        assert(((cast(*void)(*instance.m_separator)) - cast(*void)(*instance)) == 24, "ON_StackedText.m_separator has unexpected offset % instead of 24", ((cast(*void)(*instance.m_separator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_StackedText.m_separator)) == 2, "ON_StackedText.m_separator has unexpected size % instead of 2", size_of(type_of(ON_StackedText.m_separator)));
        assert(size_of(ON_StackedText) == 32, "ON_StackedText has size % instead of 32", size_of(ON_StackedText));
    }

    {
        instance: ON_TextRun;
        assert(((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)) == 0, "ON_TextRun.m_managed_font has unexpected offset % instead of 0", ((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_managed_font)) == 8, "ON_TextRun.m_managed_font has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_managed_font)));
        assert(((cast(*void)(*instance.m_codepoints)) - cast(*void)(*instance)) == 8, "ON_TextRun.m_codepoints has unexpected offset % instead of 8", ((cast(*void)(*instance.m_codepoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_codepoints)) == 8, "ON_TextRun.m_codepoints has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_codepoints)));
        assert(((cast(*void)(*instance.m_text_string)) - cast(*void)(*instance)) == 16, "ON_TextRun.m_text_string has unexpected offset % instead of 16", ((cast(*void)(*instance.m_text_string)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_text_string)) == 8, "ON_TextRun.m_text_string has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_text_string)));
        assert(((cast(*void)(*instance.m_display_string)) - cast(*void)(*instance)) == 24, "ON_TextRun.m_display_string has unexpected offset % instead of 24", ((cast(*void)(*instance.m_display_string)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_display_string)) == 8, "ON_TextRun.m_display_string has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_display_string)));
        assert(((cast(*void)(*instance.m_text_run_hash)) - cast(*void)(*instance)) == 32, "ON_TextRun.m_text_run_hash has unexpected offset % instead of 32", ((cast(*void)(*instance.m_text_run_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_text_run_hash)) == 20, "ON_TextRun.m_text_run_hash has unexpected size % instead of 20", size_of(type_of(ON_TextRun.m_text_run_hash)));
        assert(((cast(*void)(*instance.m_text_run_display_hash)) - cast(*void)(*instance)) == 52, "ON_TextRun.m_text_run_display_hash has unexpected offset % instead of 52", ((cast(*void)(*instance.m_text_run_display_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_text_run_display_hash)) == 20, "ON_TextRun.m_text_run_display_hash has unexpected size % instead of 20", size_of(type_of(ON_TextRun.m_text_run_display_hash)));
        assert(((cast(*void)(*instance.m_text_stacked)) - cast(*void)(*instance)) == 72, "ON_TextRun.m_text_stacked has unexpected offset % instead of 72", ((cast(*void)(*instance.m_text_stacked)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_text_stacked)) == 1, "ON_TextRun.m_text_stacked has unexpected size % instead of 1", size_of(type_of(ON_TextRun.m_text_stacked)));
        assert(((cast(*void)(*instance.m_stacked_text)) - cast(*void)(*instance)) == 80, "ON_TextRun.m_stacked_text has unexpected offset % instead of 80", ((cast(*void)(*instance.m_stacked_text)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_stacked_text)) == 8, "ON_TextRun.m_stacked_text has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_stacked_text)));
        assert(((cast(*void)(*instance.m_color)) - cast(*void)(*instance)) == 88, "ON_TextRun.m_color has unexpected offset % instead of 88", ((cast(*void)(*instance.m_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_color)) == 4, "ON_TextRun.m_color has unexpected size % instead of 4", size_of(type_of(ON_TextRun.m_color)));
        assert(((cast(*void)(*instance.m_run_type)) - cast(*void)(*instance)) == 92, "ON_TextRun.m_run_type has unexpected offset % instead of 92", ((cast(*void)(*instance.m_run_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_run_type)) == 1, "ON_TextRun.m_run_type has unexpected size % instead of 1", size_of(type_of(ON_TextRun.m_run_type)));
        assert(((cast(*void)(*instance.m_direction)) - cast(*void)(*instance)) == 93, "ON_TextRun.m_direction has unexpected offset % instead of 93", ((cast(*void)(*instance.m_direction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_direction)) == 1, "ON_TextRun.m_direction has unexpected size % instead of 1", size_of(type_of(ON_TextRun.m_direction)));
        assert(((cast(*void)(*instance.m_managed_status)) - cast(*void)(*instance)) == 94, "ON_TextRun.m_managed_status has unexpected offset % instead of 94", ((cast(*void)(*instance.m_managed_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_managed_status)) == 1, "ON_TextRun.m_managed_status has unexpected size % instead of 1", size_of(type_of(ON_TextRun.m_managed_status)));
        assert(((cast(*void)(*instance.m_active_status)) - cast(*void)(*instance)) == 95, "ON_TextRun.m_active_status has unexpected offset % instead of 95", ((cast(*void)(*instance.m_active_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_active_status)) == 1, "ON_TextRun.m_active_status has unexpected size % instead of 1", size_of(type_of(ON_TextRun.m_active_status)));
        assert(((cast(*void)(*instance.m_run_text_height)) - cast(*void)(*instance)) == 96, "ON_TextRun.m_run_text_height has unexpected offset % instead of 96", ((cast(*void)(*instance.m_run_text_height)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_run_text_height)) == 8, "ON_TextRun.m_run_text_height has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_run_text_height)));
        assert(((cast(*void)(*instance.m_offset)) - cast(*void)(*instance)) == 104, "ON_TextRun.m_offset has unexpected offset % instead of 104", ((cast(*void)(*instance.m_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_offset)) == 16, "ON_TextRun.m_offset has unexpected size % instead of 16", size_of(type_of(ON_TextRun.m_offset)));
        assert(((cast(*void)(*instance.m_advance)) - cast(*void)(*instance)) == 120, "ON_TextRun.m_advance has unexpected offset % instead of 120", ((cast(*void)(*instance.m_advance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_advance)) == 16, "ON_TextRun.m_advance has unexpected size % instead of 16", size_of(type_of(ON_TextRun.m_advance)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 136, "ON_TextRun.m_bbox has unexpected offset % instead of 136", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_bbox)) == 48, "ON_TextRun.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_TextRun.m_bbox)));
        assert(((cast(*void)(*instance.m_height_scale)) - cast(*void)(*instance)) == 184, "ON_TextRun.m_height_scale has unexpected offset % instead of 184", ((cast(*void)(*instance.m_height_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_height_scale)) == 8, "ON_TextRun.m_height_scale has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_height_scale)));
        assert(((cast(*void)(*instance.m_stackscale)) - cast(*void)(*instance)) == 192, "ON_TextRun.m_stackscale has unexpected offset % instead of 192", ((cast(*void)(*instance.m_stackscale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_stackscale)) == 8, "ON_TextRun.m_stackscale has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_stackscale)));
        assert(((cast(*void)(*instance.m_indent)) - cast(*void)(*instance)) == 200, "ON_TextRun.m_indent has unexpected offset % instead of 200", ((cast(*void)(*instance.m_indent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_indent)) == 8, "ON_TextRun.m_indent has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_indent)));
        assert(((cast(*void)(*instance.m_left_margin)) - cast(*void)(*instance)) == 208, "ON_TextRun.m_left_margin has unexpected offset % instead of 208", ((cast(*void)(*instance.m_left_margin)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_left_margin)) == 8, "ON_TextRun.m_left_margin has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_left_margin)));
        assert(((cast(*void)(*instance.m_right_margin)) - cast(*void)(*instance)) == 216, "ON_TextRun.m_right_margin has unexpected offset % instead of 216", ((cast(*void)(*instance.m_right_margin)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_right_margin)) == 8, "ON_TextRun.m_right_margin has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_right_margin)));
        assert(((cast(*void)(*instance.m_line_index)) - cast(*void)(*instance)) == 224, "ON_TextRun.m_line_index has unexpected offset % instead of 224", ((cast(*void)(*instance.m_line_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_line_index)) == 4, "ON_TextRun.m_line_index has unexpected size % instead of 4", size_of(type_of(ON_TextRun.m_line_index)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 232, "ON_TextRun.m_reserved has unexpected offset % instead of 232", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextRun.m_reserved)) == 8, "ON_TextRun.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_TextRun.m_reserved)));
        assert(size_of(ON_TextRun) == 240, "ON_TextRun has size % instead of 240", size_of(ON_TextRun));
    }

    assert(size_of(ON_TextRunArray) == 24, "ON_TextRunArray has size % instead of 24", size_of(ON_TextRunArray));

    {
        instance: ON_PANOSE1;
        assert(((cast(*void)(*instance.m_family_kind)) - cast(*void)(*instance)) == 0, "ON_PANOSE1.m_family_kind has unexpected offset % instead of 0", ((cast(*void)(*instance.m_family_kind)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_family_kind)) == 1, "ON_PANOSE1.m_family_kind has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_family_kind)));
        assert(((cast(*void)(*instance.m_prop1)) - cast(*void)(*instance)) == 1, "ON_PANOSE1.m_prop1 has unexpected offset % instead of 1", ((cast(*void)(*instance.m_prop1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop1)) == 1, "ON_PANOSE1.m_prop1 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop1)));
        assert(((cast(*void)(*instance.m_prop2)) - cast(*void)(*instance)) == 2, "ON_PANOSE1.m_prop2 has unexpected offset % instead of 2", ((cast(*void)(*instance.m_prop2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop2)) == 1, "ON_PANOSE1.m_prop2 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop2)));
        assert(((cast(*void)(*instance.m_prop3)) - cast(*void)(*instance)) == 3, "ON_PANOSE1.m_prop3 has unexpected offset % instead of 3", ((cast(*void)(*instance.m_prop3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop3)) == 1, "ON_PANOSE1.m_prop3 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop3)));
        assert(((cast(*void)(*instance.m_prop4)) - cast(*void)(*instance)) == 4, "ON_PANOSE1.m_prop4 has unexpected offset % instead of 4", ((cast(*void)(*instance.m_prop4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop4)) == 1, "ON_PANOSE1.m_prop4 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop4)));
        assert(((cast(*void)(*instance.m_prop5)) - cast(*void)(*instance)) == 5, "ON_PANOSE1.m_prop5 has unexpected offset % instead of 5", ((cast(*void)(*instance.m_prop5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop5)) == 1, "ON_PANOSE1.m_prop5 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop5)));
        assert(((cast(*void)(*instance.m_prop6)) - cast(*void)(*instance)) == 6, "ON_PANOSE1.m_prop6 has unexpected offset % instead of 6", ((cast(*void)(*instance.m_prop6)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop6)) == 1, "ON_PANOSE1.m_prop6 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop6)));
        assert(((cast(*void)(*instance.m_prop7)) - cast(*void)(*instance)) == 7, "ON_PANOSE1.m_prop7 has unexpected offset % instead of 7", ((cast(*void)(*instance.m_prop7)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop7)) == 1, "ON_PANOSE1.m_prop7 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop7)));
        assert(((cast(*void)(*instance.m_prop8)) - cast(*void)(*instance)) == 8, "ON_PANOSE1.m_prop8 has unexpected offset % instead of 8", ((cast(*void)(*instance.m_prop8)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop8)) == 1, "ON_PANOSE1.m_prop8 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop8)));
        assert(((cast(*void)(*instance.m_prop9)) - cast(*void)(*instance)) == 9, "ON_PANOSE1.m_prop9 has unexpected offset % instead of 9", ((cast(*void)(*instance.m_prop9)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PANOSE1.m_prop9)) == 1, "ON_PANOSE1.m_prop9 has unexpected size % instead of 1", size_of(type_of(ON_PANOSE1.m_prop9)));
        assert(size_of(ON_PANOSE1) == 10, "ON_PANOSE1 has size % instead of 10", size_of(ON_PANOSE1));
    }

    {
        instance: ON_FontMetrics;
        assert(((cast(*void)(*instance.m_UPM)) - cast(*void)(*instance)) == 0, "ON_FontMetrics.m_UPM has unexpected offset % instead of 0", ((cast(*void)(*instance.m_UPM)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_UPM)) == 4, "ON_FontMetrics.m_UPM has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_UPM)));
        assert(((cast(*void)(*instance.m_ascent)) - cast(*void)(*instance)) == 4, "ON_FontMetrics.m_ascent has unexpected offset % instead of 4", ((cast(*void)(*instance.m_ascent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_ascent)) == 4, "ON_FontMetrics.m_ascent has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_ascent)));
        assert(((cast(*void)(*instance.m_descent)) - cast(*void)(*instance)) == 8, "ON_FontMetrics.m_descent has unexpected offset % instead of 8", ((cast(*void)(*instance.m_descent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_descent)) == 4, "ON_FontMetrics.m_descent has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_descent)));
        assert(((cast(*void)(*instance.m_line_space)) - cast(*void)(*instance)) == 12, "ON_FontMetrics.m_line_space has unexpected offset % instead of 12", ((cast(*void)(*instance.m_line_space)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_line_space)) == 4, "ON_FontMetrics.m_line_space has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_line_space)));
        assert(((cast(*void)(*instance.m_ascent_of_capital)) - cast(*void)(*instance)) == 16, "ON_FontMetrics.m_ascent_of_capital has unexpected offset % instead of 16", ((cast(*void)(*instance.m_ascent_of_capital)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_ascent_of_capital)) == 2, "ON_FontMetrics.m_ascent_of_capital has unexpected size % instead of 2", size_of(type_of(ON_FontMetrics.m_ascent_of_capital)));
        assert(((cast(*void)(*instance.m_ascent_of_x)) - cast(*void)(*instance)) == 18, "ON_FontMetrics.m_ascent_of_x has unexpected offset % instead of 18", ((cast(*void)(*instance.m_ascent_of_x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_ascent_of_x)) == 2, "ON_FontMetrics.m_ascent_of_x has unexpected size % instead of 2", size_of(type_of(ON_FontMetrics.m_ascent_of_x)));
        assert(((cast(*void)(*instance.m_strikeout_thickness)) - cast(*void)(*instance)) == 20, "ON_FontMetrics.m_strikeout_thickness has unexpected offset % instead of 20", ((cast(*void)(*instance.m_strikeout_thickness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_strikeout_thickness)) == 4, "ON_FontMetrics.m_strikeout_thickness has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_strikeout_thickness)));
        assert(((cast(*void)(*instance.m_strikeout_position)) - cast(*void)(*instance)) == 24, "ON_FontMetrics.m_strikeout_position has unexpected offset % instead of 24", ((cast(*void)(*instance.m_strikeout_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_strikeout_position)) == 4, "ON_FontMetrics.m_strikeout_position has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_strikeout_position)));
        assert(((cast(*void)(*instance.m_underscore_thickness)) - cast(*void)(*instance)) == 28, "ON_FontMetrics.m_underscore_thickness has unexpected offset % instead of 28", ((cast(*void)(*instance.m_underscore_thickness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_underscore_thickness)) == 4, "ON_FontMetrics.m_underscore_thickness has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_underscore_thickness)));
        assert(((cast(*void)(*instance.m_underscore_position)) - cast(*void)(*instance)) == 32, "ON_FontMetrics.m_underscore_position has unexpected offset % instead of 32", ((cast(*void)(*instance.m_underscore_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_underscore_position)) == 4, "ON_FontMetrics.m_underscore_position has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_underscore_position)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 36, "ON_FontMetrics.m_reserved1 has unexpected offset % instead of 36", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_reserved1)) == 4, "ON_FontMetrics.m_reserved1 has unexpected size % instead of 4", size_of(type_of(ON_FontMetrics.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 40, "ON_FontMetrics.m_reserved2 has unexpected offset % instead of 40", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_reserved2)) == 8, "ON_FontMetrics.m_reserved2 has unexpected size % instead of 8", size_of(type_of(ON_FontMetrics.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 48, "ON_FontMetrics.m_reserved3 has unexpected offset % instead of 48", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_reserved3)) == 8, "ON_FontMetrics.m_reserved3 has unexpected size % instead of 8", size_of(type_of(ON_FontMetrics.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved_ptr)) - cast(*void)(*instance)) == 56, "ON_FontMetrics.m_reserved_ptr has unexpected offset % instead of 56", ((cast(*void)(*instance.m_reserved_ptr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontMetrics.m_reserved_ptr)) == 8, "ON_FontMetrics.m_reserved_ptr has unexpected size % instead of 8", size_of(type_of(ON_FontMetrics.m_reserved_ptr)));
        assert(size_of(ON_FontMetrics) == 64, "ON_FontMetrics has size % instead of 64", size_of(ON_FontMetrics));
    }

    {
        instance: ON_TextBox;
        assert(((cast(*void)(*instance.m_bbmin)) - cast(*void)(*instance)) == 0, "ON_TextBox.m_bbmin has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bbmin)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextBox.m_bbmin)) == 8, "ON_TextBox.m_bbmin has unexpected size % instead of 8", size_of(type_of(ON_TextBox.m_bbmin)));
        assert(((cast(*void)(*instance.m_bbmax)) - cast(*void)(*instance)) == 8, "ON_TextBox.m_bbmax has unexpected offset % instead of 8", ((cast(*void)(*instance.m_bbmax)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextBox.m_bbmax)) == 8, "ON_TextBox.m_bbmax has unexpected size % instead of 8", size_of(type_of(ON_TextBox.m_bbmax)));
        assert(((cast(*void)(*instance.m_max_basepoint)) - cast(*void)(*instance)) == 16, "ON_TextBox.m_max_basepoint has unexpected offset % instead of 16", ((cast(*void)(*instance.m_max_basepoint)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextBox.m_max_basepoint)) == 8, "ON_TextBox.m_max_basepoint has unexpected size % instead of 8", size_of(type_of(ON_TextBox.m_max_basepoint)));
        assert(((cast(*void)(*instance.m_advance)) - cast(*void)(*instance)) == 24, "ON_TextBox.m_advance has unexpected offset % instead of 24", ((cast(*void)(*instance.m_advance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextBox.m_advance)) == 8, "ON_TextBox.m_advance has unexpected size % instead of 8", size_of(type_of(ON_TextBox.m_advance)));
        assert(size_of(ON_TextBox) == 32, "ON_TextBox has size % instead of 32", size_of(ON_TextBox));
    }

    {
        instance: ON_OutlineFigurePoint;
        assert(((cast(*void)(*instance.m_point_type)) - cast(*void)(*instance)) == 0, "ON_OutlineFigurePoint.m_point_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_point_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigurePoint.m_point_type)) == 1, "ON_OutlineFigurePoint.m_point_type has unexpected size % instead of 1", size_of(type_of(ON_OutlineFigurePoint.m_point_type)));
        assert(((cast(*void)(*instance.m_point_proximity)) - cast(*void)(*instance)) == 1, "ON_OutlineFigurePoint.m_point_proximity has unexpected offset % instead of 1", ((cast(*void)(*instance.m_point_proximity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigurePoint.m_point_proximity)) == 1, "ON_OutlineFigurePoint.m_point_proximity has unexpected size % instead of 1", size_of(type_of(ON_OutlineFigurePoint.m_point_proximity)));
        assert(((cast(*void)(*instance.m_figure_index)) - cast(*void)(*instance)) == 2, "ON_OutlineFigurePoint.m_figure_index has unexpected offset % instead of 2", ((cast(*void)(*instance.m_figure_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigurePoint.m_figure_index)) == 2, "ON_OutlineFigurePoint.m_figure_index has unexpected size % instead of 2", size_of(type_of(ON_OutlineFigurePoint.m_figure_index)));
        assert(((cast(*void)(*instance.m_point)) - cast(*void)(*instance)) == 4, "ON_OutlineFigurePoint.m_point has unexpected offset % instead of 4", ((cast(*void)(*instance.m_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigurePoint.m_point)) == 8, "ON_OutlineFigurePoint.m_point has unexpected size % instead of 8", size_of(type_of(ON_OutlineFigurePoint.m_point)));
        assert(size_of(ON_OutlineFigurePoint) == 12, "ON_OutlineFigurePoint has size % instead of 12", size_of(ON_OutlineFigurePoint));
    }

    {
        instance: ON_OutlineFigure;
        assert(((cast(*void)(*instance.m_units_per_em)) - cast(*void)(*instance)) == 0, "ON_OutlineFigure.m_units_per_em has unexpected offset % instead of 0", ((cast(*void)(*instance.m_units_per_em)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_units_per_em)) == 4, "ON_OutlineFigure.m_units_per_em has unexpected size % instead of 4", size_of(type_of(ON_OutlineFigure.m_units_per_em)));
        assert(((cast(*void)(*instance.m_orientation)) - cast(*void)(*instance)) == 4, "ON_OutlineFigure.m_orientation has unexpected offset % instead of 4", ((cast(*void)(*instance.m_orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_orientation)) == 1, "ON_OutlineFigure.m_orientation has unexpected size % instead of 1", size_of(type_of(ON_OutlineFigure.m_orientation)));
        assert(((cast(*void)(*instance.m_figure_type)) - cast(*void)(*instance)) == 5, "ON_OutlineFigure.m_figure_type has unexpected offset % instead of 5", ((cast(*void)(*instance.m_figure_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_figure_type)) == 1, "ON_OutlineFigure.m_figure_type has unexpected size % instead of 1", size_of(type_of(ON_OutlineFigure.m_figure_type)));
        assert(((cast(*void)(*instance.m_bbox_status)) - cast(*void)(*instance)) == 6, "ON_OutlineFigure.m_bbox_status has unexpected offset % instead of 6", ((cast(*void)(*instance.m_bbox_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_bbox_status)) == 1, "ON_OutlineFigure.m_bbox_status has unexpected size % instead of 1", size_of(type_of(ON_OutlineFigure.m_bbox_status)));
        assert(((cast(*void)(*instance.m_area_status)) - cast(*void)(*instance)) == 7, "ON_OutlineFigure.m_area_status has unexpected offset % instead of 7", ((cast(*void)(*instance.m_area_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_area_status)) == 1, "ON_OutlineFigure.m_area_status has unexpected size % instead of 1", size_of(type_of(ON_OutlineFigure.m_area_status)));
        assert(((cast(*void)(*instance.m_figure_index)) - cast(*void)(*instance)) == 8, "ON_OutlineFigure.m_figure_index has unexpected offset % instead of 8", ((cast(*void)(*instance.m_figure_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_figure_index)) == 2, "ON_OutlineFigure.m_figure_index has unexpected size % instead of 2", size_of(type_of(ON_OutlineFigure.m_figure_index)));
        assert(((cast(*void)(*instance.m_bbox_min)) - cast(*void)(*instance)) == 12, "ON_OutlineFigure.m_bbox_min has unexpected offset % instead of 12", ((cast(*void)(*instance.m_bbox_min)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_bbox_min)) == 8, "ON_OutlineFigure.m_bbox_min has unexpected size % instead of 8", size_of(type_of(ON_OutlineFigure.m_bbox_min)));
        assert(((cast(*void)(*instance.m_bbox_max)) - cast(*void)(*instance)) == 20, "ON_OutlineFigure.m_bbox_max has unexpected offset % instead of 20", ((cast(*void)(*instance.m_bbox_max)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_bbox_max)) == 8, "ON_OutlineFigure.m_bbox_max has unexpected size % instead of 8", size_of(type_of(ON_OutlineFigure.m_bbox_max)));
        assert(((cast(*void)(*instance.m_short_tolerance)) - cast(*void)(*instance)) == 32, "ON_OutlineFigure.m_short_tolerance has unexpected offset % instead of 32", ((cast(*void)(*instance.m_short_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_short_tolerance)) == 8, "ON_OutlineFigure.m_short_tolerance has unexpected size % instead of 8", size_of(type_of(ON_OutlineFigure.m_short_tolerance)));
        assert(((cast(*void)(*instance.m_area_estimate)) - cast(*void)(*instance)) == 40, "ON_OutlineFigure.m_area_estimate has unexpected offset % instead of 40", ((cast(*void)(*instance.m_area_estimate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_area_estimate)) == 8, "ON_OutlineFigure.m_area_estimate has unexpected size % instead of 8", size_of(type_of(ON_OutlineFigure.m_area_estimate)));
        assert(((cast(*void)(*instance.m_points)) - cast(*void)(*instance)) == 48, "ON_OutlineFigure.m_points has unexpected offset % instead of 48", ((cast(*void)(*instance.m_points)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineFigure.m_points)) == 24, "ON_OutlineFigure.m_points has unexpected size % instead of 24", size_of(type_of(ON_OutlineFigure.m_points)));
        assert(size_of(ON_OutlineFigure) == 72, "ON_OutlineFigure has size % instead of 72", size_of(ON_OutlineFigure));
    }

    {
        instance: ON_Outline;
        assert(((cast(*void)(*instance.m_units_per_em)) - cast(*void)(*instance)) == 0, "ON_Outline.m_units_per_em has unexpected offset % instead of 0", ((cast(*void)(*instance.m_units_per_em)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_units_per_em)) == 4, "ON_Outline.m_units_per_em has unexpected size % instead of 4", size_of(type_of(ON_Outline.m_units_per_em)));
        assert(((cast(*void)(*instance.m_figure_type)) - cast(*void)(*instance)) == 4, "ON_Outline.m_figure_type has unexpected offset % instead of 4", ((cast(*void)(*instance.m_figure_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_figure_type)) == 1, "ON_Outline.m_figure_type has unexpected size % instead of 1", size_of(type_of(ON_Outline.m_figure_type)));
        assert(((cast(*void)(*instance.m_bbox_status)) - cast(*void)(*instance)) == 5, "ON_Outline.m_bbox_status has unexpected offset % instead of 5", ((cast(*void)(*instance.m_bbox_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_bbox_status)) == 1, "ON_Outline.m_bbox_status has unexpected size % instead of 1", size_of(type_of(ON_Outline.m_bbox_status)));
        assert(((cast(*void)(*instance.m_sorted_figure_outer_orientation)) - cast(*void)(*instance)) == 6, "ON_Outline.m_sorted_figure_outer_orientation has unexpected offset % instead of 6", ((cast(*void)(*instance.m_sorted_figure_outer_orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_sorted_figure_outer_orientation)) == 1, "ON_Outline.m_sorted_figure_outer_orientation has unexpected size % instead of 1", size_of(type_of(ON_Outline.m_sorted_figure_outer_orientation)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 7, "ON_Outline.m_reserved1 has unexpected offset % instead of 7", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_reserved1)) == 1, "ON_Outline.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_Outline.m_reserved1)));
        assert(((cast(*void)(*instance.m_short_tolerance)) - cast(*void)(*instance)) == 8, "ON_Outline.m_short_tolerance has unexpected offset % instead of 8", ((cast(*void)(*instance.m_short_tolerance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_short_tolerance)) == 8, "ON_Outline.m_short_tolerance has unexpected size % instead of 8", size_of(type_of(ON_Outline.m_short_tolerance)));
        assert(((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)) == 16, "ON_Outline.m_bbox has unexpected offset % instead of 16", ((cast(*void)(*instance.m_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_bbox)) == 48, "ON_Outline.m_bbox has unexpected size % instead of 48", size_of(type_of(ON_Outline.m_bbox)));
        assert(((cast(*void)(*instance.m_glyph_metrics)) - cast(*void)(*instance)) == 64, "ON_Outline.m_glyph_metrics has unexpected offset % instead of 64", ((cast(*void)(*instance.m_glyph_metrics)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_glyph_metrics)) == 32, "ON_Outline.m_glyph_metrics has unexpected size % instead of 32", size_of(type_of(ON_Outline.m_glyph_metrics)));
        assert(((cast(*void)(*instance.m_figures)) - cast(*void)(*instance)) == 96, "ON_Outline.m_figures has unexpected offset % instead of 96", ((cast(*void)(*instance.m_figures)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Outline.m_figures)) == 24, "ON_Outline.m_figures has unexpected size % instead of 24", size_of(type_of(ON_Outline.m_figures)));
        assert(size_of(ON_Outline) == 120, "ON_Outline has size % instead of 120", size_of(ON_Outline));
    }

    {
        instance: ON_OutlineAccumulator;
        assert(((cast(*void)(*instance.m_units_per_em)) - cast(*void)(*instance)) == 0, "ON_OutlineAccumulator.m_units_per_em has unexpected offset % instead of 0", ((cast(*void)(*instance.m_units_per_em)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_units_per_em)) == 4, "ON_OutlineAccumulator.m_units_per_em has unexpected size % instead of 4", size_of(type_of(ON_OutlineAccumulator.m_units_per_em)));
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 4, "ON_OutlineAccumulator.m_status has unexpected offset % instead of 4", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_status)) == 1, "ON_OutlineAccumulator.m_status has unexpected size % instead of 1", size_of(type_of(ON_OutlineAccumulator.m_status)));
        assert(((cast(*void)(*instance.m_figure_type)) - cast(*void)(*instance)) == 5, "ON_OutlineAccumulator.m_figure_type has unexpected offset % instead of 5", ((cast(*void)(*instance.m_figure_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_figure_type)) == 1, "ON_OutlineAccumulator.m_figure_type has unexpected size % instead of 1", size_of(type_of(ON_OutlineAccumulator.m_figure_type)));
        assert(((cast(*void)(*instance.m_figure_depth)) - cast(*void)(*instance)) == 8, "ON_OutlineAccumulator.m_figure_depth has unexpected offset % instead of 8", ((cast(*void)(*instance.m_figure_depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_figure_depth)) == 4, "ON_OutlineAccumulator.m_figure_depth has unexpected size % instead of 4", size_of(type_of(ON_OutlineAccumulator.m_figure_depth)));
        assert(((cast(*void)(*instance.m_error_count)) - cast(*void)(*instance)) == 12, "ON_OutlineAccumulator.m_error_count has unexpected offset % instead of 12", ((cast(*void)(*instance.m_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_error_count)) == 4, "ON_OutlineAccumulator.m_error_count has unexpected size % instead of 4", size_of(type_of(ON_OutlineAccumulator.m_error_count)));
        assert(((cast(*void)(*instance.m_figure_start)) - cast(*void)(*instance)) == 16, "ON_OutlineAccumulator.m_figure_start has unexpected offset % instead of 16", ((cast(*void)(*instance.m_figure_start)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_figure_start)) == 12, "ON_OutlineAccumulator.m_figure_start has unexpected size % instead of 12", size_of(type_of(ON_OutlineAccumulator.m_figure_start)));
        assert(((cast(*void)(*instance.m_figure_prev)) - cast(*void)(*instance)) == 28, "ON_OutlineAccumulator.m_figure_prev has unexpected offset % instead of 28", ((cast(*void)(*instance.m_figure_prev)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_figure_prev)) == 12, "ON_OutlineAccumulator.m_figure_prev has unexpected size % instead of 12", size_of(type_of(ON_OutlineAccumulator.m_figure_prev)));
        assert(((cast(*void)(*instance.m_figure_current)) - cast(*void)(*instance)) == 40, "ON_OutlineAccumulator.m_figure_current has unexpected offset % instead of 40", ((cast(*void)(*instance.m_figure_current)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_figure_current)) == 12, "ON_OutlineAccumulator.m_figure_current has unexpected size % instead of 12", size_of(type_of(ON_OutlineAccumulator.m_figure_current)));
        assert(((cast(*void)(*instance.m_point_accumulator)) - cast(*void)(*instance)) == 56, "ON_OutlineAccumulator.m_point_accumulator has unexpected offset % instead of 56", ((cast(*void)(*instance.m_point_accumulator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_point_accumulator)) == 24, "ON_OutlineAccumulator.m_point_accumulator has unexpected size % instead of 24", size_of(type_of(ON_OutlineAccumulator.m_point_accumulator)));
        assert(((cast(*void)(*instance.m_outline)) - cast(*void)(*instance)) == 80, "ON_OutlineAccumulator.m_outline has unexpected offset % instead of 80", ((cast(*void)(*instance.m_outline)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_outline)) == 8, "ON_OutlineAccumulator.m_outline has unexpected size % instead of 8", size_of(type_of(ON_OutlineAccumulator.m_outline)));
        assert(((cast(*void)(*instance.m_managed_outline)) - cast(*void)(*instance)) == 88, "ON_OutlineAccumulator.m_managed_outline has unexpected offset % instead of 88", ((cast(*void)(*instance.m_managed_outline)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OutlineAccumulator.m_managed_outline)) == 8, "ON_OutlineAccumulator.m_managed_outline has unexpected size % instead of 8", size_of(type_of(ON_OutlineAccumulator.m_managed_outline)));
        assert(size_of(ON_OutlineAccumulator) == 96, "ON_OutlineAccumulator has size % instead of 96", size_of(ON_OutlineAccumulator));
    }

    {
        instance: ON_FontGlyph;
        assert(((cast(*void)(*instance.m_font_unit_glyph_bbox)) - cast(*void)(*instance)) == 0, "ON_FontGlyph.m_font_unit_glyph_bbox has unexpected offset % instead of 0", ((cast(*void)(*instance.m_font_unit_glyph_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_font_unit_glyph_bbox)) == 32, "ON_FontGlyph.m_font_unit_glyph_bbox has unexpected size % instead of 32", size_of(type_of(ON_FontGlyph.m_font_unit_glyph_bbox)));
        assert(((cast(*void)(*instance.m_normalized_glyph_bbox)) - cast(*void)(*instance)) == 32, "ON_FontGlyph.m_normalized_glyph_bbox has unexpected offset % instead of 32", ((cast(*void)(*instance.m_normalized_glyph_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_normalized_glyph_bbox)) == 32, "ON_FontGlyph.m_normalized_glyph_bbox has unexpected size % instead of 32", size_of(type_of(ON_FontGlyph.m_normalized_glyph_bbox)));
        assert(((cast(*void)(*instance.m_code_point)) - cast(*void)(*instance)) == 64, "ON_FontGlyph.m_code_point has unexpected offset % instead of 64", ((cast(*void)(*instance.m_code_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_code_point)) == 4, "ON_FontGlyph.m_code_point has unexpected size % instead of 4", size_of(type_of(ON_FontGlyph.m_code_point)));
        assert(((cast(*void)(*instance.m_is_managed)) - cast(*void)(*instance)) == 68, "ON_FontGlyph.m_is_managed has unexpected offset % instead of 68", ((cast(*void)(*instance.m_is_managed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_is_managed)) == 1, "ON_FontGlyph.m_is_managed has unexpected size % instead of 1", size_of(type_of(ON_FontGlyph.m_is_managed)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 69, "ON_FontGlyph.m_reserved1 has unexpected offset % instead of 69", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_reserved1)) == 1, "ON_FontGlyph.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_FontGlyph.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 70, "ON_FontGlyph.m_reserved2 has unexpected offset % instead of 70", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_reserved2)) == 2, "ON_FontGlyph.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_FontGlyph.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 72, "ON_FontGlyph.m_reserved3 has unexpected offset % instead of 72", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_reserved3)) == 4, "ON_FontGlyph.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_FontGlyph.m_reserved3)));
        assert(((cast(*void)(*instance.m_font_glyph_index)) - cast(*void)(*instance)) == 76, "ON_FontGlyph.m_font_glyph_index has unexpected offset % instead of 76", ((cast(*void)(*instance.m_font_glyph_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_font_glyph_index)) == 4, "ON_FontGlyph.m_font_glyph_index has unexpected size % instead of 4", size_of(type_of(ON_FontGlyph.m_font_glyph_index)));
        assert(((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)) == 80, "ON_FontGlyph.m_managed_font has unexpected offset % instead of 80", ((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_managed_font)) == 8, "ON_FontGlyph.m_managed_font has unexpected size % instead of 8", size_of(type_of(ON_FontGlyph.m_managed_font)));
        assert(((cast(*void)(*instance.m_substitute)) - cast(*void)(*instance)) == 88, "ON_FontGlyph.m_substitute has unexpected offset % instead of 88", ((cast(*void)(*instance.m_substitute)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontGlyph.m_substitute)) == 8, "ON_FontGlyph.m_substitute has unexpected size % instead of 8", size_of(type_of(ON_FontGlyph.m_substitute)));
        assert(size_of(ON_FontGlyph) == 96, "ON_FontGlyph has size % instead of 96", size_of(ON_FontGlyph));
    }

    {
        instance: ON_WindowsDWriteFontInformation;
        assert(((cast(*void)(*instance.m_family_index)) - cast(*void)(*instance)) == 0, "ON_WindowsDWriteFontInformation.m_family_index has unexpected offset % instead of 0", ((cast(*void)(*instance.m_family_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_family_index)) == 4, "ON_WindowsDWriteFontInformation.m_family_index has unexpected size % instead of 4", size_of(type_of(ON_WindowsDWriteFontInformation.m_family_index)));
        assert(((cast(*void)(*instance.m_family_font_index)) - cast(*void)(*instance)) == 4, "ON_WindowsDWriteFontInformation.m_family_font_index has unexpected offset % instead of 4", ((cast(*void)(*instance.m_family_font_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_family_font_index)) == 4, "ON_WindowsDWriteFontInformation.m_family_font_index has unexpected size % instead of 4", size_of(type_of(ON_WindowsDWriteFontInformation.m_family_font_index)));
        assert(((cast(*void)(*instance.m_dwrite_font)) - cast(*void)(*instance)) == 8, "ON_WindowsDWriteFontInformation.m_dwrite_font has unexpected offset % instead of 8", ((cast(*void)(*instance.m_dwrite_font)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_dwrite_font)) == 8, "ON_WindowsDWriteFontInformation.m_dwrite_font has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_dwrite_font)));
        assert(((cast(*void)(*instance.m_prefered_locale)) - cast(*void)(*instance)) == 16, "ON_WindowsDWriteFontInformation.m_prefered_locale has unexpected offset % instead of 16", ((cast(*void)(*instance.m_prefered_locale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_prefered_locale)) == 8, "ON_WindowsDWriteFontInformation.m_prefered_locale has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_prefered_locale)));
        assert(((cast(*void)(*instance.m_loc_family_name)) - cast(*void)(*instance)) == 24, "ON_WindowsDWriteFontInformation.m_loc_family_name has unexpected offset % instead of 24", ((cast(*void)(*instance.m_loc_family_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_family_name)) == 8, "ON_WindowsDWriteFontInformation.m_loc_family_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_family_name)));
        assert(((cast(*void)(*instance.m_en_family_name)) - cast(*void)(*instance)) == 32, "ON_WindowsDWriteFontInformation.m_en_family_name has unexpected offset % instead of 32", ((cast(*void)(*instance.m_en_family_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_family_name)) == 8, "ON_WindowsDWriteFontInformation.m_en_family_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_family_name)));
        assert(((cast(*void)(*instance.m_loc_face_name)) - cast(*void)(*instance)) == 40, "ON_WindowsDWriteFontInformation.m_loc_face_name has unexpected offset % instead of 40", ((cast(*void)(*instance.m_loc_face_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_face_name)) == 8, "ON_WindowsDWriteFontInformation.m_loc_face_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_face_name)));
        assert(((cast(*void)(*instance.m_en_face_name)) - cast(*void)(*instance)) == 48, "ON_WindowsDWriteFontInformation.m_en_face_name has unexpected offset % instead of 48", ((cast(*void)(*instance.m_en_face_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_face_name)) == 8, "ON_WindowsDWriteFontInformation.m_en_face_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_face_name)));
        assert(((cast(*void)(*instance.m_weight)) - cast(*void)(*instance)) == 56, "ON_WindowsDWriteFontInformation.m_weight has unexpected offset % instead of 56", ((cast(*void)(*instance.m_weight)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_weight)) == 4, "ON_WindowsDWriteFontInformation.m_weight has unexpected size % instead of 4", size_of(type_of(ON_WindowsDWriteFontInformation.m_weight)));
        assert(((cast(*void)(*instance.m_stretch)) - cast(*void)(*instance)) == 60, "ON_WindowsDWriteFontInformation.m_stretch has unexpected offset % instead of 60", ((cast(*void)(*instance.m_stretch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_stretch)) == 4, "ON_WindowsDWriteFontInformation.m_stretch has unexpected size % instead of 4", size_of(type_of(ON_WindowsDWriteFontInformation.m_stretch)));
        assert(((cast(*void)(*instance.m_style)) - cast(*void)(*instance)) == 64, "ON_WindowsDWriteFontInformation.m_style has unexpected offset % instead of 64", ((cast(*void)(*instance.m_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_style)) == 4, "ON_WindowsDWriteFontInformation.m_style has unexpected size % instead of 4", size_of(type_of(ON_WindowsDWriteFontInformation.m_style)));
        assert(((cast(*void)(*instance.m_bIsSymbolFont)) - cast(*void)(*instance)) == 68, "ON_WindowsDWriteFontInformation.m_bIsSymbolFont has unexpected offset % instead of 68", ((cast(*void)(*instance.m_bIsSymbolFont)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_bIsSymbolFont)) == 1, "ON_WindowsDWriteFontInformation.m_bIsSymbolFont has unexpected size % instead of 1", size_of(type_of(ON_WindowsDWriteFontInformation.m_bIsSymbolFont)));
        assert(((cast(*void)(*instance.m_bSimulatedBold)) - cast(*void)(*instance)) == 69, "ON_WindowsDWriteFontInformation.m_bSimulatedBold has unexpected offset % instead of 69", ((cast(*void)(*instance.m_bSimulatedBold)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_bSimulatedBold)) == 1, "ON_WindowsDWriteFontInformation.m_bSimulatedBold has unexpected size % instead of 1", size_of(type_of(ON_WindowsDWriteFontInformation.m_bSimulatedBold)));
        assert(((cast(*void)(*instance.m_bSimulatedOblique)) - cast(*void)(*instance)) == 70, "ON_WindowsDWriteFontInformation.m_bSimulatedOblique has unexpected offset % instead of 70", ((cast(*void)(*instance.m_bSimulatedOblique)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_bSimulatedOblique)) == 1, "ON_WindowsDWriteFontInformation.m_bSimulatedOblique has unexpected size % instead of 1", size_of(type_of(ON_WindowsDWriteFontInformation.m_bSimulatedOblique)));
        assert(((cast(*void)(*instance.m_bSimulatedOther)) - cast(*void)(*instance)) == 71, "ON_WindowsDWriteFontInformation.m_bSimulatedOther has unexpected offset % instead of 71", ((cast(*void)(*instance.m_bSimulatedOther)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_bSimulatedOther)) == 1, "ON_WindowsDWriteFontInformation.m_bSimulatedOther has unexpected size % instead of 1", size_of(type_of(ON_WindowsDWriteFontInformation.m_bSimulatedOther)));
        assert(((cast(*void)(*instance.m_loc_full_name)) - cast(*void)(*instance)) == 72, "ON_WindowsDWriteFontInformation.m_loc_full_name has unexpected offset % instead of 72", ((cast(*void)(*instance.m_loc_full_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_full_name)) == 8, "ON_WindowsDWriteFontInformation.m_loc_full_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_full_name)));
        assert(((cast(*void)(*instance.m_en_full_name)) - cast(*void)(*instance)) == 80, "ON_WindowsDWriteFontInformation.m_en_full_name has unexpected offset % instead of 80", ((cast(*void)(*instance.m_en_full_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_full_name)) == 8, "ON_WindowsDWriteFontInformation.m_en_full_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_full_name)));
        assert(((cast(*void)(*instance.m_loc_postscript_name)) - cast(*void)(*instance)) == 88, "ON_WindowsDWriteFontInformation.m_loc_postscript_name has unexpected offset % instead of 88", ((cast(*void)(*instance.m_loc_postscript_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_postscript_name)) == 8, "ON_WindowsDWriteFontInformation.m_loc_postscript_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_postscript_name)));
        assert(((cast(*void)(*instance.m_en_postscript_name)) - cast(*void)(*instance)) == 96, "ON_WindowsDWriteFontInformation.m_en_postscript_name has unexpected offset % instead of 96", ((cast(*void)(*instance.m_en_postscript_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_postscript_name)) == 8, "ON_WindowsDWriteFontInformation.m_en_postscript_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_postscript_name)));
        assert(((cast(*void)(*instance.m_loc_gdi_family_name)) - cast(*void)(*instance)) == 104, "ON_WindowsDWriteFontInformation.m_loc_gdi_family_name has unexpected offset % instead of 104", ((cast(*void)(*instance.m_loc_gdi_family_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_gdi_family_name)) == 8, "ON_WindowsDWriteFontInformation.m_loc_gdi_family_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_gdi_family_name)));
        assert(((cast(*void)(*instance.m_en_gdi_family_name)) - cast(*void)(*instance)) == 112, "ON_WindowsDWriteFontInformation.m_en_gdi_family_name has unexpected offset % instead of 112", ((cast(*void)(*instance.m_en_gdi_family_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_gdi_family_name)) == 8, "ON_WindowsDWriteFontInformation.m_en_gdi_family_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_gdi_family_name)));
        assert(((cast(*void)(*instance.m_loc_gdi_subfamily_name)) - cast(*void)(*instance)) == 120, "ON_WindowsDWriteFontInformation.m_loc_gdi_subfamily_name has unexpected offset % instead of 120", ((cast(*void)(*instance.m_loc_gdi_subfamily_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_gdi_subfamily_name)) == 8, "ON_WindowsDWriteFontInformation.m_loc_gdi_subfamily_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_gdi_subfamily_name)));
        assert(((cast(*void)(*instance.m_en_gdi_subfamily_name)) - cast(*void)(*instance)) == 128, "ON_WindowsDWriteFontInformation.m_en_gdi_subfamily_name has unexpected offset % instead of 128", ((cast(*void)(*instance.m_en_gdi_subfamily_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_gdi_subfamily_name)) == 8, "ON_WindowsDWriteFontInformation.m_en_gdi_subfamily_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_gdi_subfamily_name)));
        assert(((cast(*void)(*instance.m_loc_weight_stretch_style_model_name)) - cast(*void)(*instance)) == 136, "ON_WindowsDWriteFontInformation.m_loc_weight_stretch_style_model_name has unexpected offset % instead of 136", ((cast(*void)(*instance.m_loc_weight_stretch_style_model_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_weight_stretch_style_model_name)) == 8, "ON_WindowsDWriteFontInformation.m_loc_weight_stretch_style_model_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_weight_stretch_style_model_name)));
        assert(((cast(*void)(*instance.m_en_weight_stretch_style_model_name)) - cast(*void)(*instance)) == 144, "ON_WindowsDWriteFontInformation.m_en_weight_stretch_style_model_name has unexpected offset % instead of 144", ((cast(*void)(*instance.m_en_weight_stretch_style_model_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_weight_stretch_style_model_name)) == 8, "ON_WindowsDWriteFontInformation.m_en_weight_stretch_style_model_name has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_weight_stretch_style_model_name)));
        assert(((cast(*void)(*instance.m_loc_field_0_copyright)) - cast(*void)(*instance)) == 152, "ON_WindowsDWriteFontInformation.m_loc_field_0_copyright has unexpected offset % instead of 152", ((cast(*void)(*instance.m_loc_field_0_copyright)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_0_copyright)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_0_copyright has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_0_copyright)));
        assert(((cast(*void)(*instance.m_en_field_0_copyright)) - cast(*void)(*instance)) == 160, "ON_WindowsDWriteFontInformation.m_en_field_0_copyright has unexpected offset % instead of 160", ((cast(*void)(*instance.m_en_field_0_copyright)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_0_copyright)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_0_copyright has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_0_copyright)));
        assert(((cast(*void)(*instance.m_loc_field_5_version)) - cast(*void)(*instance)) == 168, "ON_WindowsDWriteFontInformation.m_loc_field_5_version has unexpected offset % instead of 168", ((cast(*void)(*instance.m_loc_field_5_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_5_version)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_5_version has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_5_version)));
        assert(((cast(*void)(*instance.m_en_field_5_version)) - cast(*void)(*instance)) == 176, "ON_WindowsDWriteFontInformation.m_en_field_5_version has unexpected offset % instead of 176", ((cast(*void)(*instance.m_en_field_5_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_5_version)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_5_version has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_5_version)));
        assert(((cast(*void)(*instance.m_loc_field_7_trademark)) - cast(*void)(*instance)) == 184, "ON_WindowsDWriteFontInformation.m_loc_field_7_trademark has unexpected offset % instead of 184", ((cast(*void)(*instance.m_loc_field_7_trademark)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_7_trademark)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_7_trademark has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_7_trademark)));
        assert(((cast(*void)(*instance.m_en_field_7_trademark)) - cast(*void)(*instance)) == 192, "ON_WindowsDWriteFontInformation.m_en_field_7_trademark has unexpected offset % instead of 192", ((cast(*void)(*instance.m_en_field_7_trademark)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_7_trademark)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_7_trademark has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_7_trademark)));
        assert(((cast(*void)(*instance.m_loc_field_8_manufacturer)) - cast(*void)(*instance)) == 200, "ON_WindowsDWriteFontInformation.m_loc_field_8_manufacturer has unexpected offset % instead of 200", ((cast(*void)(*instance.m_loc_field_8_manufacturer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_8_manufacturer)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_8_manufacturer has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_8_manufacturer)));
        assert(((cast(*void)(*instance.m_en_field_8_manufacturer)) - cast(*void)(*instance)) == 208, "ON_WindowsDWriteFontInformation.m_en_field_8_manufacturer has unexpected offset % instead of 208", ((cast(*void)(*instance.m_en_field_8_manufacturer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_8_manufacturer)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_8_manufacturer has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_8_manufacturer)));
        assert(((cast(*void)(*instance.m_loc_field_9_designer)) - cast(*void)(*instance)) == 216, "ON_WindowsDWriteFontInformation.m_loc_field_9_designer has unexpected offset % instead of 216", ((cast(*void)(*instance.m_loc_field_9_designer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_9_designer)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_9_designer has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_9_designer)));
        assert(((cast(*void)(*instance.m_en_field_9_designer)) - cast(*void)(*instance)) == 224, "ON_WindowsDWriteFontInformation.m_en_field_9_designer has unexpected offset % instead of 224", ((cast(*void)(*instance.m_en_field_9_designer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_9_designer)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_9_designer has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_9_designer)));
        assert(((cast(*void)(*instance.m_loc_field_10_description)) - cast(*void)(*instance)) == 232, "ON_WindowsDWriteFontInformation.m_loc_field_10_description has unexpected offset % instead of 232", ((cast(*void)(*instance.m_loc_field_10_description)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_10_description)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_10_description has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_10_description)));
        assert(((cast(*void)(*instance.m_en_field_10_description)) - cast(*void)(*instance)) == 240, "ON_WindowsDWriteFontInformation.m_en_field_10_description has unexpected offset % instead of 240", ((cast(*void)(*instance.m_en_field_10_description)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_10_description)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_10_description has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_10_description)));
        assert(((cast(*void)(*instance.m_loc_field_11_vendor_URL)) - cast(*void)(*instance)) == 248, "ON_WindowsDWriteFontInformation.m_loc_field_11_vendor_URL has unexpected offset % instead of 248", ((cast(*void)(*instance.m_loc_field_11_vendor_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_11_vendor_URL)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_11_vendor_URL has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_11_vendor_URL)));
        assert(((cast(*void)(*instance.m_en_field_11_vendor_URL)) - cast(*void)(*instance)) == 256, "ON_WindowsDWriteFontInformation.m_en_field_11_vendor_URL has unexpected offset % instead of 256", ((cast(*void)(*instance.m_en_field_11_vendor_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_11_vendor_URL)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_11_vendor_URL has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_11_vendor_URL)));
        assert(((cast(*void)(*instance.m_loc_field_12_designer_URL)) - cast(*void)(*instance)) == 264, "ON_WindowsDWriteFontInformation.m_loc_field_12_designer_URL has unexpected offset % instead of 264", ((cast(*void)(*instance.m_loc_field_12_designer_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_12_designer_URL)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_12_designer_URL has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_12_designer_URL)));
        assert(((cast(*void)(*instance.m_en_field_12_designer_URL)) - cast(*void)(*instance)) == 272, "ON_WindowsDWriteFontInformation.m_en_field_12_designer_URL has unexpected offset % instead of 272", ((cast(*void)(*instance.m_en_field_12_designer_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_12_designer_URL)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_12_designer_URL has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_12_designer_URL)));
        assert(((cast(*void)(*instance.m_loc_field_13_license)) - cast(*void)(*instance)) == 280, "ON_WindowsDWriteFontInformation.m_loc_field_13_license has unexpected offset % instead of 280", ((cast(*void)(*instance.m_loc_field_13_license)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_13_license)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_13_license has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_13_license)));
        assert(((cast(*void)(*instance.m_en_field_13_license)) - cast(*void)(*instance)) == 288, "ON_WindowsDWriteFontInformation.m_en_field_13_license has unexpected offset % instead of 288", ((cast(*void)(*instance.m_en_field_13_license)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_13_license)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_13_license has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_13_license)));
        assert(((cast(*void)(*instance.m_loc_field_14_license_URL)) - cast(*void)(*instance)) == 296, "ON_WindowsDWriteFontInformation.m_loc_field_14_license_URL has unexpected offset % instead of 296", ((cast(*void)(*instance.m_loc_field_14_license_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_14_license_URL)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_14_license_URL has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_14_license_URL)));
        assert(((cast(*void)(*instance.m_en_field_14_license_URL)) - cast(*void)(*instance)) == 304, "ON_WindowsDWriteFontInformation.m_en_field_14_license_URL has unexpected offset % instead of 304", ((cast(*void)(*instance.m_en_field_14_license_URL)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_14_license_URL)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_14_license_URL has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_14_license_URL)));
        assert(((cast(*void)(*instance.m_loc_field_20_postscript_cid)) - cast(*void)(*instance)) == 312, "ON_WindowsDWriteFontInformation.m_loc_field_20_postscript_cid has unexpected offset % instead of 312", ((cast(*void)(*instance.m_loc_field_20_postscript_cid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_20_postscript_cid)) == 8, "ON_WindowsDWriteFontInformation.m_loc_field_20_postscript_cid has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_loc_field_20_postscript_cid)));
        assert(((cast(*void)(*instance.m_en_field_20_postscript_cid)) - cast(*void)(*instance)) == 320, "ON_WindowsDWriteFontInformation.m_en_field_20_postscript_cid has unexpected offset % instead of 320", ((cast(*void)(*instance.m_en_field_20_postscript_cid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_20_postscript_cid)) == 8, "ON_WindowsDWriteFontInformation.m_en_field_20_postscript_cid has unexpected size % instead of 8", size_of(type_of(ON_WindowsDWriteFontInformation.m_en_field_20_postscript_cid)));
        assert(((cast(*void)(*instance.m_gdi_interop_logfont)) - cast(*void)(*instance)) == 328, "ON_WindowsDWriteFontInformation.m_gdi_interop_logfont has unexpected offset % instead of 328", ((cast(*void)(*instance.m_gdi_interop_logfont)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_gdi_interop_logfont)) == 60, "ON_WindowsDWriteFontInformation.m_gdi_interop_logfont has unexpected size % instead of 60", size_of(type_of(ON_WindowsDWriteFontInformation.m_gdi_interop_logfont)));
        assert(((cast(*void)(*instance.m_gdi_interop_logfont_bIsSystemFont)) - cast(*void)(*instance)) == 388, "ON_WindowsDWriteFontInformation.m_gdi_interop_logfont_bIsSystemFont has unexpected offset % instead of 388", ((cast(*void)(*instance.m_gdi_interop_logfont_bIsSystemFont)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_gdi_interop_logfont_bIsSystemFont)) == 1, "ON_WindowsDWriteFontInformation.m_gdi_interop_logfont_bIsSystemFont has unexpected size % instead of 1", size_of(type_of(ON_WindowsDWriteFontInformation.m_gdi_interop_logfont_bIsSystemFont)));
        assert(((cast(*void)(*instance.m_font_metrics)) - cast(*void)(*instance)) == 392, "ON_WindowsDWriteFontInformation.m_font_metrics has unexpected offset % instead of 392", ((cast(*void)(*instance.m_font_metrics)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_font_metrics)) == 64, "ON_WindowsDWriteFontInformation.m_font_metrics has unexpected size % instead of 64", size_of(type_of(ON_WindowsDWriteFontInformation.m_font_metrics)));
        assert(((cast(*void)(*instance.m_Spacebox)) - cast(*void)(*instance)) == 456, "ON_WindowsDWriteFontInformation.m_Spacebox has unexpected offset % instead of 456", ((cast(*void)(*instance.m_Spacebox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_Spacebox)) == 96, "ON_WindowsDWriteFontInformation.m_Spacebox has unexpected size % instead of 96", size_of(type_of(ON_WindowsDWriteFontInformation.m_Spacebox)));
        assert(((cast(*void)(*instance.m_Hbox)) - cast(*void)(*instance)) == 552, "ON_WindowsDWriteFontInformation.m_Hbox has unexpected offset % instead of 552", ((cast(*void)(*instance.m_Hbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_Hbox)) == 96, "ON_WindowsDWriteFontInformation.m_Hbox has unexpected size % instead of 96", size_of(type_of(ON_WindowsDWriteFontInformation.m_Hbox)));
        assert(((cast(*void)(*instance.m_Ibox)) - cast(*void)(*instance)) == 648, "ON_WindowsDWriteFontInformation.m_Ibox has unexpected offset % instead of 648", ((cast(*void)(*instance.m_Ibox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_Ibox)) == 96, "ON_WindowsDWriteFontInformation.m_Ibox has unexpected size % instead of 96", size_of(type_of(ON_WindowsDWriteFontInformation.m_Ibox)));
        assert(((cast(*void)(*instance.m_xbox)) - cast(*void)(*instance)) == 744, "ON_WindowsDWriteFontInformation.m_xbox has unexpected offset % instead of 744", ((cast(*void)(*instance.m_xbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_xbox)) == 96, "ON_WindowsDWriteFontInformation.m_xbox has unexpected size % instead of 96", size_of(type_of(ON_WindowsDWriteFontInformation.m_xbox)));
        assert(((cast(*void)(*instance.m_panose1)) - cast(*void)(*instance)) == 840, "ON_WindowsDWriteFontInformation.m_panose1 has unexpected offset % instead of 840", ((cast(*void)(*instance.m_panose1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_panose1)) == 10, "ON_WindowsDWriteFontInformation.m_panose1 has unexpected size % instead of 10", size_of(type_of(ON_WindowsDWriteFontInformation.m_panose1)));
        assert(((cast(*void)(*instance.m_outline_figure_type)) - cast(*void)(*instance)) == 850, "ON_WindowsDWriteFontInformation.m_outline_figure_type has unexpected offset % instead of 850", ((cast(*void)(*instance.m_outline_figure_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_WindowsDWriteFontInformation.m_outline_figure_type)) == 1, "ON_WindowsDWriteFontInformation.m_outline_figure_type has unexpected size % instead of 1", size_of(type_of(ON_WindowsDWriteFontInformation.m_outline_figure_type)));
        assert(size_of(ON_WindowsDWriteFontInformation) == 856, "ON_WindowsDWriteFontInformation has size % instead of 856", size_of(ON_WindowsDWriteFontInformation));
    }

    {
        instance: ON_FontFaceQuartet;
        assert(((cast(*void)(*instance.m_quartet_name)) - cast(*void)(*instance)) == 0, "ON_FontFaceQuartet.m_quartet_name has unexpected offset % instead of 0", ((cast(*void)(*instance.m_quartet_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontFaceQuartet.m_quartet_name)) == 8, "ON_FontFaceQuartet.m_quartet_name has unexpected size % instead of 8", size_of(type_of(ON_FontFaceQuartet.m_quartet_name)));
        assert(((cast(*void)(*instance.m_regular)) - cast(*void)(*instance)) == 8, "ON_FontFaceQuartet.m_regular has unexpected offset % instead of 8", ((cast(*void)(*instance.m_regular)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontFaceQuartet.m_regular)) == 8, "ON_FontFaceQuartet.m_regular has unexpected size % instead of 8", size_of(type_of(ON_FontFaceQuartet.m_regular)));
        assert(((cast(*void)(*instance.m_bold)) - cast(*void)(*instance)) == 16, "ON_FontFaceQuartet.m_bold has unexpected offset % instead of 16", ((cast(*void)(*instance.m_bold)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontFaceQuartet.m_bold)) == 8, "ON_FontFaceQuartet.m_bold has unexpected size % instead of 8", size_of(type_of(ON_FontFaceQuartet.m_bold)));
        assert(((cast(*void)(*instance.m_italic)) - cast(*void)(*instance)) == 24, "ON_FontFaceQuartet.m_italic has unexpected offset % instead of 24", ((cast(*void)(*instance.m_italic)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontFaceQuartet.m_italic)) == 8, "ON_FontFaceQuartet.m_italic has unexpected size % instead of 8", size_of(type_of(ON_FontFaceQuartet.m_italic)));
        assert(((cast(*void)(*instance.m_bold_italic)) - cast(*void)(*instance)) == 32, "ON_FontFaceQuartet.m_bold_italic has unexpected offset % instead of 32", ((cast(*void)(*instance.m_bold_italic)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontFaceQuartet.m_bold_italic)) == 8, "ON_FontFaceQuartet.m_bold_italic has unexpected size % instead of 8", size_of(type_of(ON_FontFaceQuartet.m_bold_italic)));
        assert(size_of(ON_FontFaceQuartet) == 40, "ON_FontFaceQuartet has size % instead of 40", size_of(ON_FontFaceQuartet));
    }

    {
        instance: ON_Font;
        assert(((cast(*void)(*instance.m_runtime_serial_number)) - cast(*void)(*instance)) == 0, "ON_Font.m_runtime_serial_number has unexpected offset % instead of 0", ((cast(*void)(*instance.m_runtime_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_runtime_serial_number)) == 4, "ON_Font.m_runtime_serial_number has unexpected size % instead of 4", size_of(type_of(ON_Font.m_runtime_serial_number)));
        assert(((cast(*void)(*instance.m_windows_logfont_weight)) - cast(*void)(*instance)) == 4, "ON_Font.m_windows_logfont_weight has unexpected offset % instead of 4", ((cast(*void)(*instance.m_windows_logfont_weight)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_windows_logfont_weight)) == 4, "ON_Font.m_windows_logfont_weight has unexpected size % instead of 4", size_of(type_of(ON_Font.m_windows_logfont_weight)));
        assert(((cast(*void)(*instance.m_point_size)) - cast(*void)(*instance)) == 8, "ON_Font.m_point_size has unexpected offset % instead of 8", ((cast(*void)(*instance.m_point_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_point_size)) == 8, "ON_Font.m_point_size has unexpected size % instead of 8", size_of(type_of(ON_Font.m_point_size)));
        assert(((cast(*void)(*instance.m_apple_font_weight_trait)) - cast(*void)(*instance)) == 16, "ON_Font.m_apple_font_weight_trait has unexpected offset % instead of 16", ((cast(*void)(*instance.m_apple_font_weight_trait)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_apple_font_weight_trait)) == 8, "ON_Font.m_apple_font_weight_trait has unexpected size % instead of 8", size_of(type_of(ON_Font.m_apple_font_weight_trait)));
        assert(((cast(*void)(*instance.m_font_weight)) - cast(*void)(*instance)) == 24, "ON_Font.m_font_weight has unexpected offset % instead of 24", ((cast(*void)(*instance.m_font_weight)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_weight)) == 1, "ON_Font.m_font_weight has unexpected size % instead of 1", size_of(type_of(ON_Font.m_font_weight)));
        assert(((cast(*void)(*instance.m_font_style)) - cast(*void)(*instance)) == 25, "ON_Font.m_font_style has unexpected offset % instead of 25", ((cast(*void)(*instance.m_font_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_style)) == 1, "ON_Font.m_font_style has unexpected size % instead of 1", size_of(type_of(ON_Font.m_font_style)));
        assert(((cast(*void)(*instance.m_font_stretch)) - cast(*void)(*instance)) == 26, "ON_Font.m_font_stretch has unexpected offset % instead of 26", ((cast(*void)(*instance.m_font_stretch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_stretch)) == 1, "ON_Font.m_font_stretch has unexpected size % instead of 1", size_of(type_of(ON_Font.m_font_stretch)));
        assert(((cast(*void)(*instance.m_font_bUnderlined)) - cast(*void)(*instance)) == 27, "ON_Font.m_font_bUnderlined has unexpected offset % instead of 27", ((cast(*void)(*instance.m_font_bUnderlined)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_bUnderlined)) == 1, "ON_Font.m_font_bUnderlined has unexpected size % instead of 1", size_of(type_of(ON_Font.m_font_bUnderlined)));
        assert(((cast(*void)(*instance.m_font_bStrikethrough)) - cast(*void)(*instance)) == 28, "ON_Font.m_font_bStrikethrough has unexpected offset % instead of 28", ((cast(*void)(*instance.m_font_bStrikethrough)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_bStrikethrough)) == 1, "ON_Font.m_font_bStrikethrough has unexpected size % instead of 1", size_of(type_of(ON_Font.m_font_bStrikethrough)));
        assert(((cast(*void)(*instance.m_logfont_charset)) - cast(*void)(*instance)) == 29, "ON_Font.m_logfont_charset has unexpected offset % instead of 29", ((cast(*void)(*instance.m_logfont_charset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_logfont_charset)) == 1, "ON_Font.m_logfont_charset has unexpected size % instead of 1", size_of(type_of(ON_Font.m_logfont_charset)));
        assert(((cast(*void)(*instance.m_font_origin)) - cast(*void)(*instance)) == 30, "ON_Font.m_font_origin has unexpected offset % instead of 30", ((cast(*void)(*instance.m_font_origin)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_origin)) == 1, "ON_Font.m_font_origin has unexpected size % instead of 1", size_of(type_of(ON_Font.m_font_origin)));
        assert(((cast(*void)(*instance.m_font_type)) - cast(*void)(*instance)) == 31, "ON_Font.m_font_type has unexpected offset % instead of 31", ((cast(*void)(*instance.m_font_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_type)) == 1, "ON_Font.m_font_type has unexpected size % instead of 1", size_of(type_of(ON_Font.m_font_type)));
        assert(((cast(*void)(*instance.m_locale_name)) - cast(*void)(*instance)) == 32, "ON_Font.m_locale_name has unexpected offset % instead of 32", ((cast(*void)(*instance.m_locale_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_locale_name)) == 8, "ON_Font.m_locale_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_locale_name)));
        assert(((cast(*void)(*instance.m_loc_postscript_name)) - cast(*void)(*instance)) == 40, "ON_Font.m_loc_postscript_name has unexpected offset % instead of 40", ((cast(*void)(*instance.m_loc_postscript_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_loc_postscript_name)) == 8, "ON_Font.m_loc_postscript_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_loc_postscript_name)));
        assert(((cast(*void)(*instance.m_en_postscript_name)) - cast(*void)(*instance)) == 48, "ON_Font.m_en_postscript_name has unexpected offset % instead of 48", ((cast(*void)(*instance.m_en_postscript_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_en_postscript_name)) == 8, "ON_Font.m_en_postscript_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_en_postscript_name)));
        assert(((cast(*void)(*instance.m_loc_family_name)) - cast(*void)(*instance)) == 56, "ON_Font.m_loc_family_name has unexpected offset % instead of 56", ((cast(*void)(*instance.m_loc_family_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_loc_family_name)) == 8, "ON_Font.m_loc_family_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_loc_family_name)));
        assert(((cast(*void)(*instance.m_en_family_name)) - cast(*void)(*instance)) == 64, "ON_Font.m_en_family_name has unexpected offset % instead of 64", ((cast(*void)(*instance.m_en_family_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_en_family_name)) == 8, "ON_Font.m_en_family_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_en_family_name)));
        assert(((cast(*void)(*instance.m_loc_face_name)) - cast(*void)(*instance)) == 72, "ON_Font.m_loc_face_name has unexpected offset % instead of 72", ((cast(*void)(*instance.m_loc_face_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_loc_face_name)) == 8, "ON_Font.m_loc_face_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_loc_face_name)));
        assert(((cast(*void)(*instance.m_en_face_name)) - cast(*void)(*instance)) == 80, "ON_Font.m_en_face_name has unexpected offset % instead of 80", ((cast(*void)(*instance.m_en_face_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_en_face_name)) == 8, "ON_Font.m_en_face_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_en_face_name)));
        assert(((cast(*void)(*instance.m_loc_windows_logfont_name)) - cast(*void)(*instance)) == 88, "ON_Font.m_loc_windows_logfont_name has unexpected offset % instead of 88", ((cast(*void)(*instance.m_loc_windows_logfont_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_loc_windows_logfont_name)) == 8, "ON_Font.m_loc_windows_logfont_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_loc_windows_logfont_name)));
        assert(((cast(*void)(*instance.m_en_windows_logfont_name)) - cast(*void)(*instance)) == 96, "ON_Font.m_en_windows_logfont_name has unexpected offset % instead of 96", ((cast(*void)(*instance.m_en_windows_logfont_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_en_windows_logfont_name)) == 8, "ON_Font.m_en_windows_logfont_name has unexpected size % instead of 8", size_of(type_of(ON_Font.m_en_windows_logfont_name)));
        assert(((cast(*void)(*instance.m_simulated)) - cast(*void)(*instance)) == 104, "ON_Font.m_simulated has unexpected offset % instead of 104", ((cast(*void)(*instance.m_simulated)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_simulated)) == 1, "ON_Font.m_simulated has unexpected size % instead of 1", size_of(type_of(ON_Font.m_simulated)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 105, "ON_Font.m_reserved1 has unexpected offset % instead of 105", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_reserved1)) == 1, "ON_Font.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_Font.m_reserved1)));
        assert(((cast(*void)(*instance.m_panose1)) - cast(*void)(*instance)) == 106, "ON_Font.m_panose1 has unexpected offset % instead of 106", ((cast(*void)(*instance.m_panose1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_panose1)) == 10, "ON_Font.m_panose1 has unexpected size % instead of 10", size_of(type_of(ON_Font.m_panose1)));
        assert(((cast(*void)(*instance.m_font_characteristics_hash)) - cast(*void)(*instance)) == 116, "ON_Font.m_font_characteristics_hash has unexpected offset % instead of 116", ((cast(*void)(*instance.m_font_characteristics_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_characteristics_hash)) == 20, "ON_Font.m_font_characteristics_hash has unexpected size % instead of 20", size_of(type_of(ON_Font.m_font_characteristics_hash)));
        assert(((cast(*void)(*instance.m_apple_font_width_trait)) - cast(*void)(*instance)) == 136, "ON_Font.m_apple_font_width_trait has unexpected offset % instead of 136", ((cast(*void)(*instance.m_apple_font_width_trait)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_apple_font_width_trait)) == 8, "ON_Font.m_apple_font_width_trait has unexpected size % instead of 8", size_of(type_of(ON_Font.m_apple_font_width_trait)));
        assert(((cast(*void)(*instance.m_outline_figure_type)) - cast(*void)(*instance)) == 144, "ON_Font.m_outline_figure_type has unexpected offset % instead of 144", ((cast(*void)(*instance.m_outline_figure_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_outline_figure_type)) == 1, "ON_Font.m_outline_figure_type has unexpected size % instead of 1", size_of(type_of(ON_Font.m_outline_figure_type)));
        assert(((cast(*void)(*instance.m_quartet_member)) - cast(*void)(*instance)) == 145, "ON_Font.m_quartet_member has unexpected offset % instead of 145", ((cast(*void)(*instance.m_quartet_member)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_quartet_member)) == 1, "ON_Font.m_quartet_member has unexpected size % instead of 1", size_of(type_of(ON_Font.m_quartet_member)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 146, "ON_Font.m_reserved2 has unexpected offset % instead of 146", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_reserved2)) == 2, "ON_Font.m_reserved2 has unexpected size % instead of 2", size_of(type_of(ON_Font.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 148, "ON_Font.m_reserved3 has unexpected offset % instead of 148", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_reserved3)) == 4, "ON_Font.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_Font.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 152, "ON_Font.m_reserved4 has unexpected offset % instead of 152", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_reserved4)) == 8, "ON_Font.m_reserved4 has unexpected size % instead of 8", size_of(type_of(ON_Font.m_reserved4)));
        assert(((cast(*void)(*instance.m_font_glyph_cache)) - cast(*void)(*instance)) == 160, "ON_Font.m_font_glyph_cache has unexpected offset % instead of 160", ((cast(*void)(*instance.m_font_glyph_cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_font_glyph_cache)) == 16, "ON_Font.m_font_glyph_cache has unexpected size % instead of 16", size_of(type_of(ON_Font.m_font_glyph_cache)));
        assert(((cast(*void)(*instance.m_free_type_face)) - cast(*void)(*instance)) == 176, "ON_Font.m_free_type_face has unexpected offset % instead of 176", ((cast(*void)(*instance.m_free_type_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_free_type_face)) == 8, "ON_Font.m_free_type_face has unexpected size % instead of 8", size_of(type_of(ON_Font.m_free_type_face)));
        assert(((cast(*void)(*instance.m_managed_installed_font_and_bits)) - cast(*void)(*instance)) == 184, "ON_Font.m_managed_installed_font_and_bits has unexpected offset % instead of 184", ((cast(*void)(*instance.m_managed_installed_font_and_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Font.m_managed_installed_font_and_bits)) == 8, "ON_Font.m_managed_installed_font_and_bits has unexpected size % instead of 8", size_of(type_of(ON_Font.m_managed_installed_font_and_bits)));
        assert(size_of(ON_Font) == 192, "ON_Font has size % instead of 192", size_of(ON_Font));
    }

    {
        instance: ON_FontList;
        assert(((cast(*void)(*instance.m_name_locale)) - cast(*void)(*instance)) == 0, "ON_FontList.m_name_locale has unexpected offset % instead of 0", ((cast(*void)(*instance.m_name_locale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontList.m_name_locale)) == 1, "ON_FontList.m_name_locale has unexpected size % instead of 1", size_of(type_of(ON_FontList.m_name_locale)));
        assert(((cast(*void)(*instance.m_bMatchUnderlineStrikethroughAndPointSize)) - cast(*void)(*instance)) == 1, "ON_FontList.m_bMatchUnderlineStrikethroughAndPointSize has unexpected offset % instead of 1", ((cast(*void)(*instance.m_bMatchUnderlineStrikethroughAndPointSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontList.m_bMatchUnderlineStrikethroughAndPointSize)) == 1, "ON_FontList.m_bMatchUnderlineStrikethroughAndPointSize has unexpected size % instead of 1", size_of(type_of(ON_FontList.m_bMatchUnderlineStrikethroughAndPointSize)));
        assert(((cast(*void)(*instance.m_by_index)) - cast(*void)(*instance)) == 8, "ON_FontList.m_by_index has unexpected offset % instead of 8", ((cast(*void)(*instance.m_by_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontList.m_by_index)) == 24, "ON_FontList.m_by_index has unexpected size % instead of 24", size_of(type_of(ON_FontList.m_by_index)));
        assert(((cast(*void)(*instance.m_unsorted)) - cast(*void)(*instance)) == 32, "ON_FontList.m_unsorted has unexpected offset % instead of 32", ((cast(*void)(*instance.m_unsorted)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontList.m_unsorted)) == 24, "ON_FontList.m_unsorted has unexpected size % instead of 24", size_of(type_of(ON_FontList.m_unsorted)));
        assert(((cast(*void)(*instance.m_sorted)) - cast(*void)(*instance)) == 56, "ON_FontList.m_sorted has unexpected offset % instead of 56", ((cast(*void)(*instance.m_sorted)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontList.m_sorted)) == 8, "ON_FontList.m_sorted has unexpected size % instead of 8", size_of(type_of(ON_FontList.m_sorted)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 64, "ON_FontList.m_reserved has unexpected offset % instead of 64", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontList.m_reserved)) == 160, "ON_FontList.m_reserved has unexpected size % instead of 160", size_of(type_of(ON_FontList.m_reserved)));
        assert(((cast(*void)(*instance.m_quartet_list)) - cast(*void)(*instance)) == 224, "ON_FontList.m_quartet_list has unexpected offset % instead of 224", ((cast(*void)(*instance.m_quartet_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_FontList.m_quartet_list)) == 24, "ON_FontList.m_quartet_list has unexpected size % instead of 24", size_of(type_of(ON_FontList.m_quartet_list)));
        assert(size_of(ON_FontList) == 248, "ON_FontList has size % instead of 248", size_of(ON_FontList));
    }

    {
        instance: ON_TextStyle;
        assert(((cast(*void)(*instance.m_font_description)) - cast(*void)(*instance)) == 144, "ON_TextStyle.m_font_description has unexpected offset % instead of 144", ((cast(*void)(*instance.m_font_description)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_font_description)) == 8, "ON_TextStyle.m_font_description has unexpected size % instead of 8", size_of(type_of(ON_TextStyle.m_font_description)));
        assert(((cast(*void)(*instance.m_apple_font_name)) - cast(*void)(*instance)) == 152, "ON_TextStyle.m_apple_font_name has unexpected offset % instead of 152", ((cast(*void)(*instance.m_apple_font_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_apple_font_name)) == 8, "ON_TextStyle.m_apple_font_name has unexpected size % instead of 8", size_of(type_of(ON_TextStyle.m_apple_font_name)));
        assert(((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)) == 160, "ON_TextStyle.m_managed_font has unexpected offset % instead of 160", ((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_managed_font)) == 8, "ON_TextStyle.m_managed_font has unexpected size % instead of 8", size_of(type_of(ON_TextStyle.m_managed_font)));
        assert(((cast(*void)(*instance.m_is_set_bits)) - cast(*void)(*instance)) == 168, "ON_TextStyle.m_is_set_bits has unexpected offset % instead of 168", ((cast(*void)(*instance.m_is_set_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_is_set_bits)) == 1, "ON_TextStyle.m_is_set_bits has unexpected size % instead of 1", size_of(type_of(ON_TextStyle.m_is_set_bits)));
        assert(((cast(*void)(*instance.m_is_locked_bits)) - cast(*void)(*instance)) == 169, "ON_TextStyle.m_is_locked_bits has unexpected offset % instead of 169", ((cast(*void)(*instance.m_is_locked_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_is_locked_bits)) == 1, "ON_TextStyle.m_is_locked_bits has unexpected size % instead of 1", size_of(type_of(ON_TextStyle.m_is_locked_bits)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 170, "ON_TextStyle.m_reserved1 has unexpected offset % instead of 170", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_reserved1)) == 1, "ON_TextStyle.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_TextStyle.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 172, "ON_TextStyle.m_reserved2 has unexpected offset % instead of 172", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_reserved2)) == 4, "ON_TextStyle.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_TextStyle.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved_ptr_1)) - cast(*void)(*instance)) == 176, "ON_TextStyle.m_reserved_ptr_1 has unexpected offset % instead of 176", ((cast(*void)(*instance.m_reserved_ptr_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_reserved_ptr_1)) == 8, "ON_TextStyle.m_reserved_ptr_1 has unexpected size % instead of 8", size_of(type_of(ON_TextStyle.m_reserved_ptr_1)));
        assert(((cast(*void)(*instance.m_reserved_ptr_2)) - cast(*void)(*instance)) == 184, "ON_TextStyle.m_reserved_ptr_2 has unexpected offset % instead of 184", ((cast(*void)(*instance.m_reserved_ptr_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_reserved_ptr_2)) == 8, "ON_TextStyle.m_reserved_ptr_2 has unexpected size % instead of 8", size_of(type_of(ON_TextStyle.m_reserved_ptr_2)));
        assert(((cast(*void)(*instance.m_reserved_double_0)) - cast(*void)(*instance)) == 192, "ON_TextStyle.m_reserved_double_0 has unexpected offset % instead of 192", ((cast(*void)(*instance.m_reserved_double_0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_reserved_double_0)) == 8, "ON_TextStyle.m_reserved_double_0 has unexpected size % instead of 8", size_of(type_of(ON_TextStyle.m_reserved_double_0)));
        assert(((cast(*void)(*instance.m_reserved_double_1)) - cast(*void)(*instance)) == 200, "ON_TextStyle.m_reserved_double_1 has unexpected offset % instead of 200", ((cast(*void)(*instance.m_reserved_double_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextStyle.m_reserved_double_1)) == 8, "ON_TextStyle.m_reserved_double_1 has unexpected size % instead of 8", size_of(type_of(ON_TextStyle.m_reserved_double_1)));
        assert(size_of(ON_TextStyle) == 208, "ON_TextStyle has size % instead of 208", size_of(ON_TextStyle));
    }

    {
        instance: ON_Arrowhead;
        assert(((cast(*void)(*instance.m_arrowhead_type)) - cast(*void)(*instance)) == 0, "ON_Arrowhead.m_arrowhead_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_arrowhead_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Arrowhead.m_arrowhead_type)) == 4, "ON_Arrowhead.m_arrowhead_type has unexpected size % instead of 4", size_of(type_of(ON_Arrowhead.m_arrowhead_type)));
        assert(((cast(*void)(*instance.m_arrow_block_id)) - cast(*void)(*instance)) == 4, "ON_Arrowhead.m_arrow_block_id has unexpected offset % instead of 4", ((cast(*void)(*instance.m_arrow_block_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Arrowhead.m_arrow_block_id)) == 16, "ON_Arrowhead.m_arrow_block_id has unexpected size % instead of 16", size_of(type_of(ON_Arrowhead.m_arrow_block_id)));
        assert(size_of(ON_Arrowhead) == 20, "ON_Arrowhead has size % instead of 20", size_of(ON_Arrowhead));
    }

    {
        instance: ON_TextMask;
        assert(((cast(*void)(*instance.m_bDrawMask)) - cast(*void)(*instance)) == 0, "ON_TextMask.m_bDrawMask has unexpected offset % instead of 0", ((cast(*void)(*instance.m_bDrawMask)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_bDrawMask)) == 1, "ON_TextMask.m_bDrawMask has unexpected size % instead of 1", size_of(type_of(ON_TextMask.m_bDrawMask)));
        assert(((cast(*void)(*instance.m_mask_type)) - cast(*void)(*instance)) == 1, "ON_TextMask.m_mask_type has unexpected offset % instead of 1", ((cast(*void)(*instance.m_mask_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_mask_type)) == 1, "ON_TextMask.m_mask_type has unexpected size % instead of 1", size_of(type_of(ON_TextMask.m_mask_type)));
        assert(((cast(*void)(*instance.m_mask_frame)) - cast(*void)(*instance)) == 2, "ON_TextMask.m_mask_frame has unexpected offset % instead of 2", ((cast(*void)(*instance.m_mask_frame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_mask_frame)) == 1, "ON_TextMask.m_mask_frame has unexpected size % instead of 1", size_of(type_of(ON_TextMask.m_mask_frame)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 3, "ON_TextMask.m_reserved2 has unexpected offset % instead of 3", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_reserved2)) == 1, "ON_TextMask.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_TextMask.m_reserved2)));
        assert(((cast(*void)(*instance.m_mask_color)) - cast(*void)(*instance)) == 4, "ON_TextMask.m_mask_color has unexpected offset % instead of 4", ((cast(*void)(*instance.m_mask_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_mask_color)) == 4, "ON_TextMask.m_mask_color has unexpected size % instead of 4", size_of(type_of(ON_TextMask.m_mask_color)));
        assert(((cast(*void)(*instance.m_mask_border)) - cast(*void)(*instance)) == 8, "ON_TextMask.m_mask_border has unexpected offset % instead of 8", ((cast(*void)(*instance.m_mask_border)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_mask_border)) == 8, "ON_TextMask.m_mask_border has unexpected size % instead of 8", size_of(type_of(ON_TextMask.m_mask_border)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 16, "ON_TextMask.m_reserved3 has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_reserved3)) == 4, "ON_TextMask.m_reserved3 has unexpected size % instead of 4", size_of(type_of(ON_TextMask.m_reserved3)));
        assert(((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)) == 20, "ON_TextMask.m_content_hash has unexpected offset % instead of 20", ((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextMask.m_content_hash)) == 20, "ON_TextMask.m_content_hash has unexpected size % instead of 20", size_of(type_of(ON_TextMask.m_content_hash)));
        assert(size_of(ON_TextMask) == 40, "ON_TextMask has size % instead of 40", size_of(ON_TextMask));
    }

    {
        instance: ON_DimStyle.DimstyleField;
        assert(((cast(*void)(*instance.m_next)) - cast(*void)(*instance)) == 0, "ON_DimStyle.DimstyleField.m_next has unexpected offset % instead of 0", ((cast(*void)(*instance.m_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.DimstyleField.m_next)) == 8, "ON_DimStyle.DimstyleField.m_next has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.DimstyleField.m_next)));
        assert(((cast(*void)(*instance.m_field_id)) - cast(*void)(*instance)) == 8, "ON_DimStyle.DimstyleField.m_field_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_field_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.DimstyleField.m_field_id)) == 4, "ON_DimStyle.DimstyleField.m_field_id has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.DimstyleField.m_field_id)));
        assert(((cast(*void)(*instance.m_val)) - cast(*void)(*instance)) == 16, "ON_DimStyle.DimstyleField.m_val has unexpected offset % instead of 16", ((cast(*void)(*instance.m_val)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.DimstyleField.m_val)) == 8, "ON_DimStyle.DimstyleField.m_val has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.DimstyleField.m_val)));
        assert(size_of(ON_DimStyle.DimstyleField) == 24, "ON_DimStyle.DimstyleField has size % instead of 24", size_of(ON_DimStyle.DimstyleField));
    }

    {
        instance: ON_DimStyle;
        assert(((cast(*void)(*instance.m_extextension)) - cast(*void)(*instance)) == 144, "ON_DimStyle.m_extextension has unexpected offset % instead of 144", ((cast(*void)(*instance.m_extextension)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_extextension)) == 8, "ON_DimStyle.m_extextension has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_extextension)));
        assert(((cast(*void)(*instance.m_extoffset)) - cast(*void)(*instance)) == 152, "ON_DimStyle.m_extoffset has unexpected offset % instead of 152", ((cast(*void)(*instance.m_extoffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_extoffset)) == 8, "ON_DimStyle.m_extoffset has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_extoffset)));
        assert(((cast(*void)(*instance.m_arrowsize)) - cast(*void)(*instance)) == 160, "ON_DimStyle.m_arrowsize has unexpected offset % instead of 160", ((cast(*void)(*instance.m_arrowsize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrowsize)) == 8, "ON_DimStyle.m_arrowsize has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_arrowsize)));
        assert(((cast(*void)(*instance.m_leaderarrowsize)) - cast(*void)(*instance)) == 168, "ON_DimStyle.m_leaderarrowsize has unexpected offset % instead of 168", ((cast(*void)(*instance.m_leaderarrowsize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leaderarrowsize)) == 8, "ON_DimStyle.m_leaderarrowsize has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_leaderarrowsize)));
        assert(((cast(*void)(*instance.m_centermark)) - cast(*void)(*instance)) == 176, "ON_DimStyle.m_centermark has unexpected offset % instead of 176", ((cast(*void)(*instance.m_centermark)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_centermark)) == 8, "ON_DimStyle.m_centermark has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_centermark)));
        assert(((cast(*void)(*instance.m_centermark_style)) - cast(*void)(*instance)) == 184, "ON_DimStyle.m_centermark_style has unexpected offset % instead of 184", ((cast(*void)(*instance.m_centermark_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_centermark_style)) == 1, "ON_DimStyle.m_centermark_style has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_centermark_style)));
        assert(((cast(*void)(*instance.m_textgap)) - cast(*void)(*instance)) == 192, "ON_DimStyle.m_textgap has unexpected offset % instead of 192", ((cast(*void)(*instance.m_textgap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_textgap)) == 8, "ON_DimStyle.m_textgap has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_textgap)));
        assert(((cast(*void)(*instance.m_textheight)) - cast(*void)(*instance)) == 200, "ON_DimStyle.m_textheight has unexpected offset % instead of 200", ((cast(*void)(*instance.m_textheight)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_textheight)) == 8, "ON_DimStyle.m_textheight has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_textheight)));
        assert(((cast(*void)(*instance.m_dim_text_location)) - cast(*void)(*instance)) == 208, "ON_DimStyle.m_dim_text_location has unexpected offset % instead of 208", ((cast(*void)(*instance.m_dim_text_location)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_text_location)) == 1, "ON_DimStyle.m_dim_text_location has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dim_text_location)));
        assert(((cast(*void)(*instance.m_dimradial_text_location)) - cast(*void)(*instance)) == 209, "ON_DimStyle.m_dimradial_text_location has unexpected offset % instead of 209", ((cast(*void)(*instance.m_dimradial_text_location)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dimradial_text_location)) == 1, "ON_DimStyle.m_dimradial_text_location has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dimradial_text_location)));
        assert(((cast(*void)(*instance.m_angleformat)) - cast(*void)(*instance)) == 210, "ON_DimStyle.m_angleformat has unexpected offset % instead of 210", ((cast(*void)(*instance.m_angleformat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_angleformat)) == 1, "ON_DimStyle.m_angleformat has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_angleformat)));
        assert(((cast(*void)(*instance.m_angleresolution)) - cast(*void)(*instance)) == 212, "ON_DimStyle.m_angleresolution has unexpected offset % instead of 212", ((cast(*void)(*instance.m_angleresolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_angleresolution)) == 4, "ON_DimStyle.m_angleresolution has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_angleresolution)));
        assert(((cast(*void)(*instance.m_dimension_length_display)) - cast(*void)(*instance)) == 216, "ON_DimStyle.m_dimension_length_display has unexpected offset % instead of 216", ((cast(*void)(*instance.m_dimension_length_display)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dimension_length_display)) == 4, "ON_DimStyle.m_dimension_length_display has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_dimension_length_display)));
        assert(((cast(*void)(*instance.m_alternate_dimension_length_display)) - cast(*void)(*instance)) == 220, "ON_DimStyle.m_alternate_dimension_length_display has unexpected offset % instead of 220", ((cast(*void)(*instance.m_alternate_dimension_length_display)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alternate_dimension_length_display)) == 4, "ON_DimStyle.m_alternate_dimension_length_display has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_alternate_dimension_length_display)));
        assert(((cast(*void)(*instance.m_lengthresolution)) - cast(*void)(*instance)) == 224, "ON_DimStyle.m_lengthresolution has unexpected offset % instead of 224", ((cast(*void)(*instance.m_lengthresolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_lengthresolution)) == 4, "ON_DimStyle.m_lengthresolution has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_lengthresolution)));
        assert(((cast(*void)(*instance.m_alternate_lengthresolution)) - cast(*void)(*instance)) == 228, "ON_DimStyle.m_alternate_lengthresolution has unexpected offset % instead of 228", ((cast(*void)(*instance.m_alternate_lengthresolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alternate_lengthresolution)) == 4, "ON_DimStyle.m_alternate_lengthresolution has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_alternate_lengthresolution)));
        assert(((cast(*void)(*instance.m_lengthfactor)) - cast(*void)(*instance)) == 232, "ON_DimStyle.m_lengthfactor has unexpected offset % instead of 232", ((cast(*void)(*instance.m_lengthfactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_lengthfactor)) == 8, "ON_DimStyle.m_lengthfactor has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_lengthfactor)));
        assert(((cast(*void)(*instance.m_alternate_lengthfactor)) - cast(*void)(*instance)) == 240, "ON_DimStyle.m_alternate_lengthfactor has unexpected offset % instead of 240", ((cast(*void)(*instance.m_alternate_lengthfactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alternate_lengthfactor)) == 8, "ON_DimStyle.m_alternate_lengthfactor has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_alternate_lengthfactor)));
        assert(((cast(*void)(*instance.m_font_characteristics)) - cast(*void)(*instance)) == 248, "ON_DimStyle.m_font_characteristics has unexpected offset % instead of 248", ((cast(*void)(*instance.m_font_characteristics)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_font_characteristics)) == 192, "ON_DimStyle.m_font_characteristics has unexpected size % instead of 192", size_of(type_of(ON_DimStyle.m_font_characteristics)));
        assert(((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)) == 440, "ON_DimStyle.m_managed_font has unexpected offset % instead of 440", ((cast(*void)(*instance.m_managed_font)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_managed_font)) == 8, "ON_DimStyle.m_managed_font has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_managed_font)));
        assert(((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)) == 448, "ON_DimStyle.m_content_hash has unexpected offset % instead of 448", ((cast(*void)(*instance.m_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_content_hash)) == 20, "ON_DimStyle.m_content_hash has unexpected size % instead of 20", size_of(type_of(ON_DimStyle.m_content_hash)));
        assert(((cast(*void)(*instance.m_text_position_properties_hash)) - cast(*void)(*instance)) == 468, "ON_DimStyle.m_text_position_properties_hash has unexpected offset % instead of 468", ((cast(*void)(*instance.m_text_position_properties_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_position_properties_hash)) == 20, "ON_DimStyle.m_text_position_properties_hash has unexpected size % instead of 20", size_of(type_of(ON_DimStyle.m_text_position_properties_hash)));
        assert(((cast(*void)(*instance.m_reserved_hash2)) - cast(*void)(*instance)) == 488, "ON_DimStyle.m_reserved_hash2 has unexpected offset % instead of 488", ((cast(*void)(*instance.m_reserved_hash2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_reserved_hash2)) == 20, "ON_DimStyle.m_reserved_hash2 has unexpected size % instead of 20", size_of(type_of(ON_DimStyle.m_reserved_hash2)));
        assert(((cast(*void)(*instance.m_parent_dim_style_content_hash)) - cast(*void)(*instance)) == 508, "ON_DimStyle.m_parent_dim_style_content_hash has unexpected offset % instead of 508", ((cast(*void)(*instance.m_parent_dim_style_content_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_parent_dim_style_content_hash)) == 20, "ON_DimStyle.m_parent_dim_style_content_hash has unexpected size % instead of 20", size_of(type_of(ON_DimStyle.m_parent_dim_style_content_hash)));
        assert(((cast(*void)(*instance.m_bAlternate)) - cast(*void)(*instance)) == 528, "ON_DimStyle.m_bAlternate has unexpected offset % instead of 528", ((cast(*void)(*instance.m_bAlternate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_bAlternate)) == 1, "ON_DimStyle.m_bAlternate has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_bAlternate)));
        assert(((cast(*void)(*instance.m_bForceDimLine)) - cast(*void)(*instance)) == 529, "ON_DimStyle.m_bForceDimLine has unexpected offset % instead of 529", ((cast(*void)(*instance.m_bForceDimLine)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_bForceDimLine)) == 1, "ON_DimStyle.m_bForceDimLine has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_bForceDimLine)));
        assert(((cast(*void)(*instance.m_ArrowFit)) - cast(*void)(*instance)) == 530, "ON_DimStyle.m_ArrowFit has unexpected offset % instead of 530", ((cast(*void)(*instance.m_ArrowFit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ArrowFit)) == 1, "ON_DimStyle.m_ArrowFit has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_ArrowFit)));
        assert(((cast(*void)(*instance.m_TextFit)) - cast(*void)(*instance)) == 531, "ON_DimStyle.m_TextFit has unexpected offset % instead of 531", ((cast(*void)(*instance.m_TextFit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_TextFit)) == 1, "ON_DimStyle.m_TextFit has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_TextFit)));
        assert(((cast(*void)(*instance.m_decimal_separator)) - cast(*void)(*instance)) == 532, "ON_DimStyle.m_decimal_separator has unexpected offset % instead of 532", ((cast(*void)(*instance.m_decimal_separator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_decimal_separator)) == 2, "ON_DimStyle.m_decimal_separator has unexpected size % instead of 2", size_of(type_of(ON_DimStyle.m_decimal_separator)));
        assert(((cast(*void)(*instance.m_prefix)) - cast(*void)(*instance)) == 536, "ON_DimStyle.m_prefix has unexpected offset % instead of 536", ((cast(*void)(*instance.m_prefix)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_prefix)) == 8, "ON_DimStyle.m_prefix has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_prefix)));
        assert(((cast(*void)(*instance.m_suffix)) - cast(*void)(*instance)) == 544, "ON_DimStyle.m_suffix has unexpected offset % instead of 544", ((cast(*void)(*instance.m_suffix)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_suffix)) == 8, "ON_DimStyle.m_suffix has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_suffix)));
        assert(((cast(*void)(*instance.m_alternate_prefix)) - cast(*void)(*instance)) == 552, "ON_DimStyle.m_alternate_prefix has unexpected offset % instead of 552", ((cast(*void)(*instance.m_alternate_prefix)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alternate_prefix)) == 8, "ON_DimStyle.m_alternate_prefix has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_alternate_prefix)));
        assert(((cast(*void)(*instance.m_alternate_suffix)) - cast(*void)(*instance)) == 560, "ON_DimStyle.m_alternate_suffix has unexpected offset % instead of 560", ((cast(*void)(*instance.m_alternate_suffix)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alternate_suffix)) == 8, "ON_DimStyle.m_alternate_suffix has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_alternate_suffix)));
        assert(((cast(*void)(*instance.m_dimextension)) - cast(*void)(*instance)) == 568, "ON_DimStyle.m_dimextension has unexpected offset % instead of 568", ((cast(*void)(*instance.m_dimextension)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dimextension)) == 8, "ON_DimStyle.m_dimextension has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_dimextension)));
        assert(((cast(*void)(*instance.m_bSuppressExtension1)) - cast(*void)(*instance)) == 576, "ON_DimStyle.m_bSuppressExtension1 has unexpected offset % instead of 576", ((cast(*void)(*instance.m_bSuppressExtension1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_bSuppressExtension1)) == 1, "ON_DimStyle.m_bSuppressExtension1 has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_bSuppressExtension1)));
        assert(((cast(*void)(*instance.m_bSuppressExtension2)) - cast(*void)(*instance)) == 577, "ON_DimStyle.m_bSuppressExtension2 has unexpected offset % instead of 577", ((cast(*void)(*instance.m_bSuppressExtension2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_bSuppressExtension2)) == 1, "ON_DimStyle.m_bSuppressExtension2 has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_bSuppressExtension2)));
        assert(((cast(*void)(*instance.m_bReserved1)) - cast(*void)(*instance)) == 578, "ON_DimStyle.m_bReserved1 has unexpected offset % instead of 578", ((cast(*void)(*instance.m_bReserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_bReserved1)) == 1, "ON_DimStyle.m_bReserved1 has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_bReserved1)));
        assert(((cast(*void)(*instance.m_bReserved2)) - cast(*void)(*instance)) == 579, "ON_DimStyle.m_bReserved2 has unexpected offset % instead of 579", ((cast(*void)(*instance.m_bReserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_bReserved2)) == 1, "ON_DimStyle.m_bReserved2 has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_bReserved2)));
        assert(((cast(*void)(*instance.m_field_override_parent_count)) - cast(*void)(*instance)) == 580, "ON_DimStyle.m_field_override_parent_count has unexpected offset % instead of 580", ((cast(*void)(*instance.m_field_override_parent_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_field_override_parent_count)) == 4, "ON_DimStyle.m_field_override_parent_count has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_field_override_parent_count)));
        assert(((cast(*void)(*instance.m_field_override_parent_bits0)) - cast(*void)(*instance)) == 584, "ON_DimStyle.m_field_override_parent_bits0 has unexpected offset % instead of 584", ((cast(*void)(*instance.m_field_override_parent_bits0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_field_override_parent_bits0)) == 4, "ON_DimStyle.m_field_override_parent_bits0 has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_field_override_parent_bits0)));
        assert(((cast(*void)(*instance.m_field_override_parent_bits1)) - cast(*void)(*instance)) == 588, "ON_DimStyle.m_field_override_parent_bits1 has unexpected offset % instead of 588", ((cast(*void)(*instance.m_field_override_parent_bits1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_field_override_parent_bits1)) == 4, "ON_DimStyle.m_field_override_parent_bits1 has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_field_override_parent_bits1)));
        assert(((cast(*void)(*instance.m_field_override_parent_bits2)) - cast(*void)(*instance)) == 592, "ON_DimStyle.m_field_override_parent_bits2 has unexpected offset % instead of 592", ((cast(*void)(*instance.m_field_override_parent_bits2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_field_override_parent_bits2)) == 4, "ON_DimStyle.m_field_override_parent_bits2 has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_field_override_parent_bits2)));
        assert(((cast(*void)(*instance.m_field_override_parent_bits3)) - cast(*void)(*instance)) == 596, "ON_DimStyle.m_field_override_parent_bits3 has unexpected offset % instead of 596", ((cast(*void)(*instance.m_field_override_parent_bits3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_field_override_parent_bits3)) == 4, "ON_DimStyle.m_field_override_parent_bits3 has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_field_override_parent_bits3)));
        assert(((cast(*void)(*instance.m_tolerance_format)) - cast(*void)(*instance)) == 600, "ON_DimStyle.m_tolerance_format has unexpected offset % instead of 600", ((cast(*void)(*instance.m_tolerance_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_tolerance_format)) == 1, "ON_DimStyle.m_tolerance_format has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_tolerance_format)));
        assert(((cast(*void)(*instance.m_tolerance_resolution)) - cast(*void)(*instance)) == 604, "ON_DimStyle.m_tolerance_resolution has unexpected offset % instead of 604", ((cast(*void)(*instance.m_tolerance_resolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_tolerance_resolution)) == 4, "ON_DimStyle.m_tolerance_resolution has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_tolerance_resolution)));
        assert(((cast(*void)(*instance.m_tolerance_upper_value)) - cast(*void)(*instance)) == 608, "ON_DimStyle.m_tolerance_upper_value has unexpected offset % instead of 608", ((cast(*void)(*instance.m_tolerance_upper_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_tolerance_upper_value)) == 8, "ON_DimStyle.m_tolerance_upper_value has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_tolerance_upper_value)));
        assert(((cast(*void)(*instance.m_tolerance_lower_value)) - cast(*void)(*instance)) == 616, "ON_DimStyle.m_tolerance_lower_value has unexpected offset % instead of 616", ((cast(*void)(*instance.m_tolerance_lower_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_tolerance_lower_value)) == 8, "ON_DimStyle.m_tolerance_lower_value has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_tolerance_lower_value)));
        assert(((cast(*void)(*instance.m_tolerance_height_scale)) - cast(*void)(*instance)) == 624, "ON_DimStyle.m_tolerance_height_scale has unexpected offset % instead of 624", ((cast(*void)(*instance.m_tolerance_height_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_tolerance_height_scale)) == 8, "ON_DimStyle.m_tolerance_height_scale has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_tolerance_height_scale)));
        assert(((cast(*void)(*instance.m_baseline_spacing)) - cast(*void)(*instance)) == 632, "ON_DimStyle.m_baseline_spacing has unexpected offset % instead of 632", ((cast(*void)(*instance.m_baseline_spacing)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_baseline_spacing)) == 8, "ON_DimStyle.m_baseline_spacing has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_baseline_spacing)));
        assert(((cast(*void)(*instance.m_text_mask)) - cast(*void)(*instance)) == 640, "ON_DimStyle.m_text_mask has unexpected offset % instead of 640", ((cast(*void)(*instance.m_text_mask)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_mask)) == 40, "ON_DimStyle.m_text_mask has unexpected size % instead of 40", size_of(type_of(ON_DimStyle.m_text_mask)));
        assert(((cast(*void)(*instance.m_dimscale_source)) - cast(*void)(*instance)) == 680, "ON_DimStyle.m_dimscale_source has unexpected offset % instead of 680", ((cast(*void)(*instance.m_dimscale_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dimscale_source)) == 4, "ON_DimStyle.m_dimscale_source has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_dimscale_source)));
        assert(((cast(*void)(*instance.m_source_dimstyle)) - cast(*void)(*instance)) == 684, "ON_DimStyle.m_source_dimstyle has unexpected offset % instead of 684", ((cast(*void)(*instance.m_source_dimstyle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_source_dimstyle)) == 16, "ON_DimStyle.m_source_dimstyle has unexpected size % instead of 16", size_of(type_of(ON_DimStyle.m_source_dimstyle)));
        assert(((cast(*void)(*instance.m_ext_line_color_source)) - cast(*void)(*instance)) == 700, "ON_DimStyle.m_ext_line_color_source has unexpected offset % instead of 700", ((cast(*void)(*instance.m_ext_line_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ext_line_color_source)) == 1, "ON_DimStyle.m_ext_line_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_ext_line_color_source)));
        assert(((cast(*void)(*instance.m_dim_line_color_source)) - cast(*void)(*instance)) == 701, "ON_DimStyle.m_dim_line_color_source has unexpected offset % instead of 701", ((cast(*void)(*instance.m_dim_line_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_line_color_source)) == 1, "ON_DimStyle.m_dim_line_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dim_line_color_source)));
        assert(((cast(*void)(*instance.m_arrow_color_source)) - cast(*void)(*instance)) == 702, "ON_DimStyle.m_arrow_color_source has unexpected offset % instead of 702", ((cast(*void)(*instance.m_arrow_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_color_source)) == 1, "ON_DimStyle.m_arrow_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_arrow_color_source)));
        assert(((cast(*void)(*instance.m_text_color_source)) - cast(*void)(*instance)) == 703, "ON_DimStyle.m_text_color_source has unexpected offset % instead of 703", ((cast(*void)(*instance.m_text_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_color_source)) == 1, "ON_DimStyle.m_text_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_text_color_source)));
        assert(((cast(*void)(*instance.m_ext_line_color)) - cast(*void)(*instance)) == 704, "ON_DimStyle.m_ext_line_color has unexpected offset % instead of 704", ((cast(*void)(*instance.m_ext_line_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ext_line_color)) == 4, "ON_DimStyle.m_ext_line_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_ext_line_color)));
        assert(((cast(*void)(*instance.m_dim_line_color)) - cast(*void)(*instance)) == 708, "ON_DimStyle.m_dim_line_color has unexpected offset % instead of 708", ((cast(*void)(*instance.m_dim_line_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_line_color)) == 4, "ON_DimStyle.m_dim_line_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_dim_line_color)));
        assert(((cast(*void)(*instance.m_arrow_color)) - cast(*void)(*instance)) == 712, "ON_DimStyle.m_arrow_color has unexpected offset % instead of 712", ((cast(*void)(*instance.m_arrow_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_color)) == 4, "ON_DimStyle.m_arrow_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_arrow_color)));
        assert(((cast(*void)(*instance.m_text_color)) - cast(*void)(*instance)) == 716, "ON_DimStyle.m_text_color has unexpected offset % instead of 716", ((cast(*void)(*instance.m_text_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_color)) == 4, "ON_DimStyle.m_text_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_text_color)));
        assert(((cast(*void)(*instance.m_ext_line_plot_color_source)) - cast(*void)(*instance)) == 720, "ON_DimStyle.m_ext_line_plot_color_source has unexpected offset % instead of 720", ((cast(*void)(*instance.m_ext_line_plot_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ext_line_plot_color_source)) == 1, "ON_DimStyle.m_ext_line_plot_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_ext_line_plot_color_source)));
        assert(((cast(*void)(*instance.m_dim_line_plot_color_source)) - cast(*void)(*instance)) == 721, "ON_DimStyle.m_dim_line_plot_color_source has unexpected offset % instead of 721", ((cast(*void)(*instance.m_dim_line_plot_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_line_plot_color_source)) == 1, "ON_DimStyle.m_dim_line_plot_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dim_line_plot_color_source)));
        assert(((cast(*void)(*instance.m_arrow_plot_color_source)) - cast(*void)(*instance)) == 722, "ON_DimStyle.m_arrow_plot_color_source has unexpected offset % instead of 722", ((cast(*void)(*instance.m_arrow_plot_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_plot_color_source)) == 1, "ON_DimStyle.m_arrow_plot_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_arrow_plot_color_source)));
        assert(((cast(*void)(*instance.m_text_plot_color_source)) - cast(*void)(*instance)) == 723, "ON_DimStyle.m_text_plot_color_source has unexpected offset % instead of 723", ((cast(*void)(*instance.m_text_plot_color_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_plot_color_source)) == 1, "ON_DimStyle.m_text_plot_color_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_text_plot_color_source)));
        assert(((cast(*void)(*instance.m_ext_line_plot_color)) - cast(*void)(*instance)) == 724, "ON_DimStyle.m_ext_line_plot_color has unexpected offset % instead of 724", ((cast(*void)(*instance.m_ext_line_plot_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ext_line_plot_color)) == 4, "ON_DimStyle.m_ext_line_plot_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_ext_line_plot_color)));
        assert(((cast(*void)(*instance.m_dim_line_plot_color)) - cast(*void)(*instance)) == 728, "ON_DimStyle.m_dim_line_plot_color has unexpected offset % instead of 728", ((cast(*void)(*instance.m_dim_line_plot_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_line_plot_color)) == 4, "ON_DimStyle.m_dim_line_plot_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_dim_line_plot_color)));
        assert(((cast(*void)(*instance.m_arrow_plot_color)) - cast(*void)(*instance)) == 732, "ON_DimStyle.m_arrow_plot_color has unexpected offset % instead of 732", ((cast(*void)(*instance.m_arrow_plot_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_plot_color)) == 4, "ON_DimStyle.m_arrow_plot_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_arrow_plot_color)));
        assert(((cast(*void)(*instance.m_text_plot_color)) - cast(*void)(*instance)) == 736, "ON_DimStyle.m_text_plot_color has unexpected offset % instead of 736", ((cast(*void)(*instance.m_text_plot_color)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_plot_color)) == 4, "ON_DimStyle.m_text_plot_color has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_text_plot_color)));
        assert(((cast(*void)(*instance.m_ext_line_plot_weight_source)) - cast(*void)(*instance)) == 740, "ON_DimStyle.m_ext_line_plot_weight_source has unexpected offset % instead of 740", ((cast(*void)(*instance.m_ext_line_plot_weight_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ext_line_plot_weight_source)) == 1, "ON_DimStyle.m_ext_line_plot_weight_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_ext_line_plot_weight_source)));
        assert(((cast(*void)(*instance.m_dim_line_plot_weight_source)) - cast(*void)(*instance)) == 741, "ON_DimStyle.m_dim_line_plot_weight_source has unexpected offset % instead of 741", ((cast(*void)(*instance.m_dim_line_plot_weight_source)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_line_plot_weight_source)) == 1, "ON_DimStyle.m_dim_line_plot_weight_source has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dim_line_plot_weight_source)));
        assert(((cast(*void)(*instance.m_ext_line_plot_weight_mm)) - cast(*void)(*instance)) == 744, "ON_DimStyle.m_ext_line_plot_weight_mm has unexpected offset % instead of 744", ((cast(*void)(*instance.m_ext_line_plot_weight_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ext_line_plot_weight_mm)) == 8, "ON_DimStyle.m_ext_line_plot_weight_mm has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_ext_line_plot_weight_mm)));
        assert(((cast(*void)(*instance.m_dim_line_plot_weight_mm)) - cast(*void)(*instance)) == 752, "ON_DimStyle.m_dim_line_plot_weight_mm has unexpected offset % instead of 752", ((cast(*void)(*instance.m_dim_line_plot_weight_mm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_line_plot_weight_mm)) == 8, "ON_DimStyle.m_dim_line_plot_weight_mm has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_dim_line_plot_weight_mm)));
        assert(((cast(*void)(*instance.m_fixed_extension_len)) - cast(*void)(*instance)) == 760, "ON_DimStyle.m_fixed_extension_len has unexpected offset % instead of 760", ((cast(*void)(*instance.m_fixed_extension_len)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_fixed_extension_len)) == 8, "ON_DimStyle.m_fixed_extension_len has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_fixed_extension_len)));
        assert(((cast(*void)(*instance.m_fixed_extension_len_on)) - cast(*void)(*instance)) == 768, "ON_DimStyle.m_fixed_extension_len_on has unexpected offset % instead of 768", ((cast(*void)(*instance.m_fixed_extension_len_on)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_fixed_extension_len_on)) == 1, "ON_DimStyle.m_fixed_extension_len_on has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_fixed_extension_len_on)));
        assert(((cast(*void)(*instance.m_ReservedChar1)) - cast(*void)(*instance)) == 769, "ON_DimStyle.m_ReservedChar1 has unexpected offset % instead of 769", ((cast(*void)(*instance.m_ReservedChar1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ReservedChar1)) == 1, "ON_DimStyle.m_ReservedChar1 has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_ReservedChar1)));
        assert(((cast(*void)(*instance.m_ReservedShort1)) - cast(*void)(*instance)) == 770, "ON_DimStyle.m_ReservedShort1 has unexpected offset % instead of 770", ((cast(*void)(*instance.m_ReservedShort1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ReservedShort1)) == 2, "ON_DimStyle.m_ReservedShort1 has unexpected size % instead of 2", size_of(type_of(ON_DimStyle.m_ReservedShort1)));
        assert(((cast(*void)(*instance.m_ReservedInt1)) - cast(*void)(*instance)) == 772, "ON_DimStyle.m_ReservedInt1 has unexpected offset % instead of 772", ((cast(*void)(*instance.m_ReservedInt1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ReservedInt1)) == 4, "ON_DimStyle.m_ReservedInt1 has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_ReservedInt1)));
        assert(((cast(*void)(*instance.m_text_rotation)) - cast(*void)(*instance)) == 776, "ON_DimStyle.m_text_rotation has unexpected offset % instead of 776", ((cast(*void)(*instance.m_text_rotation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_rotation)) == 8, "ON_DimStyle.m_text_rotation has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_text_rotation)));
        assert(((cast(*void)(*instance.m_alternate_tolerance_resolution)) - cast(*void)(*instance)) == 784, "ON_DimStyle.m_alternate_tolerance_resolution has unexpected offset % instead of 784", ((cast(*void)(*instance.m_alternate_tolerance_resolution)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alternate_tolerance_resolution)) == 4, "ON_DimStyle.m_alternate_tolerance_resolution has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_alternate_tolerance_resolution)));
        assert(((cast(*void)(*instance.m_tol_textheight_fraction)) - cast(*void)(*instance)) == 792, "ON_DimStyle.m_tol_textheight_fraction has unexpected offset % instead of 792", ((cast(*void)(*instance.m_tol_textheight_fraction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_tol_textheight_fraction)) == 8, "ON_DimStyle.m_tol_textheight_fraction has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_tol_textheight_fraction)));
        assert(((cast(*void)(*instance.m_suppress_arrow1)) - cast(*void)(*instance)) == 800, "ON_DimStyle.m_suppress_arrow1 has unexpected offset % instead of 800", ((cast(*void)(*instance.m_suppress_arrow1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_suppress_arrow1)) == 1, "ON_DimStyle.m_suppress_arrow1 has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_suppress_arrow1)));
        assert(((cast(*void)(*instance.m_suppress_arrow2)) - cast(*void)(*instance)) == 801, "ON_DimStyle.m_suppress_arrow2 has unexpected offset % instead of 801", ((cast(*void)(*instance.m_suppress_arrow2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_suppress_arrow2)) == 1, "ON_DimStyle.m_suppress_arrow2 has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_suppress_arrow2)));
        assert(((cast(*void)(*instance.m_ReservedShort2)) - cast(*void)(*instance)) == 802, "ON_DimStyle.m_ReservedShort2 has unexpected offset % instead of 802", ((cast(*void)(*instance.m_ReservedShort2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ReservedShort2)) == 2, "ON_DimStyle.m_ReservedShort2 has unexpected size % instead of 2", size_of(type_of(ON_DimStyle.m_ReservedShort2)));
        assert(((cast(*void)(*instance.m_textmove_leader)) - cast(*void)(*instance)) == 804, "ON_DimStyle.m_textmove_leader has unexpected offset % instead of 804", ((cast(*void)(*instance.m_textmove_leader)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_textmove_leader)) == 4, "ON_DimStyle.m_textmove_leader has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_textmove_leader)));
        assert(((cast(*void)(*instance.m_arclength_sym)) - cast(*void)(*instance)) == 808, "ON_DimStyle.m_arclength_sym has unexpected offset % instead of 808", ((cast(*void)(*instance.m_arclength_sym)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arclength_sym)) == 4, "ON_DimStyle.m_arclength_sym has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_arclength_sym)));
        assert(((cast(*void)(*instance.m_stack_textheight_fraction)) - cast(*void)(*instance)) == 816, "ON_DimStyle.m_stack_textheight_fraction has unexpected offset % instead of 816", ((cast(*void)(*instance.m_stack_textheight_fraction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_stack_textheight_fraction)) == 8, "ON_DimStyle.m_stack_textheight_fraction has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_stack_textheight_fraction)));
        assert(((cast(*void)(*instance.m_stack_format)) - cast(*void)(*instance)) == 824, "ON_DimStyle.m_stack_format has unexpected offset % instead of 824", ((cast(*void)(*instance.m_stack_format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_stack_format)) == 1, "ON_DimStyle.m_stack_format has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_stack_format)));
        assert(((cast(*void)(*instance.m_alt_round)) - cast(*void)(*instance)) == 832, "ON_DimStyle.m_alt_round has unexpected offset % instead of 832", ((cast(*void)(*instance.m_alt_round)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alt_round)) == 8, "ON_DimStyle.m_alt_round has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_alt_round)));
        assert(((cast(*void)(*instance.m_round)) - cast(*void)(*instance)) == 840, "ON_DimStyle.m_round has unexpected offset % instead of 840", ((cast(*void)(*instance.m_round)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_round)) == 8, "ON_DimStyle.m_round has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_round)));
        assert(((cast(*void)(*instance.m_angular_round)) - cast(*void)(*instance)) == 848, "ON_DimStyle.m_angular_round has unexpected offset % instead of 848", ((cast(*void)(*instance.m_angular_round)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_angular_round)) == 8, "ON_DimStyle.m_angular_round has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_angular_round)));
        assert(((cast(*void)(*instance.m_zero_suppress)) - cast(*void)(*instance)) == 856, "ON_DimStyle.m_zero_suppress has unexpected offset % instead of 856", ((cast(*void)(*instance.m_zero_suppress)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_zero_suppress)) == 1, "ON_DimStyle.m_zero_suppress has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_zero_suppress)));
        assert(((cast(*void)(*instance.m_alt_zero_suppress)) - cast(*void)(*instance)) == 857, "ON_DimStyle.m_alt_zero_suppress has unexpected offset % instead of 857", ((cast(*void)(*instance.m_alt_zero_suppress)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alt_zero_suppress)) == 1, "ON_DimStyle.m_alt_zero_suppress has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_alt_zero_suppress)));
        assert(((cast(*void)(*instance.m_ang_zero_suppress)) - cast(*void)(*instance)) == 858, "ON_DimStyle.m_ang_zero_suppress has unexpected offset % instead of 858", ((cast(*void)(*instance.m_ang_zero_suppress)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_ang_zero_suppress)) == 1, "ON_DimStyle.m_ang_zero_suppress has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_ang_zero_suppress)));
        assert(((cast(*void)(*instance.m_alt_below)) - cast(*void)(*instance)) == 859, "ON_DimStyle.m_alt_below has unexpected offset % instead of 859", ((cast(*void)(*instance.m_alt_below)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_alt_below)) == 1, "ON_DimStyle.m_alt_below has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_alt_below)));
        assert(((cast(*void)(*instance.m_arrow_type_1)) - cast(*void)(*instance)) == 860, "ON_DimStyle.m_arrow_type_1 has unexpected offset % instead of 860", ((cast(*void)(*instance.m_arrow_type_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_type_1)) == 4, "ON_DimStyle.m_arrow_type_1 has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_arrow_type_1)));
        assert(((cast(*void)(*instance.m_arrow_type_2)) - cast(*void)(*instance)) == 864, "ON_DimStyle.m_arrow_type_2 has unexpected offset % instead of 864", ((cast(*void)(*instance.m_arrow_type_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_type_2)) == 4, "ON_DimStyle.m_arrow_type_2 has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_arrow_type_2)));
        assert(((cast(*void)(*instance.m_leader_arrow_type)) - cast(*void)(*instance)) == 868, "ON_DimStyle.m_leader_arrow_type has unexpected offset % instead of 868", ((cast(*void)(*instance.m_leader_arrow_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_arrow_type)) == 4, "ON_DimStyle.m_leader_arrow_type has unexpected size % instead of 4", size_of(type_of(ON_DimStyle.m_leader_arrow_type)));
        assert(((cast(*void)(*instance.m_arrow_block_id_1)) - cast(*void)(*instance)) == 872, "ON_DimStyle.m_arrow_block_id_1 has unexpected offset % instead of 872", ((cast(*void)(*instance.m_arrow_block_id_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_block_id_1)) == 16, "ON_DimStyle.m_arrow_block_id_1 has unexpected size % instead of 16", size_of(type_of(ON_DimStyle.m_arrow_block_id_1)));
        assert(((cast(*void)(*instance.m_arrow_block_id_2)) - cast(*void)(*instance)) == 888, "ON_DimStyle.m_arrow_block_id_2 has unexpected offset % instead of 888", ((cast(*void)(*instance.m_arrow_block_id_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_arrow_block_id_2)) == 16, "ON_DimStyle.m_arrow_block_id_2 has unexpected size % instead of 16", size_of(type_of(ON_DimStyle.m_arrow_block_id_2)));
        assert(((cast(*void)(*instance.m_leader_arrow_block_id)) - cast(*void)(*instance)) == 904, "ON_DimStyle.m_leader_arrow_block_id has unexpected offset % instead of 904", ((cast(*void)(*instance.m_leader_arrow_block_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_arrow_block_id)) == 16, "ON_DimStyle.m_leader_arrow_block_id has unexpected size % instead of 16", size_of(type_of(ON_DimStyle.m_leader_arrow_block_id)));
        assert(((cast(*void)(*instance.m_text_vertical_alignment)) - cast(*void)(*instance)) == 920, "ON_DimStyle.m_text_vertical_alignment has unexpected offset % instead of 920", ((cast(*void)(*instance.m_text_vertical_alignment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_vertical_alignment)) == 1, "ON_DimStyle.m_text_vertical_alignment has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_text_vertical_alignment)));
        assert(((cast(*void)(*instance.m_text_horizontal_alignment)) - cast(*void)(*instance)) == 921, "ON_DimStyle.m_text_horizontal_alignment has unexpected offset % instead of 921", ((cast(*void)(*instance.m_text_horizontal_alignment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_horizontal_alignment)) == 1, "ON_DimStyle.m_text_horizontal_alignment has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_text_horizontal_alignment)));
        assert(((cast(*void)(*instance.m_leader_text_vertical_alignment)) - cast(*void)(*instance)) == 922, "ON_DimStyle.m_leader_text_vertical_alignment has unexpected offset % instead of 922", ((cast(*void)(*instance.m_leader_text_vertical_alignment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_text_vertical_alignment)) == 1, "ON_DimStyle.m_leader_text_vertical_alignment has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_leader_text_vertical_alignment)));
        assert(((cast(*void)(*instance.m_leader_text_horizontal_alignment)) - cast(*void)(*instance)) == 923, "ON_DimStyle.m_leader_text_horizontal_alignment has unexpected offset % instead of 923", ((cast(*void)(*instance.m_leader_text_horizontal_alignment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_text_horizontal_alignment)) == 1, "ON_DimStyle.m_leader_text_horizontal_alignment has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_leader_text_horizontal_alignment)));
        assert(((cast(*void)(*instance.m_leader_content_angle_style)) - cast(*void)(*instance)) == 924, "ON_DimStyle.m_leader_content_angle_style has unexpected offset % instead of 924", ((cast(*void)(*instance.m_leader_content_angle_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_content_angle_style)) == 1, "ON_DimStyle.m_leader_content_angle_style has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_leader_content_angle_style)));
        assert(((cast(*void)(*instance.m_leader_curve_type)) - cast(*void)(*instance)) == 925, "ON_DimStyle.m_leader_curve_type has unexpected offset % instead of 925", ((cast(*void)(*instance.m_leader_curve_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_curve_type)) == 1, "ON_DimStyle.m_leader_curve_type has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_leader_curve_type)));
        assert(((cast(*void)(*instance.m_leader_content_angle)) - cast(*void)(*instance)) == 928, "ON_DimStyle.m_leader_content_angle has unexpected offset % instead of 928", ((cast(*void)(*instance.m_leader_content_angle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_content_angle)) == 8, "ON_DimStyle.m_leader_content_angle has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_leader_content_angle)));
        assert(((cast(*void)(*instance.m_leader_has_landing)) - cast(*void)(*instance)) == 936, "ON_DimStyle.m_leader_has_landing has unexpected offset % instead of 936", ((cast(*void)(*instance.m_leader_has_landing)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_has_landing)) == 1, "ON_DimStyle.m_leader_has_landing has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_leader_has_landing)));
        assert(((cast(*void)(*instance.m_leader_landing_length)) - cast(*void)(*instance)) == 944, "ON_DimStyle.m_leader_landing_length has unexpected offset % instead of 944", ((cast(*void)(*instance.m_leader_landing_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_landing_length)) == 8, "ON_DimStyle.m_leader_landing_length has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_leader_landing_length)));
        assert(((cast(*void)(*instance.m_draw_forward)) - cast(*void)(*instance)) == 952, "ON_DimStyle.m_draw_forward has unexpected offset % instead of 952", ((cast(*void)(*instance.m_draw_forward)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_draw_forward)) == 1, "ON_DimStyle.m_draw_forward has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_draw_forward)));
        assert(((cast(*void)(*instance.m_signed_ordinate)) - cast(*void)(*instance)) == 953, "ON_DimStyle.m_signed_ordinate has unexpected offset % instead of 953", ((cast(*void)(*instance.m_signed_ordinate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_signed_ordinate)) == 1, "ON_DimStyle.m_signed_ordinate has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_signed_ordinate)));
        assert(((cast(*void)(*instance.m_scale_value)) - cast(*void)(*instance)) == 960, "ON_DimStyle.m_scale_value has unexpected offset % instead of 960", ((cast(*void)(*instance.m_scale_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_scale_value)) == 128, "ON_DimStyle.m_scale_value has unexpected size % instead of 128", size_of(type_of(ON_DimStyle.m_scale_value)));
        assert(((cast(*void)(*instance.m_dimstyle_unitsystem)) - cast(*void)(*instance)) == 1088, "ON_DimStyle.m_dimstyle_unitsystem has unexpected offset % instead of 1088", ((cast(*void)(*instance.m_dimstyle_unitsystem)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dimstyle_unitsystem)) == 1, "ON_DimStyle.m_dimstyle_unitsystem has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dimstyle_unitsystem)));
        assert(((cast(*void)(*instance.m_text_orientation)) - cast(*void)(*instance)) == 1089, "ON_DimStyle.m_text_orientation has unexpected offset % instead of 1089", ((cast(*void)(*instance.m_text_orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_orientation)) == 1, "ON_DimStyle.m_text_orientation has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_text_orientation)));
        assert(((cast(*void)(*instance.m_leader_text_orientation)) - cast(*void)(*instance)) == 1090, "ON_DimStyle.m_leader_text_orientation has unexpected offset % instead of 1090", ((cast(*void)(*instance.m_leader_text_orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_leader_text_orientation)) == 1, "ON_DimStyle.m_leader_text_orientation has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_leader_text_orientation)));
        assert(((cast(*void)(*instance.m_dim_text_orientation)) - cast(*void)(*instance)) == 1091, "ON_DimStyle.m_dim_text_orientation has unexpected offset % instead of 1091", ((cast(*void)(*instance.m_dim_text_orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_text_orientation)) == 1, "ON_DimStyle.m_dim_text_orientation has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dim_text_orientation)));
        assert(((cast(*void)(*instance.m_dimradial_text_orientation)) - cast(*void)(*instance)) == 1092, "ON_DimStyle.m_dimradial_text_orientation has unexpected offset % instead of 1092", ((cast(*void)(*instance.m_dimradial_text_orientation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dimradial_text_orientation)) == 1, "ON_DimStyle.m_dimradial_text_orientation has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dimradial_text_orientation)));
        assert(((cast(*void)(*instance.m_dim_text_angle_style)) - cast(*void)(*instance)) == 1093, "ON_DimStyle.m_dim_text_angle_style has unexpected offset % instead of 1093", ((cast(*void)(*instance.m_dim_text_angle_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dim_text_angle_style)) == 1, "ON_DimStyle.m_dim_text_angle_style has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dim_text_angle_style)));
        assert(((cast(*void)(*instance.m_dimradial_text_angle_style)) - cast(*void)(*instance)) == 1094, "ON_DimStyle.m_dimradial_text_angle_style has unexpected offset % instead of 1094", ((cast(*void)(*instance.m_dimradial_text_angle_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_dimradial_text_angle_style)) == 1, "ON_DimStyle.m_dimradial_text_angle_style has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_dimradial_text_angle_style)));
        assert(((cast(*void)(*instance.m_text_underlined)) - cast(*void)(*instance)) == 1095, "ON_DimStyle.m_text_underlined has unexpected offset % instead of 1095", ((cast(*void)(*instance.m_text_underlined)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_text_underlined)) == 1, "ON_DimStyle.m_text_underlined has unexpected size % instead of 1", size_of(type_of(ON_DimStyle.m_text_underlined)));
        assert(((cast(*void)(*instance.m_parent_dimstyle_managed_font)) - cast(*void)(*instance)) == 1096, "ON_DimStyle.m_parent_dimstyle_managed_font has unexpected offset % instead of 1096", ((cast(*void)(*instance.m_parent_dimstyle_managed_font)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyle.m_parent_dimstyle_managed_font)) == 8, "ON_DimStyle.m_parent_dimstyle_managed_font has unexpected size % instead of 8", size_of(type_of(ON_DimStyle.m_parent_dimstyle_managed_font)));
        assert(size_of(ON_DimStyle) == 1104, "ON_DimStyle has size % instead of 1104", size_of(ON_DimStyle));
    }

    {
        instance: ON_DimStyleContext;
        assert(((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)) == 8, "ON_DimStyleContext.m_unit_system has unexpected offset % instead of 8", ((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyleContext.m_unit_system)) == 1, "ON_DimStyleContext.m_unit_system has unexpected size % instead of 1", size_of(type_of(ON_DimStyleContext.m_unit_system)));
        assert(((cast(*void)(*instance.m_model_serial_number)) - cast(*void)(*instance)) == 16, "ON_DimStyleContext.m_model_serial_number has unexpected offset % instead of 16", ((cast(*void)(*instance.m_model_serial_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimStyleContext.m_model_serial_number)) == 8, "ON_DimStyleContext.m_model_serial_number has unexpected size % instead of 8", size_of(type_of(ON_DimStyleContext.m_model_serial_number)));
        assert(size_of(ON_DimStyleContext) == 24, "ON_DimStyleContext has size % instead of 24", size_of(ON_DimStyleContext));
    }

    {
        instance: ON_TextContent;
        assert(((cast(*void)(*instance.m_text)) - cast(*void)(*instance)) == 16, "ON_TextContent.m_text has unexpected offset % instead of 16", ((cast(*void)(*instance.m_text)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_text)) == 8, "ON_TextContent.m_text has unexpected size % instead of 8", size_of(type_of(ON_TextContent.m_text)));
        assert(((cast(*void)(*instance.m_rect_width)) - cast(*void)(*instance)) == 24, "ON_TextContent.m_rect_width has unexpected offset % instead of 24", ((cast(*void)(*instance.m_rect_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_rect_width)) == 8, "ON_TextContent.m_rect_width has unexpected size % instead of 8", size_of(type_of(ON_TextContent.m_rect_width)));
        assert(((cast(*void)(*instance.m_rotation_radians)) - cast(*void)(*instance)) == 32, "ON_TextContent.m_rotation_radians has unexpected offset % instead of 32", ((cast(*void)(*instance.m_rotation_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_rotation_radians)) == 8, "ON_TextContent.m_rotation_radians has unexpected size % instead of 8", size_of(type_of(ON_TextContent.m_rotation_radians)));
        assert(((cast(*void)(*instance.m_reserved_dbl)) - cast(*void)(*instance)) == 40, "ON_TextContent.m_reserved_dbl has unexpected offset % instead of 40", ((cast(*void)(*instance.m_reserved_dbl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_reserved_dbl)) == 8, "ON_TextContent.m_reserved_dbl has unexpected size % instead of 8", size_of(type_of(ON_TextContent.m_reserved_dbl)));
        assert(((cast(*void)(*instance.m_h_align)) - cast(*void)(*instance)) == 48, "ON_TextContent.m_h_align has unexpected offset % instead of 48", ((cast(*void)(*instance.m_h_align)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_h_align)) == 1, "ON_TextContent.m_h_align has unexpected size % instead of 1", size_of(type_of(ON_TextContent.m_h_align)));
        assert(((cast(*void)(*instance.m_v_align)) - cast(*void)(*instance)) == 49, "ON_TextContent.m_v_align has unexpected offset % instead of 49", ((cast(*void)(*instance.m_v_align)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_v_align)) == 1, "ON_TextContent.m_v_align has unexpected size % instead of 1", size_of(type_of(ON_TextContent.m_v_align)));
        assert(((cast(*void)(*instance.m_bWrapText)) - cast(*void)(*instance)) == 50, "ON_TextContent.m_bWrapText has unexpected offset % instead of 50", ((cast(*void)(*instance.m_bWrapText)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_bWrapText)) == 1, "ON_TextContent.m_bWrapText has unexpected size % instead of 1", size_of(type_of(ON_TextContent.m_bWrapText)));
        assert(((cast(*void)(*instance.m_runtime_halign)) - cast(*void)(*instance)) == 51, "ON_TextContent.m_runtime_halign has unexpected offset % instead of 51", ((cast(*void)(*instance.m_runtime_halign)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_runtime_halign)) == 1, "ON_TextContent.m_runtime_halign has unexpected size % instead of 1", size_of(type_of(ON_TextContent.m_runtime_halign)));
        assert(((cast(*void)(*instance.m__runs)) - cast(*void)(*instance)) == 56, "ON_TextContent.m__runs has unexpected offset % instead of 56", ((cast(*void)(*instance.m__runs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m__runs)) == 24, "ON_TextContent.m__runs has unexpected size % instead of 24", size_of(type_of(ON_TextContent.m__runs)));
        assert(((cast(*void)(*instance.m__wrapped_runs)) - cast(*void)(*instance)) == 80, "ON_TextContent.m__wrapped_runs has unexpected offset % instead of 80", ((cast(*void)(*instance.m__wrapped_runs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m__wrapped_runs)) == 8, "ON_TextContent.m__wrapped_runs has unexpected size % instead of 8", size_of(type_of(ON_TextContent.m__wrapped_runs)));
        assert(((cast(*void)(*instance.m_run_evaluation_sn)) - cast(*void)(*instance)) == 88, "ON_TextContent.m_run_evaluation_sn has unexpected offset % instead of 88", ((cast(*void)(*instance.m_run_evaluation_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_run_evaluation_sn)) == 4, "ON_TextContent.m_run_evaluation_sn has unexpected size % instead of 4", size_of(type_of(ON_TextContent.m_run_evaluation_sn)));
        assert(((cast(*void)(*instance.m_annotation_type)) - cast(*void)(*instance)) == 92, "ON_TextContent.m_annotation_type has unexpected offset % instead of 92", ((cast(*void)(*instance.m_annotation_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_annotation_type)) == 1, "ON_TextContent.m_annotation_type has unexpected size % instead of 1", size_of(type_of(ON_TextContent.m_annotation_type)));
        assert(((cast(*void)(*instance.m_dimstyle_text_position_properties_hash)) - cast(*void)(*instance)) == 93, "ON_TextContent.m_dimstyle_text_position_properties_hash has unexpected offset % instead of 93", ((cast(*void)(*instance.m_dimstyle_text_position_properties_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_dimstyle_text_position_properties_hash)) == 20, "ON_TextContent.m_dimstyle_text_position_properties_hash has unexpected size % instead of 20", size_of(type_of(ON_TextContent.m_dimstyle_text_position_properties_hash)));
        assert(((cast(*void)(*instance.m_text_content_sub_hash)) - cast(*void)(*instance)) == 113, "ON_TextContent.m_text_content_sub_hash has unexpected offset % instead of 113", ((cast(*void)(*instance.m_text_content_sub_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_text_content_sub_hash)) == 20, "ON_TextContent.m_text_content_sub_hash has unexpected size % instead of 20", size_of(type_of(ON_TextContent.m_text_content_sub_hash)));
        assert(((cast(*void)(*instance.m_text_content_bbox_hash)) - cast(*void)(*instance)) == 133, "ON_TextContent.m_text_content_bbox_hash has unexpected offset % instead of 133", ((cast(*void)(*instance.m_text_content_bbox_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_text_content_bbox_hash)) == 20, "ON_TextContent.m_text_content_bbox_hash has unexpected size % instead of 20", size_of(type_of(ON_TextContent.m_text_content_bbox_hash)));
        assert(((cast(*void)(*instance.m_text_content_bbox)) - cast(*void)(*instance)) == 160, "ON_TextContent.m_text_content_bbox has unexpected offset % instead of 160", ((cast(*void)(*instance.m_text_content_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_text_content_bbox)) == 48, "ON_TextContent.m_text_content_bbox has unexpected size % instead of 48", size_of(type_of(ON_TextContent.m_text_content_bbox)));
        assert(((cast(*void)(*instance.m_default_font)) - cast(*void)(*instance)) == 208, "ON_TextContent.m_default_font has unexpected offset % instead of 208", ((cast(*void)(*instance.m_default_font)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextContent.m_default_font)) == 8, "ON_TextContent.m_default_font has unexpected size % instead of 8", size_of(type_of(ON_TextContent.m_default_font)));
        assert(size_of(ON_TextContent) == 216, "ON_TextContent has size % instead of 216", size_of(ON_TextContent));
    }

    {
        instance: ON_HatchLoop;
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 0, "ON_HatchLoop.m_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchLoop.m_type)) == 4, "ON_HatchLoop.m_type has unexpected size % instead of 4", size_of(type_of(ON_HatchLoop.m_type)));
        assert(((cast(*void)(*instance.m_p2dCurve)) - cast(*void)(*instance)) == 8, "ON_HatchLoop.m_p2dCurve has unexpected offset % instead of 8", ((cast(*void)(*instance.m_p2dCurve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchLoop.m_p2dCurve)) == 8, "ON_HatchLoop.m_p2dCurve has unexpected size % instead of 8", size_of(type_of(ON_HatchLoop.m_p2dCurve)));
        assert(size_of(ON_HatchLoop) == 16, "ON_HatchLoop has size % instead of 16", size_of(ON_HatchLoop));
    }

    {
        instance: ON_HatchLine;
        assert(((cast(*void)(*instance.m_angle_radians)) - cast(*void)(*instance)) == 0, "ON_HatchLine.m_angle_radians has unexpected offset % instead of 0", ((cast(*void)(*instance.m_angle_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchLine.m_angle_radians)) == 8, "ON_HatchLine.m_angle_radians has unexpected size % instead of 8", size_of(type_of(ON_HatchLine.m_angle_radians)));
        assert(((cast(*void)(*instance.m_base)) - cast(*void)(*instance)) == 8, "ON_HatchLine.m_base has unexpected offset % instead of 8", ((cast(*void)(*instance.m_base)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchLine.m_base)) == 16, "ON_HatchLine.m_base has unexpected size % instead of 16", size_of(type_of(ON_HatchLine.m_base)));
        assert(((cast(*void)(*instance.m_offset)) - cast(*void)(*instance)) == 24, "ON_HatchLine.m_offset has unexpected offset % instead of 24", ((cast(*void)(*instance.m_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchLine.m_offset)) == 16, "ON_HatchLine.m_offset has unexpected size % instead of 16", size_of(type_of(ON_HatchLine.m_offset)));
        assert(((cast(*void)(*instance.m_dashes)) - cast(*void)(*instance)) == 40, "ON_HatchLine.m_dashes has unexpected offset % instead of 40", ((cast(*void)(*instance.m_dashes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchLine.m_dashes)) == 24, "ON_HatchLine.m_dashes has unexpected size % instead of 24", size_of(type_of(ON_HatchLine.m_dashes)));
        assert(size_of(ON_HatchLine) == 64, "ON_HatchLine has size % instead of 64", size_of(ON_HatchLine));
    }

    {
        instance: ON_HatchPattern;
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 144, "ON_HatchPattern.m_type has unexpected offset % instead of 144", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchPattern.m_type)) == 4, "ON_HatchPattern.m_type has unexpected size % instead of 4", size_of(type_of(ON_HatchPattern.m_type)));
        assert(((cast(*void)(*instance.m_description)) - cast(*void)(*instance)) == 152, "ON_HatchPattern.m_description has unexpected offset % instead of 152", ((cast(*void)(*instance.m_description)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchPattern.m_description)) == 8, "ON_HatchPattern.m_description has unexpected size % instead of 8", size_of(type_of(ON_HatchPattern.m_description)));
        assert(((cast(*void)(*instance.m_lines)) - cast(*void)(*instance)) == 160, "ON_HatchPattern.m_lines has unexpected offset % instead of 160", ((cast(*void)(*instance.m_lines)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HatchPattern.m_lines)) == 24, "ON_HatchPattern.m_lines has unexpected size % instead of 24", size_of(type_of(ON_HatchPattern.m_lines)));
        assert(size_of(ON_HatchPattern) == 184, "ON_HatchPattern has size % instead of 184", size_of(ON_HatchPattern));
    }

    {
        instance: ON_Hatch;
        assert(((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)) == 16, "ON_Hatch.m_plane has unexpected offset % instead of 16", ((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hatch.m_plane)) == 128, "ON_Hatch.m_plane has unexpected size % instead of 128", size_of(type_of(ON_Hatch.m_plane)));
        assert(((cast(*void)(*instance.m_pattern_scale)) - cast(*void)(*instance)) == 144, "ON_Hatch.m_pattern_scale has unexpected offset % instead of 144", ((cast(*void)(*instance.m_pattern_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hatch.m_pattern_scale)) == 8, "ON_Hatch.m_pattern_scale has unexpected size % instead of 8", size_of(type_of(ON_Hatch.m_pattern_scale)));
        assert(((cast(*void)(*instance.m_pattern_rotation)) - cast(*void)(*instance)) == 152, "ON_Hatch.m_pattern_rotation has unexpected offset % instead of 152", ((cast(*void)(*instance.m_pattern_rotation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hatch.m_pattern_rotation)) == 8, "ON_Hatch.m_pattern_rotation has unexpected size % instead of 8", size_of(type_of(ON_Hatch.m_pattern_rotation)));
        assert(((cast(*void)(*instance.m_basepoint)) - cast(*void)(*instance)) == 160, "ON_Hatch.m_basepoint has unexpected offset % instead of 160", ((cast(*void)(*instance.m_basepoint)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hatch.m_basepoint)) == 16, "ON_Hatch.m_basepoint has unexpected size % instead of 16", size_of(type_of(ON_Hatch.m_basepoint)));
        assert(((cast(*void)(*instance.m_loops)) - cast(*void)(*instance)) == 176, "ON_Hatch.m_loops has unexpected offset % instead of 176", ((cast(*void)(*instance.m_loops)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hatch.m_loops)) == 24, "ON_Hatch.m_loops has unexpected size % instead of 24", size_of(type_of(ON_Hatch.m_loops)));
        assert(((cast(*void)(*instance.m_pattern_index)) - cast(*void)(*instance)) == 200, "ON_Hatch.m_pattern_index has unexpected offset % instead of 200", ((cast(*void)(*instance.m_pattern_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Hatch.m_pattern_index)) == 4, "ON_Hatch.m_pattern_index has unexpected size % instead of 4", size_of(type_of(ON_Hatch.m_pattern_index)));
        assert(size_of(ON_Hatch) == 208, "ON_Hatch has size % instead of 208", size_of(ON_Hatch));
    }

    {
        instance: ON_CurveRegionBoundaryElement;
        assert(((cast(*void)(*instance.m_curve_id)) - cast(*void)(*instance)) == 0, "ON_CurveRegionBoundaryElement.m_curve_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_curve_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveRegionBoundaryElement.m_curve_id)) == 4, "ON_CurveRegionBoundaryElement.m_curve_id has unexpected size % instead of 4", size_of(type_of(ON_CurveRegionBoundaryElement.m_curve_id)));
        assert(((cast(*void)(*instance.m_subdomain)) - cast(*void)(*instance)) == 8, "ON_CurveRegionBoundaryElement.m_subdomain has unexpected offset % instead of 8", ((cast(*void)(*instance.m_subdomain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveRegionBoundaryElement.m_subdomain)) == 16, "ON_CurveRegionBoundaryElement.m_subdomain has unexpected size % instead of 16", size_of(type_of(ON_CurveRegionBoundaryElement.m_subdomain)));
        assert(((cast(*void)(*instance.m_bReversed)) - cast(*void)(*instance)) == 24, "ON_CurveRegionBoundaryElement.m_bReversed has unexpected offset % instead of 24", ((cast(*void)(*instance.m_bReversed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveRegionBoundaryElement.m_bReversed)) == 1, "ON_CurveRegionBoundaryElement.m_bReversed has unexpected size % instead of 1", size_of(type_of(ON_CurveRegionBoundaryElement.m_bReversed)));
        assert(size_of(ON_CurveRegionBoundaryElement) == 32, "ON_CurveRegionBoundaryElement has size % instead of 32", size_of(ON_CurveRegionBoundaryElement));
    }

    {
        instance: ON_ObjRefEvaluationParameter;
        assert(((cast(*void)(*instance.m_t_type)) - cast(*void)(*instance)) == 0, "ON_ObjRefEvaluationParameter.m_t_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_t_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRefEvaluationParameter.m_t_type)) == 4, "ON_ObjRefEvaluationParameter.m_t_type has unexpected size % instead of 4", size_of(type_of(ON_ObjRefEvaluationParameter.m_t_type)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 4, "ON_ObjRefEvaluationParameter.m_reserved has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRefEvaluationParameter.m_reserved)) == 4, "ON_ObjRefEvaluationParameter.m_reserved has unexpected size % instead of 4", size_of(type_of(ON_ObjRefEvaluationParameter.m_reserved)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 8, "ON_ObjRefEvaluationParameter.m_t has unexpected offset % instead of 8", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRefEvaluationParameter.m_t)) == 32, "ON_ObjRefEvaluationParameter.m_t has unexpected size % instead of 32", size_of(type_of(ON_ObjRefEvaluationParameter.m_t)));
        assert(((cast(*void)(*instance.m_s)) - cast(*void)(*instance)) == 40, "ON_ObjRefEvaluationParameter.m_s has unexpected offset % instead of 40", ((cast(*void)(*instance.m_s)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRefEvaluationParameter.m_s)) == 48, "ON_ObjRefEvaluationParameter.m_s has unexpected size % instead of 48", size_of(type_of(ON_ObjRefEvaluationParameter.m_s)));
        assert(((cast(*void)(*instance.m_t_ci)) - cast(*void)(*instance)) == 88, "ON_ObjRefEvaluationParameter.m_t_ci has unexpected offset % instead of 88", ((cast(*void)(*instance.m_t_ci)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRefEvaluationParameter.m_t_ci)) == 8, "ON_ObjRefEvaluationParameter.m_t_ci has unexpected size % instead of 8", size_of(type_of(ON_ObjRefEvaluationParameter.m_t_ci)));
        assert(size_of(ON_ObjRefEvaluationParameter) == 96, "ON_ObjRefEvaluationParameter has size % instead of 96", size_of(ON_ObjRefEvaluationParameter));
    }

    {
        instance: ON_ObjRef_IRefID;
        assert(((cast(*void)(*instance.m_iref_uuid)) - cast(*void)(*instance)) == 0, "ON_ObjRef_IRefID.m_iref_uuid has unexpected offset % instead of 0", ((cast(*void)(*instance.m_iref_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef_IRefID.m_iref_uuid)) == 16, "ON_ObjRef_IRefID.m_iref_uuid has unexpected size % instead of 16", size_of(type_of(ON_ObjRef_IRefID.m_iref_uuid)));
        assert(((cast(*void)(*instance.m_iref_xform)) - cast(*void)(*instance)) == 16, "ON_ObjRef_IRefID.m_iref_xform has unexpected offset % instead of 16", ((cast(*void)(*instance.m_iref_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef_IRefID.m_iref_xform)) == 128, "ON_ObjRef_IRefID.m_iref_xform has unexpected size % instead of 128", size_of(type_of(ON_ObjRef_IRefID.m_iref_xform)));
        assert(((cast(*void)(*instance.m_idef_uuid)) - cast(*void)(*instance)) == 144, "ON_ObjRef_IRefID.m_idef_uuid has unexpected offset % instead of 144", ((cast(*void)(*instance.m_idef_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef_IRefID.m_idef_uuid)) == 16, "ON_ObjRef_IRefID.m_idef_uuid has unexpected size % instead of 16", size_of(type_of(ON_ObjRef_IRefID.m_idef_uuid)));
        assert(((cast(*void)(*instance.m_idef_geometry_index)) - cast(*void)(*instance)) == 160, "ON_ObjRef_IRefID.m_idef_geometry_index has unexpected offset % instead of 160", ((cast(*void)(*instance.m_idef_geometry_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef_IRefID.m_idef_geometry_index)) == 4, "ON_ObjRef_IRefID.m_idef_geometry_index has unexpected size % instead of 4", size_of(type_of(ON_ObjRef_IRefID.m_idef_geometry_index)));
        assert(((cast(*void)(*instance.m_geometry_xform)) - cast(*void)(*instance)) == 168, "ON_ObjRef_IRefID.m_geometry_xform has unexpected offset % instead of 168", ((cast(*void)(*instance.m_geometry_xform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef_IRefID.m_geometry_xform)) == 128, "ON_ObjRef_IRefID.m_geometry_xform has unexpected size % instead of 128", size_of(type_of(ON_ObjRef_IRefID.m_geometry_xform)));
        assert(((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)) == 296, "ON_ObjRef_IRefID.m_component_index has unexpected offset % instead of 296", ((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef_IRefID.m_component_index)) == 8, "ON_ObjRef_IRefID.m_component_index has unexpected size % instead of 8", size_of(type_of(ON_ObjRef_IRefID.m_component_index)));
        assert(((cast(*void)(*instance.m_evp)) - cast(*void)(*instance)) == 304, "ON_ObjRef_IRefID.m_evp has unexpected offset % instead of 304", ((cast(*void)(*instance.m_evp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef_IRefID.m_evp)) == 96, "ON_ObjRef_IRefID.m_evp has unexpected size % instead of 96", size_of(type_of(ON_ObjRef_IRefID.m_evp)));
        assert(size_of(ON_ObjRef_IRefID) == 400, "ON_ObjRef_IRefID has size % instead of 400", size_of(ON_ObjRef_IRefID));
    }

    {
        instance: ON_ObjRef;
        assert(((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)) == 0, "ON_ObjRef.m_uuid has unexpected offset % instead of 0", ((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_uuid)) == 16, "ON_ObjRef.m_uuid has unexpected size % instead of 16", size_of(type_of(ON_ObjRef.m_uuid)));
        assert(((cast(*void)(*instance.m_geometry)) - cast(*void)(*instance)) == 16, "ON_ObjRef.m_geometry has unexpected offset % instead of 16", ((cast(*void)(*instance.m_geometry)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_geometry)) == 8, "ON_ObjRef.m_geometry has unexpected size % instead of 8", size_of(type_of(ON_ObjRef.m_geometry)));
        assert(((cast(*void)(*instance.m_parent_geometry)) - cast(*void)(*instance)) == 24, "ON_ObjRef.m_parent_geometry has unexpected offset % instead of 24", ((cast(*void)(*instance.m_parent_geometry)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_parent_geometry)) == 8, "ON_ObjRef.m_parent_geometry has unexpected size % instead of 8", size_of(type_of(ON_ObjRef.m_parent_geometry)));
        assert(((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)) == 32, "ON_ObjRef.m_component_index has unexpected offset % instead of 32", ((cast(*void)(*instance.m_component_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_component_index)) == 8, "ON_ObjRef.m_component_index has unexpected size % instead of 8", size_of(type_of(ON_ObjRef.m_component_index)));
        assert(((cast(*void)(*instance.m_geometry_type)) - cast(*void)(*instance)) == 40, "ON_ObjRef.m_geometry_type has unexpected offset % instead of 40", ((cast(*void)(*instance.m_geometry_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_geometry_type)) == 4, "ON_ObjRef.m_geometry_type has unexpected size % instead of 4", size_of(type_of(ON_ObjRef.m_geometry_type)));
        assert(((cast(*void)(*instance.m_runtime_sn)) - cast(*void)(*instance)) == 44, "ON_ObjRef.m_runtime_sn has unexpected offset % instead of 44", ((cast(*void)(*instance.m_runtime_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_runtime_sn)) == 4, "ON_ObjRef.m_runtime_sn has unexpected size % instead of 4", size_of(type_of(ON_ObjRef.m_runtime_sn)));
        assert(((cast(*void)(*instance.m_point)) - cast(*void)(*instance)) == 48, "ON_ObjRef.m_point has unexpected offset % instead of 48", ((cast(*void)(*instance.m_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_point)) == 24, "ON_ObjRef.m_point has unexpected size % instead of 24", size_of(type_of(ON_ObjRef.m_point)));
        assert(((cast(*void)(*instance.m_osnap_mode)) - cast(*void)(*instance)) == 72, "ON_ObjRef.m_osnap_mode has unexpected offset % instead of 72", ((cast(*void)(*instance.m_osnap_mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_osnap_mode)) == 4, "ON_ObjRef.m_osnap_mode has unexpected size % instead of 4", size_of(type_of(ON_ObjRef.m_osnap_mode)));
        assert(((cast(*void)(*instance.m_evp)) - cast(*void)(*instance)) == 80, "ON_ObjRef.m_evp has unexpected offset % instead of 80", ((cast(*void)(*instance.m_evp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m_evp)) == 96, "ON_ObjRef.m_evp has unexpected size % instead of 96", size_of(type_of(ON_ObjRef.m_evp)));
        assert(((cast(*void)(*instance.m__iref)) - cast(*void)(*instance)) == 176, "ON_ObjRef.m__iref has unexpected offset % instead of 176", ((cast(*void)(*instance.m__iref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m__iref)) == 24, "ON_ObjRef.m__iref has unexpected size % instead of 24", size_of(type_of(ON_ObjRef.m__iref)));
        assert(((cast(*void)(*instance.m__proxy1)) - cast(*void)(*instance)) == 200, "ON_ObjRef.m__proxy1 has unexpected offset % instead of 200", ((cast(*void)(*instance.m__proxy1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m__proxy1)) == 8, "ON_ObjRef.m__proxy1 has unexpected size % instead of 8", size_of(type_of(ON_ObjRef.m__proxy1)));
        assert(((cast(*void)(*instance.m__proxy2)) - cast(*void)(*instance)) == 208, "ON_ObjRef.m__proxy2 has unexpected offset % instead of 208", ((cast(*void)(*instance.m__proxy2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m__proxy2)) == 8, "ON_ObjRef.m__proxy2 has unexpected size % instead of 8", size_of(type_of(ON_ObjRef.m__proxy2)));
        assert(((cast(*void)(*instance.m__proxy_ref_count)) - cast(*void)(*instance)) == 216, "ON_ObjRef.m__proxy_ref_count has unexpected offset % instead of 216", ((cast(*void)(*instance.m__proxy_ref_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ObjRef.m__proxy_ref_count)) == 8, "ON_ObjRef.m__proxy_ref_count has unexpected size % instead of 8", size_of(type_of(ON_ObjRef.m__proxy_ref_count)));
        assert(size_of(ON_ObjRef) == 224, "ON_ObjRef has size % instead of 224", size_of(ON_ObjRef));
    }

    {
        instance: ON_BumpFunction;
        assert(((cast(*void)(*instance.m_point)) - cast(*void)(*instance)) == 0, "ON_BumpFunction.m_point has unexpected offset % instead of 0", ((cast(*void)(*instance.m_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BumpFunction.m_point)) == 16, "ON_BumpFunction.m_point has unexpected size % instead of 16", size_of(type_of(ON_BumpFunction.m_point)));
        assert(((cast(*void)(*instance.m_type)) - cast(*void)(*instance)) == 16, "ON_BumpFunction.m_type has unexpected offset % instead of 16", ((cast(*void)(*instance.m_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BumpFunction.m_type)) == 8, "ON_BumpFunction.m_type has unexpected size % instead of 8", size_of(type_of(ON_BumpFunction.m_type)));
        assert(((cast(*void)(*instance.m_x0)) - cast(*void)(*instance)) == 24, "ON_BumpFunction.m_x0 has unexpected offset % instead of 24", ((cast(*void)(*instance.m_x0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BumpFunction.m_x0)) == 8, "ON_BumpFunction.m_x0 has unexpected size % instead of 8", size_of(type_of(ON_BumpFunction.m_x0)));
        assert(((cast(*void)(*instance.m_y0)) - cast(*void)(*instance)) == 32, "ON_BumpFunction.m_y0 has unexpected offset % instead of 32", ((cast(*void)(*instance.m_y0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BumpFunction.m_y0)) == 8, "ON_BumpFunction.m_y0 has unexpected size % instead of 8", size_of(type_of(ON_BumpFunction.m_y0)));
        assert(((cast(*void)(*instance.m_sx)) - cast(*void)(*instance)) == 40, "ON_BumpFunction.m_sx has unexpected offset % instead of 40", ((cast(*void)(*instance.m_sx)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BumpFunction.m_sx)) == 16, "ON_BumpFunction.m_sx has unexpected size % instead of 16", size_of(type_of(ON_BumpFunction.m_sx)));
        assert(((cast(*void)(*instance.m_sy)) - cast(*void)(*instance)) == 56, "ON_BumpFunction.m_sy has unexpected offset % instead of 56", ((cast(*void)(*instance.m_sy)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BumpFunction.m_sy)) == 16, "ON_BumpFunction.m_sy has unexpected size % instead of 16", size_of(type_of(ON_BumpFunction.m_sy)));
        assert(((cast(*void)(*instance.m_a)) - cast(*void)(*instance)) == 72, "ON_BumpFunction.m_a has unexpected offset % instead of 72", ((cast(*void)(*instance.m_a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_BumpFunction.m_a)) == 8, "ON_BumpFunction.m_a has unexpected size % instead of 8", size_of(type_of(ON_BumpFunction.m_a)));
        assert(size_of(ON_BumpFunction) == 80, "ON_BumpFunction has size % instead of 80", size_of(ON_BumpFunction));
    }

    {
        instance: ON_OffsetSurfaceValue;
        assert(((cast(*void)(*instance.m_s)) - cast(*void)(*instance)) == 0, "ON_OffsetSurfaceValue.m_s has unexpected offset % instead of 0", ((cast(*void)(*instance.m_s)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceValue.m_s)) == 8, "ON_OffsetSurfaceValue.m_s has unexpected size % instead of 8", size_of(type_of(ON_OffsetSurfaceValue.m_s)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 8, "ON_OffsetSurfaceValue.m_t has unexpected offset % instead of 8", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceValue.m_t)) == 8, "ON_OffsetSurfaceValue.m_t has unexpected size % instead of 8", size_of(type_of(ON_OffsetSurfaceValue.m_t)));
        assert(((cast(*void)(*instance.m_distance)) - cast(*void)(*instance)) == 16, "ON_OffsetSurfaceValue.m_distance has unexpected offset % instead of 16", ((cast(*void)(*instance.m_distance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceValue.m_distance)) == 8, "ON_OffsetSurfaceValue.m_distance has unexpected size % instead of 8", size_of(type_of(ON_OffsetSurfaceValue.m_distance)));
        assert(((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)) == 24, "ON_OffsetSurfaceValue.m_radius has unexpected offset % instead of 24", ((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceValue.m_radius)) == 8, "ON_OffsetSurfaceValue.m_radius has unexpected size % instead of 8", size_of(type_of(ON_OffsetSurfaceValue.m_radius)));
        assert(((cast(*void)(*instance.m_index)) - cast(*void)(*instance)) == 32, "ON_OffsetSurfaceValue.m_index has unexpected offset % instead of 32", ((cast(*void)(*instance.m_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceValue.m_index)) == 4, "ON_OffsetSurfaceValue.m_index has unexpected size % instead of 4", size_of(type_of(ON_OffsetSurfaceValue.m_index)));
        assert(size_of(ON_OffsetSurfaceValue) == 40, "ON_OffsetSurfaceValue has size % instead of 40", size_of(ON_OffsetSurfaceValue));
    }

    {
        instance: ON_OffsetSurfaceFunction;
        assert(((cast(*void)(*instance.m_srf)) - cast(*void)(*instance)) == 0, "ON_OffsetSurfaceFunction.m_srf has unexpected offset % instead of 0", ((cast(*void)(*instance.m_srf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceFunction.m_srf)) == 8, "ON_OffsetSurfaceFunction.m_srf has unexpected size % instead of 8", size_of(type_of(ON_OffsetSurfaceFunction.m_srf)));
        assert(((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)) == 8, "ON_OffsetSurfaceFunction.m_domain has unexpected offset % instead of 8", ((cast(*void)(*instance.m_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceFunction.m_domain)) == 32, "ON_OffsetSurfaceFunction.m_domain has unexpected size % instead of 32", size_of(type_of(ON_OffsetSurfaceFunction.m_domain)));
        assert(((cast(*void)(*instance.m_bZeroSideDerivative)) - cast(*void)(*instance)) == 40, "ON_OffsetSurfaceFunction.m_bZeroSideDerivative has unexpected offset % instead of 40", ((cast(*void)(*instance.m_bZeroSideDerivative)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceFunction.m_bZeroSideDerivative)) == 4, "ON_OffsetSurfaceFunction.m_bZeroSideDerivative has unexpected size % instead of 4", size_of(type_of(ON_OffsetSurfaceFunction.m_bZeroSideDerivative)));
        assert(((cast(*void)(*instance.m_offset_value)) - cast(*void)(*instance)) == 48, "ON_OffsetSurfaceFunction.m_offset_value has unexpected offset % instead of 48", ((cast(*void)(*instance.m_offset_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceFunction.m_offset_value)) == 24, "ON_OffsetSurfaceFunction.m_offset_value has unexpected size % instead of 24", size_of(type_of(ON_OffsetSurfaceFunction.m_offset_value)));
        assert(((cast(*void)(*instance.m_bumps)) - cast(*void)(*instance)) == 72, "ON_OffsetSurfaceFunction.m_bumps has unexpected offset % instead of 72", ((cast(*void)(*instance.m_bumps)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceFunction.m_bumps)) == 24, "ON_OffsetSurfaceFunction.m_bumps has unexpected size % instead of 24", size_of(type_of(ON_OffsetSurfaceFunction.m_bumps)));
        assert(((cast(*void)(*instance.m_bValid)) - cast(*void)(*instance)) == 96, "ON_OffsetSurfaceFunction.m_bValid has unexpected offset % instead of 96", ((cast(*void)(*instance.m_bValid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurfaceFunction.m_bValid)) == 1, "ON_OffsetSurfaceFunction.m_bValid has unexpected size % instead of 1", size_of(type_of(ON_OffsetSurfaceFunction.m_bValid)));
        assert(size_of(ON_OffsetSurfaceFunction) == 104, "ON_OffsetSurfaceFunction has size % instead of 104", size_of(ON_OffsetSurfaceFunction));
    }

    {
        instance: ON_OffsetSurface;
        assert(((cast(*void)(*instance.m__pSrf)) - cast(*void)(*instance)) == 32, "ON_OffsetSurface.m__pSrf has unexpected offset % instead of 32", ((cast(*void)(*instance.m__pSrf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurface.m__pSrf)) == 8, "ON_OffsetSurface.m__pSrf has unexpected size % instead of 8", size_of(type_of(ON_OffsetSurface.m__pSrf)));
        assert(((cast(*void)(*instance.m_offset_function)) - cast(*void)(*instance)) == 40, "ON_OffsetSurface.m_offset_function has unexpected offset % instead of 40", ((cast(*void)(*instance.m_offset_function)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_OffsetSurface.m_offset_function)) == 104, "ON_OffsetSurface.m_offset_function has unexpected size % instead of 104", size_of(type_of(ON_OffsetSurface.m_offset_function)));
        assert(size_of(ON_OffsetSurface) == 144, "ON_OffsetSurface has size % instead of 144", size_of(ON_OffsetSurface));
    }

    {
        instance: ON_DetailView;
        assert(((cast(*void)(*instance.m_page_per_model_ratio)) - cast(*void)(*instance)) == 16, "ON_DetailView.m_page_per_model_ratio has unexpected offset % instead of 16", ((cast(*void)(*instance.m_page_per_model_ratio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DetailView.m_page_per_model_ratio)) == 8, "ON_DetailView.m_page_per_model_ratio has unexpected size % instead of 8", size_of(type_of(ON_DetailView.m_page_per_model_ratio)));
        assert(((cast(*void)(*instance.m_view)) - cast(*void)(*instance)) == 24, "ON_DetailView.m_view has unexpected offset % instead of 24", ((cast(*void)(*instance.m_view)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DetailView.m_view)) == 1520, "ON_DetailView.m_view has unexpected size % instead of 1520", size_of(type_of(ON_DetailView.m_view)));
        assert(((cast(*void)(*instance.m_boundary)) - cast(*void)(*instance)) == 1544, "ON_DetailView.m_boundary has unexpected offset % instead of 1544", ((cast(*void)(*instance.m_boundary)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DetailView.m_boundary)) == 64, "ON_DetailView.m_boundary has unexpected size % instead of 64", size_of(type_of(ON_DetailView.m_boundary)));
        assert(size_of(ON_DetailView) == 1608, "ON_DetailView has size % instead of 1608", size_of(ON_DetailView));
    }

    {
        instance: ON_SerialNumberMap.MAP_VALUE;
        assert(((cast(*void)(*instance.m_u_type)) - cast(*void)(*instance)) == 0, "ON_SerialNumberMap.MAP_VALUE.m_u_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_u_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.MAP_VALUE.m_u_type)) == 4, "ON_SerialNumberMap.MAP_VALUE.m_u_type has unexpected size % instead of 4", size_of(type_of(ON_SerialNumberMap.MAP_VALUE.m_u_type)));
        assert(((cast(*void)(*instance.m_u32)) - cast(*void)(*instance)) == 4, "ON_SerialNumberMap.MAP_VALUE.m_u32 has unexpected offset % instead of 4", ((cast(*void)(*instance.m_u32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.MAP_VALUE.m_u32)) == 4, "ON_SerialNumberMap.MAP_VALUE.m_u32 has unexpected size % instead of 4", size_of(type_of(ON_SerialNumberMap.MAP_VALUE.m_u32)));
        assert(((cast(*void)(*instance.m_u)) - cast(*void)(*instance)) == 8, "ON_SerialNumberMap.MAP_VALUE.m_u has unexpected offset % instead of 8", ((cast(*void)(*instance.m_u)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.MAP_VALUE.m_u)) == 8, "ON_SerialNumberMap.MAP_VALUE.m_u has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.MAP_VALUE.m_u)));
        assert(size_of(ON_SerialNumberMap.MAP_VALUE) == 16, "ON_SerialNumberMap.MAP_VALUE has size % instead of 16", size_of(ON_SerialNumberMap.MAP_VALUE));
    }

    {
        instance: ON_SerialNumberMap.SN_ELEMENT;
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 0, "ON_SerialNumberMap.SN_ELEMENT.m_id has unexpected offset % instead of 0", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_id)) == 16, "ON_SerialNumberMap.SN_ELEMENT.m_id has unexpected size % instead of 16", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_id)));
        assert(((cast(*void)(*instance.m_sn)) - cast(*void)(*instance)) == 16, "ON_SerialNumberMap.SN_ELEMENT.m_sn has unexpected offset % instead of 16", ((cast(*void)(*instance.m_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_sn)) == 8, "ON_SerialNumberMap.SN_ELEMENT.m_sn has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_sn)));
        assert(((cast(*void)(*instance.m_sn_active)) - cast(*void)(*instance)) == 24, "ON_SerialNumberMap.SN_ELEMENT.m_sn_active has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sn_active)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_sn_active)) == 1, "ON_SerialNumberMap.SN_ELEMENT.m_sn_active has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_sn_active)));
        assert(((cast(*void)(*instance.m_id_active)) - cast(*void)(*instance)) == 25, "ON_SerialNumberMap.SN_ELEMENT.m_id_active has unexpected offset % instead of 25", ((cast(*void)(*instance.m_id_active)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_id_active)) == 1, "ON_SerialNumberMap.SN_ELEMENT.m_id_active has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_id_active)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 26, "ON_SerialNumberMap.SN_ELEMENT.m_reserved1 has unexpected offset % instead of 26", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_reserved1)) == 1, "ON_SerialNumberMap.SN_ELEMENT.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 27, "ON_SerialNumberMap.SN_ELEMENT.m_reserved2 has unexpected offset % instead of 27", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_reserved2)) == 1, "ON_SerialNumberMap.SN_ELEMENT.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_reserved2)));
        assert(((cast(*void)(*instance.m_id_crc32)) - cast(*void)(*instance)) == 28, "ON_SerialNumberMap.SN_ELEMENT.m_id_crc32 has unexpected offset % instead of 28", ((cast(*void)(*instance.m_id_crc32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_id_crc32)) == 4, "ON_SerialNumberMap.SN_ELEMENT.m_id_crc32 has unexpected size % instead of 4", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_id_crc32)));
        assert(((cast(*void)(*instance.m_next)) - cast(*void)(*instance)) == 32, "ON_SerialNumberMap.SN_ELEMENT.m_next has unexpected offset % instead of 32", ((cast(*void)(*instance.m_next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_next)) == 8, "ON_SerialNumberMap.SN_ELEMENT.m_next has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_next)));
        assert(((cast(*void)(*instance.m_value)) - cast(*void)(*instance)) == 40, "ON_SerialNumberMap.SN_ELEMENT.m_value has unexpected offset % instead of 40", ((cast(*void)(*instance.m_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_value)) == 16, "ON_SerialNumberMap.SN_ELEMENT.m_value has unexpected size % instead of 16", size_of(type_of(ON_SerialNumberMap.SN_ELEMENT.m_value)));
        assert(size_of(ON_SerialNumberMap.SN_ELEMENT) == 56, "ON_SerialNumberMap.SN_ELEMENT has size % instead of 56", size_of(ON_SerialNumberMap.SN_ELEMENT));
    }

    {
        instance: ON_SerialNumberMap;
        assert(((cast(*void)(*instance.m_maxsn)) - cast(*void)(*instance)) == 0, "ON_SerialNumberMap.m_maxsn has unexpected offset % instead of 0", ((cast(*void)(*instance.m_maxsn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_maxsn)) == 8, "ON_SerialNumberMap.m_maxsn has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_maxsn)));
        assert(((cast(*void)(*instance.m_sn_count)) - cast(*void)(*instance)) == 8, "ON_SerialNumberMap.m_sn_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_sn_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_sn_count)) == 8, "ON_SerialNumberMap.m_sn_count has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_sn_count)));
        assert(((cast(*void)(*instance.m_sn_purged)) - cast(*void)(*instance)) == 16, "ON_SerialNumberMap.m_sn_purged has unexpected offset % instead of 16", ((cast(*void)(*instance.m_sn_purged)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_sn_purged)) == 8, "ON_SerialNumberMap.m_sn_purged has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_sn_purged)));
        assert(((cast(*void)(*instance.m_snblk_list_capacity)) - cast(*void)(*instance)) == 24, "ON_SerialNumberMap.m_snblk_list_capacity has unexpected offset % instead of 24", ((cast(*void)(*instance.m_snblk_list_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_snblk_list_capacity)) == 8, "ON_SerialNumberMap.m_snblk_list_capacity has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_snblk_list_capacity)));
        assert(((cast(*void)(*instance.m_snblk_list_count)) - cast(*void)(*instance)) == 32, "ON_SerialNumberMap.m_snblk_list_count has unexpected offset % instead of 32", ((cast(*void)(*instance.m_snblk_list_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_snblk_list_count)) == 8, "ON_SerialNumberMap.m_snblk_list_count has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_snblk_list_count)));
        assert(((cast(*void)(*instance.m_snblk_list)) - cast(*void)(*instance)) == 40, "ON_SerialNumberMap.m_snblk_list has unexpected offset % instead of 40", ((cast(*void)(*instance.m_snblk_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_snblk_list)) == 8, "ON_SerialNumberMap.m_snblk_list has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_snblk_list)));
        assert(((cast(*void)(*instance.m_e_blk)) - cast(*void)(*instance)) == 48, "ON_SerialNumberMap.m_e_blk has unexpected offset % instead of 48", ((cast(*void)(*instance.m_e_blk)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_e_blk)) == 8, "ON_SerialNumberMap.m_e_blk has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_e_blk)));
        assert(((cast(*void)(*instance.m_sn_block0)) - cast(*void)(*instance)) == 56, "ON_SerialNumberMap.m_sn_block0 has unexpected offset % instead of 56", ((cast(*void)(*instance.m_sn_block0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_sn_block0)) == 8, "ON_SerialNumberMap.m_sn_block0 has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_sn_block0)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 64, "ON_SerialNumberMap.m_reserved1 has unexpected offset % instead of 64", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_reserved1)) == 1, "ON_SerialNumberMap.m_reserved1 has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 65, "ON_SerialNumberMap.m_reserved2 has unexpected offset % instead of 65", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_reserved2)) == 1, "ON_SerialNumberMap.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 66, "ON_SerialNumberMap.m_reserved3 has unexpected offset % instead of 66", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_reserved3)) == 1, "ON_SerialNumberMap.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.m_reserved3)));
        assert(((cast(*void)(*instance.m_bHashTableIsValid)) - cast(*void)(*instance)) == 67, "ON_SerialNumberMap.m_bHashTableIsValid has unexpected offset % instead of 67", ((cast(*void)(*instance.m_bHashTableIsValid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_bHashTableIsValid)) == 1, "ON_SerialNumberMap.m_bHashTableIsValid has unexpected size % instead of 1", size_of(type_of(ON_SerialNumberMap.m_bHashTableIsValid)));
        assert(((cast(*void)(*instance.m_hash_block_count)) - cast(*void)(*instance)) == 68, "ON_SerialNumberMap.m_hash_block_count has unexpected offset % instead of 68", ((cast(*void)(*instance.m_hash_block_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_hash_block_count)) == 4, "ON_SerialNumberMap.m_hash_block_count has unexpected size % instead of 4", size_of(type_of(ON_SerialNumberMap.m_hash_block_count)));
        assert(((cast(*void)(*instance.m_hash_capacity)) - cast(*void)(*instance)) == 72, "ON_SerialNumberMap.m_hash_capacity has unexpected offset % instead of 72", ((cast(*void)(*instance.m_hash_capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_hash_capacity)) == 8, "ON_SerialNumberMap.m_hash_capacity has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_hash_capacity)));
        assert(((cast(*void)(*instance.m_hash_table_blocks)) - cast(*void)(*instance)) == 80, "ON_SerialNumberMap.m_hash_table_blocks has unexpected offset % instead of 80", ((cast(*void)(*instance.m_hash_table_blocks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_hash_table_blocks)) == 8, "ON_SerialNumberMap.m_hash_table_blocks has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_hash_table_blocks)));
        assert(((cast(*void)(*instance.m_active_id_count)) - cast(*void)(*instance)) == 88, "ON_SerialNumberMap.m_active_id_count has unexpected offset % instead of 88", ((cast(*void)(*instance.m_active_id_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_active_id_count)) == 8, "ON_SerialNumberMap.m_active_id_count has unexpected size % instead of 8", size_of(type_of(ON_SerialNumberMap.m_active_id_count)));
        assert(((cast(*void)(*instance.m_inactive_id)) - cast(*void)(*instance)) == 96, "ON_SerialNumberMap.m_inactive_id has unexpected offset % instead of 96", ((cast(*void)(*instance.m_inactive_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SerialNumberMap.m_inactive_id)) == 16, "ON_SerialNumberMap.m_inactive_id has unexpected size % instead of 16", size_of(type_of(ON_SerialNumberMap.m_inactive_id)));
        assert(size_of(ON_SerialNumberMap) == 112, "ON_SerialNumberMap has size % instead of 112", size_of(ON_SerialNumberMap));
    }

    {
        instance: ON_CurveProxyHistory;
        assert(((cast(*void)(*instance.m_curve_ref)) - cast(*void)(*instance)) == 0, "ON_CurveProxyHistory.m_curve_ref has unexpected offset % instead of 0", ((cast(*void)(*instance.m_curve_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_curve_ref)) == 224, "ON_CurveProxyHistory.m_curve_ref has unexpected size % instead of 224", size_of(type_of(ON_CurveProxyHistory.m_curve_ref)));
        assert(((cast(*void)(*instance.m_bReversed)) - cast(*void)(*instance)) == 224, "ON_CurveProxyHistory.m_bReversed has unexpected offset % instead of 224", ((cast(*void)(*instance.m_bReversed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_bReversed)) == 1, "ON_CurveProxyHistory.m_bReversed has unexpected size % instead of 1", size_of(type_of(ON_CurveProxyHistory.m_bReversed)));
        assert(((cast(*void)(*instance.m_full_real_curve_domain)) - cast(*void)(*instance)) == 232, "ON_CurveProxyHistory.m_full_real_curve_domain has unexpected offset % instead of 232", ((cast(*void)(*instance.m_full_real_curve_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_full_real_curve_domain)) == 16, "ON_CurveProxyHistory.m_full_real_curve_domain has unexpected size % instead of 16", size_of(type_of(ON_CurveProxyHistory.m_full_real_curve_domain)));
        assert(((cast(*void)(*instance.m_sub_real_curve_domain)) - cast(*void)(*instance)) == 248, "ON_CurveProxyHistory.m_sub_real_curve_domain has unexpected offset % instead of 248", ((cast(*void)(*instance.m_sub_real_curve_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_sub_real_curve_domain)) == 16, "ON_CurveProxyHistory.m_sub_real_curve_domain has unexpected size % instead of 16", size_of(type_of(ON_CurveProxyHistory.m_sub_real_curve_domain)));
        assert(((cast(*void)(*instance.m_proxy_curve_domain)) - cast(*void)(*instance)) == 264, "ON_CurveProxyHistory.m_proxy_curve_domain has unexpected offset % instead of 264", ((cast(*void)(*instance.m_proxy_curve_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_proxy_curve_domain)) == 16, "ON_CurveProxyHistory.m_proxy_curve_domain has unexpected size % instead of 16", size_of(type_of(ON_CurveProxyHistory.m_proxy_curve_domain)));
        assert(((cast(*void)(*instance.m_segment_edge_domain)) - cast(*void)(*instance)) == 280, "ON_CurveProxyHistory.m_segment_edge_domain has unexpected offset % instead of 280", ((cast(*void)(*instance.m_segment_edge_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_segment_edge_domain)) == 16, "ON_CurveProxyHistory.m_segment_edge_domain has unexpected size % instead of 16", size_of(type_of(ON_CurveProxyHistory.m_segment_edge_domain)));
        assert(((cast(*void)(*instance.m_segment_trim_domain)) - cast(*void)(*instance)) == 296, "ON_CurveProxyHistory.m_segment_trim_domain has unexpected offset % instead of 296", ((cast(*void)(*instance.m_segment_trim_domain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_segment_trim_domain)) == 16, "ON_CurveProxyHistory.m_segment_trim_domain has unexpected size % instead of 16", size_of(type_of(ON_CurveProxyHistory.m_segment_trim_domain)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 312, "ON_CurveProxyHistory.m_reserved has unexpected offset % instead of 312", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_CurveProxyHistory.m_reserved)) == 32, "ON_CurveProxyHistory.m_reserved has unexpected size % instead of 32", size_of(type_of(ON_CurveProxyHistory.m_reserved)));
        assert(size_of(ON_CurveProxyHistory) == 344, "ON_CurveProxyHistory has size % instead of 344", size_of(ON_CurveProxyHistory));
    }

    {
        instance: ON_PolyEdgeHistory;
        assert(((cast(*void)(*instance.m_segment)) - cast(*void)(*instance)) == 0, "ON_PolyEdgeHistory.m_segment has unexpected offset % instead of 0", ((cast(*void)(*instance.m_segment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolyEdgeHistory.m_segment)) == 24, "ON_PolyEdgeHistory.m_segment has unexpected size % instead of 24", size_of(type_of(ON_PolyEdgeHistory.m_segment)));
        assert(((cast(*void)(*instance.m_t)) - cast(*void)(*instance)) == 24, "ON_PolyEdgeHistory.m_t has unexpected offset % instead of 24", ((cast(*void)(*instance.m_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolyEdgeHistory.m_t)) == 24, "ON_PolyEdgeHistory.m_t has unexpected size % instead of 24", size_of(type_of(ON_PolyEdgeHistory.m_t)));
        assert(((cast(*void)(*instance.m_evaluation_mode)) - cast(*void)(*instance)) == 48, "ON_PolyEdgeHistory.m_evaluation_mode has unexpected offset % instead of 48", ((cast(*void)(*instance.m_evaluation_mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolyEdgeHistory.m_evaluation_mode)) == 4, "ON_PolyEdgeHistory.m_evaluation_mode has unexpected size % instead of 4", size_of(type_of(ON_PolyEdgeHistory.m_evaluation_mode)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 52, "ON_PolyEdgeHistory.m_reserved has unexpected offset % instead of 52", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PolyEdgeHistory.m_reserved)) == 64, "ON_PolyEdgeHistory.m_reserved has unexpected size % instead of 64", size_of(type_of(ON_PolyEdgeHistory.m_reserved)));
        assert(size_of(ON_PolyEdgeHistory) == 120, "ON_PolyEdgeHistory has size % instead of 120", size_of(ON_PolyEdgeHistory));
    }

    {
        instance: ON_HistoryRecord;
        assert(((cast(*void)(*instance.m_command_id)) - cast(*void)(*instance)) == 144, "ON_HistoryRecord.m_command_id has unexpected offset % instead of 144", ((cast(*void)(*instance.m_command_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_command_id)) == 16, "ON_HistoryRecord.m_command_id has unexpected size % instead of 16", size_of(type_of(ON_HistoryRecord.m_command_id)));
        assert(((cast(*void)(*instance.m_version)) - cast(*void)(*instance)) == 160, "ON_HistoryRecord.m_version has unexpected offset % instead of 160", ((cast(*void)(*instance.m_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_version)) == 4, "ON_HistoryRecord.m_version has unexpected size % instead of 4", size_of(type_of(ON_HistoryRecord.m_version)));
        assert(((cast(*void)(*instance.m_record_type)) - cast(*void)(*instance)) == 164, "ON_HistoryRecord.m_record_type has unexpected offset % instead of 164", ((cast(*void)(*instance.m_record_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_record_type)) == 4, "ON_HistoryRecord.m_record_type has unexpected size % instead of 4", size_of(type_of(ON_HistoryRecord.m_record_type)));
        assert(((cast(*void)(*instance.m_antecedents)) - cast(*void)(*instance)) == 168, "ON_HistoryRecord.m_antecedents has unexpected offset % instead of 168", ((cast(*void)(*instance.m_antecedents)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_antecedents)) == 32, "ON_HistoryRecord.m_antecedents has unexpected size % instead of 32", size_of(type_of(ON_HistoryRecord.m_antecedents)));
        assert(((cast(*void)(*instance.m_descendants)) - cast(*void)(*instance)) == 200, "ON_HistoryRecord.m_descendants has unexpected offset % instead of 200", ((cast(*void)(*instance.m_descendants)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_descendants)) == 32, "ON_HistoryRecord.m_descendants has unexpected size % instead of 32", size_of(type_of(ON_HistoryRecord.m_descendants)));
        assert(((cast(*void)(*instance.m_value)) - cast(*void)(*instance)) == 232, "ON_HistoryRecord.m_value has unexpected offset % instead of 232", ((cast(*void)(*instance.m_value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_value)) == 24, "ON_HistoryRecord.m_value has unexpected size % instead of 24", size_of(type_of(ON_HistoryRecord.m_value)));
        assert(((cast(*void)(*instance.m_bValuesSorted)) - cast(*void)(*instance)) == 256, "ON_HistoryRecord.m_bValuesSorted has unexpected offset % instead of 256", ((cast(*void)(*instance.m_bValuesSorted)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_bValuesSorted)) == 1, "ON_HistoryRecord.m_bValuesSorted has unexpected size % instead of 1", size_of(type_of(ON_HistoryRecord.m_bValuesSorted)));
        assert(((cast(*void)(*instance.m_bCopyOnReplaceObject)) - cast(*void)(*instance)) == 257, "ON_HistoryRecord.m_bCopyOnReplaceObject has unexpected offset % instead of 257", ((cast(*void)(*instance.m_bCopyOnReplaceObject)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_HistoryRecord.m_bCopyOnReplaceObject)) == 1, "ON_HistoryRecord.m_bCopyOnReplaceObject has unexpected size % instead of 1", size_of(type_of(ON_HistoryRecord.m_bCopyOnReplaceObject)));
        assert(size_of(ON_HistoryRecord) == 264, "ON_HistoryRecord has size % instead of 264", size_of(ON_HistoryRecord));
    }

    {
        instance: ON_Annotation;
        assert(((cast(*void)(*instance.m_annotation_type)) - cast(*void)(*instance)) == 16, "ON_Annotation.m_annotation_type has unexpected offset % instead of 16", ((cast(*void)(*instance.m_annotation_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_annotation_type)) == 1, "ON_Annotation.m_annotation_type has unexpected size % instead of 1", size_of(type_of(ON_Annotation.m_annotation_type)));
        assert(((cast(*void)(*instance.m_allow_text_scaling)) - cast(*void)(*instance)) == 17, "ON_Annotation.m_allow_text_scaling has unexpected offset % instead of 17", ((cast(*void)(*instance.m_allow_text_scaling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_allow_text_scaling)) == 1, "ON_Annotation.m_allow_text_scaling has unexpected size % instead of 1", size_of(type_of(ON_Annotation.m_allow_text_scaling)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 18, "ON_Annotation.m_reserved2 has unexpected offset % instead of 18", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_reserved2)) == 1, "ON_Annotation.m_reserved2 has unexpected size % instead of 1", size_of(type_of(ON_Annotation.m_reserved2)));
        assert(((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)) == 19, "ON_Annotation.m_reserved3 has unexpected offset % instead of 19", ((cast(*void)(*instance.m_reserved3)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_reserved3)) == 1, "ON_Annotation.m_reserved3 has unexpected size % instead of 1", size_of(type_of(ON_Annotation.m_reserved3)));
        assert(((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)) == 20, "ON_Annotation.m_reserved4 has unexpected offset % instead of 20", ((cast(*void)(*instance.m_reserved4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_reserved4)) == 4, "ON_Annotation.m_reserved4 has unexpected size % instead of 4", size_of(type_of(ON_Annotation.m_reserved4)));
        assert(((cast(*void)(*instance.m_dimstyle_id)) - cast(*void)(*instance)) == 24, "ON_Annotation.m_dimstyle_id has unexpected offset % instead of 24", ((cast(*void)(*instance.m_dimstyle_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_dimstyle_id)) == 16, "ON_Annotation.m_dimstyle_id has unexpected size % instead of 16", size_of(type_of(ON_Annotation.m_dimstyle_id)));
        assert(((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)) == 40, "ON_Annotation.m_plane has unexpected offset % instead of 40", ((cast(*void)(*instance.m_plane)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_plane)) == 128, "ON_Annotation.m_plane has unexpected size % instead of 128", size_of(type_of(ON_Annotation.m_plane)));
        assert(((cast(*void)(*instance.m_horizontal_direction)) - cast(*void)(*instance)) == 168, "ON_Annotation.m_horizontal_direction has unexpected offset % instead of 168", ((cast(*void)(*instance.m_horizontal_direction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_horizontal_direction)) == 16, "ON_Annotation.m_horizontal_direction has unexpected size % instead of 16", size_of(type_of(ON_Annotation.m_horizontal_direction)));
        assert(((cast(*void)(*instance.m_text)) - cast(*void)(*instance)) == 184, "ON_Annotation.m_text has unexpected offset % instead of 184", ((cast(*void)(*instance.m_text)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_text)) == 8, "ON_Annotation.m_text has unexpected size % instead of 8", size_of(type_of(ON_Annotation.m_text)));
        assert(((cast(*void)(*instance.m_override_dimstyle)) - cast(*void)(*instance)) == 192, "ON_Annotation.m_override_dimstyle has unexpected offset % instead of 192", ((cast(*void)(*instance.m_override_dimstyle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_override_dimstyle)) == 8, "ON_Annotation.m_override_dimstyle has unexpected size % instead of 8", size_of(type_of(ON_Annotation.m_override_dimstyle)));
        assert(((cast(*void)(*instance.m_parent_dimstyle_content_version_number)) - cast(*void)(*instance)) == 200, "ON_Annotation.m_parent_dimstyle_content_version_number has unexpected offset % instead of 200", ((cast(*void)(*instance.m_parent_dimstyle_content_version_number)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_parent_dimstyle_content_version_number)) == 8, "ON_Annotation.m_parent_dimstyle_content_version_number has unexpected size % instead of 8", size_of(type_of(ON_Annotation.m_parent_dimstyle_content_version_number)));
        assert(((cast(*void)(*instance.m_bbox_cache)) - cast(*void)(*instance)) == 208, "ON_Annotation.m_bbox_cache has unexpected offset % instead of 208", ((cast(*void)(*instance.m_bbox_cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Annotation.m_bbox_cache)) == 584, "ON_Annotation.m_bbox_cache has unexpected size % instead of 584", size_of(type_of(ON_Annotation.m_bbox_cache)));
        assert(size_of(ON_Annotation) == 792, "ON_Annotation has size % instead of 792", size_of(ON_Annotation));
    }

    {
        instance: ON_TextDot;
        assert(((cast(*void)(*instance.m_center_point)) - cast(*void)(*instance)) == 16, "ON_TextDot.m_center_point has unexpected offset % instead of 16", ((cast(*void)(*instance.m_center_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextDot.m_center_point)) == 24, "ON_TextDot.m_center_point has unexpected size % instead of 24", size_of(type_of(ON_TextDot.m_center_point)));
        assert(((cast(*void)(*instance.m_primary_text)) - cast(*void)(*instance)) == 40, "ON_TextDot.m_primary_text has unexpected offset % instead of 40", ((cast(*void)(*instance.m_primary_text)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextDot.m_primary_text)) == 8, "ON_TextDot.m_primary_text has unexpected size % instead of 8", size_of(type_of(ON_TextDot.m_primary_text)));
        assert(((cast(*void)(*instance.m_secondary_text)) - cast(*void)(*instance)) == 48, "ON_TextDot.m_secondary_text has unexpected offset % instead of 48", ((cast(*void)(*instance.m_secondary_text)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextDot.m_secondary_text)) == 8, "ON_TextDot.m_secondary_text has unexpected size % instead of 8", size_of(type_of(ON_TextDot.m_secondary_text)));
        assert(((cast(*void)(*instance.m_font_face)) - cast(*void)(*instance)) == 56, "ON_TextDot.m_font_face has unexpected offset % instead of 56", ((cast(*void)(*instance.m_font_face)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextDot.m_font_face)) == 8, "ON_TextDot.m_font_face has unexpected size % instead of 8", size_of(type_of(ON_TextDot.m_font_face)));
        assert(((cast(*void)(*instance.m_display_bits)) - cast(*void)(*instance)) == 64, "ON_TextDot.m_display_bits has unexpected offset % instead of 64", ((cast(*void)(*instance.m_display_bits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextDot.m_display_bits)) == 4, "ON_TextDot.m_display_bits has unexpected size % instead of 4", size_of(type_of(ON_TextDot.m_display_bits)));
        assert(((cast(*void)(*instance.m_height_in_points)) - cast(*void)(*instance)) == 68, "ON_TextDot.m_height_in_points has unexpected offset % instead of 68", ((cast(*void)(*instance.m_height_in_points)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_TextDot.m_height_in_points)) == 4, "ON_TextDot.m_height_in_points has unexpected size % instead of 4", size_of(type_of(ON_TextDot.m_height_in_points)));
        assert(size_of(ON_TextDot) == 72, "ON_TextDot has size % instead of 72", size_of(ON_TextDot));
    }

    assert(size_of(ON_Text) == 792, "ON_Text has size % instead of 792", size_of(ON_Text));

    {
        instance: ON_Leader;
        assert(((cast(*void)(*instance.m_points)) - cast(*void)(*instance)) == 792, "ON_Leader.m_points has unexpected offset % instead of 792", ((cast(*void)(*instance.m_points)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Leader.m_points)) == 24, "ON_Leader.m_points has unexpected size % instead of 24", size_of(type_of(ON_Leader.m_points)));
        assert(((cast(*void)(*instance.m_curve)) - cast(*void)(*instance)) == 816, "ON_Leader.m_curve has unexpected offset % instead of 816", ((cast(*void)(*instance.m_curve)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Leader.m_curve)) == 8, "ON_Leader.m_curve has unexpected size % instead of 8", size_of(type_of(ON_Leader.m_curve)));
        assert(((cast(*void)(*instance.m_text_point)) - cast(*void)(*instance)) == 824, "ON_Leader.m_text_point has unexpected offset % instead of 824", ((cast(*void)(*instance.m_text_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Leader.m_text_point)) == 16, "ON_Leader.m_text_point has unexpected size % instead of 16", size_of(type_of(ON_Leader.m_text_point)));
        assert(size_of(ON_Leader) == 840, "ON_Leader has size % instead of 840", size_of(ON_Leader));
    }

    {
        instance: ON_Dimension;
        assert(((cast(*void)(*instance.m_user_text)) - cast(*void)(*instance)) == 792, "ON_Dimension.m_user_text has unexpected offset % instead of 792", ((cast(*void)(*instance.m_user_text)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_user_text)) == 8, "ON_Dimension.m_user_text has unexpected size % instead of 8", size_of(type_of(ON_Dimension.m_user_text)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 800, "ON_Dimension.m_reserved has unexpected offset % instead of 800", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_reserved)) == 8, "ON_Dimension.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_Dimension.m_reserved)));
        assert(((cast(*void)(*instance.m_plain_user_text)) - cast(*void)(*instance)) == 808, "ON_Dimension.m_plain_user_text has unexpected offset % instead of 808", ((cast(*void)(*instance.m_plain_user_text)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_plain_user_text)) == 8, "ON_Dimension.m_plain_user_text has unexpected size % instead of 8", size_of(type_of(ON_Dimension.m_plain_user_text)));
        assert(((cast(*void)(*instance.m_use_default_text_point)) - cast(*void)(*instance)) == 816, "ON_Dimension.m_use_default_text_point has unexpected offset % instead of 816", ((cast(*void)(*instance.m_use_default_text_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_use_default_text_point)) == 1, "ON_Dimension.m_use_default_text_point has unexpected size % instead of 1", size_of(type_of(ON_Dimension.m_use_default_text_point)));
        assert(((cast(*void)(*instance.m_user_text_point)) - cast(*void)(*instance)) == 824, "ON_Dimension.m_user_text_point has unexpected offset % instead of 824", ((cast(*void)(*instance.m_user_text_point)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_user_text_point)) == 16, "ON_Dimension.m_user_text_point has unexpected size % instead of 16", size_of(type_of(ON_Dimension.m_user_text_point)));
        assert(((cast(*void)(*instance.m_flip_arrow_1)) - cast(*void)(*instance)) == 840, "ON_Dimension.m_flip_arrow_1 has unexpected offset % instead of 840", ((cast(*void)(*instance.m_flip_arrow_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_flip_arrow_1)) == 1, "ON_Dimension.m_flip_arrow_1 has unexpected size % instead of 1", size_of(type_of(ON_Dimension.m_flip_arrow_1)));
        assert(((cast(*void)(*instance.m_flip_arrow_2)) - cast(*void)(*instance)) == 841, "ON_Dimension.m_flip_arrow_2 has unexpected offset % instead of 841", ((cast(*void)(*instance.m_flip_arrow_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_flip_arrow_2)) == 1, "ON_Dimension.m_flip_arrow_2 has unexpected size % instead of 1", size_of(type_of(ON_Dimension.m_flip_arrow_2)));
        assert(((cast(*void)(*instance.m_text_outside)) - cast(*void)(*instance)) == 842, "ON_Dimension.m_text_outside has unexpected offset % instead of 842", ((cast(*void)(*instance.m_text_outside)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_text_outside)) == 1, "ON_Dimension.m_text_outside has unexpected size % instead of 1", size_of(type_of(ON_Dimension.m_text_outside)));
        assert(((cast(*void)(*instance.m_reserved98)) - cast(*void)(*instance)) == 844, "ON_Dimension.m_reserved98 has unexpected offset % instead of 844", ((cast(*void)(*instance.m_reserved98)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_reserved98)) == 4, "ON_Dimension.m_reserved98 has unexpected size % instead of 4", size_of(type_of(ON_Dimension.m_reserved98)));
        assert(((cast(*void)(*instance.m_reserved99)) - cast(*void)(*instance)) == 848, "ON_Dimension.m_reserved99 has unexpected offset % instead of 848", ((cast(*void)(*instance.m_reserved99)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_reserved99)) == 4, "ON_Dimension.m_reserved99 has unexpected size % instead of 4", size_of(type_of(ON_Dimension.m_reserved99)));
        assert(((cast(*void)(*instance.m_detail_measured)) - cast(*void)(*instance)) == 852, "ON_Dimension.m_detail_measured has unexpected offset % instead of 852", ((cast(*void)(*instance.m_detail_measured)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_detail_measured)) == 16, "ON_Dimension.m_detail_measured has unexpected size % instead of 16", size_of(type_of(ON_Dimension.m_detail_measured)));
        assert(((cast(*void)(*instance.m_distance_scale)) - cast(*void)(*instance)) == 872, "ON_Dimension.m_distance_scale has unexpected offset % instead of 872", ((cast(*void)(*instance.m_distance_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dimension.m_distance_scale)) == 8, "ON_Dimension.m_distance_scale has unexpected size % instead of 8", size_of(type_of(ON_Dimension.m_distance_scale)));
        assert(size_of(ON_Dimension) == 880, "ON_Dimension has size % instead of 880", size_of(ON_Dimension));
    }

    {
        instance: ON_DimLinear;
        assert(((cast(*void)(*instance.m_def_pt_2)) - cast(*void)(*instance)) == 880, "ON_DimLinear.m_def_pt_2 has unexpected offset % instead of 880", ((cast(*void)(*instance.m_def_pt_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimLinear.m_def_pt_2)) == 16, "ON_DimLinear.m_def_pt_2 has unexpected size % instead of 16", size_of(type_of(ON_DimLinear.m_def_pt_2)));
        assert(((cast(*void)(*instance.m_dimline_pt)) - cast(*void)(*instance)) == 896, "ON_DimLinear.m_dimline_pt has unexpected offset % instead of 896", ((cast(*void)(*instance.m_dimline_pt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimLinear.m_dimline_pt)) == 16, "ON_DimLinear.m_dimline_pt has unexpected size % instead of 16", size_of(type_of(ON_DimLinear.m_dimline_pt)));
        assert(size_of(ON_DimLinear) == 912, "ON_DimLinear has size % instead of 912", size_of(ON_DimLinear));
    }

    {
        instance: ON_DimAngular;
        assert(((cast(*void)(*instance.m_vec_1)) - cast(*void)(*instance)) == 880, "ON_DimAngular.m_vec_1 has unexpected offset % instead of 880", ((cast(*void)(*instance.m_vec_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimAngular.m_vec_1)) == 16, "ON_DimAngular.m_vec_1 has unexpected size % instead of 16", size_of(type_of(ON_DimAngular.m_vec_1)));
        assert(((cast(*void)(*instance.m_vec_2)) - cast(*void)(*instance)) == 896, "ON_DimAngular.m_vec_2 has unexpected offset % instead of 896", ((cast(*void)(*instance.m_vec_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimAngular.m_vec_2)) == 16, "ON_DimAngular.m_vec_2 has unexpected size % instead of 16", size_of(type_of(ON_DimAngular.m_vec_2)));
        assert(((cast(*void)(*instance.m_ext_offset_1)) - cast(*void)(*instance)) == 912, "ON_DimAngular.m_ext_offset_1 has unexpected offset % instead of 912", ((cast(*void)(*instance.m_ext_offset_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimAngular.m_ext_offset_1)) == 8, "ON_DimAngular.m_ext_offset_1 has unexpected size % instead of 8", size_of(type_of(ON_DimAngular.m_ext_offset_1)));
        assert(((cast(*void)(*instance.m_ext_offset_2)) - cast(*void)(*instance)) == 920, "ON_DimAngular.m_ext_offset_2 has unexpected offset % instead of 920", ((cast(*void)(*instance.m_ext_offset_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimAngular.m_ext_offset_2)) == 8, "ON_DimAngular.m_ext_offset_2 has unexpected size % instead of 8", size_of(type_of(ON_DimAngular.m_ext_offset_2)));
        assert(((cast(*void)(*instance.m_dimline_pt)) - cast(*void)(*instance)) == 928, "ON_DimAngular.m_dimline_pt has unexpected offset % instead of 928", ((cast(*void)(*instance.m_dimline_pt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimAngular.m_dimline_pt)) == 16, "ON_DimAngular.m_dimline_pt has unexpected size % instead of 16", size_of(type_of(ON_DimAngular.m_dimline_pt)));
        assert(size_of(ON_DimAngular) == 944, "ON_DimAngular has size % instead of 944", size_of(ON_DimAngular));
    }

    {
        instance: ON_DimRadial;
        assert(((cast(*void)(*instance.m_radius_pt)) - cast(*void)(*instance)) == 880, "ON_DimRadial.m_radius_pt has unexpected offset % instead of 880", ((cast(*void)(*instance.m_radius_pt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimRadial.m_radius_pt)) == 16, "ON_DimRadial.m_radius_pt has unexpected size % instead of 16", size_of(type_of(ON_DimRadial.m_radius_pt)));
        assert(((cast(*void)(*instance.m_dimline_pt)) - cast(*void)(*instance)) == 896, "ON_DimRadial.m_dimline_pt has unexpected offset % instead of 896", ((cast(*void)(*instance.m_dimline_pt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimRadial.m_dimline_pt)) == 16, "ON_DimRadial.m_dimline_pt has unexpected size % instead of 16", size_of(type_of(ON_DimRadial.m_dimline_pt)));
        assert(size_of(ON_DimRadial) == 912, "ON_DimRadial has size % instead of 912", size_of(ON_DimRadial));
    }

    {
        instance: ON_DimOrdinate;
        assert(((cast(*void)(*instance.m_direction)) - cast(*void)(*instance)) == 880, "ON_DimOrdinate.m_direction has unexpected offset % instead of 880", ((cast(*void)(*instance.m_direction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimOrdinate.m_direction)) == 1, "ON_DimOrdinate.m_direction has unexpected size % instead of 1", size_of(type_of(ON_DimOrdinate.m_direction)));
        assert(((cast(*void)(*instance.m_def_pt)) - cast(*void)(*instance)) == 888, "ON_DimOrdinate.m_def_pt has unexpected offset % instead of 888", ((cast(*void)(*instance.m_def_pt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimOrdinate.m_def_pt)) == 16, "ON_DimOrdinate.m_def_pt has unexpected size % instead of 16", size_of(type_of(ON_DimOrdinate.m_def_pt)));
        assert(((cast(*void)(*instance.m_ldr_pt)) - cast(*void)(*instance)) == 904, "ON_DimOrdinate.m_ldr_pt has unexpected offset % instead of 904", ((cast(*void)(*instance.m_ldr_pt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimOrdinate.m_ldr_pt)) == 16, "ON_DimOrdinate.m_ldr_pt has unexpected size % instead of 16", size_of(type_of(ON_DimOrdinate.m_ldr_pt)));
        assert(((cast(*void)(*instance.m_kink_offset_1)) - cast(*void)(*instance)) == 920, "ON_DimOrdinate.m_kink_offset_1 has unexpected offset % instead of 920", ((cast(*void)(*instance.m_kink_offset_1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimOrdinate.m_kink_offset_1)) == 8, "ON_DimOrdinate.m_kink_offset_1 has unexpected size % instead of 8", size_of(type_of(ON_DimOrdinate.m_kink_offset_1)));
        assert(((cast(*void)(*instance.m_kink_offset_2)) - cast(*void)(*instance)) == 928, "ON_DimOrdinate.m_kink_offset_2 has unexpected offset % instead of 928", ((cast(*void)(*instance.m_kink_offset_2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_DimOrdinate.m_kink_offset_2)) == 8, "ON_DimOrdinate.m_kink_offset_2 has unexpected size % instead of 8", size_of(type_of(ON_DimOrdinate.m_kink_offset_2)));
        assert(size_of(ON_DimOrdinate) == 936, "ON_DimOrdinate has size % instead of 936", size_of(ON_DimOrdinate));
    }

    {
        instance: ON_Centermark;
        assert(((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)) == 880, "ON_Centermark.m_radius has unexpected offset % instead of 880", ((cast(*void)(*instance.m_radius)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Centermark.m_radius)) == 8, "ON_Centermark.m_radius has unexpected size % instead of 8", size_of(type_of(ON_Centermark.m_radius)));
        assert(size_of(ON_Centermark) == 888, "ON_Centermark has size % instead of 888", size_of(ON_Centermark));
    }

    assert(size_of(ON_NumberFormatter) == 1, "ON_NumberFormatter has size % instead of 1", size_of(ON_NumberFormatter));

    {
        instance: ON_AerialPhotoImageFrustum;
        assert(((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)) == 0, "ON_AerialPhotoImageFrustum.m_unit_system has unexpected offset % instead of 0", ((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImageFrustum.m_unit_system)) == 24, "ON_AerialPhotoImageFrustum.m_unit_system has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoImageFrustum.m_unit_system)));
        assert(((cast(*void)(*instance.m_height)) - cast(*void)(*instance)) == 24, "ON_AerialPhotoImageFrustum.m_height has unexpected offset % instead of 24", ((cast(*void)(*instance.m_height)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImageFrustum.m_height)) == 8, "ON_AerialPhotoImageFrustum.m_height has unexpected size % instead of 8", size_of(type_of(ON_AerialPhotoImageFrustum.m_height)));
        assert(((cast(*void)(*instance.m_corners)) - cast(*void)(*instance)) == 32, "ON_AerialPhotoImageFrustum.m_corners has unexpected offset % instead of 32", ((cast(*void)(*instance.m_corners)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImageFrustum.m_corners)) == 64, "ON_AerialPhotoImageFrustum.m_corners has unexpected size % instead of 64", size_of(type_of(ON_AerialPhotoImageFrustum.m_corners)));
        assert(size_of(ON_AerialPhotoImageFrustum) == 96, "ON_AerialPhotoImageFrustum has size % instead of 96", size_of(ON_AerialPhotoImageFrustum));
    }

    {
        instance: ON_AerialPhotoCameraPosition;
        assert(((cast(*void)(*instance.m_status)) - cast(*void)(*instance)) == 0, "ON_AerialPhotoCameraPosition.m_status has unexpected offset % instead of 0", ((cast(*void)(*instance.m_status)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_status)) == 1, "ON_AerialPhotoCameraPosition.m_status has unexpected size % instead of 1", size_of(type_of(ON_AerialPhotoCameraPosition.m_status)));
        assert(((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)) == 1, "ON_AerialPhotoCameraPosition.m_reserved1 has unexpected offset % instead of 1", ((cast(*void)(*instance.m_reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_reserved1)) == 3, "ON_AerialPhotoCameraPosition.m_reserved1 has unexpected size % instead of 3", size_of(type_of(ON_AerialPhotoCameraPosition.m_reserved1)));
        assert(((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)) == 4, "ON_AerialPhotoCameraPosition.m_reserved2 has unexpected offset % instead of 4", ((cast(*void)(*instance.m_reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_reserved2)) == 4, "ON_AerialPhotoCameraPosition.m_reserved2 has unexpected size % instead of 4", size_of(type_of(ON_AerialPhotoCameraPosition.m_reserved2)));
        assert(((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)) == 8, "ON_AerialPhotoCameraPosition.m_unit_system has unexpected offset % instead of 8", ((cast(*void)(*instance.m_unit_system)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_unit_system)) == 24, "ON_AerialPhotoCameraPosition.m_unit_system has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoCameraPosition.m_unit_system)));
        assert(((cast(*void)(*instance.m_location)) - cast(*void)(*instance)) == 32, "ON_AerialPhotoCameraPosition.m_location has unexpected offset % instead of 32", ((cast(*void)(*instance.m_location)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_location)) == 24, "ON_AerialPhotoCameraPosition.m_location has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoCameraPosition.m_location)));
        assert(((cast(*void)(*instance.m_orientation_angles_degrees)) - cast(*void)(*instance)) == 56, "ON_AerialPhotoCameraPosition.m_orientation_angles_degrees has unexpected offset % instead of 56", ((cast(*void)(*instance.m_orientation_angles_degrees)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_angles_degrees)) == 24, "ON_AerialPhotoCameraPosition.m_orientation_angles_degrees has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_angles_degrees)));
        assert(((cast(*void)(*instance.m_orientation_angles_radians)) - cast(*void)(*instance)) == 80, "ON_AerialPhotoCameraPosition.m_orientation_angles_radians has unexpected offset % instead of 80", ((cast(*void)(*instance.m_orientation_angles_radians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_angles_radians)) == 24, "ON_AerialPhotoCameraPosition.m_orientation_angles_radians has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_angles_radians)));
        assert(((cast(*void)(*instance.m_orientation_direction)) - cast(*void)(*instance)) == 104, "ON_AerialPhotoCameraPosition.m_orientation_direction has unexpected offset % instead of 104", ((cast(*void)(*instance.m_orientation_direction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_direction)) == 24, "ON_AerialPhotoCameraPosition.m_orientation_direction has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_direction)));
        assert(((cast(*void)(*instance.m_orientation_up)) - cast(*void)(*instance)) == 128, "ON_AerialPhotoCameraPosition.m_orientation_up has unexpected offset % instead of 128", ((cast(*void)(*instance.m_orientation_up)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_up)) == 24, "ON_AerialPhotoCameraPosition.m_orientation_up has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_up)));
        assert(((cast(*void)(*instance.m_orientation_right)) - cast(*void)(*instance)) == 152, "ON_AerialPhotoCameraPosition.m_orientation_right has unexpected offset % instead of 152", ((cast(*void)(*instance.m_orientation_right)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_right)) == 24, "ON_AerialPhotoCameraPosition.m_orientation_right has unexpected size % instead of 24", size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_right)));
        assert(((cast(*void)(*instance.m_orientation_rotation)) - cast(*void)(*instance)) == 176, "ON_AerialPhotoCameraPosition.m_orientation_rotation has unexpected offset % instead of 176", ((cast(*void)(*instance.m_orientation_rotation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_rotation)) == 128, "ON_AerialPhotoCameraPosition.m_orientation_rotation has unexpected size % instead of 128", size_of(type_of(ON_AerialPhotoCameraPosition.m_orientation_rotation)));
        assert(size_of(ON_AerialPhotoCameraPosition) == 304, "ON_AerialPhotoCameraPosition has size % instead of 304", size_of(ON_AerialPhotoCameraPosition));
    }

    {
        instance: ON_AerialPhotoImage;
        assert(((cast(*void)(*instance.m_name)) - cast(*void)(*instance)) == 0, "ON_AerialPhotoImage.m_name has unexpected offset % instead of 0", ((cast(*void)(*instance.m_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImage.m_name)) == 8, "ON_AerialPhotoImage.m_name has unexpected size % instead of 8", size_of(type_of(ON_AerialPhotoImage.m_name)));
        assert(((cast(*void)(*instance.m_id)) - cast(*void)(*instance)) == 8, "ON_AerialPhotoImage.m_id has unexpected offset % instead of 8", ((cast(*void)(*instance.m_id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImage.m_id)) == 16, "ON_AerialPhotoImage.m_id has unexpected size % instead of 16", size_of(type_of(ON_AerialPhotoImage.m_id)));
        assert(((cast(*void)(*instance.m_camera_position)) - cast(*void)(*instance)) == 24, "ON_AerialPhotoImage.m_camera_position has unexpected offset % instead of 24", ((cast(*void)(*instance.m_camera_position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImage.m_camera_position)) == 304, "ON_AerialPhotoImage.m_camera_position has unexpected size % instead of 304", size_of(type_of(ON_AerialPhotoImage.m_camera_position)));
        assert(((cast(*void)(*instance.m_image_frustum)) - cast(*void)(*instance)) == 328, "ON_AerialPhotoImage.m_image_frustum has unexpected offset % instead of 328", ((cast(*void)(*instance.m_image_frustum)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImage.m_image_frustum)) == 96, "ON_AerialPhotoImage.m_image_frustum has unexpected size % instead of 96", size_of(type_of(ON_AerialPhotoImage.m_image_frustum)));
        assert(((cast(*void)(*instance.m_image_file_name)) - cast(*void)(*instance)) == 424, "ON_AerialPhotoImage.m_image_file_name has unexpected offset % instead of 424", ((cast(*void)(*instance.m_image_file_name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImage.m_image_file_name)) == 8, "ON_AerialPhotoImage.m_image_file_name has unexpected size % instead of 8", size_of(type_of(ON_AerialPhotoImage.m_image_file_name)));
        assert(((cast(*void)(*instance.m_image_width_pixels)) - cast(*void)(*instance)) == 432, "ON_AerialPhotoImage.m_image_width_pixels has unexpected offset % instead of 432", ((cast(*void)(*instance.m_image_width_pixels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImage.m_image_width_pixels)) == 4, "ON_AerialPhotoImage.m_image_width_pixels has unexpected size % instead of 4", size_of(type_of(ON_AerialPhotoImage.m_image_width_pixels)));
        assert(((cast(*void)(*instance.m_image_height_pixels)) - cast(*void)(*instance)) == 436, "ON_AerialPhotoImage.m_image_height_pixels has unexpected offset % instead of 436", ((cast(*void)(*instance.m_image_height_pixels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_AerialPhotoImage.m_image_height_pixels)) == 4, "ON_AerialPhotoImage.m_image_height_pixels has unexpected size % instead of 4", size_of(type_of(ON_AerialPhotoImage.m_image_height_pixels)));
        assert(size_of(ON_AerialPhotoImage) == 440, "ON_AerialPhotoImage has size % instead of 440", size_of(ON_AerialPhotoImage));
    }

    {
        instance: ON_ArchivableDictionary;
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 8, "ON_ArchivableDictionary.m_private has unexpected offset % instead of 8", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ArchivableDictionary.m_private)) == 8, "ON_ArchivableDictionary.m_private has unexpected size % instead of 8", size_of(type_of(ON_ArchivableDictionary.m_private)));
        assert(((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)) == 16, "ON_ArchivableDictionary.m_reserved has unexpected offset % instead of 16", ((cast(*void)(*instance.m_reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ArchivableDictionary.m_reserved)) == 8, "ON_ArchivableDictionary.m_reserved has unexpected size % instead of 8", size_of(type_of(ON_ArchivableDictionary.m_reserved)));
        assert(size_of(ON_ArchivableDictionary) == 24, "ON_ArchivableDictionary has size % instead of 24", size_of(ON_ArchivableDictionary));
    }

    {
        instance: ON_Dithering;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 8, "ON_Dithering.m_impl has unexpected offset % instead of 8", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Dithering.m_impl)) == 8, "ON_Dithering.m_impl has unexpected size % instead of 8", size_of(type_of(ON_Dithering.m_impl)));
        assert(size_of(ON_Dithering) == 16, "ON_Dithering has size % instead of 16", size_of(ON_Dithering));
    }

    {
        instance: ON_EmbeddedFile;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 144, "ON_EmbeddedFile.m_impl has unexpected offset % instead of 144", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_EmbeddedFile.m_impl)) == 8, "ON_EmbeddedFile.m_impl has unexpected size % instead of 8", size_of(type_of(ON_EmbeddedFile.m_impl)));
        assert(size_of(ON_EmbeddedFile) == 152, "ON_EmbeddedFile has size % instead of 152", size_of(ON_EmbeddedFile));
    }

    {
        instance: ON_GroundPlane;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_GroundPlane._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_GroundPlane._impl)) == 8, "ON_GroundPlane._impl has unexpected size % instead of 8", size_of(type_of(ON_GroundPlane._impl)));
        assert(size_of(ON_GroundPlane) == 16, "ON_GroundPlane has size % instead of 16", size_of(ON_GroundPlane));
    }

    {
        instance: ON_LinearWorkflow;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_LinearWorkflow._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_LinearWorkflow._impl)) == 8, "ON_LinearWorkflow._impl has unexpected size % instead of 8", size_of(type_of(ON_LinearWorkflow._impl)));
        assert(size_of(ON_LinearWorkflow) == 16, "ON_LinearWorkflow has size % instead of 16", size_of(ON_LinearWorkflow));
    }

    {
        instance: ON_Environment;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 16, "ON_Environment.m_impl has unexpected offset % instead of 16", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Environment.m_impl)) == 8, "ON_Environment.m_impl has unexpected size % instead of 8", size_of(type_of(ON_Environment.m_impl)));
        assert(size_of(ON_Environment) == 24, "ON_Environment has size % instead of 24", size_of(ON_Environment));
    }

    {
        instance: ON_RenderContent.ChildIterator;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 8, "ON_RenderContent.ChildIterator._private has unexpected offset % instead of 8", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RenderContent.ChildIterator._private)) == 8, "ON_RenderContent.ChildIterator._private has unexpected size % instead of 8", size_of(type_of(ON_RenderContent.ChildIterator._private)));
        assert(size_of(ON_RenderContent.ChildIterator) == 16, "ON_RenderContent.ChildIterator has size % instead of 16", size_of(ON_RenderContent.ChildIterator));
    }

    {
        instance: ON_RenderContent;
        assert(((cast(*void)(*instance._private)) - cast(*void)(*instance)) == 144, "ON_RenderContent._private has unexpected offset % instead of 144", ((cast(*void)(*instance._private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RenderContent._private)) == 8, "ON_RenderContent._private has unexpected size % instead of 8", size_of(type_of(ON_RenderContent._private)));
        assert(((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)) == 152, "ON_RenderContent._PRIVATE has unexpected offset % instead of 152", ((cast(*void)(*instance._PRIVATE)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RenderContent._PRIVATE)) == 424, "ON_RenderContent._PRIVATE has unexpected size % instead of 424", size_of(type_of(ON_RenderContent._PRIVATE)));
        assert(size_of(ON_RenderContent) == 576, "ON_RenderContent has size % instead of 576", size_of(ON_RenderContent));
    }

    assert(size_of(ON_RenderMaterial) == 576, "ON_RenderMaterial has size % instead of 576", size_of(ON_RenderMaterial));

    assert(size_of(ON_RenderEnvironment) == 576, "ON_RenderEnvironment has size % instead of 576", size_of(ON_RenderEnvironment));

    assert(size_of(ON_RenderTexture) == 576, "ON_RenderTexture has size % instead of 576", size_of(ON_RenderTexture));

    {
        instance: ON_RenderChannels;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 8, "ON_RenderChannels.m_impl has unexpected offset % instead of 8", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_RenderChannels.m_impl)) == 8, "ON_RenderChannels.m_impl has unexpected size % instead of 8", size_of(type_of(ON_RenderChannels.m_impl)));
        assert(size_of(ON_RenderChannels) == 16, "ON_RenderChannels has size % instead of 16", size_of(ON_RenderChannels));
    }

    {
        instance: ON_SafeFrame;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 8, "ON_SafeFrame.m_impl has unexpected offset % instead of 8", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SafeFrame.m_impl)) == 8, "ON_SafeFrame.m_impl has unexpected size % instead of 8", size_of(type_of(ON_SafeFrame.m_impl)));
        assert(size_of(ON_SafeFrame) == 16, "ON_SafeFrame has size % instead of 16", size_of(ON_SafeFrame));
    }

    {
        instance: ON_Skylight;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 8, "ON_Skylight.m_impl has unexpected offset % instead of 8", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Skylight.m_impl)) == 8, "ON_Skylight.m_impl has unexpected size % instead of 8", size_of(type_of(ON_Skylight.m_impl)));
        assert(size_of(ON_Skylight) == 16, "ON_Skylight has size % instead of 16", size_of(ON_Skylight));
    }

    {
        instance: ON_SunEngine;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_SunEngine._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_SunEngine._impl)) == 8, "ON_SunEngine._impl has unexpected size % instead of 8", size_of(type_of(ON_SunEngine._impl)));
        assert(size_of(ON_SunEngine) == 16, "ON_SunEngine has size % instead of 16", size_of(ON_SunEngine));
    }

    {
        instance: ON_Sun;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_Sun._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Sun._impl)) == 8, "ON_Sun._impl has unexpected size % instead of 8", size_of(type_of(ON_Sun._impl)));
        assert(size_of(ON_Sun) == 16, "ON_Sun has size % instead of 16", size_of(ON_Sun));
    }

    {
        instance: ON_PostEffectParams;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_PostEffectParams._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PostEffectParams._impl)) == 8, "ON_PostEffectParams._impl has unexpected size % instead of 8", size_of(type_of(ON_PostEffectParams._impl)));
        assert(size_of(ON_PostEffectParams) == 16, "ON_PostEffectParams has size % instead of 16", size_of(ON_PostEffectParams));
    }

    {
        instance: ON_PostEffect;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_PostEffect._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PostEffect._impl)) == 8, "ON_PostEffect._impl has unexpected size % instead of 8", size_of(type_of(ON_PostEffect._impl)));
        assert(size_of(ON_PostEffect) == 16, "ON_PostEffect has size % instead of 16", size_of(ON_PostEffect));
    }

    {
        instance: ON_PostEffects;
        assert(((cast(*void)(*instance._impl)) - cast(*void)(*instance)) == 8, "ON_PostEffects._impl has unexpected offset % instead of 8", ((cast(*void)(*instance._impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_PostEffects._impl)) == 8, "ON_PostEffects._impl has unexpected size % instead of 8", size_of(type_of(ON_PostEffects._impl)));
        assert(size_of(ON_PostEffects) == 16, "ON_PostEffects has size % instead of 16", size_of(ON_PostEffects));
    }

    {
        instance: ON_MeshModifier;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 8, "ON_MeshModifier.m_impl has unexpected offset % instead of 8", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshModifier.m_impl)) == 8, "ON_MeshModifier.m_impl has unexpected size % instead of 8", size_of(type_of(ON_MeshModifier.m_impl)));
        assert(size_of(ON_MeshModifier) == 16, "ON_MeshModifier has size % instead of 16", size_of(ON_MeshModifier));
    }

    assert(size_of(ON_DisplacementUserData) == 512, "ON_DisplacementUserData has size % instead of 512", size_of(ON_DisplacementUserData));

    {
        instance: ON_Displacement.SubItem;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_Displacement.SubItem.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Displacement.SubItem.m_impl)) == 8, "ON_Displacement.SubItem.m_impl has unexpected size % instead of 8", size_of(type_of(ON_Displacement.SubItem.m_impl)));
        assert(size_of(ON_Displacement.SubItem) == 8, "ON_Displacement.SubItem has size % instead of 8", size_of(ON_Displacement.SubItem));
    }

    {
        instance: ON_Displacement.SubItemIterator;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_Displacement.SubItemIterator.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Displacement.SubItemIterator.m_impl)) == 8, "ON_Displacement.SubItemIterator.m_impl has unexpected size % instead of 8", size_of(type_of(ON_Displacement.SubItemIterator.m_impl)));
        assert(size_of(ON_Displacement.SubItemIterator) == 8, "ON_Displacement.SubItemIterator has size % instead of 8", size_of(ON_Displacement.SubItemIterator));
    }

    assert(size_of(ON_Displacement.Defaults) == 1, "ON_Displacement.Defaults has size % instead of 1", size_of(ON_Displacement.Defaults));

    {
        instance: ON_Displacement;
        assert(((cast(*void)(*instance.m_impl_dsp)) - cast(*void)(*instance)) == 16, "ON_Displacement.m_impl_dsp has unexpected offset % instead of 16", ((cast(*void)(*instance.m_impl_dsp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_Displacement.m_impl_dsp)) == 8, "ON_Displacement.m_impl_dsp has unexpected size % instead of 8", size_of(type_of(ON_Displacement.m_impl_dsp)));
        assert(size_of(ON_Displacement) == 24, "ON_Displacement has size % instead of 24", size_of(ON_Displacement));
    }

    assert(size_of(ON_EdgeSofteningUserData) == 512, "ON_EdgeSofteningUserData has size % instead of 512", size_of(ON_EdgeSofteningUserData));

    assert(size_of(ON_EdgeSoftening.Defaults) == 1, "ON_EdgeSoftening.Defaults has size % instead of 1", size_of(ON_EdgeSoftening.Defaults));

    assert(size_of(ON_EdgeSoftening) == 16, "ON_EdgeSoftening has size % instead of 16", size_of(ON_EdgeSoftening));

    assert(size_of(ON_ThickeningUserData) == 512, "ON_ThickeningUserData has size % instead of 512", size_of(ON_ThickeningUserData));

    assert(size_of(ON_Thickening.Defaults) == 1, "ON_Thickening.Defaults has size % instead of 1", size_of(ON_Thickening.Defaults));

    assert(size_of(ON_Thickening) == 16, "ON_Thickening has size % instead of 16", size_of(ON_Thickening));

    assert(size_of(ON_CurvePipingUserData) == 512, "ON_CurvePipingUserData has size % instead of 512", size_of(ON_CurvePipingUserData));

    assert(size_of(ON_CurvePiping.Defaults) == 1, "ON_CurvePiping.Defaults has size % instead of 1", size_of(ON_CurvePiping.Defaults));

    assert(size_of(ON_CurvePiping) == 16, "ON_CurvePiping has size % instead of 16", size_of(ON_CurvePiping));

    assert(size_of(ON_ShutLiningUserData) == 512, "ON_ShutLiningUserData has size % instead of 512", size_of(ON_ShutLiningUserData));

    assert(size_of(ON_ShutLining.Curve.Defaults) == 1, "ON_ShutLining.Curve.Defaults has size % instead of 1", size_of(ON_ShutLining.Curve.Defaults));

    {
        instance: ON_ShutLining.Curve;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_ShutLining.Curve.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ShutLining.Curve.m_impl)) == 8, "ON_ShutLining.Curve.m_impl has unexpected size % instead of 8", size_of(type_of(ON_ShutLining.Curve.m_impl)));
        assert(size_of(ON_ShutLining.Curve) == 8, "ON_ShutLining.Curve has size % instead of 8", size_of(ON_ShutLining.Curve));
    }

    {
        instance: ON_ShutLining.CurveIterator;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_ShutLining.CurveIterator.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ShutLining.CurveIterator.m_impl)) == 8, "ON_ShutLining.CurveIterator.m_impl has unexpected size % instead of 8", size_of(type_of(ON_ShutLining.CurveIterator.m_impl)));
        assert(size_of(ON_ShutLining.CurveIterator) == 8, "ON_ShutLining.CurveIterator has size % instead of 8", size_of(ON_ShutLining.CurveIterator));
    }

    assert(size_of(ON_ShutLining.Defaults) == 1, "ON_ShutLining.Defaults has size % instead of 1", size_of(ON_ShutLining.Defaults));

    {
        instance: ON_ShutLining;
        assert(((cast(*void)(*instance.m_impl_sl)) - cast(*void)(*instance)) == 16, "ON_ShutLining.m_impl_sl has unexpected offset % instead of 16", ((cast(*void)(*instance.m_impl_sl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_ShutLining.m_impl_sl)) == 8, "ON_ShutLining.m_impl_sl has unexpected size % instead of 8", size_of(type_of(ON_ShutLining.m_impl_sl)));
        assert(size_of(ON_ShutLining) == 24, "ON_ShutLining has size % instead of 24", size_of(ON_ShutLining));
    }

    {
        instance: ON_MeshModifiers;
        assert(((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)) == 0, "ON_MeshModifiers.m_impl has unexpected offset % instead of 0", ((cast(*void)(*instance.m_impl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ON_MeshModifiers.m_impl)) == 8, "ON_MeshModifiers.m_impl has unexpected size % instead of 8", size_of(type_of(ON_MeshModifiers.m_impl)));
        assert(size_of(ON_MeshModifiers) == 8, "ON_MeshModifiers has size % instead of 8", size_of(ON_MeshModifiers));
    }

    {
        instance: ONX_ErrorCounter;
        assert(((cast(*void)(*instance.m_failure_count)) - cast(*void)(*instance)) == 0, "ONX_ErrorCounter.m_failure_count has unexpected offset % instead of 0", ((cast(*void)(*instance.m_failure_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ErrorCounter.m_failure_count)) == 4, "ONX_ErrorCounter.m_failure_count has unexpected size % instead of 4", size_of(type_of(ONX_ErrorCounter.m_failure_count)));
        assert(((cast(*void)(*instance.m_error_count)) - cast(*void)(*instance)) == 4, "ONX_ErrorCounter.m_error_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ErrorCounter.m_error_count)) == 4, "ONX_ErrorCounter.m_error_count has unexpected size % instead of 4", size_of(type_of(ONX_ErrorCounter.m_error_count)));
        assert(((cast(*void)(*instance.m_warning_count)) - cast(*void)(*instance)) == 8, "ONX_ErrorCounter.m_warning_count has unexpected offset % instead of 8", ((cast(*void)(*instance.m_warning_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ErrorCounter.m_warning_count)) == 4, "ONX_ErrorCounter.m_warning_count has unexpected size % instead of 4", size_of(type_of(ONX_ErrorCounter.m_warning_count)));
        assert(((cast(*void)(*instance.m_state_bit_field)) - cast(*void)(*instance)) == 12, "ONX_ErrorCounter.m_state_bit_field has unexpected offset % instead of 12", ((cast(*void)(*instance.m_state_bit_field)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ErrorCounter.m_state_bit_field)) == 4, "ONX_ErrorCounter.m_state_bit_field has unexpected size % instead of 4", size_of(type_of(ONX_ErrorCounter.m_state_bit_field)));
        assert(((cast(*void)(*instance.m_opennurbs_library_error_count)) - cast(*void)(*instance)) == 16, "ONX_ErrorCounter.m_opennurbs_library_error_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_opennurbs_library_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ErrorCounter.m_opennurbs_library_error_count)) == 4, "ONX_ErrorCounter.m_opennurbs_library_error_count has unexpected size % instead of 4", size_of(type_of(ONX_ErrorCounter.m_opennurbs_library_error_count)));
        assert(((cast(*void)(*instance.m_opennurbs_library_warning_count)) - cast(*void)(*instance)) == 20, "ONX_ErrorCounter.m_opennurbs_library_warning_count has unexpected offset % instead of 20", ((cast(*void)(*instance.m_opennurbs_library_warning_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ErrorCounter.m_opennurbs_library_warning_count)) == 4, "ONX_ErrorCounter.m_opennurbs_library_warning_count has unexpected size % instead of 4", size_of(type_of(ONX_ErrorCounter.m_opennurbs_library_warning_count)));
        assert(size_of(ONX_ErrorCounter) == 24, "ONX_ErrorCounter has size % instead of 24", size_of(ONX_ErrorCounter));
    }

    {
        instance: ONX_Model_UserData;
        assert(((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)) == 0, "ONX_Model_UserData.m_uuid has unexpected offset % instead of 0", ((cast(*void)(*instance.m_uuid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model_UserData.m_uuid)) == 16, "ONX_Model_UserData.m_uuid has unexpected size % instead of 16", size_of(type_of(ONX_Model_UserData.m_uuid)));
        assert(((cast(*void)(*instance.m_goo)) - cast(*void)(*instance)) == 16, "ONX_Model_UserData.m_goo has unexpected offset % instead of 16", ((cast(*void)(*instance.m_goo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model_UserData.m_goo)) == 32, "ONX_Model_UserData.m_goo has unexpected size % instead of 32", size_of(type_of(ONX_Model_UserData.m_goo)));
        assert(((cast(*void)(*instance.m_usertable_3dm_version)) - cast(*void)(*instance)) == 48, "ONX_Model_UserData.m_usertable_3dm_version has unexpected offset % instead of 48", ((cast(*void)(*instance.m_usertable_3dm_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model_UserData.m_usertable_3dm_version)) == 4, "ONX_Model_UserData.m_usertable_3dm_version has unexpected size % instead of 4", size_of(type_of(ONX_Model_UserData.m_usertable_3dm_version)));
        assert(((cast(*void)(*instance.m_usertable_opennurbs_version)) - cast(*void)(*instance)) == 52, "ONX_Model_UserData.m_usertable_opennurbs_version has unexpected offset % instead of 52", ((cast(*void)(*instance.m_usertable_opennurbs_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model_UserData.m_usertable_opennurbs_version)) == 4, "ONX_Model_UserData.m_usertable_opennurbs_version has unexpected size % instead of 4", size_of(type_of(ONX_Model_UserData.m_usertable_opennurbs_version)));
        assert(size_of(ONX_Model_UserData) == 56, "ONX_Model_UserData has size % instead of 56", size_of(ONX_Model_UserData));
    }

    {
        instance: ONX_Model.ONX_ModelComponentList;
        assert(((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)) == 0, "ONX_Model.ONX_ModelComponentList.m_component_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.ONX_ModelComponentList.m_component_type)) == 1, "ONX_Model.ONX_ModelComponentList.m_component_type has unexpected size % instead of 1", size_of(type_of(ONX_Model.ONX_ModelComponentList.m_component_type)));
        assert(((cast(*void)(*instance.m_count)) - cast(*void)(*instance)) == 4, "ONX_Model.ONX_ModelComponentList.m_count has unexpected offset % instead of 4", ((cast(*void)(*instance.m_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.ONX_ModelComponentList.m_count)) == 4, "ONX_Model.ONX_ModelComponentList.m_count has unexpected size % instead of 4", size_of(type_of(ONX_Model.ONX_ModelComponentList.m_count)));
        assert(((cast(*void)(*instance.m_first_mcr_link)) - cast(*void)(*instance)) == 8, "ONX_Model.ONX_ModelComponentList.m_first_mcr_link has unexpected offset % instead of 8", ((cast(*void)(*instance.m_first_mcr_link)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.ONX_ModelComponentList.m_first_mcr_link)) == 8, "ONX_Model.ONX_ModelComponentList.m_first_mcr_link has unexpected size % instead of 8", size_of(type_of(ONX_Model.ONX_ModelComponentList.m_first_mcr_link)));
        assert(((cast(*void)(*instance.m_last_mcr_link)) - cast(*void)(*instance)) == 16, "ONX_Model.ONX_ModelComponentList.m_last_mcr_link has unexpected offset % instead of 16", ((cast(*void)(*instance.m_last_mcr_link)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.ONX_ModelComponentList.m_last_mcr_link)) == 8, "ONX_Model.ONX_ModelComponentList.m_last_mcr_link has unexpected size % instead of 8", size_of(type_of(ONX_Model.ONX_ModelComponentList.m_last_mcr_link)));
        assert(size_of(ONX_Model.ONX_ModelComponentList) == 24, "ONX_Model.ONX_ModelComponentList has size % instead of 24", size_of(ONX_Model.ONX_ModelComponentList));
    }

    {
        instance: ONX_Model;
        assert(((cast(*void)(*instance.m_3dm_file_version)) - cast(*void)(*instance)) == 8, "ONX_Model.m_3dm_file_version has unexpected offset % instead of 8", ((cast(*void)(*instance.m_3dm_file_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_3dm_file_version)) == 4, "ONX_Model.m_3dm_file_version has unexpected size % instead of 4", size_of(type_of(ONX_Model.m_3dm_file_version)));
        assert(((cast(*void)(*instance.m_3dm_opennurbs_version)) - cast(*void)(*instance)) == 12, "ONX_Model.m_3dm_opennurbs_version has unexpected offset % instead of 12", ((cast(*void)(*instance.m_3dm_opennurbs_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_3dm_opennurbs_version)) == 4, "ONX_Model.m_3dm_opennurbs_version has unexpected size % instead of 4", size_of(type_of(ONX_Model.m_3dm_opennurbs_version)));
        assert(((cast(*void)(*instance.m_3dm_file_byte_count)) - cast(*void)(*instance)) == 16, "ONX_Model.m_3dm_file_byte_count has unexpected offset % instead of 16", ((cast(*void)(*instance.m_3dm_file_byte_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_3dm_file_byte_count)) == 8, "ONX_Model.m_3dm_file_byte_count has unexpected size % instead of 8", size_of(type_of(ONX_Model.m_3dm_file_byte_count)));
        assert(((cast(*void)(*instance.m_sStartSectionComments)) - cast(*void)(*instance)) == 24, "ONX_Model.m_sStartSectionComments has unexpected offset % instead of 24", ((cast(*void)(*instance.m_sStartSectionComments)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_sStartSectionComments)) == 8, "ONX_Model.m_sStartSectionComments has unexpected size % instead of 8", size_of(type_of(ONX_Model.m_sStartSectionComments)));
        assert(((cast(*void)(*instance.m_properties)) - cast(*void)(*instance)) == 32, "ONX_Model.m_properties has unexpected offset % instead of 32", ((cast(*void)(*instance.m_properties)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_properties)) == 512, "ONX_Model.m_properties has unexpected size % instead of 512", size_of(type_of(ONX_Model.m_properties)));
        assert(((cast(*void)(*instance.m_settings)) - cast(*void)(*instance)) == 544, "ONX_Model.m_settings has unexpected offset % instead of 544", ((cast(*void)(*instance.m_settings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_settings)) == 1560, "ONX_Model.m_settings has unexpected size % instead of 1560", size_of(type_of(ONX_Model.m_settings)));
        assert(((cast(*void)(*instance.m_userdata_table)) - cast(*void)(*instance)) == 2104, "ONX_Model.m_userdata_table has unexpected offset % instead of 2104", ((cast(*void)(*instance.m_userdata_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_userdata_table)) == 24, "ONX_Model.m_userdata_table has unexpected size % instead of 24", size_of(type_of(ONX_Model.m_userdata_table)));
        assert(((cast(*void)(*instance.m_default_render_material)) - cast(*void)(*instance)) == 2128, "ONX_Model.m_default_render_material has unexpected offset % instead of 2128", ((cast(*void)(*instance.m_default_render_material)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_default_render_material)) == 16, "ONX_Model.m_default_render_material has unexpected size % instead of 16", size_of(type_of(ONX_Model.m_default_render_material)));
        assert(((cast(*void)(*instance.m_default_line_pattern)) - cast(*void)(*instance)) == 2144, "ONX_Model.m_default_line_pattern has unexpected offset % instead of 2144", ((cast(*void)(*instance.m_default_line_pattern)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_default_line_pattern)) == 16, "ONX_Model.m_default_line_pattern has unexpected size % instead of 16", size_of(type_of(ONX_Model.m_default_line_pattern)));
        assert(((cast(*void)(*instance.m_default_layer)) - cast(*void)(*instance)) == 2160, "ONX_Model.m_default_layer has unexpected offset % instead of 2160", ((cast(*void)(*instance.m_default_layer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_default_layer)) == 16, "ONX_Model.m_default_layer has unexpected size % instead of 16", size_of(type_of(ONX_Model.m_default_layer)));
        assert(((cast(*void)(*instance.m_default_text_style)) - cast(*void)(*instance)) == 2176, "ONX_Model.m_default_text_style has unexpected offset % instead of 2176", ((cast(*void)(*instance.m_default_text_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_default_text_style)) == 16, "ONX_Model.m_default_text_style has unexpected size % instead of 16", size_of(type_of(ONX_Model.m_default_text_style)));
        assert(((cast(*void)(*instance.m_default_dimension_style)) - cast(*void)(*instance)) == 2192, "ONX_Model.m_default_dimension_style has unexpected offset % instead of 2192", ((cast(*void)(*instance.m_default_dimension_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_default_dimension_style)) == 16, "ONX_Model.m_default_dimension_style has unexpected size % instead of 16", size_of(type_of(ONX_Model.m_default_dimension_style)));
        assert(((cast(*void)(*instance.m_private)) - cast(*void)(*instance)) == 2208, "ONX_Model.m_private has unexpected offset % instead of 2208", ((cast(*void)(*instance.m_private)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_private)) == 8, "ONX_Model.m_private has unexpected size % instead of 8", size_of(type_of(ONX_Model.m_private)));
        assert(((cast(*void)(*instance.m_manifest)) - cast(*void)(*instance)) == 2216, "ONX_Model.m_manifest has unexpected offset % instead of 2216", ((cast(*void)(*instance.m_manifest)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_manifest)) == 8, "ONX_Model.m_manifest has unexpected size % instead of 8", size_of(type_of(ONX_Model.m_manifest)));
        assert(((cast(*void)(*instance.m_original_to_manifest_map)) - cast(*void)(*instance)) == 2224, "ONX_Model.m_original_to_manifest_map has unexpected offset % instead of 2224", ((cast(*void)(*instance.m_original_to_manifest_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_original_to_manifest_map)) == 8, "ONX_Model.m_original_to_manifest_map has unexpected size % instead of 8", size_of(type_of(ONX_Model.m_original_to_manifest_map)));
        assert(((cast(*void)(*instance.m_manifest_to_original_map)) - cast(*void)(*instance)) == 2232, "ONX_Model.m_manifest_to_original_map has unexpected offset % instead of 2232", ((cast(*void)(*instance.m_manifest_to_original_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_manifest_to_original_map)) == 8, "ONX_Model.m_manifest_to_original_map has unexpected size % instead of 8", size_of(type_of(ONX_Model.m_manifest_to_original_map)));
        assert(((cast(*void)(*instance.m_mcr_sn_map)) - cast(*void)(*instance)) == 2240, "ONX_Model.m_mcr_sn_map has unexpected offset % instead of 2240", ((cast(*void)(*instance.m_mcr_sn_map)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_mcr_sn_map)) == 112, "ONX_Model.m_mcr_sn_map has unexpected size % instead of 112", size_of(type_of(ONX_Model.m_mcr_sn_map)));
        assert(((cast(*void)(*instance.m_mcr_link_fsp)) - cast(*void)(*instance)) == 2352, "ONX_Model.m_mcr_link_fsp has unexpected offset % instead of 2352", ((cast(*void)(*instance.m_mcr_link_fsp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_mcr_link_fsp)) == 72, "ONX_Model.m_mcr_link_fsp has unexpected size % instead of 72", size_of(type_of(ONX_Model.m_mcr_link_fsp)));
        assert(((cast(*void)(*instance.m_mcr_lists)) - cast(*void)(*instance)) == 2424, "ONX_Model.m_mcr_lists has unexpected offset % instead of 2424", ((cast(*void)(*instance.m_mcr_lists)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_mcr_lists)) == 384, "ONX_Model.m_mcr_lists has unexpected size % instead of 384", size_of(type_of(ONX_Model.m_mcr_lists)));
        assert(((cast(*void)(*instance.m_model_geometry_bbox)) - cast(*void)(*instance)) == 2808, "ONX_Model.m_model_geometry_bbox has unexpected offset % instead of 2808", ((cast(*void)(*instance.m_model_geometry_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_model_geometry_bbox)) == 48, "ONX_Model.m_model_geometry_bbox has unexpected size % instead of 48", size_of(type_of(ONX_Model.m_model_geometry_bbox)));
        assert(((cast(*void)(*instance.m_render_light_bbox)) - cast(*void)(*instance)) == 2856, "ONX_Model.m_render_light_bbox has unexpected offset % instead of 2856", ((cast(*void)(*instance.m_render_light_bbox)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_render_light_bbox)) == 48, "ONX_Model.m_render_light_bbox has unexpected size % instead of 48", size_of(type_of(ONX_Model.m_render_light_bbox)));
        assert(((cast(*void)(*instance.m_model_user_string_list)) - cast(*void)(*instance)) == 2904, "ONX_Model.m_model_user_string_list has unexpected offset % instead of 2904", ((cast(*void)(*instance.m_model_user_string_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_Model.m_model_user_string_list)) == 8, "ONX_Model.m_model_user_string_list has unexpected size % instead of 8", size_of(type_of(ONX_Model.m_model_user_string_list)));
        assert(size_of(ONX_Model) == 2912, "ONX_Model has size % instead of 2912", size_of(ONX_Model));
    }

    {
        instance: ONX_ModelComponentIterator;
        assert(((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)) == 0, "ONX_ModelComponentIterator.m_component_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_component_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_component_type)) == 1, "ONX_ModelComponentIterator.m_component_type has unexpected size % instead of 1", size_of(type_of(ONX_ModelComponentIterator.m_component_type)));
        assert(((cast(*void)(*instance.m_model)) - cast(*void)(*instance)) == 8, "ONX_ModelComponentIterator.m_model has unexpected offset % instead of 8", ((cast(*void)(*instance.m_model)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_model)) == 8, "ONX_ModelComponentIterator.m_model has unexpected size % instead of 8", size_of(type_of(ONX_ModelComponentIterator.m_model)));
        assert(((cast(*void)(*instance.m_model_content_version)) - cast(*void)(*instance)) == 16, "ONX_ModelComponentIterator.m_model_content_version has unexpected offset % instead of 16", ((cast(*void)(*instance.m_model_content_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_model_content_version)) == 8, "ONX_ModelComponentIterator.m_model_content_version has unexpected size % instead of 8", size_of(type_of(ONX_ModelComponentIterator.m_model_content_version)));
        assert(((cast(*void)(*instance.m_list)) - cast(*void)(*instance)) == 24, "ONX_ModelComponentIterator.m_list has unexpected offset % instead of 24", ((cast(*void)(*instance.m_list)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_list)) == 8, "ONX_ModelComponentIterator.m_list has unexpected size % instead of 8", size_of(type_of(ONX_ModelComponentIterator.m_list)));
        assert(((cast(*void)(*instance.m_link)) - cast(*void)(*instance)) == 32, "ONX_ModelComponentIterator.m_link has unexpected offset % instead of 32", ((cast(*void)(*instance.m_link)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_link)) == 8, "ONX_ModelComponentIterator.m_link has unexpected size % instead of 8", size_of(type_of(ONX_ModelComponentIterator.m_link)));
        assert(((cast(*void)(*instance.m_current_component_sn)) - cast(*void)(*instance)) == 40, "ONX_ModelComponentIterator.m_current_component_sn has unexpected offset % instead of 40", ((cast(*void)(*instance.m_current_component_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_current_component_sn)) == 8, "ONX_ModelComponentIterator.m_current_component_sn has unexpected size % instead of 8", size_of(type_of(ONX_ModelComponentIterator.m_current_component_sn)));
        assert(((cast(*void)(*instance.m_next_component_sn)) - cast(*void)(*instance)) == 48, "ONX_ModelComponentIterator.m_next_component_sn has unexpected offset % instead of 48", ((cast(*void)(*instance.m_next_component_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_next_component_sn)) == 8, "ONX_ModelComponentIterator.m_next_component_sn has unexpected size % instead of 8", size_of(type_of(ONX_ModelComponentIterator.m_next_component_sn)));
        assert(((cast(*void)(*instance.m_prev_component_sn)) - cast(*void)(*instance)) == 56, "ONX_ModelComponentIterator.m_prev_component_sn has unexpected offset % instead of 56", ((cast(*void)(*instance.m_prev_component_sn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_prev_component_sn)) == 8, "ONX_ModelComponentIterator.m_prev_component_sn has unexpected size % instead of 8", size_of(type_of(ONX_ModelComponentIterator.m_prev_component_sn)));
        assert(((cast(*void)(*instance.m_current_component_weak_ref)) - cast(*void)(*instance)) == 64, "ONX_ModelComponentIterator.m_current_component_weak_ref has unexpected offset % instead of 64", ((cast(*void)(*instance.m_current_component_weak_ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelComponentIterator.m_current_component_weak_ref)) == 16, "ONX_ModelComponentIterator.m_current_component_weak_ref has unexpected size % instead of 16", size_of(type_of(ONX_ModelComponentIterator.m_current_component_weak_ref)));
        assert(size_of(ONX_ModelComponentIterator) == 80, "ONX_ModelComponentIterator has size % instead of 80", size_of(ONX_ModelComponentIterator));
    }

    {
        instance: ONX_ModelTest;
        assert(((cast(*void)(*instance.m_test_type)) - cast(*void)(*instance)) == 0, "ONX_ModelTest.m_test_type has unexpected offset % instead of 0", ((cast(*void)(*instance.m_test_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_test_type)) == 1, "ONX_ModelTest.m_test_type has unexpected size % instead of 1", size_of(type_of(ONX_ModelTest.m_test_type)));
        assert(((cast(*void)(*instance.m_source_3dm_file_path)) - cast(*void)(*instance)) == 8, "ONX_ModelTest.m_source_3dm_file_path has unexpected offset % instead of 8", ((cast(*void)(*instance.m_source_3dm_file_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_source_3dm_file_path)) == 8, "ONX_ModelTest.m_source_3dm_file_path has unexpected size % instead of 8", size_of(type_of(ONX_ModelTest.m_source_3dm_file_path)));
        assert(((cast(*void)(*instance.m_text_log_3dm_file_path)) - cast(*void)(*instance)) == 16, "ONX_ModelTest.m_text_log_3dm_file_path has unexpected offset % instead of 16", ((cast(*void)(*instance.m_text_log_3dm_file_path)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_text_log_3dm_file_path)) == 8, "ONX_ModelTest.m_text_log_3dm_file_path has unexpected size % instead of 8", size_of(type_of(ONX_ModelTest.m_text_log_3dm_file_path)));
        assert(((cast(*void)(*instance.m_model_3dm_file_version)) - cast(*void)(*instance)) == 24, "ONX_ModelTest.m_model_3dm_file_version has unexpected offset % instead of 24", ((cast(*void)(*instance.m_model_3dm_file_version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_model_3dm_file_version)) == 12, "ONX_ModelTest.m_model_3dm_file_version has unexpected size % instead of 12", size_of(type_of(ONX_ModelTest.m_model_3dm_file_version)));
        assert(((cast(*void)(*instance.m_current_test_index)) - cast(*void)(*instance)) == 36, "ONX_ModelTest.m_current_test_index has unexpected offset % instead of 36", ((cast(*void)(*instance.m_current_test_index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_current_test_index)) == 4, "ONX_ModelTest.m_current_test_index has unexpected size % instead of 4", size_of(type_of(ONX_ModelTest.m_current_test_index)));
        assert(((cast(*void)(*instance.m_test_result)) - cast(*void)(*instance)) == 40, "ONX_ModelTest.m_test_result has unexpected offset % instead of 40", ((cast(*void)(*instance.m_test_result)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_test_result)) == 1, "ONX_ModelTest.m_test_result has unexpected size % instead of 1", size_of(type_of(ONX_ModelTest.m_test_result)));
        assert(((cast(*void)(*instance.m_test_results)) - cast(*void)(*instance)) == 41, "ONX_ModelTest.m_test_results has unexpected offset % instead of 41", ((cast(*void)(*instance.m_test_results)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_test_results)) == 7, "ONX_ModelTest.m_test_results has unexpected size % instead of 7", size_of(type_of(ONX_ModelTest.m_test_results)));
        assert(((cast(*void)(*instance.m_error_count)) - cast(*void)(*instance)) == 48, "ONX_ModelTest.m_error_count has unexpected offset % instead of 48", ((cast(*void)(*instance.m_error_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_error_count)) == 24, "ONX_ModelTest.m_error_count has unexpected size % instead of 24", size_of(type_of(ONX_ModelTest.m_error_count)));
        assert(((cast(*void)(*instance.m_error_counts)) - cast(*void)(*instance)) == 72, "ONX_ModelTest.m_error_counts has unexpected offset % instead of 72", ((cast(*void)(*instance.m_error_counts)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_error_counts)) == 168, "ONX_ModelTest.m_error_counts has unexpected size % instead of 168", size_of(type_of(ONX_ModelTest.m_error_counts)));
        assert(((cast(*void)(*instance.m_model)) - cast(*void)(*instance)) == 240, "ONX_ModelTest.m_model has unexpected offset % instead of 240", ((cast(*void)(*instance.m_model)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_model)) == 48, "ONX_ModelTest.m_model has unexpected size % instead of 48", size_of(type_of(ONX_ModelTest.m_model)));
        assert(((cast(*void)(*instance.m_model_hash)) - cast(*void)(*instance)) == 288, "ONX_ModelTest.m_model_hash has unexpected offset % instead of 288", ((cast(*void)(*instance.m_model_hash)) - cast(*void)(*instance)));
        assert(size_of(type_of(ONX_ModelTest.m_model_hash)) == 60, "ONX_ModelTest.m_model_hash has unexpected size % instead of 60", size_of(type_of(ONX_ModelTest.m_model_hash)));
        assert(size_of(ONX_ModelTest) == 352, "ONX_ModelTest has size % instead of 352", size_of(ONX_ModelTest));
    }
}

